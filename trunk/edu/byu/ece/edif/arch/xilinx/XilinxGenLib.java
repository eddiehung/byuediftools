/*
 * TODO: Insert class description here.
 * 
 * Copyright (c) 2008 Brigham Young University
 * 
 * This file is part of the BYU EDIF Tools.
 * 
 * BYU EDIF Tools is free software: you may redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 2 of the License, or (at your option) any
 * later version.
 * 
 * BYU EDIF Tools is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * A copy of the GNU General Public License is included with the BYU EDIF Tools.
 * It can be found at /edu/byu/edif/doc/gpl2.txt. You may also get a copy of the
 * license at <http://www.gnu.org/licenses/>.
 * 
 */
package edu.byu.ece.edif.arch.xilinx;

import edu.byu.ece.edif.core.EdifCell;
import edu.byu.ece.edif.core.EdifEnvironment;
import edu.byu.ece.edif.core.EdifLibrary;
import edu.byu.ece.edif.core.EdifNameConflictException;
import edu.byu.ece.edif.core.EdifPort;
import edu.byu.ece.edif.core.EdifRuntimeException;
import edu.byu.ece.edif.core.InvalidEdifNameException;
import edu.byu.ece.edif.core.NamedObject;

/**
 * This class is auto-generated - do not modify 
 */
public class XilinxGenLib {

    public static EdifLibrary library;

    private static EdifCell _AND2;

    private static EdifCell _AND2B1;

    private static EdifCell _AND2B2;

    private static EdifCell _AND3;

    private static EdifCell _AND3B1;

    private static EdifCell _AND3B2;

    private static EdifCell _AND3B3;

    private static EdifCell _AND4;

    private static EdifCell _AND4B1;

    private static EdifCell _AND4B2;

    private static EdifCell _AND4B3;

    private static EdifCell _AND4B4;

    private static EdifCell _AND5;

    private static EdifCell _AND5B1;

    private static EdifCell _AND5B2;

    private static EdifCell _AND5B3;

    private static EdifCell _AND5B4;

    private static EdifCell _AND5B5;

    private static EdifCell _AND6;

    private static EdifCell _AND7;

    private static EdifCell _AND8;

    private static EdifCell _BSCAN_FPGACORE;

    private static EdifCell _BSCAN_SPARTAN2;

    private static EdifCell _BSCAN_SPARTAN3;

    private static EdifCell _BSCAN_VIRTEX;

    private static EdifCell _BSCAN_VIRTEX2;

    private static EdifCell _BSCAN_VIRTEX4;

    private static EdifCell _BSCAN_VIRTEX5;

    private static EdifCell _BUF;

    private static EdifCell _BUFCF;

    private static EdifCell _BUFE;

    private static EdifCell _BUFFOE;

    private static EdifCell _BUFG;

    private static EdifCell _BUFGCE;

    private static EdifCell _BUFGCE_1;

    private static EdifCell _BUFGCTRL;

    private static EdifCell _BUFGDLL;

    private static EdifCell _BUFGMUX;

    private static EdifCell _BUFGMUX_1;

    private static EdifCell _BUFGMUX_CTRL;

    private static EdifCell _BUFGMUX_VIRTEX4;

    private static EdifCell _BUFGP;

    private static EdifCell _BUFGSR;

    private static EdifCell _BUFGTS;

    private static EdifCell _BUFIO;

    private static EdifCell _BUFR;

    private static EdifCell _BUFT;

    private static EdifCell _CAPTURE_FPGACORE;

    private static EdifCell _CAPTURE_SPARTAN2;

    private static EdifCell _CAPTURE_SPARTAN3;

    private static EdifCell _CAPTURE_VIRTEX;

    private static EdifCell _CAPTURE_VIRTEX2;

    private static EdifCell _CAPTURE_VIRTEX4;

    private static EdifCell _CAPTURE_VIRTEX5;

    private static EdifCell _CARRY4;

    private static EdifCell _CFGLUT5;

    private static EdifCell _CLK_DIV10;

    private static EdifCell _CLK_DIV10R;

    private static EdifCell _CLK_DIV10RSD;

    private static EdifCell _CLK_DIV10SD;

    private static EdifCell _CLK_DIV12;

    private static EdifCell _CLK_DIV12R;

    private static EdifCell _CLK_DIV12RSD;

    private static EdifCell _CLK_DIV12SD;

    private static EdifCell _CLK_DIV14;

    private static EdifCell _CLK_DIV14R;

    private static EdifCell _CLK_DIV14RSD;

    private static EdifCell _CLK_DIV14SD;

    private static EdifCell _CLK_DIV16;

    private static EdifCell _CLK_DIV16R;

    private static EdifCell _CLK_DIV16RSD;

    private static EdifCell _CLK_DIV16SD;

    private static EdifCell _CLK_DIV2;

    private static EdifCell _CLK_DIV2R;

    private static EdifCell _CLK_DIV2RSD;

    private static EdifCell _CLK_DIV2SD;

    private static EdifCell _CLK_DIV4;

    private static EdifCell _CLK_DIV4R;

    private static EdifCell _CLK_DIV4RSD;

    private static EdifCell _CLK_DIV4SD;

    private static EdifCell _CLK_DIV6;

    private static EdifCell _CLK_DIV6R;

    private static EdifCell _CLK_DIV6RSD;

    private static EdifCell _CLK_DIV6SD;

    private static EdifCell _CLK_DIV8;

    private static EdifCell _CLK_DIV8R;

    private static EdifCell _CLK_DIV8RSD;

    private static EdifCell _CLK_DIV8SD;

    private static EdifCell _CLKDLL;

    private static EdifCell _CLKDLLE;

    private static EdifCell _CLKDLLHF;

    private static EdifCell _CONFIG;

    private static EdifCell _CRC32;

    private static EdifCell _CRC64;

    private static EdifCell _DCC_FPGACORE;

    private static EdifCell _DCIRESET;

    private static EdifCell _DCM;

    private static EdifCell _DCM_ADV;

    private static EdifCell _DCM_BASE;

    private static EdifCell _DCM_PS;

    private static EdifCell _DCM_SP;

    private static EdifCell _DSP48;

    private static EdifCell _DSP48E;

    private static EdifCell _EMAC;

    private static EdifCell _FD;

    private static EdifCell _FD_1;

    private static EdifCell _FDC;

    private static EdifCell _FDC_1;

    private static EdifCell _FDCE;

    private static EdifCell _FDCE_1;

    private static EdifCell _FDCP;

    private static EdifCell _FDCP_1;

    private static EdifCell _FDCPE;

    private static EdifCell _FDCPE_1;

    private static EdifCell _FDCPX1;

    private static EdifCell _FDD;

    private static EdifCell _FDDC;

    private static EdifCell _FDDCE;

    private static EdifCell _FDDCP;

    private static EdifCell _FDDCPE;

    private static EdifCell _FDDP;

    private static EdifCell _FDDPE;

    private static EdifCell _FDDRCPE;

    private static EdifCell _FDDRRSE;

    private static EdifCell _FDE;

    private static EdifCell _FDE_1;

    private static EdifCell _FDP;

    private static EdifCell _FDP_1;

    private static EdifCell _FDPE;

    private static EdifCell _FDPE_1;

    private static EdifCell _FDR;

    private static EdifCell _FDR_1;

    private static EdifCell _FDRE;

    private static EdifCell _FDRE_1;

    private static EdifCell _FDRS;

    private static EdifCell _FDRS_1;

    private static EdifCell _FDRSE;

    private static EdifCell _FDRSE_1;

    private static EdifCell _FDS;

    private static EdifCell _FDS_1;

    private static EdifCell _FDSE;

    private static EdifCell _FDSE_1;

    private static EdifCell _FIFO16;

    private static EdifCell _FIFO18;

    private static EdifCell _FIFO18_36;

    private static EdifCell _FIFO36;

    private static EdifCell _FIFO36_72;

    private static EdifCell _FIFO36_72_EXP;

    private static EdifCell _FIFO36_EXP;

    private static EdifCell _FMAP;

    private static EdifCell _FRAME_ECC_VIRTEX4;

    private static EdifCell _FRAME_ECC_VIRTEX5;

    private static EdifCell _FTC;

    private static EdifCell _FTCP;

    private static EdifCell _FTP;

    private static EdifCell _GND;

    private static EdifCell _GT;

    private static EdifCell _GT10;

    private static EdifCell _GT10_10GE_4;

    private static EdifCell _GT10_10GE_8;

    private static EdifCell _GT10_10GFC_4;

    private static EdifCell _GT10_10GFC_8;

    private static EdifCell _GT10_AURORA_1;

    private static EdifCell _GT10_AURORA_2;

    private static EdifCell _GT10_AURORA_4;

    private static EdifCell _GT10_AURORAX_4;

    private static EdifCell _GT10_AURORAX_8;

    private static EdifCell _GT10_CUSTOM;

    private static EdifCell _GT10_INFINIBAND_1;

    private static EdifCell _GT10_INFINIBAND_2;

    private static EdifCell _GT10_INFINIBAND_4;

    private static EdifCell _GT10_OC192_4;

    private static EdifCell _GT10_OC192_8;

    private static EdifCell _GT10_OC48_1;

    private static EdifCell _GT10_OC48_2;

    private static EdifCell _GT10_OC48_4;

    private static EdifCell _GT10_PCI_EXPRESS_1;

    private static EdifCell _GT10_PCI_EXPRESS_2;

    private static EdifCell _GT10_PCI_EXPRESS_4;

    private static EdifCell _GT10_XAUI_1;

    private static EdifCell _GT10_XAUI_2;

    private static EdifCell _GT10_XAUI_4;

    private static EdifCell _GT11;

    private static EdifCell _GT11_CUSTOM;

    private static EdifCell _GT11_DUAL;

    private static EdifCell _GT11CLK;

    private static EdifCell _GT11CLK_MGT;

    private static EdifCell _GT_AURORA_1;

    private static EdifCell _GT_AURORA_2;

    private static EdifCell _GT_AURORA_4;

    private static EdifCell _GT_CUSTOM;

    private static EdifCell _GT_ETHERNET_1;

    private static EdifCell _GT_ETHERNET_2;

    private static EdifCell _GT_ETHERNET_4;

    private static EdifCell _GT_FIBRE_CHAN_1;

    private static EdifCell _GT_FIBRE_CHAN_2;

    private static EdifCell _GT_FIBRE_CHAN_4;

    private static EdifCell _GT_INFINIBAND_1;

    private static EdifCell _GT_INFINIBAND_2;

    private static EdifCell _GT_INFINIBAND_4;

    private static EdifCell _GT_XAUI_1;

    private static EdifCell _GT_XAUI_2;

    private static EdifCell _GT_XAUI_4;

    private static EdifCell _IBUF;

    private static EdifCell _IBUF_AGP;

    private static EdifCell _IBUF_CTT;

    private static EdifCell _IBUF_GTL;

    private static EdifCell _IBUF_GTL_DCI;

    private static EdifCell _IBUF_GTLP;

    private static EdifCell _IBUF_GTLP_DCI;

    private static EdifCell _IBUF_HSTL_I;

    private static EdifCell _IBUF_HSTL_I_18;

    private static EdifCell _IBUF_HSTL_I_DCI;

    private static EdifCell _IBUF_HSTL_I_DCI_18;

    private static EdifCell _IBUF_HSTL_II;

    private static EdifCell _IBUF_HSTL_II_18;

    private static EdifCell _IBUF_HSTL_II_DCI;

    private static EdifCell _IBUF_HSTL_II_DCI_18;

    private static EdifCell _IBUF_HSTL_III;

    private static EdifCell _IBUF_HSTL_III_18;

    private static EdifCell _IBUF_HSTL_III_DCI;

    private static EdifCell _IBUF_HSTL_III_DCI_18;

    private static EdifCell _IBUF_HSTL_IV;

    private static EdifCell _IBUF_HSTL_IV_18;

    private static EdifCell _IBUF_HSTL_IV_DCI;

    private static EdifCell _IBUF_HSTL_IV_DCI_18;

    private static EdifCell _IBUF_LVCMOS12;

    private static EdifCell _IBUF_LVCMOS15;

    private static EdifCell _IBUF_LVCMOS18;

    private static EdifCell _IBUF_LVCMOS2;

    private static EdifCell _IBUF_LVCMOS25;

    private static EdifCell _IBUF_LVCMOS33;

    private static EdifCell _IBUF_LVDCI_15;

    private static EdifCell _IBUF_LVDCI_18;

    private static EdifCell _IBUF_LVDCI_25;

    private static EdifCell _IBUF_LVDCI_33;

    private static EdifCell _IBUF_LVDCI_DV2_15;

    private static EdifCell _IBUF_LVDCI_DV2_18;

    private static EdifCell _IBUF_LVDCI_DV2_25;

    private static EdifCell _IBUF_LVDCI_DV2_33;

    private static EdifCell _IBUF_LVDS;

    private static EdifCell _IBUF_LVPECL;

    private static EdifCell _IBUF_LVTTL;

    private static EdifCell _IBUF_PCI33_3;

    private static EdifCell _IBUF_PCI33_5;

    private static EdifCell _IBUF_PCI66_3;

    private static EdifCell _IBUF_PCIX;

    private static EdifCell _IBUF_PCIX66_3;

    private static EdifCell _IBUF_SSTL18_I;

    private static EdifCell _IBUF_SSTL18_I_DCI;

    private static EdifCell _IBUF_SSTL18_II;

    private static EdifCell _IBUF_SSTL18_II_DCI;

    private static EdifCell _IBUF_SSTL2_I;

    private static EdifCell _IBUF_SSTL2_I_DCI;

    private static EdifCell _IBUF_SSTL2_II;

    private static EdifCell _IBUF_SSTL2_II_DCI;

    private static EdifCell _IBUF_SSTL3_I;

    private static EdifCell _IBUF_SSTL3_I_DCI;

    private static EdifCell _IBUF_SSTL3_II;

    private static EdifCell _IBUF_SSTL3_II_DCI;

    private static EdifCell _IBUFDS;

    private static EdifCell _IBUFDS_BLVDS_25;

    private static EdifCell _IBUFDS_DIFF_OUT;

    private static EdifCell _IBUFDS_LDT_25;

    private static EdifCell _IBUFDS_LVDS_25;

    private static EdifCell _IBUFDS_LVDS_25_DCI;

    private static EdifCell _IBUFDS_LVDS_33;

    private static EdifCell _IBUFDS_LVDS_33_DCI;

    private static EdifCell _IBUFDS_LVDSEXT_25;

    private static EdifCell _IBUFDS_LVDSEXT_25_DCI;

    private static EdifCell _IBUFDS_LVDSEXT_33;

    private static EdifCell _IBUFDS_LVDSEXT_33_DCI;

    private static EdifCell _IBUFDS_LVPECL_25;

    private static EdifCell _IBUFDS_LVPECL_33;

    private static EdifCell _IBUFDS_ULVDS_25;

    private static EdifCell _IBUFG;

    private static EdifCell _IBUFG_AGP;

    private static EdifCell _IBUFG_CTT;

    private static EdifCell _IBUFG_GTL;

    private static EdifCell _IBUFG_GTL_DCI;

    private static EdifCell _IBUFG_GTLP;

    private static EdifCell _IBUFG_GTLP_DCI;

    private static EdifCell _IBUFG_HSTL_I;

    private static EdifCell _IBUFG_HSTL_I_18;

    private static EdifCell _IBUFG_HSTL_I_DCI;

    private static EdifCell _IBUFG_HSTL_I_DCI_18;

    private static EdifCell _IBUFG_HSTL_II;

    private static EdifCell _IBUFG_HSTL_II_18;

    private static EdifCell _IBUFG_HSTL_II_DCI;

    private static EdifCell _IBUFG_HSTL_II_DCI_18;

    private static EdifCell _IBUFG_HSTL_III;

    private static EdifCell _IBUFG_HSTL_III_18;

    private static EdifCell _IBUFG_HSTL_III_DCI;

    private static EdifCell _IBUFG_HSTL_III_DCI_18;

    private static EdifCell _IBUFG_HSTL_IV;

    private static EdifCell _IBUFG_HSTL_IV_18;

    private static EdifCell _IBUFG_HSTL_IV_DCI;

    private static EdifCell _IBUFG_HSTL_IV_DCI_18;

    private static EdifCell _IBUFG_LVCMOS12;

    private static EdifCell _IBUFG_LVCMOS15;

    private static EdifCell _IBUFG_LVCMOS18;

    private static EdifCell _IBUFG_LVCMOS2;

    private static EdifCell _IBUFG_LVCMOS25;

    private static EdifCell _IBUFG_LVCMOS33;

    private static EdifCell _IBUFG_LVDCI_15;

    private static EdifCell _IBUFG_LVDCI_18;

    private static EdifCell _IBUFG_LVDCI_25;

    private static EdifCell _IBUFG_LVDCI_33;

    private static EdifCell _IBUFG_LVDCI_DV2_15;

    private static EdifCell _IBUFG_LVDCI_DV2_18;

    private static EdifCell _IBUFG_LVDCI_DV2_25;

    private static EdifCell _IBUFG_LVDCI_DV2_33;

    private static EdifCell _IBUFG_LVDS;

    private static EdifCell _IBUFG_LVPECL;

    private static EdifCell _IBUFG_LVTTL;

    private static EdifCell _IBUFG_PCI33_3;

    private static EdifCell _IBUFG_PCI33_5;

    private static EdifCell _IBUFG_PCI66_3;

    private static EdifCell _IBUFG_PCIX;

    private static EdifCell _IBUFG_PCIX66_3;

    private static EdifCell _IBUFG_SSTL18_I;

    private static EdifCell _IBUFG_SSTL18_I_DCI;

    private static EdifCell _IBUFG_SSTL18_II;

    private static EdifCell _IBUFG_SSTL18_II_DCI;

    private static EdifCell _IBUFG_SSTL2_I;

    private static EdifCell _IBUFG_SSTL2_I_DCI;

    private static EdifCell _IBUFG_SSTL2_II;

    private static EdifCell _IBUFG_SSTL2_II_DCI;

    private static EdifCell _IBUFG_SSTL3_I;

    private static EdifCell _IBUFG_SSTL3_I_DCI;

    private static EdifCell _IBUFG_SSTL3_II;

    private static EdifCell _IBUFG_SSTL3_II_DCI;

    private static EdifCell _IBUFGDS;

    private static EdifCell _IBUFGDS_BLVDS_25;

    private static EdifCell _IBUFGDS_DIFF_OUT;

    private static EdifCell _IBUFGDS_LDT_25;

    private static EdifCell _IBUFGDS_LVDS_25;

    private static EdifCell _IBUFGDS_LVDS_25_DCI;

    private static EdifCell _IBUFGDS_LVDS_33;

    private static EdifCell _IBUFGDS_LVDS_33_DCI;

    private static EdifCell _IBUFGDS_LVDSEXT_25;

    private static EdifCell _IBUFGDS_LVDSEXT_25_DCI;

    private static EdifCell _IBUFGDS_LVDSEXT_33;

    private static EdifCell _IBUFGDS_LVDSEXT_33_DCI;

    private static EdifCell _IBUFGDS_LVPECL_25;

    private static EdifCell _IBUFGDS_LVPECL_33;

    private static EdifCell _IBUFGDS_ULVDS_25;

    private static EdifCell _ICAP_VIRTEX2;

    private static EdifCell _ICAP_VIRTEX4;

    private static EdifCell _ICAP_VIRTEX5;

    private static EdifCell _IDDR;

    private static EdifCell _IDDR2;

    private static EdifCell _IDELAY;

    private static EdifCell _IDELAYCTRL;

    private static EdifCell _IFDDRCPE;

    private static EdifCell _IFDDRRSE;

    private static EdifCell _ILD;

    private static EdifCell _INV;

    private static EdifCell _IOBUF;

    private static EdifCell _IOBUF_AGP;

    private static EdifCell _IOBUF_CTT;

    private static EdifCell _IOBUF_F_12;

    private static EdifCell _IOBUF_F_16;

    private static EdifCell _IOBUF_F_2;

    private static EdifCell _IOBUF_F_24;

    private static EdifCell _IOBUF_F_4;

    private static EdifCell _IOBUF_F_6;

    private static EdifCell _IOBUF_F_8;

    private static EdifCell _IOBUF_GTL;

    private static EdifCell _IOBUF_GTL_DCI;

    private static EdifCell _IOBUF_GTLP;

    private static EdifCell _IOBUF_GTLP_DCI;

    private static EdifCell _IOBUF_HSTL_I;

    private static EdifCell _IOBUF_HSTL_I_18;

    private static EdifCell _IOBUF_HSTL_II;

    private static EdifCell _IOBUF_HSTL_II_18;

    private static EdifCell _IOBUF_HSTL_II_DCI;

    private static EdifCell _IOBUF_HSTL_II_DCI_18;

    private static EdifCell _IOBUF_HSTL_III;

    private static EdifCell _IOBUF_HSTL_III_18;

    private static EdifCell _IOBUF_HSTL_IV;

    private static EdifCell _IOBUF_HSTL_IV_18;

    private static EdifCell _IOBUF_HSTL_IV_DCI;

    private static EdifCell _IOBUF_HSTL_IV_DCI_18;

    private static EdifCell _IOBUF_LVCMOS12;

    private static EdifCell _IOBUF_LVCMOS12_F_2;

    private static EdifCell _IOBUF_LVCMOS12_F_4;

    private static EdifCell _IOBUF_LVCMOS12_F_6;

    private static EdifCell _IOBUF_LVCMOS12_F_8;

    private static EdifCell _IOBUF_LVCMOS12_S_2;

    private static EdifCell _IOBUF_LVCMOS12_S_4;

    private static EdifCell _IOBUF_LVCMOS12_S_6;

    private static EdifCell _IOBUF_LVCMOS12_S_8;

    private static EdifCell _IOBUF_LVCMOS15;

    private static EdifCell _IOBUF_LVCMOS15_F_12;

    private static EdifCell _IOBUF_LVCMOS15_F_16;

    private static EdifCell _IOBUF_LVCMOS15_F_2;

    private static EdifCell _IOBUF_LVCMOS15_F_4;

    private static EdifCell _IOBUF_LVCMOS15_F_6;

    private static EdifCell _IOBUF_LVCMOS15_F_8;

    private static EdifCell _IOBUF_LVCMOS15_S_12;

    private static EdifCell _IOBUF_LVCMOS15_S_16;

    private static EdifCell _IOBUF_LVCMOS15_S_2;

    private static EdifCell _IOBUF_LVCMOS15_S_4;

    private static EdifCell _IOBUF_LVCMOS15_S_6;

    private static EdifCell _IOBUF_LVCMOS15_S_8;

    private static EdifCell _IOBUF_LVCMOS18;

    private static EdifCell _IOBUF_LVCMOS18_F_12;

    private static EdifCell _IOBUF_LVCMOS18_F_16;

    private static EdifCell _IOBUF_LVCMOS18_F_2;

    private static EdifCell _IOBUF_LVCMOS18_F_4;

    private static EdifCell _IOBUF_LVCMOS18_F_6;

    private static EdifCell _IOBUF_LVCMOS18_F_8;

    private static EdifCell _IOBUF_LVCMOS18_S_12;

    private static EdifCell _IOBUF_LVCMOS18_S_16;

    private static EdifCell _IOBUF_LVCMOS18_S_2;

    private static EdifCell _IOBUF_LVCMOS18_S_4;

    private static EdifCell _IOBUF_LVCMOS18_S_6;

    private static EdifCell _IOBUF_LVCMOS18_S_8;

    private static EdifCell _IOBUF_LVCMOS2;

    private static EdifCell _IOBUF_LVCMOS25;

    private static EdifCell _IOBUF_LVCMOS25_F_12;

    private static EdifCell _IOBUF_LVCMOS25_F_16;

    private static EdifCell _IOBUF_LVCMOS25_F_2;

    private static EdifCell _IOBUF_LVCMOS25_F_24;

    private static EdifCell _IOBUF_LVCMOS25_F_4;

    private static EdifCell _IOBUF_LVCMOS25_F_6;

    private static EdifCell _IOBUF_LVCMOS25_F_8;

    private static EdifCell _IOBUF_LVCMOS25_S_12;

    private static EdifCell _IOBUF_LVCMOS25_S_16;

    private static EdifCell _IOBUF_LVCMOS25_S_2;

    private static EdifCell _IOBUF_LVCMOS25_S_24;

    private static EdifCell _IOBUF_LVCMOS25_S_4;

    private static EdifCell _IOBUF_LVCMOS25_S_6;

    private static EdifCell _IOBUF_LVCMOS25_S_8;

    private static EdifCell _IOBUF_LVCMOS33;

    private static EdifCell _IOBUF_LVCMOS33_F_12;

    private static EdifCell _IOBUF_LVCMOS33_F_16;

    private static EdifCell _IOBUF_LVCMOS33_F_2;

    private static EdifCell _IOBUF_LVCMOS33_F_24;

    private static EdifCell _IOBUF_LVCMOS33_F_4;

    private static EdifCell _IOBUF_LVCMOS33_F_6;

    private static EdifCell _IOBUF_LVCMOS33_F_8;

    private static EdifCell _IOBUF_LVCMOS33_S_12;

    private static EdifCell _IOBUF_LVCMOS33_S_16;

    private static EdifCell _IOBUF_LVCMOS33_S_2;

    private static EdifCell _IOBUF_LVCMOS33_S_24;

    private static EdifCell _IOBUF_LVCMOS33_S_4;

    private static EdifCell _IOBUF_LVCMOS33_S_6;

    private static EdifCell _IOBUF_LVCMOS33_S_8;

    private static EdifCell _IOBUF_LVDCI_15;

    private static EdifCell _IOBUF_LVDCI_18;

    private static EdifCell _IOBUF_LVDCI_25;

    private static EdifCell _IOBUF_LVDCI_33;

    private static EdifCell _IOBUF_LVDCI_DV2_15;

    private static EdifCell _IOBUF_LVDCI_DV2_18;

    private static EdifCell _IOBUF_LVDCI_DV2_25;

    private static EdifCell _IOBUF_LVDCI_DV2_33;

    private static EdifCell _IOBUF_LVDS;

    private static EdifCell _IOBUF_LVPECL;

    private static EdifCell _IOBUF_LVTTL;

    private static EdifCell _IOBUF_LVTTL_F_12;

    private static EdifCell _IOBUF_LVTTL_F_16;

    private static EdifCell _IOBUF_LVTTL_F_2;

    private static EdifCell _IOBUF_LVTTL_F_24;

    private static EdifCell _IOBUF_LVTTL_F_4;

    private static EdifCell _IOBUF_LVTTL_F_6;

    private static EdifCell _IOBUF_LVTTL_F_8;

    private static EdifCell _IOBUF_LVTTL_S_12;

    private static EdifCell _IOBUF_LVTTL_S_16;

    private static EdifCell _IOBUF_LVTTL_S_2;

    private static EdifCell _IOBUF_LVTTL_S_24;

    private static EdifCell _IOBUF_LVTTL_S_4;

    private static EdifCell _IOBUF_LVTTL_S_6;

    private static EdifCell _IOBUF_LVTTL_S_8;

    private static EdifCell _IOBUF_PCI33_3;

    private static EdifCell _IOBUF_PCI33_5;

    private static EdifCell _IOBUF_PCI66_3;

    private static EdifCell _IOBUF_PCIX;

    private static EdifCell _IOBUF_PCIX66_3;

    private static EdifCell _IOBUF_S_12;

    private static EdifCell _IOBUF_S_16;

    private static EdifCell _IOBUF_S_2;

    private static EdifCell _IOBUF_S_24;

    private static EdifCell _IOBUF_S_4;

    private static EdifCell _IOBUF_S_6;

    private static EdifCell _IOBUF_S_8;

    private static EdifCell _IOBUF_SSTL18_I;

    private static EdifCell _IOBUF_SSTL18_II;

    private static EdifCell _IOBUF_SSTL18_II_DCI;

    private static EdifCell _IOBUF_SSTL2_I;

    private static EdifCell _IOBUF_SSTL2_II;

    private static EdifCell _IOBUF_SSTL2_II_DCI;

    private static EdifCell _IOBUF_SSTL3_I;

    private static EdifCell _IOBUF_SSTL3_II;

    private static EdifCell _IOBUF_SSTL3_II_DCI;

    private static EdifCell _IOBUFDS;

    private static EdifCell _IOBUFDS_BLVDS_25;

    private static EdifCell _IOBUFE;

    private static EdifCell _IOBUFE_F;

    private static EdifCell _IOBUFE_S;

    private static EdifCell _IODELAY;

    private static EdifCell _ISERDES;

    private static EdifCell _ISERDES_NODELAY;

    private static EdifCell _JTAGPPC;

    private static EdifCell _KEEP;

    private static EdifCell _KEEPER;

    private static EdifCell _KEY_CLEAR;

    private static EdifCell _LD;

    private static EdifCell _LD_1;

    private static EdifCell _LDC;

    private static EdifCell _LDC_1;

    private static EdifCell _LDCE;

    private static EdifCell _LDCE_1;

    private static EdifCell _LDCP;

    private static EdifCell _LDCP_1;

    private static EdifCell _LDCPE;

    private static EdifCell _LDCPE_1;

    private static EdifCell _LDE;

    private static EdifCell _LDE_1;

    private static EdifCell _LDG;

    private static EdifCell _LDP;

    private static EdifCell _LDP_1;

    private static EdifCell _LDPE;

    private static EdifCell _LDPE_1;

    private static EdifCell _LUT1;

    private static EdifCell _LUT1_D;

    private static EdifCell _LUT1_L;

    private static EdifCell _LUT2;

    private static EdifCell _LUT2_D;

    private static EdifCell _LUT2_L;

    private static EdifCell _LUT3;

    private static EdifCell _LUT3_D;

    private static EdifCell _LUT3_L;

    private static EdifCell _LUT4;

    private static EdifCell _LUT4_D;

    private static EdifCell _LUT4_L;

    private static EdifCell _LUT5;

    private static EdifCell _LUT5_D;

    private static EdifCell _LUT5_L;

    private static EdifCell _LUT6;

    private static EdifCell _LUT6_D;

    private static EdifCell _LUT6_L;

    private static EdifCell _MERGE;

    private static EdifCell _MIN_OFF;

    private static EdifCell _MULT18X18;

    private static EdifCell _MULT18X18S;

    private static EdifCell _MULT18X18SIO;

    private static EdifCell _MULT_AND;

    private static EdifCell _MUXCY;

    private static EdifCell _MUXCY_D;

    private static EdifCell _MUXCY_L;

    private static EdifCell _MUXF5;

    private static EdifCell _MUXF5_D;

    private static EdifCell _MUXF5_L;

    private static EdifCell _MUXF6;

    private static EdifCell _MUXF6_D;

    private static EdifCell _MUXF6_L;

    private static EdifCell _MUXF7;

    private static EdifCell _MUXF7_D;

    private static EdifCell _MUXF7_L;

    private static EdifCell _MUXF8;

    private static EdifCell _MUXF8_D;

    private static EdifCell _MUXF8_L;

    private static EdifCell _NAND2;

    private static EdifCell _NAND2B1;

    private static EdifCell _NAND2B2;

    private static EdifCell _NAND3;

    private static EdifCell _NAND3B1;

    private static EdifCell _NAND3B2;

    private static EdifCell _NAND3B3;

    private static EdifCell _NAND4;

    private static EdifCell _NAND4B1;

    private static EdifCell _NAND4B2;

    private static EdifCell _NAND4B3;

    private static EdifCell _NAND4B4;

    private static EdifCell _NAND5;

    private static EdifCell _NAND5B1;

    private static EdifCell _NAND5B2;

    private static EdifCell _NAND5B3;

    private static EdifCell _NAND5B4;

    private static EdifCell _NAND5B5;

    private static EdifCell _NOR2;

    private static EdifCell _NOR2B1;

    private static EdifCell _NOR2B2;

    private static EdifCell _NOR3;

    private static EdifCell _NOR3B1;

    private static EdifCell _NOR3B2;

    private static EdifCell _NOR3B3;

    private static EdifCell _NOR4;

    private static EdifCell _NOR4B1;

    private static EdifCell _NOR4B2;

    private static EdifCell _NOR4B3;

    private static EdifCell _NOR4B4;

    private static EdifCell _NOR5;

    private static EdifCell _NOR5B1;

    private static EdifCell _NOR5B2;

    private static EdifCell _NOR5B3;

    private static EdifCell _NOR5B4;

    private static EdifCell _NOR5B5;

    private static EdifCell _OBUF;

    private static EdifCell _OBUF_AGP;

    private static EdifCell _OBUF_CTT;

    private static EdifCell _OBUF_F_12;

    private static EdifCell _OBUF_F_16;

    private static EdifCell _OBUF_F_2;

    private static EdifCell _OBUF_F_24;

    private static EdifCell _OBUF_F_4;

    private static EdifCell _OBUF_F_6;

    private static EdifCell _OBUF_F_8;

    private static EdifCell _OBUF_GTL;

    private static EdifCell _OBUF_GTL_DCI;

    private static EdifCell _OBUF_GTLP;

    private static EdifCell _OBUF_GTLP_DCI;

    private static EdifCell _OBUF_HSTL_I;

    private static EdifCell _OBUF_HSTL_I_18;

    private static EdifCell _OBUF_HSTL_I_DCI;

    private static EdifCell _OBUF_HSTL_I_DCI_18;

    private static EdifCell _OBUF_HSTL_II;

    private static EdifCell _OBUF_HSTL_II_18;

    private static EdifCell _OBUF_HSTL_II_DCI;

    private static EdifCell _OBUF_HSTL_II_DCI_18;

    private static EdifCell _OBUF_HSTL_III;

    private static EdifCell _OBUF_HSTL_III_18;

    private static EdifCell _OBUF_HSTL_III_DCI;

    private static EdifCell _OBUF_HSTL_III_DCI_18;

    private static EdifCell _OBUF_HSTL_IV;

    private static EdifCell _OBUF_HSTL_IV_18;

    private static EdifCell _OBUF_HSTL_IV_DCI;

    private static EdifCell _OBUF_HSTL_IV_DCI_18;

    private static EdifCell _OBUF_LVCMOS12;

    private static EdifCell _OBUF_LVCMOS12_F_2;

    private static EdifCell _OBUF_LVCMOS12_F_4;

    private static EdifCell _OBUF_LVCMOS12_F_6;

    private static EdifCell _OBUF_LVCMOS12_F_8;

    private static EdifCell _OBUF_LVCMOS12_S_2;

    private static EdifCell _OBUF_LVCMOS12_S_4;

    private static EdifCell _OBUF_LVCMOS12_S_6;

    private static EdifCell _OBUF_LVCMOS12_S_8;

    private static EdifCell _OBUF_LVCMOS15;

    private static EdifCell _OBUF_LVCMOS15_F_12;

    private static EdifCell _OBUF_LVCMOS15_F_16;

    private static EdifCell _OBUF_LVCMOS15_F_2;

    private static EdifCell _OBUF_LVCMOS15_F_4;

    private static EdifCell _OBUF_LVCMOS15_F_6;

    private static EdifCell _OBUF_LVCMOS15_F_8;

    private static EdifCell _OBUF_LVCMOS15_S_12;

    private static EdifCell _OBUF_LVCMOS15_S_16;

    private static EdifCell _OBUF_LVCMOS15_S_2;

    private static EdifCell _OBUF_LVCMOS15_S_4;

    private static EdifCell _OBUF_LVCMOS15_S_6;

    private static EdifCell _OBUF_LVCMOS15_S_8;

    private static EdifCell _OBUF_LVCMOS18;

    private static EdifCell _OBUF_LVCMOS18_F_12;

    private static EdifCell _OBUF_LVCMOS18_F_16;

    private static EdifCell _OBUF_LVCMOS18_F_2;

    private static EdifCell _OBUF_LVCMOS18_F_4;

    private static EdifCell _OBUF_LVCMOS18_F_6;

    private static EdifCell _OBUF_LVCMOS18_F_8;

    private static EdifCell _OBUF_LVCMOS18_S_12;

    private static EdifCell _OBUF_LVCMOS18_S_16;

    private static EdifCell _OBUF_LVCMOS18_S_2;

    private static EdifCell _OBUF_LVCMOS18_S_4;

    private static EdifCell _OBUF_LVCMOS18_S_6;

    private static EdifCell _OBUF_LVCMOS18_S_8;

    private static EdifCell _OBUF_LVCMOS2;

    private static EdifCell _OBUF_LVCMOS25;

    private static EdifCell _OBUF_LVCMOS25_F_12;

    private static EdifCell _OBUF_LVCMOS25_F_16;

    private static EdifCell _OBUF_LVCMOS25_F_2;

    private static EdifCell _OBUF_LVCMOS25_F_24;

    private static EdifCell _OBUF_LVCMOS25_F_4;

    private static EdifCell _OBUF_LVCMOS25_F_6;

    private static EdifCell _OBUF_LVCMOS25_F_8;

    private static EdifCell _OBUF_LVCMOS25_S_12;

    private static EdifCell _OBUF_LVCMOS25_S_16;

    private static EdifCell _OBUF_LVCMOS25_S_2;

    private static EdifCell _OBUF_LVCMOS25_S_24;

    private static EdifCell _OBUF_LVCMOS25_S_4;

    private static EdifCell _OBUF_LVCMOS25_S_6;

    private static EdifCell _OBUF_LVCMOS25_S_8;

    private static EdifCell _OBUF_LVCMOS33;

    private static EdifCell _OBUF_LVCMOS33_F_12;

    private static EdifCell _OBUF_LVCMOS33_F_16;

    private static EdifCell _OBUF_LVCMOS33_F_2;

    private static EdifCell _OBUF_LVCMOS33_F_24;

    private static EdifCell _OBUF_LVCMOS33_F_4;

    private static EdifCell _OBUF_LVCMOS33_F_6;

    private static EdifCell _OBUF_LVCMOS33_F_8;

    private static EdifCell _OBUF_LVCMOS33_S_12;

    private static EdifCell _OBUF_LVCMOS33_S_16;

    private static EdifCell _OBUF_LVCMOS33_S_2;

    private static EdifCell _OBUF_LVCMOS33_S_24;

    private static EdifCell _OBUF_LVCMOS33_S_4;

    private static EdifCell _OBUF_LVCMOS33_S_6;

    private static EdifCell _OBUF_LVCMOS33_S_8;

    private static EdifCell _OBUF_LVDCI_15;

    private static EdifCell _OBUF_LVDCI_18;

    private static EdifCell _OBUF_LVDCI_25;

    private static EdifCell _OBUF_LVDCI_33;

    private static EdifCell _OBUF_LVDCI_DV2_15;

    private static EdifCell _OBUF_LVDCI_DV2_18;

    private static EdifCell _OBUF_LVDCI_DV2_25;

    private static EdifCell _OBUF_LVDCI_DV2_33;

    private static EdifCell _OBUF_LVDS;

    private static EdifCell _OBUF_LVPECL;

    private static EdifCell _OBUF_LVTTL;

    private static EdifCell _OBUF_LVTTL_F_12;

    private static EdifCell _OBUF_LVTTL_F_16;

    private static EdifCell _OBUF_LVTTL_F_2;

    private static EdifCell _OBUF_LVTTL_F_24;

    private static EdifCell _OBUF_LVTTL_F_4;

    private static EdifCell _OBUF_LVTTL_F_6;

    private static EdifCell _OBUF_LVTTL_F_8;

    private static EdifCell _OBUF_LVTTL_S_12;

    private static EdifCell _OBUF_LVTTL_S_16;

    private static EdifCell _OBUF_LVTTL_S_2;

    private static EdifCell _OBUF_LVTTL_S_24;

    private static EdifCell _OBUF_LVTTL_S_4;

    private static EdifCell _OBUF_LVTTL_S_6;

    private static EdifCell _OBUF_LVTTL_S_8;

    private static EdifCell _OBUF_PCI33_3;

    private static EdifCell _OBUF_PCI33_5;

    private static EdifCell _OBUF_PCI66_3;

    private static EdifCell _OBUF_PCIX;

    private static EdifCell _OBUF_PCIX66_3;

    private static EdifCell _OBUF_S_12;

    private static EdifCell _OBUF_S_16;

    private static EdifCell _OBUF_S_2;

    private static EdifCell _OBUF_S_24;

    private static EdifCell _OBUF_S_4;

    private static EdifCell _OBUF_S_6;

    private static EdifCell _OBUF_S_8;

    private static EdifCell _OBUF_SSTL18_I;

    private static EdifCell _OBUF_SSTL18_I_DCI;

    private static EdifCell _OBUF_SSTL18_II;

    private static EdifCell _OBUF_SSTL18_II_DCI;

    private static EdifCell _OBUF_SSTL2_I;

    private static EdifCell _OBUF_SSTL2_I_DCI;

    private static EdifCell _OBUF_SSTL2_II;

    private static EdifCell _OBUF_SSTL2_II_DCI;

    private static EdifCell _OBUF_SSTL3_I;

    private static EdifCell _OBUF_SSTL3_I_DCI;

    private static EdifCell _OBUF_SSTL3_II;

    private static EdifCell _OBUF_SSTL3_II_DCI;

    private static EdifCell _OBUFDS;

    private static EdifCell _OBUFDS_BLVDS_25;

    private static EdifCell _OBUFDS_LDT_25;

    private static EdifCell _OBUFDS_LVDS_25;

    private static EdifCell _OBUFDS_LVDS_33;

    private static EdifCell _OBUFDS_LVDSEXT_25;

    private static EdifCell _OBUFDS_LVDSEXT_33;

    private static EdifCell _OBUFDS_LVPECL_25;

    private static EdifCell _OBUFDS_LVPECL_33;

    private static EdifCell _OBUFDS_ULVDS_25;

    private static EdifCell _OBUFE;

    private static EdifCell _OBUFT;

    private static EdifCell _OBUFT_AGP;

    private static EdifCell _OBUFT_CTT;

    private static EdifCell _OBUFT_F_12;

    private static EdifCell _OBUFT_F_16;

    private static EdifCell _OBUFT_F_2;

    private static EdifCell _OBUFT_F_24;

    private static EdifCell _OBUFT_F_4;

    private static EdifCell _OBUFT_F_6;

    private static EdifCell _OBUFT_F_8;

    private static EdifCell _OBUFT_GTL;

    private static EdifCell _OBUFT_GTL_DCI;

    private static EdifCell _OBUFT_GTLP;

    private static EdifCell _OBUFT_GTLP_DCI;

    private static EdifCell _OBUFT_HSTL_I;

    private static EdifCell _OBUFT_HSTL_I_18;

    private static EdifCell _OBUFT_HSTL_I_DCI;

    private static EdifCell _OBUFT_HSTL_I_DCI_18;

    private static EdifCell _OBUFT_HSTL_II;

    private static EdifCell _OBUFT_HSTL_II_18;

    private static EdifCell _OBUFT_HSTL_II_DCI;

    private static EdifCell _OBUFT_HSTL_II_DCI_18;

    private static EdifCell _OBUFT_HSTL_III;

    private static EdifCell _OBUFT_HSTL_III_18;

    private static EdifCell _OBUFT_HSTL_III_DCI;

    private static EdifCell _OBUFT_HSTL_III_DCI_18;

    private static EdifCell _OBUFT_HSTL_IV;

    private static EdifCell _OBUFT_HSTL_IV_18;

    private static EdifCell _OBUFT_HSTL_IV_DCI;

    private static EdifCell _OBUFT_HSTL_IV_DCI_18;

    private static EdifCell _OBUFT_LVCMOS12;

    private static EdifCell _OBUFT_LVCMOS12_F_2;

    private static EdifCell _OBUFT_LVCMOS12_F_4;

    private static EdifCell _OBUFT_LVCMOS12_F_6;

    private static EdifCell _OBUFT_LVCMOS12_F_8;

    private static EdifCell _OBUFT_LVCMOS12_S_2;

    private static EdifCell _OBUFT_LVCMOS12_S_4;

    private static EdifCell _OBUFT_LVCMOS12_S_6;

    private static EdifCell _OBUFT_LVCMOS12_S_8;

    private static EdifCell _OBUFT_LVCMOS15;

    private static EdifCell _OBUFT_LVCMOS15_F_12;

    private static EdifCell _OBUFT_LVCMOS15_F_16;

    private static EdifCell _OBUFT_LVCMOS15_F_2;

    private static EdifCell _OBUFT_LVCMOS15_F_4;

    private static EdifCell _OBUFT_LVCMOS15_F_6;

    private static EdifCell _OBUFT_LVCMOS15_F_8;

    private static EdifCell _OBUFT_LVCMOS15_S_12;

    private static EdifCell _OBUFT_LVCMOS15_S_16;

    private static EdifCell _OBUFT_LVCMOS15_S_2;

    private static EdifCell _OBUFT_LVCMOS15_S_4;

    private static EdifCell _OBUFT_LVCMOS15_S_6;

    private static EdifCell _OBUFT_LVCMOS15_S_8;

    private static EdifCell _OBUFT_LVCMOS18;

    private static EdifCell _OBUFT_LVCMOS18_F_12;

    private static EdifCell _OBUFT_LVCMOS18_F_16;

    private static EdifCell _OBUFT_LVCMOS18_F_2;

    private static EdifCell _OBUFT_LVCMOS18_F_4;

    private static EdifCell _OBUFT_LVCMOS18_F_6;

    private static EdifCell _OBUFT_LVCMOS18_F_8;

    private static EdifCell _OBUFT_LVCMOS18_S_12;

    private static EdifCell _OBUFT_LVCMOS18_S_16;

    private static EdifCell _OBUFT_LVCMOS18_S_2;

    private static EdifCell _OBUFT_LVCMOS18_S_4;

    private static EdifCell _OBUFT_LVCMOS18_S_6;

    private static EdifCell _OBUFT_LVCMOS18_S_8;

    private static EdifCell _OBUFT_LVCMOS2;

    private static EdifCell _OBUFT_LVCMOS25;

    private static EdifCell _OBUFT_LVCMOS25_F_12;

    private static EdifCell _OBUFT_LVCMOS25_F_16;

    private static EdifCell _OBUFT_LVCMOS25_F_2;

    private static EdifCell _OBUFT_LVCMOS25_F_24;

    private static EdifCell _OBUFT_LVCMOS25_F_4;

    private static EdifCell _OBUFT_LVCMOS25_F_6;

    private static EdifCell _OBUFT_LVCMOS25_F_8;

    private static EdifCell _OBUFT_LVCMOS25_S_12;

    private static EdifCell _OBUFT_LVCMOS25_S_16;

    private static EdifCell _OBUFT_LVCMOS25_S_2;

    private static EdifCell _OBUFT_LVCMOS25_S_24;

    private static EdifCell _OBUFT_LVCMOS25_S_4;

    private static EdifCell _OBUFT_LVCMOS25_S_6;

    private static EdifCell _OBUFT_LVCMOS25_S_8;

    private static EdifCell _OBUFT_LVCMOS33;

    private static EdifCell _OBUFT_LVCMOS33_F_12;

    private static EdifCell _OBUFT_LVCMOS33_F_16;

    private static EdifCell _OBUFT_LVCMOS33_F_2;

    private static EdifCell _OBUFT_LVCMOS33_F_24;

    private static EdifCell _OBUFT_LVCMOS33_F_4;

    private static EdifCell _OBUFT_LVCMOS33_F_6;

    private static EdifCell _OBUFT_LVCMOS33_F_8;

    private static EdifCell _OBUFT_LVCMOS33_S_12;

    private static EdifCell _OBUFT_LVCMOS33_S_16;

    private static EdifCell _OBUFT_LVCMOS33_S_2;

    private static EdifCell _OBUFT_LVCMOS33_S_24;

    private static EdifCell _OBUFT_LVCMOS33_S_4;

    private static EdifCell _OBUFT_LVCMOS33_S_6;

    private static EdifCell _OBUFT_LVCMOS33_S_8;

    private static EdifCell _OBUFT_LVDCI_15;

    private static EdifCell _OBUFT_LVDCI_18;

    private static EdifCell _OBUFT_LVDCI_25;

    private static EdifCell _OBUFT_LVDCI_33;

    private static EdifCell _OBUFT_LVDCI_DV2_15;

    private static EdifCell _OBUFT_LVDCI_DV2_18;

    private static EdifCell _OBUFT_LVDCI_DV2_25;

    private static EdifCell _OBUFT_LVDCI_DV2_33;

    private static EdifCell _OBUFT_LVDS;

    private static EdifCell _OBUFT_LVPECL;

    private static EdifCell _OBUFT_LVTTL;

    private static EdifCell _OBUFT_LVTTL_F_12;

    private static EdifCell _OBUFT_LVTTL_F_16;

    private static EdifCell _OBUFT_LVTTL_F_2;

    private static EdifCell _OBUFT_LVTTL_F_24;

    private static EdifCell _OBUFT_LVTTL_F_4;

    private static EdifCell _OBUFT_LVTTL_F_6;

    private static EdifCell _OBUFT_LVTTL_F_8;

    private static EdifCell _OBUFT_LVTTL_S_12;

    private static EdifCell _OBUFT_LVTTL_S_16;

    private static EdifCell _OBUFT_LVTTL_S_2;

    private static EdifCell _OBUFT_LVTTL_S_24;

    private static EdifCell _OBUFT_LVTTL_S_4;

    private static EdifCell _OBUFT_LVTTL_S_6;

    private static EdifCell _OBUFT_LVTTL_S_8;

    private static EdifCell _OBUFT_PCI33_3;

    private static EdifCell _OBUFT_PCI33_5;

    private static EdifCell _OBUFT_PCI66_3;

    private static EdifCell _OBUFT_PCIX;

    private static EdifCell _OBUFT_PCIX66_3;

    private static EdifCell _OBUFT_S_12;

    private static EdifCell _OBUFT_S_16;

    private static EdifCell _OBUFT_S_2;

    private static EdifCell _OBUFT_S_24;

    private static EdifCell _OBUFT_S_4;

    private static EdifCell _OBUFT_S_6;

    private static EdifCell _OBUFT_S_8;

    private static EdifCell _OBUFT_SSTL18_I;

    private static EdifCell _OBUFT_SSTL18_I_DCI;

    private static EdifCell _OBUFT_SSTL18_II;

    private static EdifCell _OBUFT_SSTL18_II_DCI;

    private static EdifCell _OBUFT_SSTL2_I;

    private static EdifCell _OBUFT_SSTL2_I_DCI;

    private static EdifCell _OBUFT_SSTL2_II;

    private static EdifCell _OBUFT_SSTL2_II_DCI;

    private static EdifCell _OBUFT_SSTL3_I;

    private static EdifCell _OBUFT_SSTL3_I_DCI;

    private static EdifCell _OBUFT_SSTL3_II;

    private static EdifCell _OBUFT_SSTL3_II_DCI;

    private static EdifCell _OBUFTDS;

    private static EdifCell _OBUFTDS_BLVDS_25;

    private static EdifCell _OBUFTDS_LDT_25;

    private static EdifCell _OBUFTDS_LVDS_25;

    private static EdifCell _OBUFTDS_LVDS_33;

    private static EdifCell _OBUFTDS_LVDSEXT_25;

    private static EdifCell _OBUFTDS_LVDSEXT_33;

    private static EdifCell _OBUFTDS_LVPECL_25;

    private static EdifCell _OBUFTDS_LVPECL_33;

    private static EdifCell _OBUFTDS_ULVDS_25;

    private static EdifCell _ODDR;

    private static EdifCell _ODDR2;

    private static EdifCell _OFDDRCPE;

    private static EdifCell _OFDDRRSE;

    private static EdifCell _OFDDRTCPE;

    private static EdifCell _OFDDRTRSE;

    private static EdifCell _OPT_OFF;

    private static EdifCell _OPT_UIM;

    private static EdifCell _OR2;

    private static EdifCell _OR2B1;

    private static EdifCell _OR2B2;

    private static EdifCell _OR3;

    private static EdifCell _OR3B1;

    private static EdifCell _OR3B2;

    private static EdifCell _OR3B3;

    private static EdifCell _OR4;

    private static EdifCell _OR4B1;

    private static EdifCell _OR4B2;

    private static EdifCell _OR4B3;

    private static EdifCell _OR4B4;

    private static EdifCell _OR5;

    private static EdifCell _OR5B1;

    private static EdifCell _OR5B2;

    private static EdifCell _OR5B3;

    private static EdifCell _OR5B4;

    private static EdifCell _OR5B5;

    private static EdifCell _OR6;

    private static EdifCell _OR7;

    private static EdifCell _OR8;

    private static EdifCell _ORCY;

    private static EdifCell _OSERDES;

    private static EdifCell _PLL_ADV;

    private static EdifCell _PLL_BASE;

    private static EdifCell _PMCD;

    private static EdifCell _PPC405;

    private static EdifCell _PPC405_ADV;

    private static EdifCell _PULLDOWN;

    private static EdifCell _PULLUP;

    private static EdifCell _RAM128X1D;

    private static EdifCell _RAM128X1S;

    private static EdifCell _RAM128X1S_1;

    private static EdifCell _RAM16X1D;

    private static EdifCell _RAM16X1D_1;

    private static EdifCell _RAM16X1S;

    private static EdifCell _RAM16X1S_1;

    private static EdifCell _RAM16X2S;

    private static EdifCell _RAM16X4S;

    private static EdifCell _RAM16X8S;

    private static EdifCell _RAM256X1S;

    private static EdifCell _RAM32M;

    private static EdifCell _RAM32X1D;

    private static EdifCell _RAM32X1D_1;

    private static EdifCell _RAM32X1S;

    private static EdifCell _RAM32X1S_1;

    private static EdifCell _RAM32X2S;

    private static EdifCell _RAM32X4S;

    private static EdifCell _RAM32X8S;

    private static EdifCell _RAM64M;

    private static EdifCell _RAM64X1D;

    private static EdifCell _RAM64X1D_1;

    private static EdifCell _RAM64X1S;

    private static EdifCell _RAM64X1S_1;

    private static EdifCell _RAM64X2S;

    private static EdifCell _RAMB16;

    private static EdifCell _RAMB16_S1;

    private static EdifCell _RAMB16_S18;

    private static EdifCell _RAMB16_S18_S18;

    private static EdifCell _RAMB16_S18_S36;

    private static EdifCell _RAMB16_S1_S1;

    private static EdifCell _RAMB16_S1_S18;

    private static EdifCell _RAMB16_S1_S2;

    private static EdifCell _RAMB16_S1_S36;

    private static EdifCell _RAMB16_S1_S4;

    private static EdifCell _RAMB16_S1_S9;

    private static EdifCell _RAMB16_S2;

    private static EdifCell _RAMB16_S2_S18;

    private static EdifCell _RAMB16_S2_S2;

    private static EdifCell _RAMB16_S2_S36;

    private static EdifCell _RAMB16_S2_S4;

    private static EdifCell _RAMB16_S2_S9;

    private static EdifCell _RAMB16_S36;

    private static EdifCell _RAMB16_S36_S36;

    private static EdifCell _RAMB16_S4;

    private static EdifCell _RAMB16_S4_S18;

    private static EdifCell _RAMB16_S4_S36;

    private static EdifCell _RAMB16_S4_S4;

    private static EdifCell _RAMB16_S4_S9;

    private static EdifCell _RAMB16_S9;

    private static EdifCell _RAMB16_S9_S18;

    private static EdifCell _RAMB16_S9_S36;

    private static EdifCell _RAMB16_S9_S9;

    private static EdifCell _RAMB18;

    private static EdifCell _RAMB18SDP;

    private static EdifCell _RAMB32_S64_ECC;

    private static EdifCell _RAMB36;

    private static EdifCell _RAMB36_EXP;

    private static EdifCell _RAMB36SDP;

    private static EdifCell _RAMB36SDP_EXP;

    private static EdifCell _RAMB4_S1;

    private static EdifCell _RAMB4_S16;

    private static EdifCell _RAMB4_S16_S16;

    private static EdifCell _RAMB4_S1_S1;

    private static EdifCell _RAMB4_S1_S16;

    private static EdifCell _RAMB4_S1_S2;

    private static EdifCell _RAMB4_S1_S4;

    private static EdifCell _RAMB4_S1_S8;

    private static EdifCell _RAMB4_S2;

    private static EdifCell _RAMB4_S2_S16;

    private static EdifCell _RAMB4_S2_S2;

    private static EdifCell _RAMB4_S2_S4;

    private static EdifCell _RAMB4_S2_S8;

    private static EdifCell _RAMB4_S4;

    private static EdifCell _RAMB4_S4_S16;

    private static EdifCell _RAMB4_S4_S4;

    private static EdifCell _RAMB4_S4_S8;

    private static EdifCell _RAMB4_S8;

    private static EdifCell _RAMB4_S8_S16;

    private static EdifCell _RAMB4_S8_S8;

    private static EdifCell _ROC;

    private static EdifCell _ROCBUF;

    private static EdifCell _ROM128X1;

    private static EdifCell _ROM16X1;

    private static EdifCell _ROM256X1;

    private static EdifCell _ROM32X1;

    private static EdifCell _ROM64X1;

    private static EdifCell _SRL16;

    private static EdifCell _SRL16_1;

    private static EdifCell _SRL16E;

    private static EdifCell _SRL16E_1;

    private static EdifCell _SRLC16;

    private static EdifCell _SRLC16_1;

    private static EdifCell _SRLC16E;

    private static EdifCell _SRLC16E_1;

    private static EdifCell _SRLC32E;

    private static EdifCell _STARTBUF_FPGACORE;

    private static EdifCell _STARTBUF_SPARTAN2;

    private static EdifCell _STARTBUF_SPARTAN3;

    private static EdifCell _STARTBUF_VIRTEX;

    private static EdifCell _STARTBUF_VIRTEX2;

    private static EdifCell _STARTBUF_VIRTEX4;

    private static EdifCell _STARTUP_FPGACORE;

    private static EdifCell _STARTUP_SPARTAN2;

    private static EdifCell _STARTUP_SPARTAN3;

    private static EdifCell _STARTUP_SPARTAN3E;

    private static EdifCell _STARTUP_VIRTEX;

    private static EdifCell _STARTUP_VIRTEX2;

    private static EdifCell _STARTUP_VIRTEX4;

    private static EdifCell _STARTUP_VIRTEX5;

    private static EdifCell _TBLOCK;

    private static EdifCell _TIMEGRP;

    private static EdifCell _TIMESPEC;

    private static EdifCell _TOC;

    private static EdifCell _TOCBUF;

    private static EdifCell _USR_ACCESS_VIRTEX4;

    private static EdifCell _USR_ACCESS_VIRTEX5;

    private static EdifCell _VCC;

    private static EdifCell _WIREAND;

    private static EdifCell _XNOR2;

    private static EdifCell _XNOR3;

    private static EdifCell _XNOR4;

    private static EdifCell _XNOR5;

    private static EdifCell _XOR2;

    private static EdifCell _XOR3;

    private static EdifCell _XOR4;

    private static EdifCell _XOR5;

    private static EdifCell _XORCY;

    private static EdifCell _XORCY_D;

    private static EdifCell _XORCY_L;

    private static NamedObject O_port_name;

    private static NamedObject I0_port_name;

    private static NamedObject I1_port_name;

    private static NamedObject I2_port_name;

    private static NamedObject I3_port_name;

    private static NamedObject I4_port_name;

    private static NamedObject I5_port_name;

    private static NamedObject I6_port_name;

    private static NamedObject I7_port_name;

    private static NamedObject CAPTURE_port_name;

    private static NamedObject DRCK1_port_name;

    private static NamedObject DRCK2_port_name;

    private static NamedObject RESET_port_name;

    private static NamedObject SEL1_port_name;

    private static NamedObject SEL2_port_name;

    private static NamedObject SHIFT_port_name;

    private static NamedObject TDI_port_name;

    private static NamedObject UPDATE_port_name;

    private static NamedObject TDO1_port_name;

    private static NamedObject TDO2_port_name;

    private static NamedObject DRCK_port_name;

    private static NamedObject SEL_port_name;

    private static NamedObject TDO_port_name;

    private static NamedObject I_port_name;

    private static NamedObject E_port_name;

    private static NamedObject CE_port_name;

    private static NamedObject CE0_port_name;

    private static NamedObject CE1_port_name;

    private static NamedObject IGNORE0_port_name;

    private static NamedObject IGNORE1_port_name;

    private static NamedObject S0_port_name;

    private static NamedObject S1_port_name;

    private static NamedObject S_port_name;

    private static NamedObject CLR_port_name;

    private static NamedObject T_port_name;

    private static NamedObject CAP_port_name;

    private static NamedObject CLK_port_name;

    private static NamedObject CO_port_name;

    private static NamedObject CI_port_name;

    private static NamedObject CYINIT_port_name;

    private static NamedObject DI_port_name;

    private static NamedObject CDO_port_name;

    private static NamedObject O5_port_name;

    private static NamedObject O6_port_name;

    private static NamedObject CDI_port_name;

    private static NamedObject CLKDV_port_name;

    private static NamedObject CLKIN_port_name;

    private static NamedObject CDRST_port_name;

    private static NamedObject CLK0_port_name;

    private static NamedObject CLK180_port_name;

    private static NamedObject CLK270_port_name;

    private static NamedObject CLK2X_port_name;

    private static NamedObject CLK90_port_name;

    private static NamedObject LOCKED_port_name;

    private static NamedObject CLKFB_port_name;

    private static NamedObject RST_port_name;

    private static NamedObject CLK2X180_port_name;

    private static NamedObject CRCOUT_port_name;

    private static NamedObject CRCCLK_port_name;

    private static NamedObject CRCDATAVALID_port_name;

    private static NamedObject CRCDATAWIDTH_port_name;

    private static NamedObject CRCIN_port_name;

    private static NamedObject CRCRESET_port_name;

    private static NamedObject BCLK_port_name;

    private static NamedObject DONEOUT_port_name;

    private static NamedObject DOUT0_port_name;

    private static NamedObject DOUT1_port_name;

    private static NamedObject DOUT2_port_name;

    private static NamedObject DOUT3_port_name;

    private static NamedObject DOUT4_port_name;

    private static NamedObject DOUT5_port_name;

    private static NamedObject DOUT6_port_name;

    private static NamedObject DOUT7_port_name;

    private static NamedObject GSR_port_name;

    private static NamedObject GTS_port_name;

    private static NamedObject GWE_port_name;

    private static NamedObject INITBOUT_port_name;

    private static NamedObject CCLK_port_name;

    private static NamedObject CSB_port_name;

    private static NamedObject DIN0_port_name;

    private static NamedObject DIN1_port_name;

    private static NamedObject DIN2_port_name;

    private static NamedObject DIN3_port_name;

    private static NamedObject DIN4_port_name;

    private static NamedObject DIN5_port_name;

    private static NamedObject DIN6_port_name;

    private static NamedObject DIN7_port_name;

    private static NamedObject DONEIN_port_name;

    private static NamedObject LBISTISOLATEB_port_name;

    private static NamedObject M0_port_name;

    private static NamedObject M1_port_name;

    private static NamedObject M2_port_name;

    private static NamedObject PROGB_port_name;

    private static NamedObject TCK_port_name;

    private static NamedObject TMS_port_name;

    private static NamedObject WRITEB_port_name;

    private static NamedObject CLKFX_port_name;

    private static NamedObject CLKFX180_port_name;

    private static NamedObject PSDONE_port_name;

    private static NamedObject STATUS_port_name;

    private static NamedObject DSSEN_port_name;

    private static NamedObject PSCLK_port_name;

    private static NamedObject PSEN_port_name;

    private static NamedObject PSINCDEC_port_name;

    private static NamedObject DO_port_name;

    private static NamedObject DRDY_port_name;

    private static NamedObject DADDR_port_name;

    private static NamedObject DCLK_port_name;

    private static NamedObject DEN_port_name;

    private static NamedObject DWE_port_name;

    private static NamedObject BCOUT_port_name;

    private static NamedObject P_port_name;

    private static NamedObject PCOUT_port_name;

    private static NamedObject A_port_name;

    private static NamedObject B_port_name;

    private static NamedObject BCIN_port_name;

    private static NamedObject C_port_name;

    private static NamedObject CARRYIN_port_name;

    private static NamedObject CARRYINSEL_port_name;

    private static NamedObject CEA_port_name;

    private static NamedObject CEB_port_name;

    private static NamedObject CEC_port_name;

    private static NamedObject CECARRYIN_port_name;

    private static NamedObject CECINSUB_port_name;

    private static NamedObject CECTRL_port_name;

    private static NamedObject CEM_port_name;

    private static NamedObject CEP_port_name;

    private static NamedObject OPMODE_port_name;

    private static NamedObject PCIN_port_name;

    private static NamedObject RSTA_port_name;

    private static NamedObject RSTB_port_name;

    private static NamedObject RSTC_port_name;

    private static NamedObject RSTCARRYIN_port_name;

    private static NamedObject RSTCTRL_port_name;

    private static NamedObject RSTM_port_name;

    private static NamedObject RSTP_port_name;

    private static NamedObject SUBTRACT_port_name;

    private static NamedObject ACOUT_port_name;

    private static NamedObject CARRYCASCOUT_port_name;

    private static NamedObject CARRYOUT_port_name;

    private static NamedObject MULTSIGNOUT_port_name;

    private static NamedObject OVERFLOW_port_name;

    private static NamedObject PATTERNBDETECT_port_name;

    private static NamedObject PATTERNDETECT_port_name;

    private static NamedObject UNDERFLOW_port_name;

    private static NamedObject ACIN_port_name;

    private static NamedObject ALUMODE_port_name;

    private static NamedObject CARRYCASCIN_port_name;

    private static NamedObject CEA1_port_name;

    private static NamedObject CEA2_port_name;

    private static NamedObject CEALUMODE_port_name;

    private static NamedObject CEB1_port_name;

    private static NamedObject CEB2_port_name;

    private static NamedObject CEMULTCARRYIN_port_name;

    private static NamedObject MULTSIGNIN_port_name;

    private static NamedObject RSTALLCARRYIN_port_name;

    private static NamedObject RSTALUMODE_port_name;

    private static NamedObject DCRHOSTDONEIR_port_name;

    private static NamedObject EMAC0CLIENTANINTERRUPT_port_name;

    private static NamedObject EMAC0CLIENTRXBADFRAME_port_name;

    private static NamedObject EMAC0CLIENTRXCLIENTCLKOUT_port_name;

    private static NamedObject EMAC0CLIENTRXD_port_name;

    private static NamedObject EMAC0CLIENTRXDVLD_port_name;

    private static NamedObject EMAC0CLIENTRXDVLDMSW_port_name;

    private static NamedObject EMAC0CLIENTRXDVREG6_port_name;

    private static NamedObject EMAC0CLIENTRXFRAMEDROP_port_name;

    private static NamedObject EMAC0CLIENTRXGOODFRAME_port_name;

    private static NamedObject EMAC0CLIENTRXSTATS_port_name;

    private static NamedObject EMAC0CLIENTRXSTATSBYTEVLD_port_name;

    private static NamedObject EMAC0CLIENTRXSTATSVLD_port_name;

    private static NamedObject EMAC0CLIENTTXACK_port_name;

    private static NamedObject EMAC0CLIENTTXCLIENTCLKOUT_port_name;

    private static NamedObject EMAC0CLIENTTXCOLLISION_port_name;

    private static NamedObject EMAC0CLIENTTXGMIIMIICLKOUT_port_name;

    private static NamedObject EMAC0CLIENTTXRETRANSMIT_port_name;

    private static NamedObject EMAC0CLIENTTXSTATS_port_name;

    private static NamedObject EMAC0CLIENTTXSTATSBYTEVLD_port_name;

    private static NamedObject EMAC0CLIENTTXSTATSVLD_port_name;

    private static NamedObject EMAC0PHYENCOMMAALIGN_port_name;

    private static NamedObject EMAC0PHYLOOPBACKMSB_port_name;

    private static NamedObject EMAC0PHYMCLKOUT_port_name;

    private static NamedObject EMAC0PHYMDOUT_port_name;

    private static NamedObject EMAC0PHYMDTRI_port_name;

    private static NamedObject EMAC0PHYMGTRXRESET_port_name;

    private static NamedObject EMAC0PHYMGTTXRESET_port_name;

    private static NamedObject EMAC0PHYPOWERDOWN_port_name;

    private static NamedObject EMAC0PHYSYNCACQSTATUS_port_name;

    private static NamedObject EMAC0PHYTXCHARDISPMODE_port_name;

    private static NamedObject EMAC0PHYTXCHARDISPVAL_port_name;

    private static NamedObject EMAC0PHYTXCHARISK_port_name;

    private static NamedObject EMAC0PHYTXCLK_port_name;

    private static NamedObject EMAC0PHYTXD_port_name;

    private static NamedObject EMAC0PHYTXEN_port_name;

    private static NamedObject EMAC0PHYTXER_port_name;

    private static NamedObject EMAC1CLIENTANINTERRUPT_port_name;

    private static NamedObject EMAC1CLIENTRXBADFRAME_port_name;

    private static NamedObject EMAC1CLIENTRXCLIENTCLKOUT_port_name;

    private static NamedObject EMAC1CLIENTRXD_port_name;

    private static NamedObject EMAC1CLIENTRXDVLD_port_name;

    private static NamedObject EMAC1CLIENTRXDVLDMSW_port_name;

    private static NamedObject EMAC1CLIENTRXDVREG6_port_name;

    private static NamedObject EMAC1CLIENTRXFRAMEDROP_port_name;

    private static NamedObject EMAC1CLIENTRXGOODFRAME_port_name;

    private static NamedObject EMAC1CLIENTRXSTATS_port_name;

    private static NamedObject EMAC1CLIENTRXSTATSBYTEVLD_port_name;

    private static NamedObject EMAC1CLIENTRXSTATSVLD_port_name;

    private static NamedObject EMAC1CLIENTTXACK_port_name;

    private static NamedObject EMAC1CLIENTTXCLIENTCLKOUT_port_name;

    private static NamedObject EMAC1CLIENTTXCOLLISION_port_name;

    private static NamedObject EMAC1CLIENTTXGMIIMIICLKOUT_port_name;

    private static NamedObject EMAC1CLIENTTXRETRANSMIT_port_name;

    private static NamedObject EMAC1CLIENTTXSTATS_port_name;

    private static NamedObject EMAC1CLIENTTXSTATSBYTEVLD_port_name;

    private static NamedObject EMAC1CLIENTTXSTATSVLD_port_name;

    private static NamedObject EMAC1PHYENCOMMAALIGN_port_name;

    private static NamedObject EMAC1PHYLOOPBACKMSB_port_name;

    private static NamedObject EMAC1PHYMCLKOUT_port_name;

    private static NamedObject EMAC1PHYMDOUT_port_name;

    private static NamedObject EMAC1PHYMDTRI_port_name;

    private static NamedObject EMAC1PHYMGTRXRESET_port_name;

    private static NamedObject EMAC1PHYMGTTXRESET_port_name;

    private static NamedObject EMAC1PHYPOWERDOWN_port_name;

    private static NamedObject EMAC1PHYSYNCACQSTATUS_port_name;

    private static NamedObject EMAC1PHYTXCHARDISPMODE_port_name;

    private static NamedObject EMAC1PHYTXCHARDISPVAL_port_name;

    private static NamedObject EMAC1PHYTXCHARISK_port_name;

    private static NamedObject EMAC1PHYTXCLK_port_name;

    private static NamedObject EMAC1PHYTXD_port_name;

    private static NamedObject EMAC1PHYTXEN_port_name;

    private static NamedObject EMAC1PHYTXER_port_name;

    private static NamedObject EMACDCRACK_port_name;

    private static NamedObject EMACDCRDBUS_port_name;

    private static NamedObject HOSTMIIMRDY_port_name;

    private static NamedObject HOSTRDDATA_port_name;

    private static NamedObject CLIENTEMAC0DCMLOCKED_port_name;

    private static NamedObject CLIENTEMAC0PAUSEREQ_port_name;

    private static NamedObject CLIENTEMAC0PAUSEVAL_port_name;

    private static NamedObject CLIENTEMAC0RXCLIENTCLKIN_port_name;

    private static NamedObject CLIENTEMAC0TXCLIENTCLKIN_port_name;

    private static NamedObject CLIENTEMAC0TXD_port_name;

    private static NamedObject CLIENTEMAC0TXDVLD_port_name;

    private static NamedObject CLIENTEMAC0TXDVLDMSW_port_name;

    private static NamedObject CLIENTEMAC0TXFIRSTBYTE_port_name;

    private static NamedObject CLIENTEMAC0TXGMIIMIICLKIN_port_name;

    private static NamedObject CLIENTEMAC0TXIFGDELAY_port_name;

    private static NamedObject CLIENTEMAC0TXUNDERRUN_port_name;

    private static NamedObject CLIENTEMAC1DCMLOCKED_port_name;

    private static NamedObject CLIENTEMAC1PAUSEREQ_port_name;

    private static NamedObject CLIENTEMAC1PAUSEVAL_port_name;

    private static NamedObject CLIENTEMAC1RXCLIENTCLKIN_port_name;

    private static NamedObject CLIENTEMAC1TXCLIENTCLKIN_port_name;

    private static NamedObject CLIENTEMAC1TXD_port_name;

    private static NamedObject CLIENTEMAC1TXDVLD_port_name;

    private static NamedObject CLIENTEMAC1TXDVLDMSW_port_name;

    private static NamedObject CLIENTEMAC1TXFIRSTBYTE_port_name;

    private static NamedObject CLIENTEMAC1TXGMIIMIICLKIN_port_name;

    private static NamedObject CLIENTEMAC1TXIFGDELAY_port_name;

    private static NamedObject CLIENTEMAC1TXUNDERRUN_port_name;

    private static NamedObject DCREMACABUS_port_name;

    private static NamedObject DCREMACCLK_port_name;

    private static NamedObject DCREMACDBUS_port_name;

    private static NamedObject DCREMACENABLE_port_name;

    private static NamedObject DCREMACREAD_port_name;

    private static NamedObject DCREMACWRITE_port_name;

    private static NamedObject HOSTADDR_port_name;

    private static NamedObject HOSTCLK_port_name;

    private static NamedObject HOSTEMAC1SEL_port_name;

    private static NamedObject HOSTMIIMSEL_port_name;

    private static NamedObject HOSTOPCODE_port_name;

    private static NamedObject HOSTREQ_port_name;

    private static NamedObject HOSTWRDATA_port_name;

    private static NamedObject PHYEMAC0COL_port_name;

    private static NamedObject PHYEMAC0CRS_port_name;

    private static NamedObject PHYEMAC0GTXCLK_port_name;

    private static NamedObject PHYEMAC0MCLKIN_port_name;

    private static NamedObject PHYEMAC0MDIN_port_name;

    private static NamedObject PHYEMAC0MIITXCLK_port_name;

    private static NamedObject PHYEMAC0PHYAD_port_name;

    private static NamedObject PHYEMAC0RXBUFERR_port_name;

    private static NamedObject PHYEMAC0RXBUFSTATUS_port_name;

    private static NamedObject PHYEMAC0RXCHARISCOMMA_port_name;

    private static NamedObject PHYEMAC0RXCHARISK_port_name;

    private static NamedObject PHYEMAC0RXCHECKINGCRC_port_name;

    private static NamedObject PHYEMAC0RXCLK_port_name;

    private static NamedObject PHYEMAC0RXCLKCORCNT_port_name;

    private static NamedObject PHYEMAC0RXCOMMADET_port_name;

    private static NamedObject PHYEMAC0RXD_port_name;

    private static NamedObject PHYEMAC0RXDISPERR_port_name;

    private static NamedObject PHYEMAC0RXDV_port_name;

    private static NamedObject PHYEMAC0RXER_port_name;

    private static NamedObject PHYEMAC0RXLOSSOFSYNC_port_name;

    private static NamedObject PHYEMAC0RXNOTINTABLE_port_name;

    private static NamedObject PHYEMAC0RXRUNDISP_port_name;

    private static NamedObject PHYEMAC0SIGNALDET_port_name;

    private static NamedObject PHYEMAC0TXBUFERR_port_name;

    private static NamedObject PHYEMAC1COL_port_name;

    private static NamedObject PHYEMAC1CRS_port_name;

    private static NamedObject PHYEMAC1GTXCLK_port_name;

    private static NamedObject PHYEMAC1MCLKIN_port_name;

    private static NamedObject PHYEMAC1MDIN_port_name;

    private static NamedObject PHYEMAC1MIITXCLK_port_name;

    private static NamedObject PHYEMAC1PHYAD_port_name;

    private static NamedObject PHYEMAC1RXBUFERR_port_name;

    private static NamedObject PHYEMAC1RXBUFSTATUS_port_name;

    private static NamedObject PHYEMAC1RXCHARISCOMMA_port_name;

    private static NamedObject PHYEMAC1RXCHARISK_port_name;

    private static NamedObject PHYEMAC1RXCHECKINGCRC_port_name;

    private static NamedObject PHYEMAC1RXCLK_port_name;

    private static NamedObject PHYEMAC1RXCLKCORCNT_port_name;

    private static NamedObject PHYEMAC1RXCOMMADET_port_name;

    private static NamedObject PHYEMAC1RXD_port_name;

    private static NamedObject PHYEMAC1RXDISPERR_port_name;

    private static NamedObject PHYEMAC1RXDV_port_name;

    private static NamedObject PHYEMAC1RXER_port_name;

    private static NamedObject PHYEMAC1RXLOSSOFSYNC_port_name;

    private static NamedObject PHYEMAC1RXNOTINTABLE_port_name;

    private static NamedObject PHYEMAC1RXRUNDISP_port_name;

    private static NamedObject PHYEMAC1SIGNALDET_port_name;

    private static NamedObject PHYEMAC1TXBUFERR_port_name;

    private static NamedObject TIEEMAC0CONFIGVEC_port_name;

    private static NamedObject TIEEMAC0UNICASTADDR_port_name;

    private static NamedObject TIEEMAC1CONFIGVEC_port_name;

    private static NamedObject TIEEMAC1UNICASTADDR_port_name;

    private static NamedObject Q_port_name;

    private static NamedObject D_port_name;

    private static NamedObject PRE_port_name;

    private static NamedObject C0_port_name;

    private static NamedObject C1_port_name;

    private static NamedObject D0_port_name;

    private static NamedObject D1_port_name;

    private static NamedObject R_port_name;

    private static NamedObject ALMOSTEMPTY_port_name;

    private static NamedObject ALMOSTFULL_port_name;

    private static NamedObject DOP_port_name;

    private static NamedObject EMPTY_port_name;

    private static NamedObject FULL_port_name;

    private static NamedObject RDCOUNT_port_name;

    private static NamedObject RDERR_port_name;

    private static NamedObject WRCOUNT_port_name;

    private static NamedObject WRERR_port_name;

    private static NamedObject DIP_port_name;

    private static NamedObject RDCLK_port_name;

    private static NamedObject RDEN_port_name;

    private static NamedObject WRCLK_port_name;

    private static NamedObject WREN_port_name;

    private static NamedObject DBITERR_port_name;

    private static NamedObject ECCPARITY_port_name;

    private static NamedObject SBITERR_port_name;

    private static NamedObject RDCLKL_port_name;

    private static NamedObject RDCLKU_port_name;

    private static NamedObject RDRCLKL_port_name;

    private static NamedObject RDRCLKU_port_name;

    private static NamedObject WRCLKL_port_name;

    private static NamedObject WRCLKU_port_name;

    private static NamedObject ERROR_port_name;

    private static NamedObject SYNDROME_port_name;

    private static NamedObject SYNDROMEVALID_port_name;

    private static NamedObject CRCERROR_port_name;

    private static NamedObject ECCERROR_port_name;

    private static NamedObject G_port_name;

    private static NamedObject CHBONDDONE_port_name;

    private static NamedObject CHBONDO_port_name;

    private static NamedObject CONFIGOUT_port_name;

    private static NamedObject RXBUFSTATUS_port_name;

    private static NamedObject RXCHARISCOMMA_port_name;

    private static NamedObject RXCHARISK_port_name;

    private static NamedObject RXCHECKINGCRC_port_name;

    private static NamedObject RXCLKCORCNT_port_name;

    private static NamedObject RXCOMMADET_port_name;

    private static NamedObject RXCRCERR_port_name;

    private static NamedObject RXDATA_port_name;

    private static NamedObject RXDISPERR_port_name;

    private static NamedObject RXLOSSOFSYNC_port_name;

    private static NamedObject RXNOTINTABLE_port_name;

    private static NamedObject RXREALIGN_port_name;

    private static NamedObject RXRECCLK_port_name;

    private static NamedObject RXRUNDISP_port_name;

    private static NamedObject TXBUFERR_port_name;

    private static NamedObject TXKERR_port_name;

    private static NamedObject TXN_port_name;

    private static NamedObject TXP_port_name;

    private static NamedObject TXRUNDISP_port_name;

    private static NamedObject BREFCLK_port_name;

    private static NamedObject BREFCLK2_port_name;

    private static NamedObject CHBONDI_port_name;

    private static NamedObject CONFIGENABLE_port_name;

    private static NamedObject CONFIGIN_port_name;

    private static NamedObject ENCHANSYNC_port_name;

    private static NamedObject ENMCOMMAALIGN_port_name;

    private static NamedObject ENPCOMMAALIGN_port_name;

    private static NamedObject LOOPBACK_port_name;

    private static NamedObject POWERDOWN_port_name;

    private static NamedObject REFCLK_port_name;

    private static NamedObject REFCLK2_port_name;

    private static NamedObject REFCLKSEL_port_name;

    private static NamedObject RXN_port_name;

    private static NamedObject RXP_port_name;

    private static NamedObject RXPOLARITY_port_name;

    private static NamedObject RXRESET_port_name;

    private static NamedObject RXUSRCLK_port_name;

    private static NamedObject RXUSRCLK2_port_name;

    private static NamedObject TXBYPASS8B10B_port_name;

    private static NamedObject TXCHARDISPMODE_port_name;

    private static NamedObject TXCHARDISPVAL_port_name;

    private static NamedObject TXCHARISK_port_name;

    private static NamedObject TXDATA_port_name;

    private static NamedObject TXFORCECRCERR_port_name;

    private static NamedObject TXINHIBIT_port_name;

    private static NamedObject TXPOLARITY_port_name;

    private static NamedObject TXRESET_port_name;

    private static NamedObject TXUSRCLK_port_name;

    private static NamedObject TXUSRCLK2_port_name;

    private static NamedObject PMARXLOCK_port_name;

    private static NamedObject TXOUTCLK_port_name;

    private static NamedObject BREFCLKNIN_port_name;

    private static NamedObject BREFCLKPIN_port_name;

    private static NamedObject PMAINIT_port_name;

    private static NamedObject PMAREGADDR_port_name;

    private static NamedObject PMAREGDATAIN_port_name;

    private static NamedObject PMAREGRW_port_name;

    private static NamedObject PMAREGSTROBE_port_name;

    private static NamedObject PMARXLOCKSEL_port_name;

    private static NamedObject REFCLKBSEL_port_name;

    private static NamedObject RXBLOCKSYNC64B66BUSE_port_name;

    private static NamedObject RXCOMMADETUSE_port_name;

    private static NamedObject RXDATAWIDTH_port_name;

    private static NamedObject RXDEC64B66BUSE_port_name;

    private static NamedObject RXDEC8B10BUSE_port_name;

    private static NamedObject RXDESCRAM64B66BUSE_port_name;

    private static NamedObject RXIGNOREBTF_port_name;

    private static NamedObject RXINTDATAWIDTH_port_name;

    private static NamedObject RXSLIDE_port_name;

    private static NamedObject TXDATAWIDTH_port_name;

    private static NamedObject TXENC64B66BUSE_port_name;

    private static NamedObject TXENC8B10BUSE_port_name;

    private static NamedObject TXGEARBOX64B66BUSE_port_name;

    private static NamedObject TXINTDATAWIDTH_port_name;

    private static NamedObject TXSCRAM64B66BUSE_port_name;

    private static NamedObject COMBUSOUT_port_name;

    private static NamedObject RXBUFERR_port_name;

    private static NamedObject RXCALFAIL_port_name;

    private static NamedObject RXCRCOUT_port_name;

    private static NamedObject RXCYCLELIMIT_port_name;

    private static NamedObject RXLOCK_port_name;

    private static NamedObject RXMCLK_port_name;

    private static NamedObject RXPCSHCLKOUT_port_name;

    private static NamedObject RXRECCLK1_port_name;

    private static NamedObject RXRECCLK2_port_name;

    private static NamedObject RXSIGDET_port_name;

    private static NamedObject RXSTATUS_port_name;

    private static NamedObject TX1N_port_name;

    private static NamedObject TX1P_port_name;

    private static NamedObject TXCALFAIL_port_name;

    private static NamedObject TXCRCOUT_port_name;

    private static NamedObject TXCYCLELIMIT_port_name;

    private static NamedObject TXLOCK_port_name;

    private static NamedObject TXOUTCLK1_port_name;

    private static NamedObject TXOUTCLK2_port_name;

    private static NamedObject TXPCSHCLKOUT_port_name;

    private static NamedObject COMBUSIN_port_name;

    private static NamedObject GREFCLK_port_name;

    private static NamedObject REFCLK1_port_name;

    private static NamedObject RX1N_port_name;

    private static NamedObject RX1P_port_name;

    private static NamedObject RXCLKSTABLE_port_name;

    private static NamedObject RXCRCCLK_port_name;

    private static NamedObject RXCRCDATAVALID_port_name;

    private static NamedObject RXCRCDATAWIDTH_port_name;

    private static NamedObject RXCRCIN_port_name;

    private static NamedObject RXCRCINIT_port_name;

    private static NamedObject RXCRCINTCLK_port_name;

    private static NamedObject RXCRCPD_port_name;

    private static NamedObject RXCRCRESET_port_name;

    private static NamedObject RXPMARESET_port_name;

    private static NamedObject RXSYNC_port_name;

    private static NamedObject TXCLKSTABLE_port_name;

    private static NamedObject TXCRCCLK_port_name;

    private static NamedObject TXCRCDATAVALID_port_name;

    private static NamedObject TXCRCDATAWIDTH_port_name;

    private static NamedObject TXCRCIN_port_name;

    private static NamedObject TXCRCINIT_port_name;

    private static NamedObject TXCRCINTCLK_port_name;

    private static NamedObject TXCRCPD_port_name;

    private static NamedObject TXCRCRESET_port_name;

    private static NamedObject TXENOOB_port_name;

    private static NamedObject TXPMARESET_port_name;

    private static NamedObject TXSYNC_port_name;

    private static NamedObject CHBONDOA_port_name;

    private static NamedObject CHBONDOB_port_name;

    private static NamedObject DOA_port_name;

    private static NamedObject DOB_port_name;

    private static NamedObject DRDYA_port_name;

    private static NamedObject DRDYB_port_name;

    private static NamedObject RXBUFERRA_port_name;

    private static NamedObject RXBUFERRB_port_name;

    private static NamedObject RXCALFAILA_port_name;

    private static NamedObject RXCALFAILB_port_name;

    private static NamedObject RXCHARISCOMMAA_port_name;

    private static NamedObject RXCHARISCOMMAB_port_name;

    private static NamedObject RXCHARISKA_port_name;

    private static NamedObject RXCHARISKB_port_name;

    private static NamedObject RXCOMMADETA_port_name;

    private static NamedObject RXCOMMADETB_port_name;

    private static NamedObject RXCRCOUTA_port_name;

    private static NamedObject RXCRCOUTB_port_name;

    private static NamedObject RXCYCLELIMITA_port_name;

    private static NamedObject RXCYCLELIMITB_port_name;

    private static NamedObject RXDATAA_port_name;

    private static NamedObject RXDATAB_port_name;

    private static NamedObject RXDISPERRA_port_name;

    private static NamedObject RXDISPERRB_port_name;

    private static NamedObject RXLOCKA_port_name;

    private static NamedObject RXLOCKB_port_name;

    private static NamedObject RXLOSSOFSYNCA_port_name;

    private static NamedObject RXLOSSOFSYNCB_port_name;

    private static NamedObject RXMCLKA_port_name;

    private static NamedObject RXMCLKB_port_name;

    private static NamedObject RXNOTINTABLEA_port_name;

    private static NamedObject RXNOTINTABLEB_port_name;

    private static NamedObject RXPCSHCLKOUTA_port_name;

    private static NamedObject RXPCSHCLKOUTB_port_name;

    private static NamedObject RXREALIGNA_port_name;

    private static NamedObject RXREALIGNB_port_name;

    private static NamedObject RXRECCLK1A_port_name;

    private static NamedObject RXRECCLK1B_port_name;

    private static NamedObject RXRECCLK2A_port_name;

    private static NamedObject RXRECCLK2B_port_name;

    private static NamedObject RXRUNDISPA_port_name;

    private static NamedObject RXRUNDISPB_port_name;

    private static NamedObject RXSIGDETA_port_name;

    private static NamedObject RXSIGDETB_port_name;

    private static NamedObject RXSTATUSA_port_name;

    private static NamedObject RXSTATUSB_port_name;

    private static NamedObject TX1NA_port_name;

    private static NamedObject TX1NB_port_name;

    private static NamedObject TX1PA_port_name;

    private static NamedObject TX1PB_port_name;

    private static NamedObject TXBUFERRA_port_name;

    private static NamedObject TXBUFERRB_port_name;

    private static NamedObject TXCALFAILA_port_name;

    private static NamedObject TXCALFAILB_port_name;

    private static NamedObject TXCRCOUTA_port_name;

    private static NamedObject TXCRCOUTB_port_name;

    private static NamedObject TXCYCLELIMITA_port_name;

    private static NamedObject TXCYCLELIMITB_port_name;

    private static NamedObject TXKERRA_port_name;

    private static NamedObject TXKERRB_port_name;

    private static NamedObject TXLOCKA_port_name;

    private static NamedObject TXLOCKB_port_name;

    private static NamedObject TXOUTCLK1A_port_name;

    private static NamedObject TXOUTCLK1B_port_name;

    private static NamedObject TXOUTCLK2A_port_name;

    private static NamedObject TXOUTCLK2B_port_name;

    private static NamedObject TXPCSHCLKOUTA_port_name;

    private static NamedObject TXPCSHCLKOUTB_port_name;

    private static NamedObject TXRUNDISPA_port_name;

    private static NamedObject TXRUNDISPB_port_name;

    private static NamedObject CHBONDIA_port_name;

    private static NamedObject CHBONDIB_port_name;

    private static NamedObject DADDRA_port_name;

    private static NamedObject DADDRB_port_name;

    private static NamedObject DCLKA_port_name;

    private static NamedObject DCLKB_port_name;

    private static NamedObject DENA_port_name;

    private static NamedObject DENB_port_name;

    private static NamedObject DIA_port_name;

    private static NamedObject DIB_port_name;

    private static NamedObject DWEA_port_name;

    private static NamedObject DWEB_port_name;

    private static NamedObject ENCHANSYNCA_port_name;

    private static NamedObject ENCHANSYNCB_port_name;

    private static NamedObject ENMCOMMAALIGNA_port_name;

    private static NamedObject ENMCOMMAALIGNB_port_name;

    private static NamedObject ENPCOMMAALIGNA_port_name;

    private static NamedObject ENPCOMMAALIGNB_port_name;

    private static NamedObject GREFCLKA_port_name;

    private static NamedObject GREFCLKB_port_name;

    private static NamedObject LOOPBACKA_port_name;

    private static NamedObject LOOPBACKB_port_name;

    private static NamedObject POWERDOWNA_port_name;

    private static NamedObject POWERDOWNB_port_name;

    private static NamedObject REFCLK1A_port_name;

    private static NamedObject REFCLK1B_port_name;

    private static NamedObject REFCLK2A_port_name;

    private static NamedObject REFCLK2B_port_name;

    private static NamedObject RX1NA_port_name;

    private static NamedObject RX1NB_port_name;

    private static NamedObject RX1PA_port_name;

    private static NamedObject RX1PB_port_name;

    private static NamedObject RXBLOCKSYNC64B66BUSEA_port_name;

    private static NamedObject RXBLOCKSYNC64B66BUSEB_port_name;

    private static NamedObject RXCLKSTABLEA_port_name;

    private static NamedObject RXCLKSTABLEB_port_name;

    private static NamedObject RXCOMMADETUSEA_port_name;

    private static NamedObject RXCOMMADETUSEB_port_name;

    private static NamedObject RXCRCCLKA_port_name;

    private static NamedObject RXCRCCLKB_port_name;

    private static NamedObject RXCRCDATAVALIDA_port_name;

    private static NamedObject RXCRCDATAVALIDB_port_name;

    private static NamedObject RXCRCDATAWIDTHA_port_name;

    private static NamedObject RXCRCDATAWIDTHB_port_name;

    private static NamedObject RXCRCINA_port_name;

    private static NamedObject RXCRCINB_port_name;

    private static NamedObject RXCRCINITA_port_name;

    private static NamedObject RXCRCINITB_port_name;

    private static NamedObject RXCRCINTCLKA_port_name;

    private static NamedObject RXCRCINTCLKB_port_name;

    private static NamedObject RXCRCPDA_port_name;

    private static NamedObject RXCRCPDB_port_name;

    private static NamedObject RXCRCRESETA_port_name;

    private static NamedObject RXCRCRESETB_port_name;

    private static NamedObject RXDATAWIDTHA_port_name;

    private static NamedObject RXDATAWIDTHB_port_name;

    private static NamedObject RXDEC64B66BUSEA_port_name;

    private static NamedObject RXDEC64B66BUSEB_port_name;

    private static NamedObject RXDEC8B10BUSEA_port_name;

    private static NamedObject RXDEC8B10BUSEB_port_name;

    private static NamedObject RXDESCRAM64B66BUSEA_port_name;

    private static NamedObject RXDESCRAM64B66BUSEB_port_name;

    private static NamedObject RXIGNOREBTFA_port_name;

    private static NamedObject RXIGNOREBTFB_port_name;

    private static NamedObject RXINTDATAWIDTHA_port_name;

    private static NamedObject RXINTDATAWIDTHB_port_name;

    private static NamedObject RXPMARESETA_port_name;

    private static NamedObject RXPMARESETB_port_name;

    private static NamedObject RXPOLARITYA_port_name;

    private static NamedObject RXPOLARITYB_port_name;

    private static NamedObject RXRESETA_port_name;

    private static NamedObject RXRESETB_port_name;

    private static NamedObject RXSLIDEA_port_name;

    private static NamedObject RXSLIDEB_port_name;

    private static NamedObject RXSYNCA_port_name;

    private static NamedObject RXSYNCB_port_name;

    private static NamedObject RXUSRCLK2A_port_name;

    private static NamedObject RXUSRCLK2B_port_name;

    private static NamedObject RXUSRCLKA_port_name;

    private static NamedObject RXUSRCLKB_port_name;

    private static NamedObject TXBYPASS8B10BA_port_name;

    private static NamedObject TXBYPASS8B10BB_port_name;

    private static NamedObject TXCHARDISPMODEA_port_name;

    private static NamedObject TXCHARDISPMODEB_port_name;

    private static NamedObject TXCHARDISPVALA_port_name;

    private static NamedObject TXCHARDISPVALB_port_name;

    private static NamedObject TXCHARISKA_port_name;

    private static NamedObject TXCHARISKB_port_name;

    private static NamedObject TXCLKSTABLEA_port_name;

    private static NamedObject TXCLKSTABLEB_port_name;

    private static NamedObject TXCRCCLKA_port_name;

    private static NamedObject TXCRCCLKB_port_name;

    private static NamedObject TXCRCDATAVALIDA_port_name;

    private static NamedObject TXCRCDATAVALIDB_port_name;

    private static NamedObject TXCRCDATAWIDTHA_port_name;

    private static NamedObject TXCRCDATAWIDTHB_port_name;

    private static NamedObject TXCRCINA_port_name;

    private static NamedObject TXCRCINB_port_name;

    private static NamedObject TXCRCINITA_port_name;

    private static NamedObject TXCRCINITB_port_name;

    private static NamedObject TXCRCINTCLKA_port_name;

    private static NamedObject TXCRCINTCLKB_port_name;

    private static NamedObject TXCRCPDA_port_name;

    private static NamedObject TXCRCPDB_port_name;

    private static NamedObject TXCRCRESETA_port_name;

    private static NamedObject TXCRCRESETB_port_name;

    private static NamedObject TXDATAA_port_name;

    private static NamedObject TXDATAB_port_name;

    private static NamedObject TXDATAWIDTHA_port_name;

    private static NamedObject TXDATAWIDTHB_port_name;

    private static NamedObject TXENC64B66BUSEA_port_name;

    private static NamedObject TXENC64B66BUSEB_port_name;

    private static NamedObject TXENC8B10BUSEA_port_name;

    private static NamedObject TXENC8B10BUSEB_port_name;

    private static NamedObject TXENOOBA_port_name;

    private static NamedObject TXENOOBB_port_name;

    private static NamedObject TXGEARBOX64B66BUSEA_port_name;

    private static NamedObject TXGEARBOX64B66BUSEB_port_name;

    private static NamedObject TXINHIBITA_port_name;

    private static NamedObject TXINHIBITB_port_name;

    private static NamedObject TXINTDATAWIDTHA_port_name;

    private static NamedObject TXINTDATAWIDTHB_port_name;

    private static NamedObject TXPMARESETA_port_name;

    private static NamedObject TXPMARESETB_port_name;

    private static NamedObject TXPOLARITYA_port_name;

    private static NamedObject TXPOLARITYB_port_name;

    private static NamedObject TXRESETA_port_name;

    private static NamedObject TXRESETB_port_name;

    private static NamedObject TXSCRAM64B66BUSEA_port_name;

    private static NamedObject TXSCRAM64B66BUSEB_port_name;

    private static NamedObject TXSYNCA_port_name;

    private static NamedObject TXSYNCB_port_name;

    private static NamedObject TXUSRCLK2A_port_name;

    private static NamedObject TXUSRCLK2B_port_name;

    private static NamedObject TXUSRCLKA_port_name;

    private static NamedObject TXUSRCLKB_port_name;

    private static NamedObject SYNCLK1OUT_port_name;

    private static NamedObject SYNCLK2OUT_port_name;

    private static NamedObject MGTCLKN_port_name;

    private static NamedObject MGTCLKP_port_name;

    private static NamedObject RXBCLK_port_name;

    private static NamedObject SYNCLK1IN_port_name;

    private static NamedObject SYNCLK2IN_port_name;

    private static NamedObject IB_port_name;

    private static NamedObject OB_port_name;

    private static NamedObject BUSY_port_name;

    private static NamedObject WRITE_port_name;

    private static NamedObject Q1_port_name;

    private static NamedObject Q2_port_name;

    private static NamedObject Q0_port_name;

    private static NamedObject INC_port_name;

    private static NamedObject RDY_port_name;

    private static NamedObject IO_port_name;

    private static NamedObject IOB_port_name;

    private static NamedObject DATAOUT_port_name;

    private static NamedObject DATAIN_port_name;

    private static NamedObject IDATAIN_port_name;

    private static NamedObject ODATAIN_port_name;

    private static NamedObject Q3_port_name;

    private static NamedObject Q4_port_name;

    private static NamedObject Q5_port_name;

    private static NamedObject Q6_port_name;

    private static NamedObject SHIFTOUT1_port_name;

    private static NamedObject SHIFTOUT2_port_name;

    private static NamedObject BITSLIP_port_name;

    private static NamedObject CE2_port_name;

    private static NamedObject CLKDIV_port_name;

    private static NamedObject DLYCE_port_name;

    private static NamedObject DLYINC_port_name;

    private static NamedObject DLYRST_port_name;

    private static NamedObject OCLK_port_name;

    private static NamedObject REV_port_name;

    private static NamedObject SHIFTIN1_port_name;

    private static NamedObject SHIFTIN2_port_name;

    private static NamedObject SR_port_name;

    private static NamedObject TDIPPC_port_name;

    private static NamedObject TDOPPC_port_name;

    private static NamedObject TDOTSPPC_port_name;

    private static NamedObject KEYCLEARB_port_name;

    private static NamedObject GE_port_name;

    private static NamedObject LO_port_name;

    private static NamedObject D2_port_name;

    private static NamedObject OQ_port_name;

    private static NamedObject TQ_port_name;

    private static NamedObject D3_port_name;

    private static NamedObject D4_port_name;

    private static NamedObject D5_port_name;

    private static NamedObject D6_port_name;

    private static NamedObject OCE_port_name;

    private static NamedObject T1_port_name;

    private static NamedObject T2_port_name;

    private static NamedObject T3_port_name;

    private static NamedObject T4_port_name;

    private static NamedObject TCE_port_name;

    private static NamedObject CLKFBDCM_port_name;

    private static NamedObject CLKFBOUT_port_name;

    private static NamedObject CLKOUT0_port_name;

    private static NamedObject CLKOUT1_port_name;

    private static NamedObject CLKOUT2_port_name;

    private static NamedObject CLKOUT3_port_name;

    private static NamedObject CLKOUT4_port_name;

    private static NamedObject CLKOUT5_port_name;

    private static NamedObject CLKOUTDCM0_port_name;

    private static NamedObject CLKOUTDCM1_port_name;

    private static NamedObject CLKOUTDCM2_port_name;

    private static NamedObject CLKOUTDCM3_port_name;

    private static NamedObject CLKOUTDCM4_port_name;

    private static NamedObject CLKOUTDCM5_port_name;

    private static NamedObject CLKFBIN_port_name;

    private static NamedObject CLKIN1_port_name;

    private static NamedObject CLKIN2_port_name;

    private static NamedObject CLKINSEL_port_name;

    private static NamedObject REL_port_name;

    private static NamedObject CLKA1_port_name;

    private static NamedObject CLKA1D2_port_name;

    private static NamedObject CLKA1D4_port_name;

    private static NamedObject CLKA1D8_port_name;

    private static NamedObject CLKB1_port_name;

    private static NamedObject CLKC1_port_name;

    private static NamedObject CLKD1_port_name;

    private static NamedObject CLKA_port_name;

    private static NamedObject CLKB_port_name;

    private static NamedObject CLKC_port_name;

    private static NamedObject CLKD_port_name;

    private static NamedObject C405CPMCORESLEEPREQ_port_name;

    private static NamedObject C405CPMMSRCE_port_name;

    private static NamedObject C405CPMMSREE_port_name;

    private static NamedObject C405CPMTIMERIRQ_port_name;

    private static NamedObject C405CPMTIMERRESETREQ_port_name;

    private static NamedObject C405DBGMSRWE_port_name;

    private static NamedObject C405DBGSTOPACK_port_name;

    private static NamedObject C405DBGWBCOMPLETE_port_name;

    private static NamedObject C405DBGWBFULL_port_name;

    private static NamedObject C405DBGWBIAR_port_name;

    private static NamedObject C405DCRABUS_port_name;

    private static NamedObject C405DCRDBUSOUT_port_name;

    private static NamedObject C405DCRREAD_port_name;

    private static NamedObject C405DCRWRITE_port_name;

    private static NamedObject C405JTGCAPTUREDR_port_name;

    private static NamedObject C405JTGEXTEST_port_name;

    private static NamedObject C405JTGPGMOUT_port_name;

    private static NamedObject C405JTGSHIFTDR_port_name;

    private static NamedObject C405JTGTDO_port_name;

    private static NamedObject C405JTGTDOEN_port_name;

    private static NamedObject C405JTGUPDATEDR_port_name;

    private static NamedObject C405PLBDCUABORT_port_name;

    private static NamedObject C405PLBDCUABUS_port_name;

    private static NamedObject C405PLBDCUBE_port_name;

    private static NamedObject C405PLBDCUCACHEABLE_port_name;

    private static NamedObject C405PLBDCUGUARDED_port_name;

    private static NamedObject C405PLBDCUPRIORITY_port_name;

    private static NamedObject C405PLBDCUREQUEST_port_name;

    private static NamedObject C405PLBDCURNW_port_name;

    private static NamedObject C405PLBDCUSIZE2_port_name;

    private static NamedObject C405PLBDCUU0ATTR_port_name;

    private static NamedObject C405PLBDCUWRDBUS_port_name;

    private static NamedObject C405PLBDCUWRITETHRU_port_name;

    private static NamedObject C405PLBICUABORT_port_name;

    private static NamedObject C405PLBICUABUS_port_name;

    private static NamedObject C405PLBICUCACHEABLE_port_name;

    private static NamedObject C405PLBICUPRIORITY_port_name;

    private static NamedObject C405PLBICUREQUEST_port_name;

    private static NamedObject C405PLBICUSIZE_port_name;

    private static NamedObject C405PLBICUU0ATTR_port_name;

    private static NamedObject C405RSTCHIPRESETREQ_port_name;

    private static NamedObject C405RSTCORERESETREQ_port_name;

    private static NamedObject C405RSTSYSRESETREQ_port_name;

    private static NamedObject C405TRCCYCLE_port_name;

    private static NamedObject C405TRCEVENEXECUTIONSTATUS_port_name;

    private static NamedObject C405TRCODDEXECUTIONSTATUS_port_name;

    private static NamedObject C405TRCTRACESTATUS_port_name;

    private static NamedObject C405TRCTRIGGEREVENTOUT_port_name;

    private static NamedObject C405TRCTRIGGEREVENTTYPE_port_name;

    private static NamedObject C405XXXMACHINECHECK_port_name;

    private static NamedObject DSOCMBRAMABUS_port_name;

    private static NamedObject DSOCMBRAMBYTEWRITE_port_name;

    private static NamedObject DSOCMBRAMEN_port_name;

    private static NamedObject DSOCMBRAMWRDBUS_port_name;

    private static NamedObject DSOCMBUSY_port_name;

    private static NamedObject ISOCMBRAMEN_port_name;

    private static NamedObject ISOCMBRAMEVENWRITEEN_port_name;

    private static NamedObject ISOCMBRAMODDWRITEEN_port_name;

    private static NamedObject ISOCMBRAMRDABUS_port_name;

    private static NamedObject ISOCMBRAMWRABUS_port_name;

    private static NamedObject ISOCMBRAMWRDBUS_port_name;

    private static NamedObject BRAMDSOCMCLK_port_name;

    private static NamedObject BRAMDSOCMRDDBUS_port_name;

    private static NamedObject BRAMISOCMCLK_port_name;

    private static NamedObject BRAMISOCMRDDBUS_port_name;

    private static NamedObject CPMC405CLOCK_port_name;

    private static NamedObject CPMC405CORECLKINACTIVE_port_name;

    private static NamedObject CPMC405CPUCLKEN_port_name;

    private static NamedObject CPMC405JTAGCLKEN_port_name;

    private static NamedObject CPMC405TIMERCLKEN_port_name;

    private static NamedObject CPMC405TIMERTICK_port_name;

    private static NamedObject DBGC405DEBUGHALT_port_name;

    private static NamedObject DBGC405EXTBUSHOLDACK_port_name;

    private static NamedObject DBGC405UNCONDDEBUGEVENT_port_name;

    private static NamedObject DCRC405ACK_port_name;

    private static NamedObject DCRC405DBUSIN_port_name;

    private static NamedObject DSARCVALUE_port_name;

    private static NamedObject DSCNTLVALUE_port_name;

    private static NamedObject EICC405CRITINPUTIRQ_port_name;

    private static NamedObject EICC405EXTINPUTIRQ_port_name;

    private static NamedObject ISARCVALUE_port_name;

    private static NamedObject ISCNTLVALUE_port_name;

    private static NamedObject JTGC405BNDSCANTDO_port_name;

    private static NamedObject JTGC405TCK_port_name;

    private static NamedObject JTGC405TDI_port_name;

    private static NamedObject JTGC405TMS_port_name;

    private static NamedObject JTGC405TRSTNEG_port_name;

    private static NamedObject MCBCPUCLKEN_port_name;

    private static NamedObject MCBJTAGEN_port_name;

    private static NamedObject MCBTIMEREN_port_name;

    private static NamedObject MCPPCRST_port_name;

    private static NamedObject PLBC405DCUADDRACK_port_name;

    private static NamedObject PLBC405DCUBUSY_port_name;

    private static NamedObject PLBC405DCUERR_port_name;

    private static NamedObject PLBC405DCURDDACK_port_name;

    private static NamedObject PLBC405DCURDDBUS_port_name;

    private static NamedObject PLBC405DCURDWDADDR_port_name;

    private static NamedObject PLBC405DCUSSIZE1_port_name;

    private static NamedObject PLBC405DCUWRDACK_port_name;

    private static NamedObject PLBC405ICUADDRACK_port_name;

    private static NamedObject PLBC405ICUBUSY_port_name;

    private static NamedObject PLBC405ICUERR_port_name;

    private static NamedObject PLBC405ICURDDACK_port_name;

    private static NamedObject PLBC405ICURDDBUS_port_name;

    private static NamedObject PLBC405ICURDWDADDR_port_name;

    private static NamedObject PLBC405ICUSSIZE1_port_name;

    private static NamedObject PLBCLK_port_name;

    private static NamedObject RSTC405RESETCHIP_port_name;

    private static NamedObject RSTC405RESETCORE_port_name;

    private static NamedObject RSTC405RESETSYS_port_name;

    private static NamedObject TIEC405DETERMINISTICMULT_port_name;

    private static NamedObject TIEC405DISOPERANDFWD_port_name;

    private static NamedObject TIEC405MMUEN_port_name;

    private static NamedObject TIEDSOCMDCRADDR_port_name;

    private static NamedObject TIEISOCMDCRADDR_port_name;

    private static NamedObject TRCC405TRACEDISABLE_port_name;

    private static NamedObject TRCC405TRIGGEREVENTIN_port_name;

    private static NamedObject APUFCMDECODED_port_name;

    private static NamedObject APUFCMDECUDI_port_name;

    private static NamedObject APUFCMDECUDIVALID_port_name;

    private static NamedObject APUFCMENDIAN_port_name;

    private static NamedObject APUFCMFLUSH_port_name;

    private static NamedObject APUFCMINSTRUCTION_port_name;

    private static NamedObject APUFCMINSTRVALID_port_name;

    private static NamedObject APUFCMLOADBYTEEN_port_name;

    private static NamedObject APUFCMLOADDATA_port_name;

    private static NamedObject APUFCMLOADDVALID_port_name;

    private static NamedObject APUFCMOPERANDVALID_port_name;

    private static NamedObject APUFCMRADATA_port_name;

    private static NamedObject APUFCMRBDATA_port_name;

    private static NamedObject APUFCMWRITEBACKOK_port_name;

    private static NamedObject APUFCMXERCA_port_name;

    private static NamedObject C405DBGLOADDATAONAPUDBUS_port_name;

    private static NamedObject DCREMACENABLER_port_name;

    private static NamedObject DSOCMRDADDRVALID_port_name;

    private static NamedObject DSOCMWRADDRVALID_port_name;

    private static NamedObject EXTDCRABUS_port_name;

    private static NamedObject EXTDCRDBUSOUT_port_name;

    private static NamedObject EXTDCRREAD_port_name;

    private static NamedObject EXTDCRWRITE_port_name;

    private static NamedObject ISOCMDCRBRAMEVENEN_port_name;

    private static NamedObject ISOCMDCRBRAMODDEN_port_name;

    private static NamedObject ISOCMDCRBRAMRDSELECT_port_name;

    private static NamedObject BRAMISOCMDCRRDDBUS_port_name;

    private static NamedObject CPMC405SYNCBYPASS_port_name;

    private static NamedObject CPMDCRCLK_port_name;

    private static NamedObject CPMFCMCLK_port_name;

    private static NamedObject DSOCMRWCOMPLETE_port_name;

    private static NamedObject EXTDCRACK_port_name;

    private static NamedObject EXTDCRDBUSIN_port_name;

    private static NamedObject FCMAPUCR_port_name;

    private static NamedObject FCMAPUDCDCREN_port_name;

    private static NamedObject FCMAPUDCDFORCEALIGN_port_name;

    private static NamedObject FCMAPUDCDFORCEBESTEERING_port_name;

    private static NamedObject FCMAPUDCDFPUOP_port_name;

    private static NamedObject FCMAPUDCDGPRWRITE_port_name;

    private static NamedObject FCMAPUDCDLDSTBYTE_port_name;

    private static NamedObject FCMAPUDCDLDSTDW_port_name;

    private static NamedObject FCMAPUDCDLDSTHW_port_name;

    private static NamedObject FCMAPUDCDLDSTQW_port_name;

    private static NamedObject FCMAPUDCDLDSTWD_port_name;

    private static NamedObject FCMAPUDCDLOAD_port_name;

    private static NamedObject FCMAPUDCDPRIVOP_port_name;

    private static NamedObject FCMAPUDCDRAEN_port_name;

    private static NamedObject FCMAPUDCDRBEN_port_name;

    private static NamedObject FCMAPUDCDSTORE_port_name;

    private static NamedObject FCMAPUDCDTRAPBE_port_name;

    private static NamedObject FCMAPUDCDTRAPLE_port_name;

    private static NamedObject FCMAPUDCDUPDATE_port_name;

    private static NamedObject FCMAPUDCDXERCAEN_port_name;

    private static NamedObject FCMAPUDCDXEROVEN_port_name;

    private static NamedObject FCMAPUDECODEBUSY_port_name;

    private static NamedObject FCMAPUDONE_port_name;

    private static NamedObject FCMAPUEXCEPTION_port_name;

    private static NamedObject FCMAPUEXEBLOCKINGMCO_port_name;

    private static NamedObject FCMAPUEXECRFIELD_port_name;

    private static NamedObject FCMAPUEXENONBLOCKINGMCO_port_name;

    private static NamedObject FCMAPUINSTRACK_port_name;

    private static NamedObject FCMAPULOADWAIT_port_name;

    private static NamedObject FCMAPURESULT_port_name;

    private static NamedObject FCMAPURESULTVALID_port_name;

    private static NamedObject FCMAPUSLEEPNOTREADY_port_name;

    private static NamedObject FCMAPUXERCA_port_name;

    private static NamedObject FCMAPUXEROV_port_name;

    private static NamedObject TIEAPUCONTROL_port_name;

    private static NamedObject TIEAPUUDI1_port_name;

    private static NamedObject TIEAPUUDI2_port_name;

    private static NamedObject TIEAPUUDI3_port_name;

    private static NamedObject TIEAPUUDI4_port_name;

    private static NamedObject TIEAPUUDI5_port_name;

    private static NamedObject TIEAPUUDI6_port_name;

    private static NamedObject TIEAPUUDI7_port_name;

    private static NamedObject TIEAPUUDI8_port_name;

    private static NamedObject TIEDCRADDR_port_name;

    private static NamedObject TIEPVRBIT10_port_name;

    private static NamedObject TIEPVRBIT11_port_name;

    private static NamedObject TIEPVRBIT28_port_name;

    private static NamedObject TIEPVRBIT29_port_name;

    private static NamedObject TIEPVRBIT30_port_name;

    private static NamedObject TIEPVRBIT31_port_name;

    private static NamedObject TIEPVRBIT8_port_name;

    private static NamedObject TIEPVRBIT9_port_name;

    private static NamedObject DPO_port_name;

    private static NamedObject SPO_port_name;

    private static NamedObject DPRA_port_name;

    private static NamedObject WCLK_port_name;

    private static NamedObject WE_port_name;

    private static NamedObject A0_port_name;

    private static NamedObject A1_port_name;

    private static NamedObject A2_port_name;

    private static NamedObject A3_port_name;

    private static NamedObject A4_port_name;

    private static NamedObject A5_port_name;

    private static NamedObject A6_port_name;

    private static NamedObject DPRA0_port_name;

    private static NamedObject DPRA1_port_name;

    private static NamedObject DPRA2_port_name;

    private static NamedObject DPRA3_port_name;

    private static NamedObject O0_port_name;

    private static NamedObject O1_port_name;

    private static NamedObject O2_port_name;

    private static NamedObject O3_port_name;

    private static NamedObject DOC_port_name;

    private static NamedObject DOD_port_name;

    private static NamedObject ADDRA_port_name;

    private static NamedObject ADDRB_port_name;

    private static NamedObject ADDRC_port_name;

    private static NamedObject ADDRD_port_name;

    private static NamedObject DIC_port_name;

    private static NamedObject DID_port_name;

    private static NamedObject DPRA4_port_name;

    private static NamedObject DPRA5_port_name;

    private static NamedObject CASCADEOUTA_port_name;

    private static NamedObject CASCADEOUTB_port_name;

    private static NamedObject DOPA_port_name;

    private static NamedObject DOPB_port_name;

    private static NamedObject CASCADEINA_port_name;

    private static NamedObject CASCADEINB_port_name;

    private static NamedObject DIPA_port_name;

    private static NamedObject DIPB_port_name;

    private static NamedObject ENA_port_name;

    private static NamedObject ENB_port_name;

    private static NamedObject REGCEA_port_name;

    private static NamedObject REGCEB_port_name;

    private static NamedObject SSRA_port_name;

    private static NamedObject SSRB_port_name;

    private static NamedObject WEA_port_name;

    private static NamedObject WEB_port_name;

    private static NamedObject ADDR_port_name;

    private static NamedObject EN_port_name;

    private static NamedObject SSR_port_name;

    private static NamedObject RDADDR_port_name;

    private static NamedObject REGCE_port_name;

    private static NamedObject WRADDR_port_name;

    private static NamedObject CASCADEOUTLATA_port_name;

    private static NamedObject CASCADEOUTLATB_port_name;

    private static NamedObject CASCADEOUTREGA_port_name;

    private static NamedObject CASCADEOUTREGB_port_name;

    private static NamedObject CASCADEINLATA_port_name;

    private static NamedObject CASCADEINLATB_port_name;

    private static NamedObject CASCADEINREGA_port_name;

    private static NamedObject CASCADEINREGB_port_name;

    private static NamedObject ADDRAL_port_name;

    private static NamedObject ADDRAU_port_name;

    private static NamedObject ADDRBL_port_name;

    private static NamedObject ADDRBU_port_name;

    private static NamedObject CLKAL_port_name;

    private static NamedObject CLKAU_port_name;

    private static NamedObject CLKBL_port_name;

    private static NamedObject CLKBU_port_name;

    private static NamedObject ENAL_port_name;

    private static NamedObject ENAU_port_name;

    private static NamedObject ENBL_port_name;

    private static NamedObject ENBU_port_name;

    private static NamedObject REGCEAL_port_name;

    private static NamedObject REGCEAU_port_name;

    private static NamedObject REGCEBL_port_name;

    private static NamedObject REGCEBU_port_name;

    private static NamedObject REGCLKAL_port_name;

    private static NamedObject REGCLKAU_port_name;

    private static NamedObject REGCLKBL_port_name;

    private static NamedObject REGCLKBU_port_name;

    private static NamedObject SSRAL_port_name;

    private static NamedObject SSRAU_port_name;

    private static NamedObject SSRBL_port_name;

    private static NamedObject SSRBU_port_name;

    private static NamedObject WEAL_port_name;

    private static NamedObject WEAU_port_name;

    private static NamedObject WEBL_port_name;

    private static NamedObject WEBU_port_name;

    private static NamedObject RDADDRL_port_name;

    private static NamedObject RDADDRU_port_name;

    private static NamedObject RDENU_port_name;

    private static NamedObject RDENL_port_name;

    private static NamedObject REGCEL_port_name;

    private static NamedObject REGCEU_port_name;

    private static NamedObject SSRL_port_name;

    private static NamedObject SSRU_port_name;

    private static NamedObject WEL_port_name;

    private static NamedObject WEU_port_name;

    private static NamedObject WRADDRL_port_name;

    private static NamedObject WRADDRU_port_name;

    private static NamedObject WRENL_port_name;

    private static NamedObject WRENU_port_name;

    private static NamedObject A7_port_name;

    private static NamedObject Q15_port_name;

    private static NamedObject Q31_port_name;

    private static NamedObject GSROUT_port_name;

    private static NamedObject GSRIN_port_name;

    private static NamedObject GTSOUT_port_name;

    private static NamedObject GTSIN_port_name;

    private static NamedObject EOSOUT_port_name;

    private static NamedObject USRCCLKOIN_port_name;

    private static NamedObject USRCCLKTSIN_port_name;

    private static NamedObject USRDONEOIN_port_name;

    private static NamedObject USRDONETSIN_port_name;

    private static NamedObject MBT_port_name;

    private static NamedObject EOS_port_name;

    private static NamedObject USRCCLKO_port_name;

    private static NamedObject USRCCLKTS_port_name;

    private static NamedObject USRDONEO_port_name;

    private static NamedObject USRDONETS_port_name;

    private static NamedObject CFGCLK_port_name;

    private static NamedObject CFGMCLK_port_name;

    private static NamedObject DINSPI_port_name;

    private static NamedObject TCKSPI_port_name;

    private static NamedObject DATA_port_name;

    private static NamedObject DATAVALID_port_name;

    private static NamedObject LI_port_name;

    static {
        try {
            EdifEnvironment env = new EdifEnvironment("Xilinx");
            library = new EdifLibrary(env.getLibraryManager(), "Xilinx", false);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate Xilinx primitive library");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name");
        }
        _initNamedObjects();
        _initAND2();
        _initAND2B1();
        _initAND2B2();
        _initAND3();
        _initAND3B1();
        _initAND3B2();
        _initAND3B3();
        _initAND4();
        _initAND4B1();
        _initAND4B2();
        _initAND4B3();
        _initAND4B4();
        _initAND5();
        _initAND5B1();
        _initAND5B2();
        _initAND5B3();
        _initAND5B4();
        _initAND5B5();
        _initAND6();
        _initAND7();
        _initAND8();
        _initBSCAN_FPGACORE();
        _initBSCAN_SPARTAN2();
        _initBSCAN_SPARTAN3();
        _initBSCAN_VIRTEX();
        _initBSCAN_VIRTEX2();
        _initBSCAN_VIRTEX4();
        _initBSCAN_VIRTEX5();
        _initBUF();
        _initBUFCF();
        _initBUFE();
        _initBUFFOE();
        _initBUFG();
        _initBUFGCE();
        _initBUFGCE_1();
        _initBUFGCTRL();
        _initBUFGDLL();
        _initBUFGMUX();
        _initBUFGMUX_1();
        _initBUFGMUX_CTRL();
        _initBUFGMUX_VIRTEX4();
        _initBUFGP();
        _initBUFGSR();
        _initBUFGTS();
        _initBUFIO();
        _initBUFR();
        _initBUFT();
        _initCAPTURE_FPGACORE();
        _initCAPTURE_SPARTAN2();
        _initCAPTURE_SPARTAN3();
        _initCAPTURE_VIRTEX();
        _initCAPTURE_VIRTEX2();
        _initCAPTURE_VIRTEX4();
        _initCAPTURE_VIRTEX5();
        _initCARRY4();
        _initCFGLUT5();
        _initCLK_DIV10();
        _initCLK_DIV10R();
        _initCLK_DIV10RSD();
        _initCLK_DIV10SD();
        _initCLK_DIV12();
        _initCLK_DIV12R();
        _initCLK_DIV12RSD();
        _initCLK_DIV12SD();
        _initCLK_DIV14();
        _initCLK_DIV14R();
        _initCLK_DIV14RSD();
        _initCLK_DIV14SD();
        _initCLK_DIV16();
        _initCLK_DIV16R();
        _initCLK_DIV16RSD();
        _initCLK_DIV16SD();
        _initCLK_DIV2();
        _initCLK_DIV2R();
        _initCLK_DIV2RSD();
        _initCLK_DIV2SD();
        _initCLK_DIV4();
        _initCLK_DIV4R();
        _initCLK_DIV4RSD();
        _initCLK_DIV4SD();
        _initCLK_DIV6();
        _initCLK_DIV6R();
        _initCLK_DIV6RSD();
        _initCLK_DIV6SD();
        _initCLK_DIV8();
        _initCLK_DIV8R();
        _initCLK_DIV8RSD();
        _initCLK_DIV8SD();
        _initCLKDLL();
        _initCLKDLLE();
        _initCLKDLLHF();
        _initCONFIG();
        _initCRC32();
        _initCRC64();
        _initDCC_FPGACORE();
        _initDCIRESET();
        _initDCM();
        _initDCM_ADV();
        _initDCM_BASE();
        _initDCM_PS();
        _initDCM_SP();
        _initDSP48();
        _initDSP48E();
        _initEMAC();
        _initFD();
        _initFD_1();
        _initFDC();
        _initFDC_1();
        _initFDCE();
        _initFDCE_1();
        _initFDCP();
        _initFDCP_1();
        _initFDCPE();
        _initFDCPE_1();
        _initFDCPX1();
        _initFDD();
        _initFDDC();
        _initFDDCE();
        _initFDDCP();
        _initFDDCPE();
        _initFDDP();
        _initFDDPE();
        _initFDDRCPE();
        _initFDDRRSE();
        _initFDE();
        _initFDE_1();
        _initFDP();
        _initFDP_1();
        _initFDPE();
        _initFDPE_1();
        _initFDR();
        _initFDR_1();
        _initFDRE();
        _initFDRE_1();
        _initFDRS();
        _initFDRS_1();
        _initFDRSE();
        _initFDRSE_1();
        _initFDS();
        _initFDS_1();
        _initFDSE();
        _initFDSE_1();
        _initFIFO16();
        _initFIFO18();
        _initFIFO18_36();
        _initFIFO36();
        _initFIFO36_72();
        _initFIFO36_72_EXP();
        _initFIFO36_EXP();
        _initFMAP();
        _initFRAME_ECC_VIRTEX4();
        _initFRAME_ECC_VIRTEX5();
        _initFTC();
        _initFTCP();
        _initFTP();
        _initGND();
        _initGT();
        _initGT10();
        _initGT10_10GE_4();
        _initGT10_10GE_8();
        _initGT10_10GFC_4();
        _initGT10_10GFC_8();
        _initGT10_AURORA_1();
        _initGT10_AURORA_2();
        _initGT10_AURORA_4();
        _initGT10_AURORAX_4();
        _initGT10_AURORAX_8();
        _initGT10_CUSTOM();
        _initGT10_INFINIBAND_1();
        _initGT10_INFINIBAND_2();
        _initGT10_INFINIBAND_4();
        _initGT10_OC192_4();
        _initGT10_OC192_8();
        _initGT10_OC48_1();
        _initGT10_OC48_2();
        _initGT10_OC48_4();
        _initGT10_PCI_EXPRESS_1();
        _initGT10_PCI_EXPRESS_2();
        _initGT10_PCI_EXPRESS_4();
        _initGT10_XAUI_1();
        _initGT10_XAUI_2();
        _initGT10_XAUI_4();
        _initGT11();
        _initGT11_CUSTOM();
        _initGT11_DUAL();
        _initGT11CLK();
        _initGT11CLK_MGT();
        _initGT_AURORA_1();
        _initGT_AURORA_2();
        _initGT_AURORA_4();
        _initGT_CUSTOM();
        _initGT_ETHERNET_1();
        _initGT_ETHERNET_2();
        _initGT_ETHERNET_4();
        _initGT_FIBRE_CHAN_1();
        _initGT_FIBRE_CHAN_2();
        _initGT_FIBRE_CHAN_4();
        _initGT_INFINIBAND_1();
        _initGT_INFINIBAND_2();
        _initGT_INFINIBAND_4();
        _initGT_XAUI_1();
        _initGT_XAUI_2();
        _initGT_XAUI_4();
        _initIBUF();
        _initIBUF_AGP();
        _initIBUF_CTT();
        _initIBUF_GTL();
        _initIBUF_GTL_DCI();
        _initIBUF_GTLP();
        _initIBUF_GTLP_DCI();
        _initIBUF_HSTL_I();
        _initIBUF_HSTL_I_18();
        _initIBUF_HSTL_I_DCI();
        _initIBUF_HSTL_I_DCI_18();
        _initIBUF_HSTL_II();
        _initIBUF_HSTL_II_18();
        _initIBUF_HSTL_II_DCI();
        _initIBUF_HSTL_II_DCI_18();
        _initIBUF_HSTL_III();
        _initIBUF_HSTL_III_18();
        _initIBUF_HSTL_III_DCI();
        _initIBUF_HSTL_III_DCI_18();
        _initIBUF_HSTL_IV();
        _initIBUF_HSTL_IV_18();
        _initIBUF_HSTL_IV_DCI();
        _initIBUF_HSTL_IV_DCI_18();
        _initIBUF_LVCMOS12();
        _initIBUF_LVCMOS15();
        _initIBUF_LVCMOS18();
        _initIBUF_LVCMOS2();
        _initIBUF_LVCMOS25();
        _initIBUF_LVCMOS33();
        _initIBUF_LVDCI_15();
        _initIBUF_LVDCI_18();
        _initIBUF_LVDCI_25();
        _initIBUF_LVDCI_33();
        _initIBUF_LVDCI_DV2_15();
        _initIBUF_LVDCI_DV2_18();
        _initIBUF_LVDCI_DV2_25();
        _initIBUF_LVDCI_DV2_33();
        _initIBUF_LVDS();
        _initIBUF_LVPECL();
        _initIBUF_LVTTL();
        _initIBUF_PCI33_3();
        _initIBUF_PCI33_5();
        _initIBUF_PCI66_3();
        _initIBUF_PCIX();
        _initIBUF_PCIX66_3();
        _initIBUF_SSTL18_I();
        _initIBUF_SSTL18_I_DCI();
        _initIBUF_SSTL18_II();
        _initIBUF_SSTL18_II_DCI();
        _initIBUF_SSTL2_I();
        _initIBUF_SSTL2_I_DCI();
        _initIBUF_SSTL2_II();
        _initIBUF_SSTL2_II_DCI();
        _initIBUF_SSTL3_I();
        _initIBUF_SSTL3_I_DCI();
        _initIBUF_SSTL3_II();
        _initIBUF_SSTL3_II_DCI();
        _initIBUFDS();
        _initIBUFDS_BLVDS_25();
        _initIBUFDS_DIFF_OUT();
        _initIBUFDS_LDT_25();
        _initIBUFDS_LVDS_25();
        _initIBUFDS_LVDS_25_DCI();
        _initIBUFDS_LVDS_33();
        _initIBUFDS_LVDS_33_DCI();
        _initIBUFDS_LVDSEXT_25();
        _initIBUFDS_LVDSEXT_25_DCI();
        _initIBUFDS_LVDSEXT_33();
        _initIBUFDS_LVDSEXT_33_DCI();
        _initIBUFDS_LVPECL_25();
        _initIBUFDS_LVPECL_33();
        _initIBUFDS_ULVDS_25();
        _initIBUFG();
        _initIBUFG_AGP();
        _initIBUFG_CTT();
        _initIBUFG_GTL();
        _initIBUFG_GTL_DCI();
        _initIBUFG_GTLP();
        _initIBUFG_GTLP_DCI();
        _initIBUFG_HSTL_I();
        _initIBUFG_HSTL_I_18();
        _initIBUFG_HSTL_I_DCI();
        _initIBUFG_HSTL_I_DCI_18();
        _initIBUFG_HSTL_II();
        _initIBUFG_HSTL_II_18();
        _initIBUFG_HSTL_II_DCI();
        _initIBUFG_HSTL_II_DCI_18();
        _initIBUFG_HSTL_III();
        _initIBUFG_HSTL_III_18();
        _initIBUFG_HSTL_III_DCI();
        _initIBUFG_HSTL_III_DCI_18();
        _initIBUFG_HSTL_IV();
        _initIBUFG_HSTL_IV_18();
        _initIBUFG_HSTL_IV_DCI();
        _initIBUFG_HSTL_IV_DCI_18();
        _initIBUFG_LVCMOS12();
        _initIBUFG_LVCMOS15();
        _initIBUFG_LVCMOS18();
        _initIBUFG_LVCMOS2();
        _initIBUFG_LVCMOS25();
        _initIBUFG_LVCMOS33();
        _initIBUFG_LVDCI_15();
        _initIBUFG_LVDCI_18();
        _initIBUFG_LVDCI_25();
        _initIBUFG_LVDCI_33();
        _initIBUFG_LVDCI_DV2_15();
        _initIBUFG_LVDCI_DV2_18();
        _initIBUFG_LVDCI_DV2_25();
        _initIBUFG_LVDCI_DV2_33();
        _initIBUFG_LVDS();
        _initIBUFG_LVPECL();
        _initIBUFG_LVTTL();
        _initIBUFG_PCI33_3();
        _initIBUFG_PCI33_5();
        _initIBUFG_PCI66_3();
        _initIBUFG_PCIX();
        _initIBUFG_PCIX66_3();
        _initIBUFG_SSTL18_I();
        _initIBUFG_SSTL18_I_DCI();
        _initIBUFG_SSTL18_II();
        _initIBUFG_SSTL18_II_DCI();
        _initIBUFG_SSTL2_I();
        _initIBUFG_SSTL2_I_DCI();
        _initIBUFG_SSTL2_II();
        _initIBUFG_SSTL2_II_DCI();
        _initIBUFG_SSTL3_I();
        _initIBUFG_SSTL3_I_DCI();
        _initIBUFG_SSTL3_II();
        _initIBUFG_SSTL3_II_DCI();
        _initIBUFGDS();
        _initIBUFGDS_BLVDS_25();
        _initIBUFGDS_DIFF_OUT();
        _initIBUFGDS_LDT_25();
        _initIBUFGDS_LVDS_25();
        _initIBUFGDS_LVDS_25_DCI();
        _initIBUFGDS_LVDS_33();
        _initIBUFGDS_LVDS_33_DCI();
        _initIBUFGDS_LVDSEXT_25();
        _initIBUFGDS_LVDSEXT_25_DCI();
        _initIBUFGDS_LVDSEXT_33();
        _initIBUFGDS_LVDSEXT_33_DCI();
        _initIBUFGDS_LVPECL_25();
        _initIBUFGDS_LVPECL_33();
        _initIBUFGDS_ULVDS_25();
        _initICAP_VIRTEX2();
        _initICAP_VIRTEX4();
        _initICAP_VIRTEX5();
        _initIDDR();
        _initIDDR2();
        _initIDELAY();
        _initIDELAYCTRL();
        _initIFDDRCPE();
        _initIFDDRRSE();
        _initILD();
        _initINV();
        _initIOBUF();
        _initIOBUF_AGP();
        _initIOBUF_CTT();
        _initIOBUF_F_12();
        _initIOBUF_F_16();
        _initIOBUF_F_2();
        _initIOBUF_F_24();
        _initIOBUF_F_4();
        _initIOBUF_F_6();
        _initIOBUF_F_8();
        _initIOBUF_GTL();
        _initIOBUF_GTL_DCI();
        _initIOBUF_GTLP();
        _initIOBUF_GTLP_DCI();
        _initIOBUF_HSTL_I();
        _initIOBUF_HSTL_I_18();
        _initIOBUF_HSTL_II();
        _initIOBUF_HSTL_II_18();
        _initIOBUF_HSTL_II_DCI();
        _initIOBUF_HSTL_II_DCI_18();
        _initIOBUF_HSTL_III();
        _initIOBUF_HSTL_III_18();
        _initIOBUF_HSTL_IV();
        _initIOBUF_HSTL_IV_18();
        _initIOBUF_HSTL_IV_DCI();
        _initIOBUF_HSTL_IV_DCI_18();
        _initIOBUF_LVCMOS12();
        _initIOBUF_LVCMOS12_F_2();
        _initIOBUF_LVCMOS12_F_4();
        _initIOBUF_LVCMOS12_F_6();
        _initIOBUF_LVCMOS12_F_8();
        _initIOBUF_LVCMOS12_S_2();
        _initIOBUF_LVCMOS12_S_4();
        _initIOBUF_LVCMOS12_S_6();
        _initIOBUF_LVCMOS12_S_8();
        _initIOBUF_LVCMOS15();
        _initIOBUF_LVCMOS15_F_12();
        _initIOBUF_LVCMOS15_F_16();
        _initIOBUF_LVCMOS15_F_2();
        _initIOBUF_LVCMOS15_F_4();
        _initIOBUF_LVCMOS15_F_6();
        _initIOBUF_LVCMOS15_F_8();
        _initIOBUF_LVCMOS15_S_12();
        _initIOBUF_LVCMOS15_S_16();
        _initIOBUF_LVCMOS15_S_2();
        _initIOBUF_LVCMOS15_S_4();
        _initIOBUF_LVCMOS15_S_6();
        _initIOBUF_LVCMOS15_S_8();
        _initIOBUF_LVCMOS18();
        _initIOBUF_LVCMOS18_F_12();
        _initIOBUF_LVCMOS18_F_16();
        _initIOBUF_LVCMOS18_F_2();
        _initIOBUF_LVCMOS18_F_4();
        _initIOBUF_LVCMOS18_F_6();
        _initIOBUF_LVCMOS18_F_8();
        _initIOBUF_LVCMOS18_S_12();
        _initIOBUF_LVCMOS18_S_16();
        _initIOBUF_LVCMOS18_S_2();
        _initIOBUF_LVCMOS18_S_4();
        _initIOBUF_LVCMOS18_S_6();
        _initIOBUF_LVCMOS18_S_8();
        _initIOBUF_LVCMOS2();
        _initIOBUF_LVCMOS25();
        _initIOBUF_LVCMOS25_F_12();
        _initIOBUF_LVCMOS25_F_16();
        _initIOBUF_LVCMOS25_F_2();
        _initIOBUF_LVCMOS25_F_24();
        _initIOBUF_LVCMOS25_F_4();
        _initIOBUF_LVCMOS25_F_6();
        _initIOBUF_LVCMOS25_F_8();
        _initIOBUF_LVCMOS25_S_12();
        _initIOBUF_LVCMOS25_S_16();
        _initIOBUF_LVCMOS25_S_2();
        _initIOBUF_LVCMOS25_S_24();
        _initIOBUF_LVCMOS25_S_4();
        _initIOBUF_LVCMOS25_S_6();
        _initIOBUF_LVCMOS25_S_8();
        _initIOBUF_LVCMOS33();
        _initIOBUF_LVCMOS33_F_12();
        _initIOBUF_LVCMOS33_F_16();
        _initIOBUF_LVCMOS33_F_2();
        _initIOBUF_LVCMOS33_F_24();
        _initIOBUF_LVCMOS33_F_4();
        _initIOBUF_LVCMOS33_F_6();
        _initIOBUF_LVCMOS33_F_8();
        _initIOBUF_LVCMOS33_S_12();
        _initIOBUF_LVCMOS33_S_16();
        _initIOBUF_LVCMOS33_S_2();
        _initIOBUF_LVCMOS33_S_24();
        _initIOBUF_LVCMOS33_S_4();
        _initIOBUF_LVCMOS33_S_6();
        _initIOBUF_LVCMOS33_S_8();
        _initIOBUF_LVDCI_15();
        _initIOBUF_LVDCI_18();
        _initIOBUF_LVDCI_25();
        _initIOBUF_LVDCI_33();
        _initIOBUF_LVDCI_DV2_15();
        _initIOBUF_LVDCI_DV2_18();
        _initIOBUF_LVDCI_DV2_25();
        _initIOBUF_LVDCI_DV2_33();
        _initIOBUF_LVDS();
        _initIOBUF_LVPECL();
        _initIOBUF_LVTTL();
        _initIOBUF_LVTTL_F_12();
        _initIOBUF_LVTTL_F_16();
        _initIOBUF_LVTTL_F_2();
        _initIOBUF_LVTTL_F_24();
        _initIOBUF_LVTTL_F_4();
        _initIOBUF_LVTTL_F_6();
        _initIOBUF_LVTTL_F_8();
        _initIOBUF_LVTTL_S_12();
        _initIOBUF_LVTTL_S_16();
        _initIOBUF_LVTTL_S_2();
        _initIOBUF_LVTTL_S_24();
        _initIOBUF_LVTTL_S_4();
        _initIOBUF_LVTTL_S_6();
        _initIOBUF_LVTTL_S_8();
        _initIOBUF_PCI33_3();
        _initIOBUF_PCI33_5();
        _initIOBUF_PCI66_3();
        _initIOBUF_PCIX();
        _initIOBUF_PCIX66_3();
        _initIOBUF_S_12();
        _initIOBUF_S_16();
        _initIOBUF_S_2();
        _initIOBUF_S_24();
        _initIOBUF_S_4();
        _initIOBUF_S_6();
        _initIOBUF_S_8();
        _initIOBUF_SSTL18_I();
        _initIOBUF_SSTL18_II();
        _initIOBUF_SSTL18_II_DCI();
        _initIOBUF_SSTL2_I();
        _initIOBUF_SSTL2_II();
        _initIOBUF_SSTL2_II_DCI();
        _initIOBUF_SSTL3_I();
        _initIOBUF_SSTL3_II();
        _initIOBUF_SSTL3_II_DCI();
        _initIOBUFDS();
        _initIOBUFDS_BLVDS_25();
        _initIOBUFE();
        _initIOBUFE_F();
        _initIOBUFE_S();
        _initIODELAY();
        _initISERDES();
        _initISERDES_NODELAY();
        _initJTAGPPC();
        _initKEEP();
        _initKEEPER();
        _initKEY_CLEAR();
        _initLD();
        _initLD_1();
        _initLDC();
        _initLDC_1();
        _initLDCE();
        _initLDCE_1();
        _initLDCP();
        _initLDCP_1();
        _initLDCPE();
        _initLDCPE_1();
        _initLDE();
        _initLDE_1();
        _initLDG();
        _initLDP();
        _initLDP_1();
        _initLDPE();
        _initLDPE_1();
        _initLUT1();
        _initLUT1_D();
        _initLUT1_L();
        _initLUT2();
        _initLUT2_D();
        _initLUT2_L();
        _initLUT3();
        _initLUT3_D();
        _initLUT3_L();
        _initLUT4();
        _initLUT4_D();
        _initLUT4_L();
        _initLUT5();
        _initLUT5_D();
        _initLUT5_L();
        _initLUT6();
        _initLUT6_D();
        _initLUT6_L();
        _initMERGE();
        _initMIN_OFF();
        _initMULT18X18();
        _initMULT18X18S();
        _initMULT18X18SIO();
        _initMULT_AND();
        _initMUXCY();
        _initMUXCY_D();
        _initMUXCY_L();
        _initMUXF5();
        _initMUXF5_D();
        _initMUXF5_L();
        _initMUXF6();
        _initMUXF6_D();
        _initMUXF6_L();
        _initMUXF7();
        _initMUXF7_D();
        _initMUXF7_L();
        _initMUXF8();
        _initMUXF8_D();
        _initMUXF8_L();
        _initNAND2();
        _initNAND2B1();
        _initNAND2B2();
        _initNAND3();
        _initNAND3B1();
        _initNAND3B2();
        _initNAND3B3();
        _initNAND4();
        _initNAND4B1();
        _initNAND4B2();
        _initNAND4B3();
        _initNAND4B4();
        _initNAND5();
        _initNAND5B1();
        _initNAND5B2();
        _initNAND5B3();
        _initNAND5B4();
        _initNAND5B5();
        _initNOR2();
        _initNOR2B1();
        _initNOR2B2();
        _initNOR3();
        _initNOR3B1();
        _initNOR3B2();
        _initNOR3B3();
        _initNOR4();
        _initNOR4B1();
        _initNOR4B2();
        _initNOR4B3();
        _initNOR4B4();
        _initNOR5();
        _initNOR5B1();
        _initNOR5B2();
        _initNOR5B3();
        _initNOR5B4();
        _initNOR5B5();
        _initOBUF();
        _initOBUF_AGP();
        _initOBUF_CTT();
        _initOBUF_F_12();
        _initOBUF_F_16();
        _initOBUF_F_2();
        _initOBUF_F_24();
        _initOBUF_F_4();
        _initOBUF_F_6();
        _initOBUF_F_8();
        _initOBUF_GTL();
        _initOBUF_GTL_DCI();
        _initOBUF_GTLP();
        _initOBUF_GTLP_DCI();
        _initOBUF_HSTL_I();
        _initOBUF_HSTL_I_18();
        _initOBUF_HSTL_I_DCI();
        _initOBUF_HSTL_I_DCI_18();
        _initOBUF_HSTL_II();
        _initOBUF_HSTL_II_18();
        _initOBUF_HSTL_II_DCI();
        _initOBUF_HSTL_II_DCI_18();
        _initOBUF_HSTL_III();
        _initOBUF_HSTL_III_18();
        _initOBUF_HSTL_III_DCI();
        _initOBUF_HSTL_III_DCI_18();
        _initOBUF_HSTL_IV();
        _initOBUF_HSTL_IV_18();
        _initOBUF_HSTL_IV_DCI();
        _initOBUF_HSTL_IV_DCI_18();
        _initOBUF_LVCMOS12();
        _initOBUF_LVCMOS12_F_2();
        _initOBUF_LVCMOS12_F_4();
        _initOBUF_LVCMOS12_F_6();
        _initOBUF_LVCMOS12_F_8();
        _initOBUF_LVCMOS12_S_2();
        _initOBUF_LVCMOS12_S_4();
        _initOBUF_LVCMOS12_S_6();
        _initOBUF_LVCMOS12_S_8();
        _initOBUF_LVCMOS15();
        _initOBUF_LVCMOS15_F_12();
        _initOBUF_LVCMOS15_F_16();
        _initOBUF_LVCMOS15_F_2();
        _initOBUF_LVCMOS15_F_4();
        _initOBUF_LVCMOS15_F_6();
        _initOBUF_LVCMOS15_F_8();
        _initOBUF_LVCMOS15_S_12();
        _initOBUF_LVCMOS15_S_16();
        _initOBUF_LVCMOS15_S_2();
        _initOBUF_LVCMOS15_S_4();
        _initOBUF_LVCMOS15_S_6();
        _initOBUF_LVCMOS15_S_8();
        _initOBUF_LVCMOS18();
        _initOBUF_LVCMOS18_F_12();
        _initOBUF_LVCMOS18_F_16();
        _initOBUF_LVCMOS18_F_2();
        _initOBUF_LVCMOS18_F_4();
        _initOBUF_LVCMOS18_F_6();
        _initOBUF_LVCMOS18_F_8();
        _initOBUF_LVCMOS18_S_12();
        _initOBUF_LVCMOS18_S_16();
        _initOBUF_LVCMOS18_S_2();
        _initOBUF_LVCMOS18_S_4();
        _initOBUF_LVCMOS18_S_6();
        _initOBUF_LVCMOS18_S_8();
        _initOBUF_LVCMOS2();
        _initOBUF_LVCMOS25();
        _initOBUF_LVCMOS25_F_12();
        _initOBUF_LVCMOS25_F_16();
        _initOBUF_LVCMOS25_F_2();
        _initOBUF_LVCMOS25_F_24();
        _initOBUF_LVCMOS25_F_4();
        _initOBUF_LVCMOS25_F_6();
        _initOBUF_LVCMOS25_F_8();
        _initOBUF_LVCMOS25_S_12();
        _initOBUF_LVCMOS25_S_16();
        _initOBUF_LVCMOS25_S_2();
        _initOBUF_LVCMOS25_S_24();
        _initOBUF_LVCMOS25_S_4();
        _initOBUF_LVCMOS25_S_6();
        _initOBUF_LVCMOS25_S_8();
        _initOBUF_LVCMOS33();
        _initOBUF_LVCMOS33_F_12();
        _initOBUF_LVCMOS33_F_16();
        _initOBUF_LVCMOS33_F_2();
        _initOBUF_LVCMOS33_F_24();
        _initOBUF_LVCMOS33_F_4();
        _initOBUF_LVCMOS33_F_6();
        _initOBUF_LVCMOS33_F_8();
        _initOBUF_LVCMOS33_S_12();
        _initOBUF_LVCMOS33_S_16();
        _initOBUF_LVCMOS33_S_2();
        _initOBUF_LVCMOS33_S_24();
        _initOBUF_LVCMOS33_S_4();
        _initOBUF_LVCMOS33_S_6();
        _initOBUF_LVCMOS33_S_8();
        _initOBUF_LVDCI_15();
        _initOBUF_LVDCI_18();
        _initOBUF_LVDCI_25();
        _initOBUF_LVDCI_33();
        _initOBUF_LVDCI_DV2_15();
        _initOBUF_LVDCI_DV2_18();
        _initOBUF_LVDCI_DV2_25();
        _initOBUF_LVDCI_DV2_33();
        _initOBUF_LVDS();
        _initOBUF_LVPECL();
        _initOBUF_LVTTL();
        _initOBUF_LVTTL_F_12();
        _initOBUF_LVTTL_F_16();
        _initOBUF_LVTTL_F_2();
        _initOBUF_LVTTL_F_24();
        _initOBUF_LVTTL_F_4();
        _initOBUF_LVTTL_F_6();
        _initOBUF_LVTTL_F_8();
        _initOBUF_LVTTL_S_12();
        _initOBUF_LVTTL_S_16();
        _initOBUF_LVTTL_S_2();
        _initOBUF_LVTTL_S_24();
        _initOBUF_LVTTL_S_4();
        _initOBUF_LVTTL_S_6();
        _initOBUF_LVTTL_S_8();
        _initOBUF_PCI33_3();
        _initOBUF_PCI33_5();
        _initOBUF_PCI66_3();
        _initOBUF_PCIX();
        _initOBUF_PCIX66_3();
        _initOBUF_S_12();
        _initOBUF_S_16();
        _initOBUF_S_2();
        _initOBUF_S_24();
        _initOBUF_S_4();
        _initOBUF_S_6();
        _initOBUF_S_8();
        _initOBUF_SSTL18_I();
        _initOBUF_SSTL18_I_DCI();
        _initOBUF_SSTL18_II();
        _initOBUF_SSTL18_II_DCI();
        _initOBUF_SSTL2_I();
        _initOBUF_SSTL2_I_DCI();
        _initOBUF_SSTL2_II();
        _initOBUF_SSTL2_II_DCI();
        _initOBUF_SSTL3_I();
        _initOBUF_SSTL3_I_DCI();
        _initOBUF_SSTL3_II();
        _initOBUF_SSTL3_II_DCI();
        _initOBUFDS();
        _initOBUFDS_BLVDS_25();
        _initOBUFDS_LDT_25();
        _initOBUFDS_LVDS_25();
        _initOBUFDS_LVDS_33();
        _initOBUFDS_LVDSEXT_25();
        _initOBUFDS_LVDSEXT_33();
        _initOBUFDS_LVPECL_25();
        _initOBUFDS_LVPECL_33();
        _initOBUFDS_ULVDS_25();
        _initOBUFE();
        _initOBUFT();
        _initOBUFT_AGP();
        _initOBUFT_CTT();
        _initOBUFT_F_12();
        _initOBUFT_F_16();
        _initOBUFT_F_2();
        _initOBUFT_F_24();
        _initOBUFT_F_4();
        _initOBUFT_F_6();
        _initOBUFT_F_8();
        _initOBUFT_GTL();
        _initOBUFT_GTL_DCI();
        _initOBUFT_GTLP();
        _initOBUFT_GTLP_DCI();
        _initOBUFT_HSTL_I();
        _initOBUFT_HSTL_I_18();
        _initOBUFT_HSTL_I_DCI();
        _initOBUFT_HSTL_I_DCI_18();
        _initOBUFT_HSTL_II();
        _initOBUFT_HSTL_II_18();
        _initOBUFT_HSTL_II_DCI();
        _initOBUFT_HSTL_II_DCI_18();
        _initOBUFT_HSTL_III();
        _initOBUFT_HSTL_III_18();
        _initOBUFT_HSTL_III_DCI();
        _initOBUFT_HSTL_III_DCI_18();
        _initOBUFT_HSTL_IV();
        _initOBUFT_HSTL_IV_18();
        _initOBUFT_HSTL_IV_DCI();
        _initOBUFT_HSTL_IV_DCI_18();
        _initOBUFT_LVCMOS12();
        _initOBUFT_LVCMOS12_F_2();
        _initOBUFT_LVCMOS12_F_4();
        _initOBUFT_LVCMOS12_F_6();
        _initOBUFT_LVCMOS12_F_8();
        _initOBUFT_LVCMOS12_S_2();
        _initOBUFT_LVCMOS12_S_4();
        _initOBUFT_LVCMOS12_S_6();
        _initOBUFT_LVCMOS12_S_8();
        _initOBUFT_LVCMOS15();
        _initOBUFT_LVCMOS15_F_12();
        _initOBUFT_LVCMOS15_F_16();
        _initOBUFT_LVCMOS15_F_2();
        _initOBUFT_LVCMOS15_F_4();
        _initOBUFT_LVCMOS15_F_6();
        _initOBUFT_LVCMOS15_F_8();
        _initOBUFT_LVCMOS15_S_12();
        _initOBUFT_LVCMOS15_S_16();
        _initOBUFT_LVCMOS15_S_2();
        _initOBUFT_LVCMOS15_S_4();
        _initOBUFT_LVCMOS15_S_6();
        _initOBUFT_LVCMOS15_S_8();
        _initOBUFT_LVCMOS18();
        _initOBUFT_LVCMOS18_F_12();
        _initOBUFT_LVCMOS18_F_16();
        _initOBUFT_LVCMOS18_F_2();
        _initOBUFT_LVCMOS18_F_4();
        _initOBUFT_LVCMOS18_F_6();
        _initOBUFT_LVCMOS18_F_8();
        _initOBUFT_LVCMOS18_S_12();
        _initOBUFT_LVCMOS18_S_16();
        _initOBUFT_LVCMOS18_S_2();
        _initOBUFT_LVCMOS18_S_4();
        _initOBUFT_LVCMOS18_S_6();
        _initOBUFT_LVCMOS18_S_8();
        _initOBUFT_LVCMOS2();
        _initOBUFT_LVCMOS25();
        _initOBUFT_LVCMOS25_F_12();
        _initOBUFT_LVCMOS25_F_16();
        _initOBUFT_LVCMOS25_F_2();
        _initOBUFT_LVCMOS25_F_24();
        _initOBUFT_LVCMOS25_F_4();
        _initOBUFT_LVCMOS25_F_6();
        _initOBUFT_LVCMOS25_F_8();
        _initOBUFT_LVCMOS25_S_12();
        _initOBUFT_LVCMOS25_S_16();
        _initOBUFT_LVCMOS25_S_2();
        _initOBUFT_LVCMOS25_S_24();
        _initOBUFT_LVCMOS25_S_4();
        _initOBUFT_LVCMOS25_S_6();
        _initOBUFT_LVCMOS25_S_8();
        _initOBUFT_LVCMOS33();
        _initOBUFT_LVCMOS33_F_12();
        _initOBUFT_LVCMOS33_F_16();
        _initOBUFT_LVCMOS33_F_2();
        _initOBUFT_LVCMOS33_F_24();
        _initOBUFT_LVCMOS33_F_4();
        _initOBUFT_LVCMOS33_F_6();
        _initOBUFT_LVCMOS33_F_8();
        _initOBUFT_LVCMOS33_S_12();
        _initOBUFT_LVCMOS33_S_16();
        _initOBUFT_LVCMOS33_S_2();
        _initOBUFT_LVCMOS33_S_24();
        _initOBUFT_LVCMOS33_S_4();
        _initOBUFT_LVCMOS33_S_6();
        _initOBUFT_LVCMOS33_S_8();
        _initOBUFT_LVDCI_15();
        _initOBUFT_LVDCI_18();
        _initOBUFT_LVDCI_25();
        _initOBUFT_LVDCI_33();
        _initOBUFT_LVDCI_DV2_15();
        _initOBUFT_LVDCI_DV2_18();
        _initOBUFT_LVDCI_DV2_25();
        _initOBUFT_LVDCI_DV2_33();
        _initOBUFT_LVDS();
        _initOBUFT_LVPECL();
        _initOBUFT_LVTTL();
        _initOBUFT_LVTTL_F_12();
        _initOBUFT_LVTTL_F_16();
        _initOBUFT_LVTTL_F_2();
        _initOBUFT_LVTTL_F_24();
        _initOBUFT_LVTTL_F_4();
        _initOBUFT_LVTTL_F_6();
        _initOBUFT_LVTTL_F_8();
        _initOBUFT_LVTTL_S_12();
        _initOBUFT_LVTTL_S_16();
        _initOBUFT_LVTTL_S_2();
        _initOBUFT_LVTTL_S_24();
        _initOBUFT_LVTTL_S_4();
        _initOBUFT_LVTTL_S_6();
        _initOBUFT_LVTTL_S_8();
        _initOBUFT_PCI33_3();
        _initOBUFT_PCI33_5();
        _initOBUFT_PCI66_3();
        _initOBUFT_PCIX();
        _initOBUFT_PCIX66_3();
        _initOBUFT_S_12();
        _initOBUFT_S_16();
        _initOBUFT_S_2();
        _initOBUFT_S_24();
        _initOBUFT_S_4();
        _initOBUFT_S_6();
        _initOBUFT_S_8();
        _initOBUFT_SSTL18_I();
        _initOBUFT_SSTL18_I_DCI();
        _initOBUFT_SSTL18_II();
        _initOBUFT_SSTL18_II_DCI();
        _initOBUFT_SSTL2_I();
        _initOBUFT_SSTL2_I_DCI();
        _initOBUFT_SSTL2_II();
        _initOBUFT_SSTL2_II_DCI();
        _initOBUFT_SSTL3_I();
        _initOBUFT_SSTL3_I_DCI();
        _initOBUFT_SSTL3_II();
        _initOBUFT_SSTL3_II_DCI();
        _initOBUFTDS();
        _initOBUFTDS_BLVDS_25();
        _initOBUFTDS_LDT_25();
        _initOBUFTDS_LVDS_25();
        _initOBUFTDS_LVDS_33();
        _initOBUFTDS_LVDSEXT_25();
        _initOBUFTDS_LVDSEXT_33();
        _initOBUFTDS_LVPECL_25();
        _initOBUFTDS_LVPECL_33();
        _initOBUFTDS_ULVDS_25();
        _initODDR();
        _initODDR2();
        _initOFDDRCPE();
        _initOFDDRRSE();
        _initOFDDRTCPE();
        _initOFDDRTRSE();
        _initOPT_OFF();
        _initOPT_UIM();
        _initOR2();
        _initOR2B1();
        _initOR2B2();
        _initOR3();
        _initOR3B1();
        _initOR3B2();
        _initOR3B3();
        _initOR4();
        _initOR4B1();
        _initOR4B2();
        _initOR4B3();
        _initOR4B4();
        _initOR5();
        _initOR5B1();
        _initOR5B2();
        _initOR5B3();
        _initOR5B4();
        _initOR5B5();
        _initOR6();
        _initOR7();
        _initOR8();
        _initORCY();
        _initOSERDES();
        _initPLL_ADV();
        _initPLL_BASE();
        _initPMCD();
        _initPPC405();
        _initPPC405_ADV();
        _initPULLDOWN();
        _initPULLUP();
        _initRAM128X1D();
        _initRAM128X1S();
        _initRAM128X1S_1();
        _initRAM16X1D();
        _initRAM16X1D_1();
        _initRAM16X1S();
        _initRAM16X1S_1();
        _initRAM16X2S();
        _initRAM16X4S();
        _initRAM16X8S();
        _initRAM256X1S();
        _initRAM32M();
        _initRAM32X1D();
        _initRAM32X1D_1();
        _initRAM32X1S();
        _initRAM32X1S_1();
        _initRAM32X2S();
        _initRAM32X4S();
        _initRAM32X8S();
        _initRAM64M();
        _initRAM64X1D();
        _initRAM64X1D_1();
        _initRAM64X1S();
        _initRAM64X1S_1();
        _initRAM64X2S();
        _initRAMB16();
        _initRAMB16_S1();
        _initRAMB16_S18();
        _initRAMB16_S18_S18();
        _initRAMB16_S18_S36();
        _initRAMB16_S1_S1();
        _initRAMB16_S1_S18();
        _initRAMB16_S1_S2();
        _initRAMB16_S1_S36();
        _initRAMB16_S1_S4();
        _initRAMB16_S1_S9();
        _initRAMB16_S2();
        _initRAMB16_S2_S18();
        _initRAMB16_S2_S2();
        _initRAMB16_S2_S36();
        _initRAMB16_S2_S4();
        _initRAMB16_S2_S9();
        _initRAMB16_S36();
        _initRAMB16_S36_S36();
        _initRAMB16_S4();
        _initRAMB16_S4_S18();
        _initRAMB16_S4_S36();
        _initRAMB16_S4_S4();
        _initRAMB16_S4_S9();
        _initRAMB16_S9();
        _initRAMB16_S9_S18();
        _initRAMB16_S9_S36();
        _initRAMB16_S9_S9();
        _initRAMB18();
        _initRAMB18SDP();
        _initRAMB32_S64_ECC();
        _initRAMB36();
        _initRAMB36_EXP();
        _initRAMB36SDP();
        _initRAMB36SDP_EXP();
        _initRAMB4_S1();
        _initRAMB4_S16();
        _initRAMB4_S16_S16();
        _initRAMB4_S1_S1();
        _initRAMB4_S1_S16();
        _initRAMB4_S1_S2();
        _initRAMB4_S1_S4();
        _initRAMB4_S1_S8();
        _initRAMB4_S2();
        _initRAMB4_S2_S16();
        _initRAMB4_S2_S2();
        _initRAMB4_S2_S4();
        _initRAMB4_S2_S8();
        _initRAMB4_S4();
        _initRAMB4_S4_S16();
        _initRAMB4_S4_S4();
        _initRAMB4_S4_S8();
        _initRAMB4_S8();
        _initRAMB4_S8_S16();
        _initRAMB4_S8_S8();
        _initROC();
        _initROCBUF();
        _initROM128X1();
        _initROM16X1();
        _initROM256X1();
        _initROM32X1();
        _initROM64X1();
        _initSRL16();
        _initSRL16_1();
        _initSRL16E();
        _initSRL16E_1();
        _initSRLC16();
        _initSRLC16_1();
        _initSRLC16E();
        _initSRLC16E_1();
        _initSRLC32E();
        _initSTARTBUF_FPGACORE();
        _initSTARTBUF_SPARTAN2();
        _initSTARTBUF_SPARTAN3();
        _initSTARTBUF_VIRTEX();
        _initSTARTBUF_VIRTEX2();
        _initSTARTBUF_VIRTEX4();
        _initSTARTUP_FPGACORE();
        _initSTARTUP_SPARTAN2();
        _initSTARTUP_SPARTAN3();
        _initSTARTUP_SPARTAN3E();
        _initSTARTUP_VIRTEX();
        _initSTARTUP_VIRTEX2();
        _initSTARTUP_VIRTEX4();
        _initSTARTUP_VIRTEX5();
        _initTBLOCK();
        _initTIMEGRP();
        _initTIMESPEC();
        _initTOC();
        _initTOCBUF();
        _initUSR_ACCESS_VIRTEX4();
        _initUSR_ACCESS_VIRTEX5();
        _initVCC();
        _initWIREAND();
        _initXNOR2();
        _initXNOR3();
        _initXNOR4();
        _initXNOR5();
        _initXOR2();
        _initXOR3();
        _initXOR4();
        _initXOR5();
        _initXORCY();
        _initXORCY_D();
        _initXORCY_L();
    }

    private static void _initNamedObjects() {
        try {
            O_port_name = new NamedObject("O");
            I0_port_name = new NamedObject("I0");
            I1_port_name = new NamedObject("I1");
            I2_port_name = new NamedObject("I2");
            I3_port_name = new NamedObject("I3");
            I4_port_name = new NamedObject("I4");
            I5_port_name = new NamedObject("I5");
            I6_port_name = new NamedObject("I6");
            I7_port_name = new NamedObject("I7");
            CAPTURE_port_name = new NamedObject("CAPTURE");
            DRCK1_port_name = new NamedObject("DRCK1");
            DRCK2_port_name = new NamedObject("DRCK2");
            RESET_port_name = new NamedObject("RESET");
            SEL1_port_name = new NamedObject("SEL1");
            SEL2_port_name = new NamedObject("SEL2");
            SHIFT_port_name = new NamedObject("SHIFT");
            TDI_port_name = new NamedObject("TDI");
            UPDATE_port_name = new NamedObject("UPDATE");
            TDO1_port_name = new NamedObject("TDO1");
            TDO2_port_name = new NamedObject("TDO2");
            DRCK_port_name = new NamedObject("DRCK");
            SEL_port_name = new NamedObject("SEL");
            TDO_port_name = new NamedObject("TDO");
            I_port_name = new NamedObject("I");
            E_port_name = new NamedObject("E");
            CE_port_name = new NamedObject("CE");
            CE0_port_name = new NamedObject("CE0");
            CE1_port_name = new NamedObject("CE1");
            IGNORE0_port_name = new NamedObject("IGNORE0");
            IGNORE1_port_name = new NamedObject("IGNORE1");
            S0_port_name = new NamedObject("S0");
            S1_port_name = new NamedObject("S1");
            S_port_name = new NamedObject("S");
            CLR_port_name = new NamedObject("CLR");
            T_port_name = new NamedObject("T");
            CAP_port_name = new NamedObject("CAP");
            CLK_port_name = new NamedObject("CLK");
            CO_port_name = new NamedObject("CO");
            CI_port_name = new NamedObject("CI");
            CYINIT_port_name = new NamedObject("CYINIT");
            DI_port_name = new NamedObject("DI");
            CDO_port_name = new NamedObject("CDO");
            O5_port_name = new NamedObject("O5");
            O6_port_name = new NamedObject("O6");
            CDI_port_name = new NamedObject("CDI");
            CLKDV_port_name = new NamedObject("CLKDV");
            CLKIN_port_name = new NamedObject("CLKIN");
            CDRST_port_name = new NamedObject("CDRST");
            CLK0_port_name = new NamedObject("CLK0");
            CLK180_port_name = new NamedObject("CLK180");
            CLK270_port_name = new NamedObject("CLK270");
            CLK2X_port_name = new NamedObject("CLK2X");
            CLK90_port_name = new NamedObject("CLK90");
            LOCKED_port_name = new NamedObject("LOCKED");
            CLKFB_port_name = new NamedObject("CLKFB");
            RST_port_name = new NamedObject("RST");
            CLK2X180_port_name = new NamedObject("CLK2X180");
            CRCOUT_port_name = new NamedObject("CRCOUT");
            CRCCLK_port_name = new NamedObject("CRCCLK");
            CRCDATAVALID_port_name = new NamedObject("CRCDATAVALID");
            CRCDATAWIDTH_port_name = new NamedObject("CRCDATAWIDTH");
            CRCIN_port_name = new NamedObject("CRCIN");
            CRCRESET_port_name = new NamedObject("CRCRESET");
            BCLK_port_name = new NamedObject("BCLK");
            DONEOUT_port_name = new NamedObject("DONEOUT");
            DOUT0_port_name = new NamedObject("DOUT0");
            DOUT1_port_name = new NamedObject("DOUT1");
            DOUT2_port_name = new NamedObject("DOUT2");
            DOUT3_port_name = new NamedObject("DOUT3");
            DOUT4_port_name = new NamedObject("DOUT4");
            DOUT5_port_name = new NamedObject("DOUT5");
            DOUT6_port_name = new NamedObject("DOUT6");
            DOUT7_port_name = new NamedObject("DOUT7");
            GSR_port_name = new NamedObject("GSR");
            GTS_port_name = new NamedObject("GTS");
            GWE_port_name = new NamedObject("GWE");
            INITBOUT_port_name = new NamedObject("INITBOUT");
            CCLK_port_name = new NamedObject("CCLK");
            CSB_port_name = new NamedObject("CSB");
            DIN0_port_name = new NamedObject("DIN0");
            DIN1_port_name = new NamedObject("DIN1");
            DIN2_port_name = new NamedObject("DIN2");
            DIN3_port_name = new NamedObject("DIN3");
            DIN4_port_name = new NamedObject("DIN4");
            DIN5_port_name = new NamedObject("DIN5");
            DIN6_port_name = new NamedObject("DIN6");
            DIN7_port_name = new NamedObject("DIN7");
            DONEIN_port_name = new NamedObject("DONEIN");
            LBISTISOLATEB_port_name = new NamedObject("LBISTISOLATEB");
            M0_port_name = new NamedObject("M0");
            M1_port_name = new NamedObject("M1");
            M2_port_name = new NamedObject("M2");
            PROGB_port_name = new NamedObject("PROGB");
            TCK_port_name = new NamedObject("TCK");
            TMS_port_name = new NamedObject("TMS");
            WRITEB_port_name = new NamedObject("WRITEB");
            CLKFX_port_name = new NamedObject("CLKFX");
            CLKFX180_port_name = new NamedObject("CLKFX180");
            PSDONE_port_name = new NamedObject("PSDONE");
            STATUS_port_name = new NamedObject("STATUS");
            DSSEN_port_name = new NamedObject("DSSEN");
            PSCLK_port_name = new NamedObject("PSCLK");
            PSEN_port_name = new NamedObject("PSEN");
            PSINCDEC_port_name = new NamedObject("PSINCDEC");
            DO_port_name = new NamedObject("DO");
            DRDY_port_name = new NamedObject("DRDY");
            DADDR_port_name = new NamedObject("DADDR");
            DCLK_port_name = new NamedObject("DCLK");
            DEN_port_name = new NamedObject("DEN");
            DWE_port_name = new NamedObject("DWE");
            BCOUT_port_name = new NamedObject("BCOUT");
            P_port_name = new NamedObject("P");
            PCOUT_port_name = new NamedObject("PCOUT");
            A_port_name = new NamedObject("A");
            B_port_name = new NamedObject("B");
            BCIN_port_name = new NamedObject("BCIN");
            C_port_name = new NamedObject("C");
            CARRYIN_port_name = new NamedObject("CARRYIN");
            CARRYINSEL_port_name = new NamedObject("CARRYINSEL");
            CEA_port_name = new NamedObject("CEA");
            CEB_port_name = new NamedObject("CEB");
            CEC_port_name = new NamedObject("CEC");
            CECARRYIN_port_name = new NamedObject("CECARRYIN");
            CECINSUB_port_name = new NamedObject("CECINSUB");
            CECTRL_port_name = new NamedObject("CECTRL");
            CEM_port_name = new NamedObject("CEM");
            CEP_port_name = new NamedObject("CEP");
            OPMODE_port_name = new NamedObject("OPMODE");
            PCIN_port_name = new NamedObject("PCIN");
            RSTA_port_name = new NamedObject("RSTA");
            RSTB_port_name = new NamedObject("RSTB");
            RSTC_port_name = new NamedObject("RSTC");
            RSTCARRYIN_port_name = new NamedObject("RSTCARRYIN");
            RSTCTRL_port_name = new NamedObject("RSTCTRL");
            RSTM_port_name = new NamedObject("RSTM");
            RSTP_port_name = new NamedObject("RSTP");
            SUBTRACT_port_name = new NamedObject("SUBTRACT");
            ACOUT_port_name = new NamedObject("ACOUT");
            CARRYCASCOUT_port_name = new NamedObject("CARRYCASCOUT");
            CARRYOUT_port_name = new NamedObject("CARRYOUT");
            MULTSIGNOUT_port_name = new NamedObject("MULTSIGNOUT");
            OVERFLOW_port_name = new NamedObject("OVERFLOW");
            PATTERNBDETECT_port_name = new NamedObject("PATTERNBDETECT");
            PATTERNDETECT_port_name = new NamedObject("PATTERNDETECT");
            UNDERFLOW_port_name = new NamedObject("UNDERFLOW");
            ACIN_port_name = new NamedObject("ACIN");
            ALUMODE_port_name = new NamedObject("ALUMODE");
            CARRYCASCIN_port_name = new NamedObject("CARRYCASCIN");
            CEA1_port_name = new NamedObject("CEA1");
            CEA2_port_name = new NamedObject("CEA2");
            CEALUMODE_port_name = new NamedObject("CEALUMODE");
            CEB1_port_name = new NamedObject("CEB1");
            CEB2_port_name = new NamedObject("CEB2");
            CEMULTCARRYIN_port_name = new NamedObject("CEMULTCARRYIN");
            MULTSIGNIN_port_name = new NamedObject("MULTSIGNIN");
            RSTALLCARRYIN_port_name = new NamedObject("RSTALLCARRYIN");
            RSTALUMODE_port_name = new NamedObject("RSTALUMODE");
            DCRHOSTDONEIR_port_name = new NamedObject("DCRHOSTDONEIR");
            EMAC0CLIENTANINTERRUPT_port_name = new NamedObject("EMAC0CLIENTANINTERRUPT");
            EMAC0CLIENTRXBADFRAME_port_name = new NamedObject("EMAC0CLIENTRXBADFRAME");
            EMAC0CLIENTRXCLIENTCLKOUT_port_name = new NamedObject("EMAC0CLIENTRXCLIENTCLKOUT");
            EMAC0CLIENTRXD_port_name = new NamedObject("EMAC0CLIENTRXD");
            EMAC0CLIENTRXDVLD_port_name = new NamedObject("EMAC0CLIENTRXDVLD");
            EMAC0CLIENTRXDVLDMSW_port_name = new NamedObject("EMAC0CLIENTRXDVLDMSW");
            EMAC0CLIENTRXDVREG6_port_name = new NamedObject("EMAC0CLIENTRXDVREG6");
            EMAC0CLIENTRXFRAMEDROP_port_name = new NamedObject("EMAC0CLIENTRXFRAMEDROP");
            EMAC0CLIENTRXGOODFRAME_port_name = new NamedObject("EMAC0CLIENTRXGOODFRAME");
            EMAC0CLIENTRXSTATS_port_name = new NamedObject("EMAC0CLIENTRXSTATS");
            EMAC0CLIENTRXSTATSBYTEVLD_port_name = new NamedObject("EMAC0CLIENTRXSTATSBYTEVLD");
            EMAC0CLIENTRXSTATSVLD_port_name = new NamedObject("EMAC0CLIENTRXSTATSVLD");
            EMAC0CLIENTTXACK_port_name = new NamedObject("EMAC0CLIENTTXACK");
            EMAC0CLIENTTXCLIENTCLKOUT_port_name = new NamedObject("EMAC0CLIENTTXCLIENTCLKOUT");
            EMAC0CLIENTTXCOLLISION_port_name = new NamedObject("EMAC0CLIENTTXCOLLISION");
            EMAC0CLIENTTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC0CLIENTTXGMIIMIICLKOUT");
            EMAC0CLIENTTXRETRANSMIT_port_name = new NamedObject("EMAC0CLIENTTXRETRANSMIT");
            EMAC0CLIENTTXSTATS_port_name = new NamedObject("EMAC0CLIENTTXSTATS");
            EMAC0CLIENTTXSTATSBYTEVLD_port_name = new NamedObject("EMAC0CLIENTTXSTATSBYTEVLD");
            EMAC0CLIENTTXSTATSVLD_port_name = new NamedObject("EMAC0CLIENTTXSTATSVLD");
            EMAC0PHYENCOMMAALIGN_port_name = new NamedObject("EMAC0PHYENCOMMAALIGN");
            EMAC0PHYLOOPBACKMSB_port_name = new NamedObject("EMAC0PHYLOOPBACKMSB");
            EMAC0PHYMCLKOUT_port_name = new NamedObject("EMAC0PHYMCLKOUT");
            EMAC0PHYMDOUT_port_name = new NamedObject("EMAC0PHYMDOUT");
            EMAC0PHYMDTRI_port_name = new NamedObject("EMAC0PHYMDTRI");
            EMAC0PHYMGTRXRESET_port_name = new NamedObject("EMAC0PHYMGTRXRESET");
            EMAC0PHYMGTTXRESET_port_name = new NamedObject("EMAC0PHYMGTTXRESET");
            EMAC0PHYPOWERDOWN_port_name = new NamedObject("EMAC0PHYPOWERDOWN");
            EMAC0PHYSYNCACQSTATUS_port_name = new NamedObject("EMAC0PHYSYNCACQSTATUS");
            EMAC0PHYTXCHARDISPMODE_port_name = new NamedObject("EMAC0PHYTXCHARDISPMODE");
            EMAC0PHYTXCHARDISPVAL_port_name = new NamedObject("EMAC0PHYTXCHARDISPVAL");
            EMAC0PHYTXCHARISK_port_name = new NamedObject("EMAC0PHYTXCHARISK");
            EMAC0PHYTXCLK_port_name = new NamedObject("EMAC0PHYTXCLK");
            EMAC0PHYTXD_port_name = new NamedObject("EMAC0PHYTXD");
            EMAC0PHYTXEN_port_name = new NamedObject("EMAC0PHYTXEN");
            EMAC0PHYTXER_port_name = new NamedObject("EMAC0PHYTXER");
            EMAC1CLIENTANINTERRUPT_port_name = new NamedObject("EMAC1CLIENTANINTERRUPT");
            EMAC1CLIENTRXBADFRAME_port_name = new NamedObject("EMAC1CLIENTRXBADFRAME");
            EMAC1CLIENTRXCLIENTCLKOUT_port_name = new NamedObject("EMAC1CLIENTRXCLIENTCLKOUT");
            EMAC1CLIENTRXD_port_name = new NamedObject("EMAC1CLIENTRXD");
            EMAC1CLIENTRXDVLD_port_name = new NamedObject("EMAC1CLIENTRXDVLD");
            EMAC1CLIENTRXDVLDMSW_port_name = new NamedObject("EMAC1CLIENTRXDVLDMSW");
            EMAC1CLIENTRXDVREG6_port_name = new NamedObject("EMAC1CLIENTRXDVREG6");
            EMAC1CLIENTRXFRAMEDROP_port_name = new NamedObject("EMAC1CLIENTRXFRAMEDROP");
            EMAC1CLIENTRXGOODFRAME_port_name = new NamedObject("EMAC1CLIENTRXGOODFRAME");
            EMAC1CLIENTRXSTATS_port_name = new NamedObject("EMAC1CLIENTRXSTATS");
            EMAC1CLIENTRXSTATSBYTEVLD_port_name = new NamedObject("EMAC1CLIENTRXSTATSBYTEVLD");
            EMAC1CLIENTRXSTATSVLD_port_name = new NamedObject("EMAC1CLIENTRXSTATSVLD");
            EMAC1CLIENTTXACK_port_name = new NamedObject("EMAC1CLIENTTXACK");
            EMAC1CLIENTTXCLIENTCLKOUT_port_name = new NamedObject("EMAC1CLIENTTXCLIENTCLKOUT");
            EMAC1CLIENTTXCOLLISION_port_name = new NamedObject("EMAC1CLIENTTXCOLLISION");
            EMAC1CLIENTTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC1CLIENTTXGMIIMIICLKOUT");
            EMAC1CLIENTTXRETRANSMIT_port_name = new NamedObject("EMAC1CLIENTTXRETRANSMIT");
            EMAC1CLIENTTXSTATS_port_name = new NamedObject("EMAC1CLIENTTXSTATS");
            EMAC1CLIENTTXSTATSBYTEVLD_port_name = new NamedObject("EMAC1CLIENTTXSTATSBYTEVLD");
            EMAC1CLIENTTXSTATSVLD_port_name = new NamedObject("EMAC1CLIENTTXSTATSVLD");
            EMAC1PHYENCOMMAALIGN_port_name = new NamedObject("EMAC1PHYENCOMMAALIGN");
            EMAC1PHYLOOPBACKMSB_port_name = new NamedObject("EMAC1PHYLOOPBACKMSB");
            EMAC1PHYMCLKOUT_port_name = new NamedObject("EMAC1PHYMCLKOUT");
            EMAC1PHYMDOUT_port_name = new NamedObject("EMAC1PHYMDOUT");
            EMAC1PHYMDTRI_port_name = new NamedObject("EMAC1PHYMDTRI");
            EMAC1PHYMGTRXRESET_port_name = new NamedObject("EMAC1PHYMGTRXRESET");
            EMAC1PHYMGTTXRESET_port_name = new NamedObject("EMAC1PHYMGTTXRESET");
            EMAC1PHYPOWERDOWN_port_name = new NamedObject("EMAC1PHYPOWERDOWN");
            EMAC1PHYSYNCACQSTATUS_port_name = new NamedObject("EMAC1PHYSYNCACQSTATUS");
            EMAC1PHYTXCHARDISPMODE_port_name = new NamedObject("EMAC1PHYTXCHARDISPMODE");
            EMAC1PHYTXCHARDISPVAL_port_name = new NamedObject("EMAC1PHYTXCHARDISPVAL");
            EMAC1PHYTXCHARISK_port_name = new NamedObject("EMAC1PHYTXCHARISK");
            EMAC1PHYTXCLK_port_name = new NamedObject("EMAC1PHYTXCLK");
            EMAC1PHYTXD_port_name = new NamedObject("EMAC1PHYTXD");
            EMAC1PHYTXEN_port_name = new NamedObject("EMAC1PHYTXEN");
            EMAC1PHYTXER_port_name = new NamedObject("EMAC1PHYTXER");
            EMACDCRACK_port_name = new NamedObject("EMACDCRACK");
            EMACDCRDBUS_port_name = new NamedObject("EMACDCRDBUS");
            HOSTMIIMRDY_port_name = new NamedObject("HOSTMIIMRDY");
            HOSTRDDATA_port_name = new NamedObject("HOSTRDDATA");
            CLIENTEMAC0DCMLOCKED_port_name = new NamedObject("CLIENTEMAC0DCMLOCKED");
            CLIENTEMAC0PAUSEREQ_port_name = new NamedObject("CLIENTEMAC0PAUSEREQ");
            CLIENTEMAC0PAUSEVAL_port_name = new NamedObject("CLIENTEMAC0PAUSEVAL");
            CLIENTEMAC0RXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC0RXCLIENTCLKIN");
            CLIENTEMAC0TXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC0TXCLIENTCLKIN");
            CLIENTEMAC0TXD_port_name = new NamedObject("CLIENTEMAC0TXD");
            CLIENTEMAC0TXDVLD_port_name = new NamedObject("CLIENTEMAC0TXDVLD");
            CLIENTEMAC0TXDVLDMSW_port_name = new NamedObject("CLIENTEMAC0TXDVLDMSW");
            CLIENTEMAC0TXFIRSTBYTE_port_name = new NamedObject("CLIENTEMAC0TXFIRSTBYTE");
            CLIENTEMAC0TXGMIIMIICLKIN_port_name = new NamedObject("CLIENTEMAC0TXGMIIMIICLKIN");
            CLIENTEMAC0TXIFGDELAY_port_name = new NamedObject("CLIENTEMAC0TXIFGDELAY");
            CLIENTEMAC0TXUNDERRUN_port_name = new NamedObject("CLIENTEMAC0TXUNDERRUN");
            CLIENTEMAC1DCMLOCKED_port_name = new NamedObject("CLIENTEMAC1DCMLOCKED");
            CLIENTEMAC1PAUSEREQ_port_name = new NamedObject("CLIENTEMAC1PAUSEREQ");
            CLIENTEMAC1PAUSEVAL_port_name = new NamedObject("CLIENTEMAC1PAUSEVAL");
            CLIENTEMAC1RXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC1RXCLIENTCLKIN");
            CLIENTEMAC1TXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC1TXCLIENTCLKIN");
            CLIENTEMAC1TXD_port_name = new NamedObject("CLIENTEMAC1TXD");
            CLIENTEMAC1TXDVLD_port_name = new NamedObject("CLIENTEMAC1TXDVLD");
            CLIENTEMAC1TXDVLDMSW_port_name = new NamedObject("CLIENTEMAC1TXDVLDMSW");
            CLIENTEMAC1TXFIRSTBYTE_port_name = new NamedObject("CLIENTEMAC1TXFIRSTBYTE");
            CLIENTEMAC1TXGMIIMIICLKIN_port_name = new NamedObject("CLIENTEMAC1TXGMIIMIICLKIN");
            CLIENTEMAC1TXIFGDELAY_port_name = new NamedObject("CLIENTEMAC1TXIFGDELAY");
            CLIENTEMAC1TXUNDERRUN_port_name = new NamedObject("CLIENTEMAC1TXUNDERRUN");
            DCREMACABUS_port_name = new NamedObject("DCREMACABUS");
            DCREMACCLK_port_name = new NamedObject("DCREMACCLK");
            DCREMACDBUS_port_name = new NamedObject("DCREMACDBUS");
            DCREMACENABLE_port_name = new NamedObject("DCREMACENABLE");
            DCREMACREAD_port_name = new NamedObject("DCREMACREAD");
            DCREMACWRITE_port_name = new NamedObject("DCREMACWRITE");
            HOSTADDR_port_name = new NamedObject("HOSTADDR");
            HOSTCLK_port_name = new NamedObject("HOSTCLK");
            HOSTEMAC1SEL_port_name = new NamedObject("HOSTEMAC1SEL");
            HOSTMIIMSEL_port_name = new NamedObject("HOSTMIIMSEL");
            HOSTOPCODE_port_name = new NamedObject("HOSTOPCODE");
            HOSTREQ_port_name = new NamedObject("HOSTREQ");
            HOSTWRDATA_port_name = new NamedObject("HOSTWRDATA");
            PHYEMAC0COL_port_name = new NamedObject("PHYEMAC0COL");
            PHYEMAC0CRS_port_name = new NamedObject("PHYEMAC0CRS");
            PHYEMAC0GTXCLK_port_name = new NamedObject("PHYEMAC0GTXCLK");
            PHYEMAC0MCLKIN_port_name = new NamedObject("PHYEMAC0MCLKIN");
            PHYEMAC0MDIN_port_name = new NamedObject("PHYEMAC0MDIN");
            PHYEMAC0MIITXCLK_port_name = new NamedObject("PHYEMAC0MIITXCLK");
            PHYEMAC0PHYAD_port_name = new NamedObject("PHYEMAC0PHYAD");
            PHYEMAC0RXBUFERR_port_name = new NamedObject("PHYEMAC0RXBUFERR");
            PHYEMAC0RXBUFSTATUS_port_name = new NamedObject("PHYEMAC0RXBUFSTATUS");
            PHYEMAC0RXCHARISCOMMA_port_name = new NamedObject("PHYEMAC0RXCHARISCOMMA");
            PHYEMAC0RXCHARISK_port_name = new NamedObject("PHYEMAC0RXCHARISK");
            PHYEMAC0RXCHECKINGCRC_port_name = new NamedObject("PHYEMAC0RXCHECKINGCRC");
            PHYEMAC0RXCLK_port_name = new NamedObject("PHYEMAC0RXCLK");
            PHYEMAC0RXCLKCORCNT_port_name = new NamedObject("PHYEMAC0RXCLKCORCNT");
            PHYEMAC0RXCOMMADET_port_name = new NamedObject("PHYEMAC0RXCOMMADET");
            PHYEMAC0RXD_port_name = new NamedObject("PHYEMAC0RXD");
            PHYEMAC0RXDISPERR_port_name = new NamedObject("PHYEMAC0RXDISPERR");
            PHYEMAC0RXDV_port_name = new NamedObject("PHYEMAC0RXDV");
            PHYEMAC0RXER_port_name = new NamedObject("PHYEMAC0RXER");
            PHYEMAC0RXLOSSOFSYNC_port_name = new NamedObject("PHYEMAC0RXLOSSOFSYNC");
            PHYEMAC0RXNOTINTABLE_port_name = new NamedObject("PHYEMAC0RXNOTINTABLE");
            PHYEMAC0RXRUNDISP_port_name = new NamedObject("PHYEMAC0RXRUNDISP");
            PHYEMAC0SIGNALDET_port_name = new NamedObject("PHYEMAC0SIGNALDET");
            PHYEMAC0TXBUFERR_port_name = new NamedObject("PHYEMAC0TXBUFERR");
            PHYEMAC1COL_port_name = new NamedObject("PHYEMAC1COL");
            PHYEMAC1CRS_port_name = new NamedObject("PHYEMAC1CRS");
            PHYEMAC1GTXCLK_port_name = new NamedObject("PHYEMAC1GTXCLK");
            PHYEMAC1MCLKIN_port_name = new NamedObject("PHYEMAC1MCLKIN");
            PHYEMAC1MDIN_port_name = new NamedObject("PHYEMAC1MDIN");
            PHYEMAC1MIITXCLK_port_name = new NamedObject("PHYEMAC1MIITXCLK");
            PHYEMAC1PHYAD_port_name = new NamedObject("PHYEMAC1PHYAD");
            PHYEMAC1RXBUFERR_port_name = new NamedObject("PHYEMAC1RXBUFERR");
            PHYEMAC1RXBUFSTATUS_port_name = new NamedObject("PHYEMAC1RXBUFSTATUS");
            PHYEMAC1RXCHARISCOMMA_port_name = new NamedObject("PHYEMAC1RXCHARISCOMMA");
            PHYEMAC1RXCHARISK_port_name = new NamedObject("PHYEMAC1RXCHARISK");
            PHYEMAC1RXCHECKINGCRC_port_name = new NamedObject("PHYEMAC1RXCHECKINGCRC");
            PHYEMAC1RXCLK_port_name = new NamedObject("PHYEMAC1RXCLK");
            PHYEMAC1RXCLKCORCNT_port_name = new NamedObject("PHYEMAC1RXCLKCORCNT");
            PHYEMAC1RXCOMMADET_port_name = new NamedObject("PHYEMAC1RXCOMMADET");
            PHYEMAC1RXD_port_name = new NamedObject("PHYEMAC1RXD");
            PHYEMAC1RXDISPERR_port_name = new NamedObject("PHYEMAC1RXDISPERR");
            PHYEMAC1RXDV_port_name = new NamedObject("PHYEMAC1RXDV");
            PHYEMAC1RXER_port_name = new NamedObject("PHYEMAC1RXER");
            PHYEMAC1RXLOSSOFSYNC_port_name = new NamedObject("PHYEMAC1RXLOSSOFSYNC");
            PHYEMAC1RXNOTINTABLE_port_name = new NamedObject("PHYEMAC1RXNOTINTABLE");
            PHYEMAC1RXRUNDISP_port_name = new NamedObject("PHYEMAC1RXRUNDISP");
            PHYEMAC1SIGNALDET_port_name = new NamedObject("PHYEMAC1SIGNALDET");
            PHYEMAC1TXBUFERR_port_name = new NamedObject("PHYEMAC1TXBUFERR");
            TIEEMAC0CONFIGVEC_port_name = new NamedObject("TIEEMAC0CONFIGVEC");
            TIEEMAC0UNICASTADDR_port_name = new NamedObject("TIEEMAC0UNICASTADDR");
            TIEEMAC1CONFIGVEC_port_name = new NamedObject("TIEEMAC1CONFIGVEC");
            TIEEMAC1UNICASTADDR_port_name = new NamedObject("TIEEMAC1UNICASTADDR");
            Q_port_name = new NamedObject("Q");
            D_port_name = new NamedObject("D");
            PRE_port_name = new NamedObject("PRE");
            C0_port_name = new NamedObject("C0");
            C1_port_name = new NamedObject("C1");
            D0_port_name = new NamedObject("D0");
            D1_port_name = new NamedObject("D1");
            R_port_name = new NamedObject("R");
            ALMOSTEMPTY_port_name = new NamedObject("ALMOSTEMPTY");
            ALMOSTFULL_port_name = new NamedObject("ALMOSTFULL");
            DOP_port_name = new NamedObject("DOP");
            EMPTY_port_name = new NamedObject("EMPTY");
            FULL_port_name = new NamedObject("FULL");
            RDCOUNT_port_name = new NamedObject("RDCOUNT");
            RDERR_port_name = new NamedObject("RDERR");
            WRCOUNT_port_name = new NamedObject("WRCOUNT");
            WRERR_port_name = new NamedObject("WRERR");
            DIP_port_name = new NamedObject("DIP");
            RDCLK_port_name = new NamedObject("RDCLK");
            RDEN_port_name = new NamedObject("RDEN");
            WRCLK_port_name = new NamedObject("WRCLK");
            WREN_port_name = new NamedObject("WREN");
            DBITERR_port_name = new NamedObject("DBITERR");
            ECCPARITY_port_name = new NamedObject("ECCPARITY");
            SBITERR_port_name = new NamedObject("SBITERR");
            RDCLKL_port_name = new NamedObject("RDCLKL");
            RDCLKU_port_name = new NamedObject("RDCLKU");
            RDRCLKL_port_name = new NamedObject("RDRCLKL");
            RDRCLKU_port_name = new NamedObject("RDRCLKU");
            WRCLKL_port_name = new NamedObject("WRCLKL");
            WRCLKU_port_name = new NamedObject("WRCLKU");
            ERROR_port_name = new NamedObject("ERROR");
            SYNDROME_port_name = new NamedObject("SYNDROME");
            SYNDROMEVALID_port_name = new NamedObject("SYNDROMEVALID");
            CRCERROR_port_name = new NamedObject("CRCERROR");
            ECCERROR_port_name = new NamedObject("ECCERROR");
            G_port_name = new NamedObject("G");
            CHBONDDONE_port_name = new NamedObject("CHBONDDONE");
            CHBONDO_port_name = new NamedObject("CHBONDO");
            CONFIGOUT_port_name = new NamedObject("CONFIGOUT");
            RXBUFSTATUS_port_name = new NamedObject("RXBUFSTATUS");
            RXCHARISCOMMA_port_name = new NamedObject("RXCHARISCOMMA");
            RXCHARISK_port_name = new NamedObject("RXCHARISK");
            RXCHECKINGCRC_port_name = new NamedObject("RXCHECKINGCRC");
            RXCLKCORCNT_port_name = new NamedObject("RXCLKCORCNT");
            RXCOMMADET_port_name = new NamedObject("RXCOMMADET");
            RXCRCERR_port_name = new NamedObject("RXCRCERR");
            RXDATA_port_name = new NamedObject("RXDATA");
            RXDISPERR_port_name = new NamedObject("RXDISPERR");
            RXLOSSOFSYNC_port_name = new NamedObject("RXLOSSOFSYNC");
            RXNOTINTABLE_port_name = new NamedObject("RXNOTINTABLE");
            RXREALIGN_port_name = new NamedObject("RXREALIGN");
            RXRECCLK_port_name = new NamedObject("RXRECCLK");
            RXRUNDISP_port_name = new NamedObject("RXRUNDISP");
            TXBUFERR_port_name = new NamedObject("TXBUFERR");
            TXKERR_port_name = new NamedObject("TXKERR");
            TXN_port_name = new NamedObject("TXN");
            TXP_port_name = new NamedObject("TXP");
            TXRUNDISP_port_name = new NamedObject("TXRUNDISP");
            BREFCLK_port_name = new NamedObject("BREFCLK");
            BREFCLK2_port_name = new NamedObject("BREFCLK2");
            CHBONDI_port_name = new NamedObject("CHBONDI");
            CONFIGENABLE_port_name = new NamedObject("CONFIGENABLE");
            CONFIGIN_port_name = new NamedObject("CONFIGIN");
            ENCHANSYNC_port_name = new NamedObject("ENCHANSYNC");
            ENMCOMMAALIGN_port_name = new NamedObject("ENMCOMMAALIGN");
            ENPCOMMAALIGN_port_name = new NamedObject("ENPCOMMAALIGN");
            LOOPBACK_port_name = new NamedObject("LOOPBACK");
            POWERDOWN_port_name = new NamedObject("POWERDOWN");
            REFCLK_port_name = new NamedObject("REFCLK");
            REFCLK2_port_name = new NamedObject("REFCLK2");
            REFCLKSEL_port_name = new NamedObject("REFCLKSEL");
            RXN_port_name = new NamedObject("RXN");
            RXP_port_name = new NamedObject("RXP");
            RXPOLARITY_port_name = new NamedObject("RXPOLARITY");
            RXRESET_port_name = new NamedObject("RXRESET");
            RXUSRCLK_port_name = new NamedObject("RXUSRCLK");
            RXUSRCLK2_port_name = new NamedObject("RXUSRCLK2");
            TXBYPASS8B10B_port_name = new NamedObject("TXBYPASS8B10B");
            TXCHARDISPMODE_port_name = new NamedObject("TXCHARDISPMODE");
            TXCHARDISPVAL_port_name = new NamedObject("TXCHARDISPVAL");
            TXCHARISK_port_name = new NamedObject("TXCHARISK");
            TXDATA_port_name = new NamedObject("TXDATA");
            TXFORCECRCERR_port_name = new NamedObject("TXFORCECRCERR");
            TXINHIBIT_port_name = new NamedObject("TXINHIBIT");
            TXPOLARITY_port_name = new NamedObject("TXPOLARITY");
            TXRESET_port_name = new NamedObject("TXRESET");
            TXUSRCLK_port_name = new NamedObject("TXUSRCLK");
            TXUSRCLK2_port_name = new NamedObject("TXUSRCLK2");
            PMARXLOCK_port_name = new NamedObject("PMARXLOCK");
            TXOUTCLK_port_name = new NamedObject("TXOUTCLK");
            BREFCLKNIN_port_name = new NamedObject("BREFCLKNIN");
            BREFCLKPIN_port_name = new NamedObject("BREFCLKPIN");
            PMAINIT_port_name = new NamedObject("PMAINIT");
            PMAREGADDR_port_name = new NamedObject("PMAREGADDR");
            PMAREGDATAIN_port_name = new NamedObject("PMAREGDATAIN");
            PMAREGRW_port_name = new NamedObject("PMAREGRW");
            PMAREGSTROBE_port_name = new NamedObject("PMAREGSTROBE");
            PMARXLOCKSEL_port_name = new NamedObject("PMARXLOCKSEL");
            REFCLKBSEL_port_name = new NamedObject("REFCLKBSEL");
            RXBLOCKSYNC64B66BUSE_port_name = new NamedObject("RXBLOCKSYNC64B66BUSE");
            RXCOMMADETUSE_port_name = new NamedObject("RXCOMMADETUSE");
            RXDATAWIDTH_port_name = new NamedObject("RXDATAWIDTH");
            RXDEC64B66BUSE_port_name = new NamedObject("RXDEC64B66BUSE");
            RXDEC8B10BUSE_port_name = new NamedObject("RXDEC8B10BUSE");
            RXDESCRAM64B66BUSE_port_name = new NamedObject("RXDESCRAM64B66BUSE");
            RXIGNOREBTF_port_name = new NamedObject("RXIGNOREBTF");
            RXINTDATAWIDTH_port_name = new NamedObject("RXINTDATAWIDTH");
            RXSLIDE_port_name = new NamedObject("RXSLIDE");
            TXDATAWIDTH_port_name = new NamedObject("TXDATAWIDTH");
            TXENC64B66BUSE_port_name = new NamedObject("TXENC64B66BUSE");
            TXENC8B10BUSE_port_name = new NamedObject("TXENC8B10BUSE");
            TXGEARBOX64B66BUSE_port_name = new NamedObject("TXGEARBOX64B66BUSE");
            TXINTDATAWIDTH_port_name = new NamedObject("TXINTDATAWIDTH");
            TXSCRAM64B66BUSE_port_name = new NamedObject("TXSCRAM64B66BUSE");
            COMBUSOUT_port_name = new NamedObject("COMBUSOUT");
            RXBUFERR_port_name = new NamedObject("RXBUFERR");
            RXCALFAIL_port_name = new NamedObject("RXCALFAIL");
            RXCRCOUT_port_name = new NamedObject("RXCRCOUT");
            RXCYCLELIMIT_port_name = new NamedObject("RXCYCLELIMIT");
            RXLOCK_port_name = new NamedObject("RXLOCK");
            RXMCLK_port_name = new NamedObject("RXMCLK");
            RXPCSHCLKOUT_port_name = new NamedObject("RXPCSHCLKOUT");
            RXRECCLK1_port_name = new NamedObject("RXRECCLK1");
            RXRECCLK2_port_name = new NamedObject("RXRECCLK2");
            RXSIGDET_port_name = new NamedObject("RXSIGDET");
            RXSTATUS_port_name = new NamedObject("RXSTATUS");
            TX1N_port_name = new NamedObject("TX1N");
            TX1P_port_name = new NamedObject("TX1P");
            TXCALFAIL_port_name = new NamedObject("TXCALFAIL");
            TXCRCOUT_port_name = new NamedObject("TXCRCOUT");
            TXCYCLELIMIT_port_name = new NamedObject("TXCYCLELIMIT");
            TXLOCK_port_name = new NamedObject("TXLOCK");
            TXOUTCLK1_port_name = new NamedObject("TXOUTCLK1");
            TXOUTCLK2_port_name = new NamedObject("TXOUTCLK2");
            TXPCSHCLKOUT_port_name = new NamedObject("TXPCSHCLKOUT");
            COMBUSIN_port_name = new NamedObject("COMBUSIN");
            GREFCLK_port_name = new NamedObject("GREFCLK");
            REFCLK1_port_name = new NamedObject("REFCLK1");
            RX1N_port_name = new NamedObject("RX1N");
            RX1P_port_name = new NamedObject("RX1P");
            RXCLKSTABLE_port_name = new NamedObject("RXCLKSTABLE");
            RXCRCCLK_port_name = new NamedObject("RXCRCCLK");
            RXCRCDATAVALID_port_name = new NamedObject("RXCRCDATAVALID");
            RXCRCDATAWIDTH_port_name = new NamedObject("RXCRCDATAWIDTH");
            RXCRCIN_port_name = new NamedObject("RXCRCIN");
            RXCRCINIT_port_name = new NamedObject("RXCRCINIT");
            RXCRCINTCLK_port_name = new NamedObject("RXCRCINTCLK");
            RXCRCPD_port_name = new NamedObject("RXCRCPD");
            RXCRCRESET_port_name = new NamedObject("RXCRCRESET");
            RXPMARESET_port_name = new NamedObject("RXPMARESET");
            RXSYNC_port_name = new NamedObject("RXSYNC");
            TXCLKSTABLE_port_name = new NamedObject("TXCLKSTABLE");
            TXCRCCLK_port_name = new NamedObject("TXCRCCLK");
            TXCRCDATAVALID_port_name = new NamedObject("TXCRCDATAVALID");
            TXCRCDATAWIDTH_port_name = new NamedObject("TXCRCDATAWIDTH");
            TXCRCIN_port_name = new NamedObject("TXCRCIN");
            TXCRCINIT_port_name = new NamedObject("TXCRCINIT");
            TXCRCINTCLK_port_name = new NamedObject("TXCRCINTCLK");
            TXCRCPD_port_name = new NamedObject("TXCRCPD");
            TXCRCRESET_port_name = new NamedObject("TXCRCRESET");
            TXENOOB_port_name = new NamedObject("TXENOOB");
            TXPMARESET_port_name = new NamedObject("TXPMARESET");
            TXSYNC_port_name = new NamedObject("TXSYNC");
            CHBONDOA_port_name = new NamedObject("CHBONDOA");
            CHBONDOB_port_name = new NamedObject("CHBONDOB");
            DOA_port_name = new NamedObject("DOA");
            DOB_port_name = new NamedObject("DOB");
            DRDYA_port_name = new NamedObject("DRDYA");
            DRDYB_port_name = new NamedObject("DRDYB");
            RXBUFERRA_port_name = new NamedObject("RXBUFERRA");
            RXBUFERRB_port_name = new NamedObject("RXBUFERRB");
            RXCALFAILA_port_name = new NamedObject("RXCALFAILA");
            RXCALFAILB_port_name = new NamedObject("RXCALFAILB");
            RXCHARISCOMMAA_port_name = new NamedObject("RXCHARISCOMMAA");
            RXCHARISCOMMAB_port_name = new NamedObject("RXCHARISCOMMAB");
            RXCHARISKA_port_name = new NamedObject("RXCHARISKA");
            RXCHARISKB_port_name = new NamedObject("RXCHARISKB");
            RXCOMMADETA_port_name = new NamedObject("RXCOMMADETA");
            RXCOMMADETB_port_name = new NamedObject("RXCOMMADETB");
            RXCRCOUTA_port_name = new NamedObject("RXCRCOUTA");
            RXCRCOUTB_port_name = new NamedObject("RXCRCOUTB");
            RXCYCLELIMITA_port_name = new NamedObject("RXCYCLELIMITA");
            RXCYCLELIMITB_port_name = new NamedObject("RXCYCLELIMITB");
            RXDATAA_port_name = new NamedObject("RXDATAA");
            RXDATAB_port_name = new NamedObject("RXDATAB");
            RXDISPERRA_port_name = new NamedObject("RXDISPERRA");
            RXDISPERRB_port_name = new NamedObject("RXDISPERRB");
            RXLOCKA_port_name = new NamedObject("RXLOCKA");
            RXLOCKB_port_name = new NamedObject("RXLOCKB");
            RXLOSSOFSYNCA_port_name = new NamedObject("RXLOSSOFSYNCA");
            RXLOSSOFSYNCB_port_name = new NamedObject("RXLOSSOFSYNCB");
            RXMCLKA_port_name = new NamedObject("RXMCLKA");
            RXMCLKB_port_name = new NamedObject("RXMCLKB");
            RXNOTINTABLEA_port_name = new NamedObject("RXNOTINTABLEA");
            RXNOTINTABLEB_port_name = new NamedObject("RXNOTINTABLEB");
            RXPCSHCLKOUTA_port_name = new NamedObject("RXPCSHCLKOUTA");
            RXPCSHCLKOUTB_port_name = new NamedObject("RXPCSHCLKOUTB");
            RXREALIGNA_port_name = new NamedObject("RXREALIGNA");
            RXREALIGNB_port_name = new NamedObject("RXREALIGNB");
            RXRECCLK1A_port_name = new NamedObject("RXRECCLK1A");
            RXRECCLK1B_port_name = new NamedObject("RXRECCLK1B");
            RXRECCLK2A_port_name = new NamedObject("RXRECCLK2A");
            RXRECCLK2B_port_name = new NamedObject("RXRECCLK2B");
            RXRUNDISPA_port_name = new NamedObject("RXRUNDISPA");
            RXRUNDISPB_port_name = new NamedObject("RXRUNDISPB");
            RXSIGDETA_port_name = new NamedObject("RXSIGDETA");
            RXSIGDETB_port_name = new NamedObject("RXSIGDETB");
            RXSTATUSA_port_name = new NamedObject("RXSTATUSA");
            RXSTATUSB_port_name = new NamedObject("RXSTATUSB");
            TX1NA_port_name = new NamedObject("TX1NA");
            TX1NB_port_name = new NamedObject("TX1NB");
            TX1PA_port_name = new NamedObject("TX1PA");
            TX1PB_port_name = new NamedObject("TX1PB");
            TXBUFERRA_port_name = new NamedObject("TXBUFERRA");
            TXBUFERRB_port_name = new NamedObject("TXBUFERRB");
            TXCALFAILA_port_name = new NamedObject("TXCALFAILA");
            TXCALFAILB_port_name = new NamedObject("TXCALFAILB");
            TXCRCOUTA_port_name = new NamedObject("TXCRCOUTA");
            TXCRCOUTB_port_name = new NamedObject("TXCRCOUTB");
            TXCYCLELIMITA_port_name = new NamedObject("TXCYCLELIMITA");
            TXCYCLELIMITB_port_name = new NamedObject("TXCYCLELIMITB");
            TXKERRA_port_name = new NamedObject("TXKERRA");
            TXKERRB_port_name = new NamedObject("TXKERRB");
            TXLOCKA_port_name = new NamedObject("TXLOCKA");
            TXLOCKB_port_name = new NamedObject("TXLOCKB");
            TXOUTCLK1A_port_name = new NamedObject("TXOUTCLK1A");
            TXOUTCLK1B_port_name = new NamedObject("TXOUTCLK1B");
            TXOUTCLK2A_port_name = new NamedObject("TXOUTCLK2A");
            TXOUTCLK2B_port_name = new NamedObject("TXOUTCLK2B");
            TXPCSHCLKOUTA_port_name = new NamedObject("TXPCSHCLKOUTA");
            TXPCSHCLKOUTB_port_name = new NamedObject("TXPCSHCLKOUTB");
            TXRUNDISPA_port_name = new NamedObject("TXRUNDISPA");
            TXRUNDISPB_port_name = new NamedObject("TXRUNDISPB");
            CHBONDIA_port_name = new NamedObject("CHBONDIA");
            CHBONDIB_port_name = new NamedObject("CHBONDIB");
            DADDRA_port_name = new NamedObject("DADDRA");
            DADDRB_port_name = new NamedObject("DADDRB");
            DCLKA_port_name = new NamedObject("DCLKA");
            DCLKB_port_name = new NamedObject("DCLKB");
            DENA_port_name = new NamedObject("DENA");
            DENB_port_name = new NamedObject("DENB");
            DIA_port_name = new NamedObject("DIA");
            DIB_port_name = new NamedObject("DIB");
            DWEA_port_name = new NamedObject("DWEA");
            DWEB_port_name = new NamedObject("DWEB");
            ENCHANSYNCA_port_name = new NamedObject("ENCHANSYNCA");
            ENCHANSYNCB_port_name = new NamedObject("ENCHANSYNCB");
            ENMCOMMAALIGNA_port_name = new NamedObject("ENMCOMMAALIGNA");
            ENMCOMMAALIGNB_port_name = new NamedObject("ENMCOMMAALIGNB");
            ENPCOMMAALIGNA_port_name = new NamedObject("ENPCOMMAALIGNA");
            ENPCOMMAALIGNB_port_name = new NamedObject("ENPCOMMAALIGNB");
            GREFCLKA_port_name = new NamedObject("GREFCLKA");
            GREFCLKB_port_name = new NamedObject("GREFCLKB");
            LOOPBACKA_port_name = new NamedObject("LOOPBACKA");
            LOOPBACKB_port_name = new NamedObject("LOOPBACKB");
            POWERDOWNA_port_name = new NamedObject("POWERDOWNA");
            POWERDOWNB_port_name = new NamedObject("POWERDOWNB");
            REFCLK1A_port_name = new NamedObject("REFCLK1A");
            REFCLK1B_port_name = new NamedObject("REFCLK1B");
            REFCLK2A_port_name = new NamedObject("REFCLK2A");
            REFCLK2B_port_name = new NamedObject("REFCLK2B");
            RX1NA_port_name = new NamedObject("RX1NA");
            RX1NB_port_name = new NamedObject("RX1NB");
            RX1PA_port_name = new NamedObject("RX1PA");
            RX1PB_port_name = new NamedObject("RX1PB");
            RXBLOCKSYNC64B66BUSEA_port_name = new NamedObject("RXBLOCKSYNC64B66BUSEA");
            RXBLOCKSYNC64B66BUSEB_port_name = new NamedObject("RXBLOCKSYNC64B66BUSEB");
            RXCLKSTABLEA_port_name = new NamedObject("RXCLKSTABLEA");
            RXCLKSTABLEB_port_name = new NamedObject("RXCLKSTABLEB");
            RXCOMMADETUSEA_port_name = new NamedObject("RXCOMMADETUSEA");
            RXCOMMADETUSEB_port_name = new NamedObject("RXCOMMADETUSEB");
            RXCRCCLKA_port_name = new NamedObject("RXCRCCLKA");
            RXCRCCLKB_port_name = new NamedObject("RXCRCCLKB");
            RXCRCDATAVALIDA_port_name = new NamedObject("RXCRCDATAVALIDA");
            RXCRCDATAVALIDB_port_name = new NamedObject("RXCRCDATAVALIDB");
            RXCRCDATAWIDTHA_port_name = new NamedObject("RXCRCDATAWIDTHA");
            RXCRCDATAWIDTHB_port_name = new NamedObject("RXCRCDATAWIDTHB");
            RXCRCINA_port_name = new NamedObject("RXCRCINA");
            RXCRCINB_port_name = new NamedObject("RXCRCINB");
            RXCRCINITA_port_name = new NamedObject("RXCRCINITA");
            RXCRCINITB_port_name = new NamedObject("RXCRCINITB");
            RXCRCINTCLKA_port_name = new NamedObject("RXCRCINTCLKA");
            RXCRCINTCLKB_port_name = new NamedObject("RXCRCINTCLKB");
            RXCRCPDA_port_name = new NamedObject("RXCRCPDA");
            RXCRCPDB_port_name = new NamedObject("RXCRCPDB");
            RXCRCRESETA_port_name = new NamedObject("RXCRCRESETA");
            RXCRCRESETB_port_name = new NamedObject("RXCRCRESETB");
            RXDATAWIDTHA_port_name = new NamedObject("RXDATAWIDTHA");
            RXDATAWIDTHB_port_name = new NamedObject("RXDATAWIDTHB");
            RXDEC64B66BUSEA_port_name = new NamedObject("RXDEC64B66BUSEA");
            RXDEC64B66BUSEB_port_name = new NamedObject("RXDEC64B66BUSEB");
            RXDEC8B10BUSEA_port_name = new NamedObject("RXDEC8B10BUSEA");
            RXDEC8B10BUSEB_port_name = new NamedObject("RXDEC8B10BUSEB");
            RXDESCRAM64B66BUSEA_port_name = new NamedObject("RXDESCRAM64B66BUSEA");
            RXDESCRAM64B66BUSEB_port_name = new NamedObject("RXDESCRAM64B66BUSEB");
            RXIGNOREBTFA_port_name = new NamedObject("RXIGNOREBTFA");
            RXIGNOREBTFB_port_name = new NamedObject("RXIGNOREBTFB");
            RXINTDATAWIDTHA_port_name = new NamedObject("RXINTDATAWIDTHA");
            RXINTDATAWIDTHB_port_name = new NamedObject("RXINTDATAWIDTHB");
            RXPMARESETA_port_name = new NamedObject("RXPMARESETA");
            RXPMARESETB_port_name = new NamedObject("RXPMARESETB");
            RXPOLARITYA_port_name = new NamedObject("RXPOLARITYA");
            RXPOLARITYB_port_name = new NamedObject("RXPOLARITYB");
            RXRESETA_port_name = new NamedObject("RXRESETA");
            RXRESETB_port_name = new NamedObject("RXRESETB");
            RXSLIDEA_port_name = new NamedObject("RXSLIDEA");
            RXSLIDEB_port_name = new NamedObject("RXSLIDEB");
            RXSYNCA_port_name = new NamedObject("RXSYNCA");
            RXSYNCB_port_name = new NamedObject("RXSYNCB");
            RXUSRCLK2A_port_name = new NamedObject("RXUSRCLK2A");
            RXUSRCLK2B_port_name = new NamedObject("RXUSRCLK2B");
            RXUSRCLKA_port_name = new NamedObject("RXUSRCLKA");
            RXUSRCLKB_port_name = new NamedObject("RXUSRCLKB");
            TXBYPASS8B10BA_port_name = new NamedObject("TXBYPASS8B10BA");
            TXBYPASS8B10BB_port_name = new NamedObject("TXBYPASS8B10BB");
            TXCHARDISPMODEA_port_name = new NamedObject("TXCHARDISPMODEA");
            TXCHARDISPMODEB_port_name = new NamedObject("TXCHARDISPMODEB");
            TXCHARDISPVALA_port_name = new NamedObject("TXCHARDISPVALA");
            TXCHARDISPVALB_port_name = new NamedObject("TXCHARDISPVALB");
            TXCHARISKA_port_name = new NamedObject("TXCHARISKA");
            TXCHARISKB_port_name = new NamedObject("TXCHARISKB");
            TXCLKSTABLEA_port_name = new NamedObject("TXCLKSTABLEA");
            TXCLKSTABLEB_port_name = new NamedObject("TXCLKSTABLEB");
            TXCRCCLKA_port_name = new NamedObject("TXCRCCLKA");
            TXCRCCLKB_port_name = new NamedObject("TXCRCCLKB");
            TXCRCDATAVALIDA_port_name = new NamedObject("TXCRCDATAVALIDA");
            TXCRCDATAVALIDB_port_name = new NamedObject("TXCRCDATAVALIDB");
            TXCRCDATAWIDTHA_port_name = new NamedObject("TXCRCDATAWIDTHA");
            TXCRCDATAWIDTHB_port_name = new NamedObject("TXCRCDATAWIDTHB");
            TXCRCINA_port_name = new NamedObject("TXCRCINA");
            TXCRCINB_port_name = new NamedObject("TXCRCINB");
            TXCRCINITA_port_name = new NamedObject("TXCRCINITA");
            TXCRCINITB_port_name = new NamedObject("TXCRCINITB");
            TXCRCINTCLKA_port_name = new NamedObject("TXCRCINTCLKA");
            TXCRCINTCLKB_port_name = new NamedObject("TXCRCINTCLKB");
            TXCRCPDA_port_name = new NamedObject("TXCRCPDA");
            TXCRCPDB_port_name = new NamedObject("TXCRCPDB");
            TXCRCRESETA_port_name = new NamedObject("TXCRCRESETA");
            TXCRCRESETB_port_name = new NamedObject("TXCRCRESETB");
            TXDATAA_port_name = new NamedObject("TXDATAA");
            TXDATAB_port_name = new NamedObject("TXDATAB");
            TXDATAWIDTHA_port_name = new NamedObject("TXDATAWIDTHA");
            TXDATAWIDTHB_port_name = new NamedObject("TXDATAWIDTHB");
            TXENC64B66BUSEA_port_name = new NamedObject("TXENC64B66BUSEA");
            TXENC64B66BUSEB_port_name = new NamedObject("TXENC64B66BUSEB");
            TXENC8B10BUSEA_port_name = new NamedObject("TXENC8B10BUSEA");
            TXENC8B10BUSEB_port_name = new NamedObject("TXENC8B10BUSEB");
            TXENOOBA_port_name = new NamedObject("TXENOOBA");
            TXENOOBB_port_name = new NamedObject("TXENOOBB");
            TXGEARBOX64B66BUSEA_port_name = new NamedObject("TXGEARBOX64B66BUSEA");
            TXGEARBOX64B66BUSEB_port_name = new NamedObject("TXGEARBOX64B66BUSEB");
            TXINHIBITA_port_name = new NamedObject("TXINHIBITA");
            TXINHIBITB_port_name = new NamedObject("TXINHIBITB");
            TXINTDATAWIDTHA_port_name = new NamedObject("TXINTDATAWIDTHA");
            TXINTDATAWIDTHB_port_name = new NamedObject("TXINTDATAWIDTHB");
            TXPMARESETA_port_name = new NamedObject("TXPMARESETA");
            TXPMARESETB_port_name = new NamedObject("TXPMARESETB");
            TXPOLARITYA_port_name = new NamedObject("TXPOLARITYA");
            TXPOLARITYB_port_name = new NamedObject("TXPOLARITYB");
            TXRESETA_port_name = new NamedObject("TXRESETA");
            TXRESETB_port_name = new NamedObject("TXRESETB");
            TXSCRAM64B66BUSEA_port_name = new NamedObject("TXSCRAM64B66BUSEA");
            TXSCRAM64B66BUSEB_port_name = new NamedObject("TXSCRAM64B66BUSEB");
            TXSYNCA_port_name = new NamedObject("TXSYNCA");
            TXSYNCB_port_name = new NamedObject("TXSYNCB");
            TXUSRCLK2A_port_name = new NamedObject("TXUSRCLK2A");
            TXUSRCLK2B_port_name = new NamedObject("TXUSRCLK2B");
            TXUSRCLKA_port_name = new NamedObject("TXUSRCLKA");
            TXUSRCLKB_port_name = new NamedObject("TXUSRCLKB");
            SYNCLK1OUT_port_name = new NamedObject("SYNCLK1OUT");
            SYNCLK2OUT_port_name = new NamedObject("SYNCLK2OUT");
            MGTCLKN_port_name = new NamedObject("MGTCLKN");
            MGTCLKP_port_name = new NamedObject("MGTCLKP");
            RXBCLK_port_name = new NamedObject("RXBCLK");
            SYNCLK1IN_port_name = new NamedObject("SYNCLK1IN");
            SYNCLK2IN_port_name = new NamedObject("SYNCLK2IN");
            IB_port_name = new NamedObject("IB");
            OB_port_name = new NamedObject("OB");
            BUSY_port_name = new NamedObject("BUSY");
            WRITE_port_name = new NamedObject("WRITE");
            Q1_port_name = new NamedObject("Q1");
            Q2_port_name = new NamedObject("Q2");
            Q0_port_name = new NamedObject("Q0");
            INC_port_name = new NamedObject("INC");
            RDY_port_name = new NamedObject("RDY");
            IO_port_name = new NamedObject("IO");
            IOB_port_name = new NamedObject("IOB");
            DATAOUT_port_name = new NamedObject("DATAOUT");
            DATAIN_port_name = new NamedObject("DATAIN");
            IDATAIN_port_name = new NamedObject("IDATAIN");
            ODATAIN_port_name = new NamedObject("ODATAIN");
            Q3_port_name = new NamedObject("Q3");
            Q4_port_name = new NamedObject("Q4");
            Q5_port_name = new NamedObject("Q5");
            Q6_port_name = new NamedObject("Q6");
            SHIFTOUT1_port_name = new NamedObject("SHIFTOUT1");
            SHIFTOUT2_port_name = new NamedObject("SHIFTOUT2");
            BITSLIP_port_name = new NamedObject("BITSLIP");
            CE2_port_name = new NamedObject("CE2");
            CLKDIV_port_name = new NamedObject("CLKDIV");
            DLYCE_port_name = new NamedObject("DLYCE");
            DLYINC_port_name = new NamedObject("DLYINC");
            DLYRST_port_name = new NamedObject("DLYRST");
            OCLK_port_name = new NamedObject("OCLK");
            REV_port_name = new NamedObject("REV");
            SHIFTIN1_port_name = new NamedObject("SHIFTIN1");
            SHIFTIN2_port_name = new NamedObject("SHIFTIN2");
            SR_port_name = new NamedObject("SR");
            TDIPPC_port_name = new NamedObject("TDIPPC");
            TDOPPC_port_name = new NamedObject("TDOPPC");
            TDOTSPPC_port_name = new NamedObject("TDOTSPPC");
            KEYCLEARB_port_name = new NamedObject("KEYCLEARB");
            GE_port_name = new NamedObject("GE");
            LO_port_name = new NamedObject("LO");
            D2_port_name = new NamedObject("D2");
            OQ_port_name = new NamedObject("OQ");
            TQ_port_name = new NamedObject("TQ");
            D3_port_name = new NamedObject("D3");
            D4_port_name = new NamedObject("D4");
            D5_port_name = new NamedObject("D5");
            D6_port_name = new NamedObject("D6");
            OCE_port_name = new NamedObject("OCE");
            T1_port_name = new NamedObject("T1");
            T2_port_name = new NamedObject("T2");
            T3_port_name = new NamedObject("T3");
            T4_port_name = new NamedObject("T4");
            TCE_port_name = new NamedObject("TCE");
            CLKFBDCM_port_name = new NamedObject("CLKFBDCM");
            CLKFBOUT_port_name = new NamedObject("CLKFBOUT");
            CLKOUT0_port_name = new NamedObject("CLKOUT0");
            CLKOUT1_port_name = new NamedObject("CLKOUT1");
            CLKOUT2_port_name = new NamedObject("CLKOUT2");
            CLKOUT3_port_name = new NamedObject("CLKOUT3");
            CLKOUT4_port_name = new NamedObject("CLKOUT4");
            CLKOUT5_port_name = new NamedObject("CLKOUT5");
            CLKOUTDCM0_port_name = new NamedObject("CLKOUTDCM0");
            CLKOUTDCM1_port_name = new NamedObject("CLKOUTDCM1");
            CLKOUTDCM2_port_name = new NamedObject("CLKOUTDCM2");
            CLKOUTDCM3_port_name = new NamedObject("CLKOUTDCM3");
            CLKOUTDCM4_port_name = new NamedObject("CLKOUTDCM4");
            CLKOUTDCM5_port_name = new NamedObject("CLKOUTDCM5");
            CLKFBIN_port_name = new NamedObject("CLKFBIN");
            CLKIN1_port_name = new NamedObject("CLKIN1");
            CLKIN2_port_name = new NamedObject("CLKIN2");
            CLKINSEL_port_name = new NamedObject("CLKINSEL");
            REL_port_name = new NamedObject("REL");
            CLKA1_port_name = new NamedObject("CLKA1");
            CLKA1D2_port_name = new NamedObject("CLKA1D2");
            CLKA1D4_port_name = new NamedObject("CLKA1D4");
            CLKA1D8_port_name = new NamedObject("CLKA1D8");
            CLKB1_port_name = new NamedObject("CLKB1");
            CLKC1_port_name = new NamedObject("CLKC1");
            CLKD1_port_name = new NamedObject("CLKD1");
            CLKA_port_name = new NamedObject("CLKA");
            CLKB_port_name = new NamedObject("CLKB");
            CLKC_port_name = new NamedObject("CLKC");
            CLKD_port_name = new NamedObject("CLKD");
            C405CPMCORESLEEPREQ_port_name = new NamedObject("C405CPMCORESLEEPREQ");
            C405CPMMSRCE_port_name = new NamedObject("C405CPMMSRCE");
            C405CPMMSREE_port_name = new NamedObject("C405CPMMSREE");
            C405CPMTIMERIRQ_port_name = new NamedObject("C405CPMTIMERIRQ");
            C405CPMTIMERRESETREQ_port_name = new NamedObject("C405CPMTIMERRESETREQ");
            C405DBGMSRWE_port_name = new NamedObject("C405DBGMSRWE");
            C405DBGSTOPACK_port_name = new NamedObject("C405DBGSTOPACK");
            C405DBGWBCOMPLETE_port_name = new NamedObject("C405DBGWBCOMPLETE");
            C405DBGWBFULL_port_name = new NamedObject("C405DBGWBFULL");
            C405DBGWBIAR_port_name = new NamedObject("C405DBGWBIAR");
            C405DCRABUS_port_name = new NamedObject("C405DCRABUS");
            C405DCRDBUSOUT_port_name = new NamedObject("C405DCRDBUSOUT");
            C405DCRREAD_port_name = new NamedObject("C405DCRREAD");
            C405DCRWRITE_port_name = new NamedObject("C405DCRWRITE");
            C405JTGCAPTUREDR_port_name = new NamedObject("C405JTGCAPTUREDR");
            C405JTGEXTEST_port_name = new NamedObject("C405JTGEXTEST");
            C405JTGPGMOUT_port_name = new NamedObject("C405JTGPGMOUT");
            C405JTGSHIFTDR_port_name = new NamedObject("C405JTGSHIFTDR");
            C405JTGTDO_port_name = new NamedObject("C405JTGTDO");
            C405JTGTDOEN_port_name = new NamedObject("C405JTGTDOEN");
            C405JTGUPDATEDR_port_name = new NamedObject("C405JTGUPDATEDR");
            C405PLBDCUABORT_port_name = new NamedObject("C405PLBDCUABORT");
            C405PLBDCUABUS_port_name = new NamedObject("C405PLBDCUABUS");
            C405PLBDCUBE_port_name = new NamedObject("C405PLBDCUBE");
            C405PLBDCUCACHEABLE_port_name = new NamedObject("C405PLBDCUCACHEABLE");
            C405PLBDCUGUARDED_port_name = new NamedObject("C405PLBDCUGUARDED");
            C405PLBDCUPRIORITY_port_name = new NamedObject("C405PLBDCUPRIORITY");
            C405PLBDCUREQUEST_port_name = new NamedObject("C405PLBDCUREQUEST");
            C405PLBDCURNW_port_name = new NamedObject("C405PLBDCURNW");
            C405PLBDCUSIZE2_port_name = new NamedObject("C405PLBDCUSIZE2");
            C405PLBDCUU0ATTR_port_name = new NamedObject("C405PLBDCUU0ATTR");
            C405PLBDCUWRDBUS_port_name = new NamedObject("C405PLBDCUWRDBUS");
            C405PLBDCUWRITETHRU_port_name = new NamedObject("C405PLBDCUWRITETHRU");
            C405PLBICUABORT_port_name = new NamedObject("C405PLBICUABORT");
            C405PLBICUABUS_port_name = new NamedObject("C405PLBICUABUS");
            C405PLBICUCACHEABLE_port_name = new NamedObject("C405PLBICUCACHEABLE");
            C405PLBICUPRIORITY_port_name = new NamedObject("C405PLBICUPRIORITY");
            C405PLBICUREQUEST_port_name = new NamedObject("C405PLBICUREQUEST");
            C405PLBICUSIZE_port_name = new NamedObject("C405PLBICUSIZE");
            C405PLBICUU0ATTR_port_name = new NamedObject("C405PLBICUU0ATTR");
            C405RSTCHIPRESETREQ_port_name = new NamedObject("C405RSTCHIPRESETREQ");
            C405RSTCORERESETREQ_port_name = new NamedObject("C405RSTCORERESETREQ");
            C405RSTSYSRESETREQ_port_name = new NamedObject("C405RSTSYSRESETREQ");
            C405TRCCYCLE_port_name = new NamedObject("C405TRCCYCLE");
            C405TRCEVENEXECUTIONSTATUS_port_name = new NamedObject("C405TRCEVENEXECUTIONSTATUS");
            C405TRCODDEXECUTIONSTATUS_port_name = new NamedObject("C405TRCODDEXECUTIONSTATUS");
            C405TRCTRACESTATUS_port_name = new NamedObject("C405TRCTRACESTATUS");
            C405TRCTRIGGEREVENTOUT_port_name = new NamedObject("C405TRCTRIGGEREVENTOUT");
            C405TRCTRIGGEREVENTTYPE_port_name = new NamedObject("C405TRCTRIGGEREVENTTYPE");
            C405XXXMACHINECHECK_port_name = new NamedObject("C405XXXMACHINECHECK");
            DSOCMBRAMABUS_port_name = new NamedObject("DSOCMBRAMABUS");
            DSOCMBRAMBYTEWRITE_port_name = new NamedObject("DSOCMBRAMBYTEWRITE");
            DSOCMBRAMEN_port_name = new NamedObject("DSOCMBRAMEN");
            DSOCMBRAMWRDBUS_port_name = new NamedObject("DSOCMBRAMWRDBUS");
            DSOCMBUSY_port_name = new NamedObject("DSOCMBUSY");
            ISOCMBRAMEN_port_name = new NamedObject("ISOCMBRAMEN");
            ISOCMBRAMEVENWRITEEN_port_name = new NamedObject("ISOCMBRAMEVENWRITEEN");
            ISOCMBRAMODDWRITEEN_port_name = new NamedObject("ISOCMBRAMODDWRITEEN");
            ISOCMBRAMRDABUS_port_name = new NamedObject("ISOCMBRAMRDABUS");
            ISOCMBRAMWRABUS_port_name = new NamedObject("ISOCMBRAMWRABUS");
            ISOCMBRAMWRDBUS_port_name = new NamedObject("ISOCMBRAMWRDBUS");
            BRAMDSOCMCLK_port_name = new NamedObject("BRAMDSOCMCLK");
            BRAMDSOCMRDDBUS_port_name = new NamedObject("BRAMDSOCMRDDBUS");
            BRAMISOCMCLK_port_name = new NamedObject("BRAMISOCMCLK");
            BRAMISOCMRDDBUS_port_name = new NamedObject("BRAMISOCMRDDBUS");
            CPMC405CLOCK_port_name = new NamedObject("CPMC405CLOCK");
            CPMC405CORECLKINACTIVE_port_name = new NamedObject("CPMC405CORECLKINACTIVE");
            CPMC405CPUCLKEN_port_name = new NamedObject("CPMC405CPUCLKEN");
            CPMC405JTAGCLKEN_port_name = new NamedObject("CPMC405JTAGCLKEN");
            CPMC405TIMERCLKEN_port_name = new NamedObject("CPMC405TIMERCLKEN");
            CPMC405TIMERTICK_port_name = new NamedObject("CPMC405TIMERTICK");
            DBGC405DEBUGHALT_port_name = new NamedObject("DBGC405DEBUGHALT");
            DBGC405EXTBUSHOLDACK_port_name = new NamedObject("DBGC405EXTBUSHOLDACK");
            DBGC405UNCONDDEBUGEVENT_port_name = new NamedObject("DBGC405UNCONDDEBUGEVENT");
            DCRC405ACK_port_name = new NamedObject("DCRC405ACK");
            DCRC405DBUSIN_port_name = new NamedObject("DCRC405DBUSIN");
            DSARCVALUE_port_name = new NamedObject("DSARCVALUE");
            DSCNTLVALUE_port_name = new NamedObject("DSCNTLVALUE");
            EICC405CRITINPUTIRQ_port_name = new NamedObject("EICC405CRITINPUTIRQ");
            EICC405EXTINPUTIRQ_port_name = new NamedObject("EICC405EXTINPUTIRQ");
            ISARCVALUE_port_name = new NamedObject("ISARCVALUE");
            ISCNTLVALUE_port_name = new NamedObject("ISCNTLVALUE");
            JTGC405BNDSCANTDO_port_name = new NamedObject("JTGC405BNDSCANTDO");
            JTGC405TCK_port_name = new NamedObject("JTGC405TCK");
            JTGC405TDI_port_name = new NamedObject("JTGC405TDI");
            JTGC405TMS_port_name = new NamedObject("JTGC405TMS");
            JTGC405TRSTNEG_port_name = new NamedObject("JTGC405TRSTNEG");
            MCBCPUCLKEN_port_name = new NamedObject("MCBCPUCLKEN");
            MCBJTAGEN_port_name = new NamedObject("MCBJTAGEN");
            MCBTIMEREN_port_name = new NamedObject("MCBTIMEREN");
            MCPPCRST_port_name = new NamedObject("MCPPCRST");
            PLBC405DCUADDRACK_port_name = new NamedObject("PLBC405DCUADDRACK");
            PLBC405DCUBUSY_port_name = new NamedObject("PLBC405DCUBUSY");
            PLBC405DCUERR_port_name = new NamedObject("PLBC405DCUERR");
            PLBC405DCURDDACK_port_name = new NamedObject("PLBC405DCURDDACK");
            PLBC405DCURDDBUS_port_name = new NamedObject("PLBC405DCURDDBUS");
            PLBC405DCURDWDADDR_port_name = new NamedObject("PLBC405DCURDWDADDR");
            PLBC405DCUSSIZE1_port_name = new NamedObject("PLBC405DCUSSIZE1");
            PLBC405DCUWRDACK_port_name = new NamedObject("PLBC405DCUWRDACK");
            PLBC405ICUADDRACK_port_name = new NamedObject("PLBC405ICUADDRACK");
            PLBC405ICUBUSY_port_name = new NamedObject("PLBC405ICUBUSY");
            PLBC405ICUERR_port_name = new NamedObject("PLBC405ICUERR");
            PLBC405ICURDDACK_port_name = new NamedObject("PLBC405ICURDDACK");
            PLBC405ICURDDBUS_port_name = new NamedObject("PLBC405ICURDDBUS");
            PLBC405ICURDWDADDR_port_name = new NamedObject("PLBC405ICURDWDADDR");
            PLBC405ICUSSIZE1_port_name = new NamedObject("PLBC405ICUSSIZE1");
            PLBCLK_port_name = new NamedObject("PLBCLK");
            RSTC405RESETCHIP_port_name = new NamedObject("RSTC405RESETCHIP");
            RSTC405RESETCORE_port_name = new NamedObject("RSTC405RESETCORE");
            RSTC405RESETSYS_port_name = new NamedObject("RSTC405RESETSYS");
            TIEC405DETERMINISTICMULT_port_name = new NamedObject("TIEC405DETERMINISTICMULT");
            TIEC405DISOPERANDFWD_port_name = new NamedObject("TIEC405DISOPERANDFWD");
            TIEC405MMUEN_port_name = new NamedObject("TIEC405MMUEN");
            TIEDSOCMDCRADDR_port_name = new NamedObject("TIEDSOCMDCRADDR");
            TIEISOCMDCRADDR_port_name = new NamedObject("TIEISOCMDCRADDR");
            TRCC405TRACEDISABLE_port_name = new NamedObject("TRCC405TRACEDISABLE");
            TRCC405TRIGGEREVENTIN_port_name = new NamedObject("TRCC405TRIGGEREVENTIN");
            APUFCMDECODED_port_name = new NamedObject("APUFCMDECODED");
            APUFCMDECUDI_port_name = new NamedObject("APUFCMDECUDI");
            APUFCMDECUDIVALID_port_name = new NamedObject("APUFCMDECUDIVALID");
            APUFCMENDIAN_port_name = new NamedObject("APUFCMENDIAN");
            APUFCMFLUSH_port_name = new NamedObject("APUFCMFLUSH");
            APUFCMINSTRUCTION_port_name = new NamedObject("APUFCMINSTRUCTION");
            APUFCMINSTRVALID_port_name = new NamedObject("APUFCMINSTRVALID");
            APUFCMLOADBYTEEN_port_name = new NamedObject("APUFCMLOADBYTEEN");
            APUFCMLOADDATA_port_name = new NamedObject("APUFCMLOADDATA");
            APUFCMLOADDVALID_port_name = new NamedObject("APUFCMLOADDVALID");
            APUFCMOPERANDVALID_port_name = new NamedObject("APUFCMOPERANDVALID");
            APUFCMRADATA_port_name = new NamedObject("APUFCMRADATA");
            APUFCMRBDATA_port_name = new NamedObject("APUFCMRBDATA");
            APUFCMWRITEBACKOK_port_name = new NamedObject("APUFCMWRITEBACKOK");
            APUFCMXERCA_port_name = new NamedObject("APUFCMXERCA");
            C405DBGLOADDATAONAPUDBUS_port_name = new NamedObject("C405DBGLOADDATAONAPUDBUS");
            DCREMACENABLER_port_name = new NamedObject("DCREMACENABLER");
            DSOCMRDADDRVALID_port_name = new NamedObject("DSOCMRDADDRVALID");
            DSOCMWRADDRVALID_port_name = new NamedObject("DSOCMWRADDRVALID");
            EXTDCRABUS_port_name = new NamedObject("EXTDCRABUS");
            EXTDCRDBUSOUT_port_name = new NamedObject("EXTDCRDBUSOUT");
            EXTDCRREAD_port_name = new NamedObject("EXTDCRREAD");
            EXTDCRWRITE_port_name = new NamedObject("EXTDCRWRITE");
            ISOCMDCRBRAMEVENEN_port_name = new NamedObject("ISOCMDCRBRAMEVENEN");
            ISOCMDCRBRAMODDEN_port_name = new NamedObject("ISOCMDCRBRAMODDEN");
            ISOCMDCRBRAMRDSELECT_port_name = new NamedObject("ISOCMDCRBRAMRDSELECT");
            BRAMISOCMDCRRDDBUS_port_name = new NamedObject("BRAMISOCMDCRRDDBUS");
            CPMC405SYNCBYPASS_port_name = new NamedObject("CPMC405SYNCBYPASS");
            CPMDCRCLK_port_name = new NamedObject("CPMDCRCLK");
            CPMFCMCLK_port_name = new NamedObject("CPMFCMCLK");
            DSOCMRWCOMPLETE_port_name = new NamedObject("DSOCMRWCOMPLETE");
            EXTDCRACK_port_name = new NamedObject("EXTDCRACK");
            EXTDCRDBUSIN_port_name = new NamedObject("EXTDCRDBUSIN");
            FCMAPUCR_port_name = new NamedObject("FCMAPUCR");
            FCMAPUDCDCREN_port_name = new NamedObject("FCMAPUDCDCREN");
            FCMAPUDCDFORCEALIGN_port_name = new NamedObject("FCMAPUDCDFORCEALIGN");
            FCMAPUDCDFORCEBESTEERING_port_name = new NamedObject("FCMAPUDCDFORCEBESTEERING");
            FCMAPUDCDFPUOP_port_name = new NamedObject("FCMAPUDCDFPUOP");
            FCMAPUDCDGPRWRITE_port_name = new NamedObject("FCMAPUDCDGPRWRITE");
            FCMAPUDCDLDSTBYTE_port_name = new NamedObject("FCMAPUDCDLDSTBYTE");
            FCMAPUDCDLDSTDW_port_name = new NamedObject("FCMAPUDCDLDSTDW");
            FCMAPUDCDLDSTHW_port_name = new NamedObject("FCMAPUDCDLDSTHW");
            FCMAPUDCDLDSTQW_port_name = new NamedObject("FCMAPUDCDLDSTQW");
            FCMAPUDCDLDSTWD_port_name = new NamedObject("FCMAPUDCDLDSTWD");
            FCMAPUDCDLOAD_port_name = new NamedObject("FCMAPUDCDLOAD");
            FCMAPUDCDPRIVOP_port_name = new NamedObject("FCMAPUDCDPRIVOP");
            FCMAPUDCDRAEN_port_name = new NamedObject("FCMAPUDCDRAEN");
            FCMAPUDCDRBEN_port_name = new NamedObject("FCMAPUDCDRBEN");
            FCMAPUDCDSTORE_port_name = new NamedObject("FCMAPUDCDSTORE");
            FCMAPUDCDTRAPBE_port_name = new NamedObject("FCMAPUDCDTRAPBE");
            FCMAPUDCDTRAPLE_port_name = new NamedObject("FCMAPUDCDTRAPLE");
            FCMAPUDCDUPDATE_port_name = new NamedObject("FCMAPUDCDUPDATE");
            FCMAPUDCDXERCAEN_port_name = new NamedObject("FCMAPUDCDXERCAEN");
            FCMAPUDCDXEROVEN_port_name = new NamedObject("FCMAPUDCDXEROVEN");
            FCMAPUDECODEBUSY_port_name = new NamedObject("FCMAPUDECODEBUSY");
            FCMAPUDONE_port_name = new NamedObject("FCMAPUDONE");
            FCMAPUEXCEPTION_port_name = new NamedObject("FCMAPUEXCEPTION");
            FCMAPUEXEBLOCKINGMCO_port_name = new NamedObject("FCMAPUEXEBLOCKINGMCO");
            FCMAPUEXECRFIELD_port_name = new NamedObject("FCMAPUEXECRFIELD");
            FCMAPUEXENONBLOCKINGMCO_port_name = new NamedObject("FCMAPUEXENONBLOCKINGMCO");
            FCMAPUINSTRACK_port_name = new NamedObject("FCMAPUINSTRACK");
            FCMAPULOADWAIT_port_name = new NamedObject("FCMAPULOADWAIT");
            FCMAPURESULT_port_name = new NamedObject("FCMAPURESULT");
            FCMAPURESULTVALID_port_name = new NamedObject("FCMAPURESULTVALID");
            FCMAPUSLEEPNOTREADY_port_name = new NamedObject("FCMAPUSLEEPNOTREADY");
            FCMAPUXERCA_port_name = new NamedObject("FCMAPUXERCA");
            FCMAPUXEROV_port_name = new NamedObject("FCMAPUXEROV");
            TIEAPUCONTROL_port_name = new NamedObject("TIEAPUCONTROL");
            TIEAPUUDI1_port_name = new NamedObject("TIEAPUUDI1");
            TIEAPUUDI2_port_name = new NamedObject("TIEAPUUDI2");
            TIEAPUUDI3_port_name = new NamedObject("TIEAPUUDI3");
            TIEAPUUDI4_port_name = new NamedObject("TIEAPUUDI4");
            TIEAPUUDI5_port_name = new NamedObject("TIEAPUUDI5");
            TIEAPUUDI6_port_name = new NamedObject("TIEAPUUDI6");
            TIEAPUUDI7_port_name = new NamedObject("TIEAPUUDI7");
            TIEAPUUDI8_port_name = new NamedObject("TIEAPUUDI8");
            TIEDCRADDR_port_name = new NamedObject("TIEDCRADDR");
            TIEPVRBIT10_port_name = new NamedObject("TIEPVRBIT10");
            TIEPVRBIT11_port_name = new NamedObject("TIEPVRBIT11");
            TIEPVRBIT28_port_name = new NamedObject("TIEPVRBIT28");
            TIEPVRBIT29_port_name = new NamedObject("TIEPVRBIT29");
            TIEPVRBIT30_port_name = new NamedObject("TIEPVRBIT30");
            TIEPVRBIT31_port_name = new NamedObject("TIEPVRBIT31");
            TIEPVRBIT8_port_name = new NamedObject("TIEPVRBIT8");
            TIEPVRBIT9_port_name = new NamedObject("TIEPVRBIT9");
            DPO_port_name = new NamedObject("DPO");
            SPO_port_name = new NamedObject("SPO");
            DPRA_port_name = new NamedObject("DPRA");
            WCLK_port_name = new NamedObject("WCLK");
            WE_port_name = new NamedObject("WE");
            A0_port_name = new NamedObject("A0");
            A1_port_name = new NamedObject("A1");
            A2_port_name = new NamedObject("A2");
            A3_port_name = new NamedObject("A3");
            A4_port_name = new NamedObject("A4");
            A5_port_name = new NamedObject("A5");
            A6_port_name = new NamedObject("A6");
            DPRA0_port_name = new NamedObject("DPRA0");
            DPRA1_port_name = new NamedObject("DPRA1");
            DPRA2_port_name = new NamedObject("DPRA2");
            DPRA3_port_name = new NamedObject("DPRA3");
            O0_port_name = new NamedObject("O0");
            O1_port_name = new NamedObject("O1");
            O2_port_name = new NamedObject("O2");
            O3_port_name = new NamedObject("O3");
            DOC_port_name = new NamedObject("DOC");
            DOD_port_name = new NamedObject("DOD");
            ADDRA_port_name = new NamedObject("ADDRA");
            ADDRB_port_name = new NamedObject("ADDRB");
            ADDRC_port_name = new NamedObject("ADDRC");
            ADDRD_port_name = new NamedObject("ADDRD");
            DIC_port_name = new NamedObject("DIC");
            DID_port_name = new NamedObject("DID");
            DPRA4_port_name = new NamedObject("DPRA4");
            DPRA5_port_name = new NamedObject("DPRA5");
            CASCADEOUTA_port_name = new NamedObject("CASCADEOUTA");
            CASCADEOUTB_port_name = new NamedObject("CASCADEOUTB");
            DOPA_port_name = new NamedObject("DOPA");
            DOPB_port_name = new NamedObject("DOPB");
            CASCADEINA_port_name = new NamedObject("CASCADEINA");
            CASCADEINB_port_name = new NamedObject("CASCADEINB");
            DIPA_port_name = new NamedObject("DIPA");
            DIPB_port_name = new NamedObject("DIPB");
            ENA_port_name = new NamedObject("ENA");
            ENB_port_name = new NamedObject("ENB");
            REGCEA_port_name = new NamedObject("REGCEA");
            REGCEB_port_name = new NamedObject("REGCEB");
            SSRA_port_name = new NamedObject("SSRA");
            SSRB_port_name = new NamedObject("SSRB");
            WEA_port_name = new NamedObject("WEA");
            WEB_port_name = new NamedObject("WEB");
            ADDR_port_name = new NamedObject("ADDR");
            EN_port_name = new NamedObject("EN");
            SSR_port_name = new NamedObject("SSR");
            RDADDR_port_name = new NamedObject("RDADDR");
            REGCE_port_name = new NamedObject("REGCE");
            WRADDR_port_name = new NamedObject("WRADDR");
            CASCADEOUTLATA_port_name = new NamedObject("CASCADEOUTLATA");
            CASCADEOUTLATB_port_name = new NamedObject("CASCADEOUTLATB");
            CASCADEOUTREGA_port_name = new NamedObject("CASCADEOUTREGA");
            CASCADEOUTREGB_port_name = new NamedObject("CASCADEOUTREGB");
            CASCADEINLATA_port_name = new NamedObject("CASCADEINLATA");
            CASCADEINLATB_port_name = new NamedObject("CASCADEINLATB");
            CASCADEINREGA_port_name = new NamedObject("CASCADEINREGA");
            CASCADEINREGB_port_name = new NamedObject("CASCADEINREGB");
            ADDRAL_port_name = new NamedObject("ADDRAL");
            ADDRAU_port_name = new NamedObject("ADDRAU");
            ADDRBL_port_name = new NamedObject("ADDRBL");
            ADDRBU_port_name = new NamedObject("ADDRBU");
            CLKAL_port_name = new NamedObject("CLKAL");
            CLKAU_port_name = new NamedObject("CLKAU");
            CLKBL_port_name = new NamedObject("CLKBL");
            CLKBU_port_name = new NamedObject("CLKBU");
            ENAL_port_name = new NamedObject("ENAL");
            ENAU_port_name = new NamedObject("ENAU");
            ENBL_port_name = new NamedObject("ENBL");
            ENBU_port_name = new NamedObject("ENBU");
            REGCEAL_port_name = new NamedObject("REGCEAL");
            REGCEAU_port_name = new NamedObject("REGCEAU");
            REGCEBL_port_name = new NamedObject("REGCEBL");
            REGCEBU_port_name = new NamedObject("REGCEBU");
            REGCLKAL_port_name = new NamedObject("REGCLKAL");
            REGCLKAU_port_name = new NamedObject("REGCLKAU");
            REGCLKBL_port_name = new NamedObject("REGCLKBL");
            REGCLKBU_port_name = new NamedObject("REGCLKBU");
            SSRAL_port_name = new NamedObject("SSRAL");
            SSRAU_port_name = new NamedObject("SSRAU");
            SSRBL_port_name = new NamedObject("SSRBL");
            SSRBU_port_name = new NamedObject("SSRBU");
            WEAL_port_name = new NamedObject("WEAL");
            WEAU_port_name = new NamedObject("WEAU");
            WEBL_port_name = new NamedObject("WEBL");
            WEBU_port_name = new NamedObject("WEBU");
            RDADDRL_port_name = new NamedObject("RDADDRL");
            RDADDRU_port_name = new NamedObject("RDADDRU");
            RDENU_port_name = new NamedObject("RDENU");
            RDENL_port_name = new NamedObject("RDENL");
            REGCEL_port_name = new NamedObject("REGCEL");
            REGCEU_port_name = new NamedObject("REGCEU");
            SSRL_port_name = new NamedObject("SSRL");
            SSRU_port_name = new NamedObject("SSRU");
            WEL_port_name = new NamedObject("WEL");
            WEU_port_name = new NamedObject("WEU");
            WRADDRL_port_name = new NamedObject("WRADDRL");
            WRADDRU_port_name = new NamedObject("WRADDRU");
            WRENL_port_name = new NamedObject("WRENL");
            WRENU_port_name = new NamedObject("WRENU");
            A7_port_name = new NamedObject("A7");
            Q15_port_name = new NamedObject("Q15");
            Q31_port_name = new NamedObject("Q31");
            GSROUT_port_name = new NamedObject("GSROUT");
            GSRIN_port_name = new NamedObject("GSRIN");
            GTSOUT_port_name = new NamedObject("GTSOUT");
            GTSIN_port_name = new NamedObject("GTSIN");
            EOSOUT_port_name = new NamedObject("EOSOUT");
            USRCCLKOIN_port_name = new NamedObject("USRCCLKOIN");
            USRCCLKTSIN_port_name = new NamedObject("USRCCLKTSIN");
            USRDONEOIN_port_name = new NamedObject("USRDONEOIN");
            USRDONETSIN_port_name = new NamedObject("USRDONETSIN");
            MBT_port_name = new NamedObject("MBT");
            EOS_port_name = new NamedObject("EOS");
            USRCCLKO_port_name = new NamedObject("USRCCLKO");
            USRCCLKTS_port_name = new NamedObject("USRCCLKTS");
            USRDONEO_port_name = new NamedObject("USRDONEO");
            USRDONETS_port_name = new NamedObject("USRDONETS");
            CFGCLK_port_name = new NamedObject("CFGCLK");
            CFGMCLK_port_name = new NamedObject("CFGMCLK");
            DINSPI_port_name = new NamedObject("DINSPI");
            TCKSPI_port_name = new NamedObject("TCKSPI");
            DATA_port_name = new NamedObject("DATA");
            DATAVALID_port_name = new NamedObject("DATAVALID");
            LI_port_name = new NamedObject("LI");
        } catch (InvalidEdifNameException e) {
            // this should never happen
            throw new RuntimeException(e);
        }
    }

    public static EdifCell AND2() {
        return _AND2;
    }

    public static EdifCell AND2B1() {
        return _AND2B1;
    }

    public static EdifCell AND2B2() {
        return _AND2B2;
    }

    public static EdifCell AND3() {
        return _AND3;
    }

    public static EdifCell AND3B1() {
        return _AND3B1;
    }

    public static EdifCell AND3B2() {
        return _AND3B2;
    }

    public static EdifCell AND3B3() {
        return _AND3B3;
    }

    public static EdifCell AND4() {
        return _AND4;
    }

    public static EdifCell AND4B1() {
        return _AND4B1;
    }

    public static EdifCell AND4B2() {
        return _AND4B2;
    }

    public static EdifCell AND4B3() {
        return _AND4B3;
    }

    public static EdifCell AND4B4() {
        return _AND4B4;
    }

    public static EdifCell AND5() {
        return _AND5;
    }

    public static EdifCell AND5B1() {
        return _AND5B1;
    }

    public static EdifCell AND5B2() {
        return _AND5B2;
    }

    public static EdifCell AND5B3() {
        return _AND5B3;
    }

    public static EdifCell AND5B4() {
        return _AND5B4;
    }

    public static EdifCell AND5B5() {
        return _AND5B5;
    }

    public static EdifCell AND6() {
        return _AND6;
    }

    public static EdifCell AND7() {
        return _AND7;
    }

    public static EdifCell AND8() {
        return _AND8;
    }

    public static EdifCell BSCAN_FPGACORE() {
        return _BSCAN_FPGACORE;
    }

    public static EdifCell BSCAN_SPARTAN2() {
        return _BSCAN_SPARTAN2;
    }

    public static EdifCell BSCAN_SPARTAN3() {
        return _BSCAN_SPARTAN3;
    }

    public static EdifCell BSCAN_VIRTEX() {
        return _BSCAN_VIRTEX;
    }

    public static EdifCell BSCAN_VIRTEX2() {
        return _BSCAN_VIRTEX2;
    }

    public static EdifCell BSCAN_VIRTEX4() {
        return _BSCAN_VIRTEX4;
    }

    public static EdifCell BSCAN_VIRTEX5() {
        return _BSCAN_VIRTEX5;
    }

    public static EdifCell BUF() {
        return _BUF;
    }

    public static EdifCell BUFCF() {
        return _BUFCF;
    }

    public static EdifCell BUFE() {
        return _BUFE;
    }

    public static EdifCell BUFFOE() {
        return _BUFFOE;
    }

    public static EdifCell BUFG() {
        return _BUFG;
    }

    public static EdifCell BUFGCE() {
        return _BUFGCE;
    }

    public static EdifCell BUFGCE_1() {
        return _BUFGCE_1;
    }

    public static EdifCell BUFGCTRL() {
        return _BUFGCTRL;
    }

    public static EdifCell BUFGDLL() {
        return _BUFGDLL;
    }

    public static EdifCell BUFGMUX() {
        return _BUFGMUX;
    }

    public static EdifCell BUFGMUX_1() {
        return _BUFGMUX_1;
    }

    public static EdifCell BUFGMUX_CTRL() {
        return _BUFGMUX_CTRL;
    }

    public static EdifCell BUFGMUX_VIRTEX4() {
        return _BUFGMUX_VIRTEX4;
    }

    public static EdifCell BUFGP() {
        return _BUFGP;
    }

    public static EdifCell BUFGSR() {
        return _BUFGSR;
    }

    public static EdifCell BUFGTS() {
        return _BUFGTS;
    }

    public static EdifCell BUFIO() {
        return _BUFIO;
    }

    public static EdifCell BUFR() {
        return _BUFR;
    }

    public static EdifCell BUFT() {
        return _BUFT;
    }

    public static EdifCell CAPTURE_FPGACORE() {
        return _CAPTURE_FPGACORE;
    }

    public static EdifCell CAPTURE_SPARTAN2() {
        return _CAPTURE_SPARTAN2;
    }

    public static EdifCell CAPTURE_SPARTAN3() {
        return _CAPTURE_SPARTAN3;
    }

    public static EdifCell CAPTURE_VIRTEX() {
        return _CAPTURE_VIRTEX;
    }

    public static EdifCell CAPTURE_VIRTEX2() {
        return _CAPTURE_VIRTEX2;
    }

    public static EdifCell CAPTURE_VIRTEX4() {
        return _CAPTURE_VIRTEX4;
    }

    public static EdifCell CAPTURE_VIRTEX5() {
        return _CAPTURE_VIRTEX5;
    }

    public static EdifCell CARRY4() {
        return _CARRY4;
    }

    public static EdifCell CFGLUT5() {
        return _CFGLUT5;
    }

    public static EdifCell CLK_DIV10() {
        return _CLK_DIV10;
    }

    public static EdifCell CLK_DIV10R() {
        return _CLK_DIV10R;
    }

    public static EdifCell CLK_DIV10RSD() {
        return _CLK_DIV10RSD;
    }

    public static EdifCell CLK_DIV10SD() {
        return _CLK_DIV10SD;
    }

    public static EdifCell CLK_DIV12() {
        return _CLK_DIV12;
    }

    public static EdifCell CLK_DIV12R() {
        return _CLK_DIV12R;
    }

    public static EdifCell CLK_DIV12RSD() {
        return _CLK_DIV12RSD;
    }

    public static EdifCell CLK_DIV12SD() {
        return _CLK_DIV12SD;
    }

    public static EdifCell CLK_DIV14() {
        return _CLK_DIV14;
    }

    public static EdifCell CLK_DIV14R() {
        return _CLK_DIV14R;
    }

    public static EdifCell CLK_DIV14RSD() {
        return _CLK_DIV14RSD;
    }

    public static EdifCell CLK_DIV14SD() {
        return _CLK_DIV14SD;
    }

    public static EdifCell CLK_DIV16() {
        return _CLK_DIV16;
    }

    public static EdifCell CLK_DIV16R() {
        return _CLK_DIV16R;
    }

    public static EdifCell CLK_DIV16RSD() {
        return _CLK_DIV16RSD;
    }

    public static EdifCell CLK_DIV16SD() {
        return _CLK_DIV16SD;
    }

    public static EdifCell CLK_DIV2() {
        return _CLK_DIV2;
    }

    public static EdifCell CLK_DIV2R() {
        return _CLK_DIV2R;
    }

    public static EdifCell CLK_DIV2RSD() {
        return _CLK_DIV2RSD;
    }

    public static EdifCell CLK_DIV2SD() {
        return _CLK_DIV2SD;
    }

    public static EdifCell CLK_DIV4() {
        return _CLK_DIV4;
    }

    public static EdifCell CLK_DIV4R() {
        return _CLK_DIV4R;
    }

    public static EdifCell CLK_DIV4RSD() {
        return _CLK_DIV4RSD;
    }

    public static EdifCell CLK_DIV4SD() {
        return _CLK_DIV4SD;
    }

    public static EdifCell CLK_DIV6() {
        return _CLK_DIV6;
    }

    public static EdifCell CLK_DIV6R() {
        return _CLK_DIV6R;
    }

    public static EdifCell CLK_DIV6RSD() {
        return _CLK_DIV6RSD;
    }

    public static EdifCell CLK_DIV6SD() {
        return _CLK_DIV6SD;
    }

    public static EdifCell CLK_DIV8() {
        return _CLK_DIV8;
    }

    public static EdifCell CLK_DIV8R() {
        return _CLK_DIV8R;
    }

    public static EdifCell CLK_DIV8RSD() {
        return _CLK_DIV8RSD;
    }

    public static EdifCell CLK_DIV8SD() {
        return _CLK_DIV8SD;
    }

    public static EdifCell CLKDLL() {
        return _CLKDLL;
    }

    public static EdifCell CLKDLLE() {
        return _CLKDLLE;
    }

    public static EdifCell CLKDLLHF() {
        return _CLKDLLHF;
    }

    public static EdifCell CONFIG() {
        return _CONFIG;
    }

    public static EdifCell CRC32() {
        return _CRC32;
    }

    public static EdifCell CRC64() {
        return _CRC64;
    }

    public static EdifCell DCC_FPGACORE() {
        return _DCC_FPGACORE;
    }

    public static EdifCell DCIRESET() {
        return _DCIRESET;
    }

    public static EdifCell DCM() {
        return _DCM;
    }

    public static EdifCell DCM_ADV() {
        return _DCM_ADV;
    }

    public static EdifCell DCM_BASE() {
        return _DCM_BASE;
    }

    public static EdifCell DCM_PS() {
        return _DCM_PS;
    }

    public static EdifCell DCM_SP() {
        return _DCM_SP;
    }

    public static EdifCell DSP48() {
        return _DSP48;
    }

    public static EdifCell DSP48E() {
        return _DSP48E;
    }

    public static EdifCell EMAC() {
        return _EMAC;
    }

    public static EdifCell FD() {
        return _FD;
    }

    public static EdifCell FD_1() {
        return _FD_1;
    }

    public static EdifCell FDC() {
        return _FDC;
    }

    public static EdifCell FDC_1() {
        return _FDC_1;
    }

    public static EdifCell FDCE() {
        return _FDCE;
    }

    public static EdifCell FDCE_1() {
        return _FDCE_1;
    }

    public static EdifCell FDCP() {
        return _FDCP;
    }

    public static EdifCell FDCP_1() {
        return _FDCP_1;
    }

    public static EdifCell FDCPE() {
        return _FDCPE;
    }

    public static EdifCell FDCPE_1() {
        return _FDCPE_1;
    }

    public static EdifCell FDCPX1() {
        return _FDCPX1;
    }

    public static EdifCell FDD() {
        return _FDD;
    }

    public static EdifCell FDDC() {
        return _FDDC;
    }

    public static EdifCell FDDCE() {
        return _FDDCE;
    }

    public static EdifCell FDDCP() {
        return _FDDCP;
    }

    public static EdifCell FDDCPE() {
        return _FDDCPE;
    }

    public static EdifCell FDDP() {
        return _FDDP;
    }

    public static EdifCell FDDPE() {
        return _FDDPE;
    }

    public static EdifCell FDDRCPE() {
        return _FDDRCPE;
    }

    public static EdifCell FDDRRSE() {
        return _FDDRRSE;
    }

    public static EdifCell FDE() {
        return _FDE;
    }

    public static EdifCell FDE_1() {
        return _FDE_1;
    }

    public static EdifCell FDP() {
        return _FDP;
    }

    public static EdifCell FDP_1() {
        return _FDP_1;
    }

    public static EdifCell FDPE() {
        return _FDPE;
    }

    public static EdifCell FDPE_1() {
        return _FDPE_1;
    }

    public static EdifCell FDR() {
        return _FDR;
    }

    public static EdifCell FDR_1() {
        return _FDR_1;
    }

    public static EdifCell FDRE() {
        return _FDRE;
    }

    public static EdifCell FDRE_1() {
        return _FDRE_1;
    }

    public static EdifCell FDRS() {
        return _FDRS;
    }

    public static EdifCell FDRS_1() {
        return _FDRS_1;
    }

    public static EdifCell FDRSE() {
        return _FDRSE;
    }

    public static EdifCell FDRSE_1() {
        return _FDRSE_1;
    }

    public static EdifCell FDS() {
        return _FDS;
    }

    public static EdifCell FDS_1() {
        return _FDS_1;
    }

    public static EdifCell FDSE() {
        return _FDSE;
    }

    public static EdifCell FDSE_1() {
        return _FDSE_1;
    }

    public static EdifCell FIFO16() {
        return _FIFO16;
    }

    public static EdifCell FIFO18() {
        return _FIFO18;
    }

    public static EdifCell FIFO18_36() {
        return _FIFO18_36;
    }

    public static EdifCell FIFO36() {
        return _FIFO36;
    }

    public static EdifCell FIFO36_72() {
        return _FIFO36_72;
    }

    public static EdifCell FIFO36_72_EXP() {
        return _FIFO36_72_EXP;
    }

    public static EdifCell FIFO36_EXP() {
        return _FIFO36_EXP;
    }

    public static EdifCell FMAP() {
        return _FMAP;
    }

    public static EdifCell FRAME_ECC_VIRTEX4() {
        return _FRAME_ECC_VIRTEX4;
    }

    public static EdifCell FRAME_ECC_VIRTEX5() {
        return _FRAME_ECC_VIRTEX5;
    }

    public static EdifCell FTC() {
        return _FTC;
    }

    public static EdifCell FTCP() {
        return _FTCP;
    }

    public static EdifCell FTP() {
        return _FTP;
    }

    public static EdifCell GND() {
        return _GND;
    }

    public static EdifCell GT() {
        return _GT;
    }

    public static EdifCell GT10() {
        return _GT10;
    }

    public static EdifCell GT10_10GE_4() {
        return _GT10_10GE_4;
    }

    public static EdifCell GT10_10GE_8() {
        return _GT10_10GE_8;
    }

    public static EdifCell GT10_10GFC_4() {
        return _GT10_10GFC_4;
    }

    public static EdifCell GT10_10GFC_8() {
        return _GT10_10GFC_8;
    }

    public static EdifCell GT10_AURORA_1() {
        return _GT10_AURORA_1;
    }

    public static EdifCell GT10_AURORA_2() {
        return _GT10_AURORA_2;
    }

    public static EdifCell GT10_AURORA_4() {
        return _GT10_AURORA_4;
    }

    public static EdifCell GT10_AURORAX_4() {
        return _GT10_AURORAX_4;
    }

    public static EdifCell GT10_AURORAX_8() {
        return _GT10_AURORAX_8;
    }

    public static EdifCell GT10_CUSTOM() {
        return _GT10_CUSTOM;
    }

    public static EdifCell GT10_INFINIBAND_1() {
        return _GT10_INFINIBAND_1;
    }

    public static EdifCell GT10_INFINIBAND_2() {
        return _GT10_INFINIBAND_2;
    }

    public static EdifCell GT10_INFINIBAND_4() {
        return _GT10_INFINIBAND_4;
    }

    public static EdifCell GT10_OC192_4() {
        return _GT10_OC192_4;
    }

    public static EdifCell GT10_OC192_8() {
        return _GT10_OC192_8;
    }

    public static EdifCell GT10_OC48_1() {
        return _GT10_OC48_1;
    }

    public static EdifCell GT10_OC48_2() {
        return _GT10_OC48_2;
    }

    public static EdifCell GT10_OC48_4() {
        return _GT10_OC48_4;
    }

    public static EdifCell GT10_PCI_EXPRESS_1() {
        return _GT10_PCI_EXPRESS_1;
    }

    public static EdifCell GT10_PCI_EXPRESS_2() {
        return _GT10_PCI_EXPRESS_2;
    }

    public static EdifCell GT10_PCI_EXPRESS_4() {
        return _GT10_PCI_EXPRESS_4;
    }

    public static EdifCell GT10_XAUI_1() {
        return _GT10_XAUI_1;
    }

    public static EdifCell GT10_XAUI_2() {
        return _GT10_XAUI_2;
    }

    public static EdifCell GT10_XAUI_4() {
        return _GT10_XAUI_4;
    }

    public static EdifCell GT11() {
        return _GT11;
    }

    public static EdifCell GT11_CUSTOM() {
        return _GT11_CUSTOM;
    }

    public static EdifCell GT11_DUAL() {
        return _GT11_DUAL;
    }

    public static EdifCell GT11CLK() {
        return _GT11CLK;
    }

    public static EdifCell GT11CLK_MGT() {
        return _GT11CLK_MGT;
    }

    public static EdifCell GT_AURORA_1() {
        return _GT_AURORA_1;
    }

    public static EdifCell GT_AURORA_2() {
        return _GT_AURORA_2;
    }

    public static EdifCell GT_AURORA_4() {
        return _GT_AURORA_4;
    }

    public static EdifCell GT_CUSTOM() {
        return _GT_CUSTOM;
    }

    public static EdifCell GT_ETHERNET_1() {
        return _GT_ETHERNET_1;
    }

    public static EdifCell GT_ETHERNET_2() {
        return _GT_ETHERNET_2;
    }

    public static EdifCell GT_ETHERNET_4() {
        return _GT_ETHERNET_4;
    }

    public static EdifCell GT_FIBRE_CHAN_1() {
        return _GT_FIBRE_CHAN_1;
    }

    public static EdifCell GT_FIBRE_CHAN_2() {
        return _GT_FIBRE_CHAN_2;
    }

    public static EdifCell GT_FIBRE_CHAN_4() {
        return _GT_FIBRE_CHAN_4;
    }

    public static EdifCell GT_INFINIBAND_1() {
        return _GT_INFINIBAND_1;
    }

    public static EdifCell GT_INFINIBAND_2() {
        return _GT_INFINIBAND_2;
    }

    public static EdifCell GT_INFINIBAND_4() {
        return _GT_INFINIBAND_4;
    }

    public static EdifCell GT_XAUI_1() {
        return _GT_XAUI_1;
    }

    public static EdifCell GT_XAUI_2() {
        return _GT_XAUI_2;
    }

    public static EdifCell GT_XAUI_4() {
        return _GT_XAUI_4;
    }

    public static EdifCell IBUF() {
        return _IBUF;
    }

    public static EdifCell IBUF_AGP() {
        return _IBUF_AGP;
    }

    public static EdifCell IBUF_CTT() {
        return _IBUF_CTT;
    }

    public static EdifCell IBUF_GTL() {
        return _IBUF_GTL;
    }

    public static EdifCell IBUF_GTL_DCI() {
        return _IBUF_GTL_DCI;
    }

    public static EdifCell IBUF_GTLP() {
        return _IBUF_GTLP;
    }

    public static EdifCell IBUF_GTLP_DCI() {
        return _IBUF_GTLP_DCI;
    }

    public static EdifCell IBUF_HSTL_I() {
        return _IBUF_HSTL_I;
    }

    public static EdifCell IBUF_HSTL_I_18() {
        return _IBUF_HSTL_I_18;
    }

    public static EdifCell IBUF_HSTL_I_DCI() {
        return _IBUF_HSTL_I_DCI;
    }

    public static EdifCell IBUF_HSTL_I_DCI_18() {
        return _IBUF_HSTL_I_DCI_18;
    }

    public static EdifCell IBUF_HSTL_II() {
        return _IBUF_HSTL_II;
    }

    public static EdifCell IBUF_HSTL_II_18() {
        return _IBUF_HSTL_II_18;
    }

    public static EdifCell IBUF_HSTL_II_DCI() {
        return _IBUF_HSTL_II_DCI;
    }

    public static EdifCell IBUF_HSTL_II_DCI_18() {
        return _IBUF_HSTL_II_DCI_18;
    }

    public static EdifCell IBUF_HSTL_III() {
        return _IBUF_HSTL_III;
    }

    public static EdifCell IBUF_HSTL_III_18() {
        return _IBUF_HSTL_III_18;
    }

    public static EdifCell IBUF_HSTL_III_DCI() {
        return _IBUF_HSTL_III_DCI;
    }

    public static EdifCell IBUF_HSTL_III_DCI_18() {
        return _IBUF_HSTL_III_DCI_18;
    }

    public static EdifCell IBUF_HSTL_IV() {
        return _IBUF_HSTL_IV;
    }

    public static EdifCell IBUF_HSTL_IV_18() {
        return _IBUF_HSTL_IV_18;
    }

    public static EdifCell IBUF_HSTL_IV_DCI() {
        return _IBUF_HSTL_IV_DCI;
    }

    public static EdifCell IBUF_HSTL_IV_DCI_18() {
        return _IBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell IBUF_LVCMOS12() {
        return _IBUF_LVCMOS12;
    }

    public static EdifCell IBUF_LVCMOS15() {
        return _IBUF_LVCMOS15;
    }

    public static EdifCell IBUF_LVCMOS18() {
        return _IBUF_LVCMOS18;
    }

    public static EdifCell IBUF_LVCMOS2() {
        return _IBUF_LVCMOS2;
    }

    public static EdifCell IBUF_LVCMOS25() {
        return _IBUF_LVCMOS25;
    }

    public static EdifCell IBUF_LVCMOS33() {
        return _IBUF_LVCMOS33;
    }

    public static EdifCell IBUF_LVDCI_15() {
        return _IBUF_LVDCI_15;
    }

    public static EdifCell IBUF_LVDCI_18() {
        return _IBUF_LVDCI_18;
    }

    public static EdifCell IBUF_LVDCI_25() {
        return _IBUF_LVDCI_25;
    }

    public static EdifCell IBUF_LVDCI_33() {
        return _IBUF_LVDCI_33;
    }

    public static EdifCell IBUF_LVDCI_DV2_15() {
        return _IBUF_LVDCI_DV2_15;
    }

    public static EdifCell IBUF_LVDCI_DV2_18() {
        return _IBUF_LVDCI_DV2_18;
    }

    public static EdifCell IBUF_LVDCI_DV2_25() {
        return _IBUF_LVDCI_DV2_25;
    }

    public static EdifCell IBUF_LVDCI_DV2_33() {
        return _IBUF_LVDCI_DV2_33;
    }

    public static EdifCell IBUF_LVDS() {
        return _IBUF_LVDS;
    }

    public static EdifCell IBUF_LVPECL() {
        return _IBUF_LVPECL;
    }

    public static EdifCell IBUF_LVTTL() {
        return _IBUF_LVTTL;
    }

    public static EdifCell IBUF_PCI33_3() {
        return _IBUF_PCI33_3;
    }

    public static EdifCell IBUF_PCI33_5() {
        return _IBUF_PCI33_5;
    }

    public static EdifCell IBUF_PCI66_3() {
        return _IBUF_PCI66_3;
    }

    public static EdifCell IBUF_PCIX() {
        return _IBUF_PCIX;
    }

    public static EdifCell IBUF_PCIX66_3() {
        return _IBUF_PCIX66_3;
    }

    public static EdifCell IBUF_SSTL18_I() {
        return _IBUF_SSTL18_I;
    }

    public static EdifCell IBUF_SSTL18_I_DCI() {
        return _IBUF_SSTL18_I_DCI;
    }

    public static EdifCell IBUF_SSTL18_II() {
        return _IBUF_SSTL18_II;
    }

    public static EdifCell IBUF_SSTL18_II_DCI() {
        return _IBUF_SSTL18_II_DCI;
    }

    public static EdifCell IBUF_SSTL2_I() {
        return _IBUF_SSTL2_I;
    }

    public static EdifCell IBUF_SSTL2_I_DCI() {
        return _IBUF_SSTL2_I_DCI;
    }

    public static EdifCell IBUF_SSTL2_II() {
        return _IBUF_SSTL2_II;
    }

    public static EdifCell IBUF_SSTL2_II_DCI() {
        return _IBUF_SSTL2_II_DCI;
    }

    public static EdifCell IBUF_SSTL3_I() {
        return _IBUF_SSTL3_I;
    }

    public static EdifCell IBUF_SSTL3_I_DCI() {
        return _IBUF_SSTL3_I_DCI;
    }

    public static EdifCell IBUF_SSTL3_II() {
        return _IBUF_SSTL3_II;
    }

    public static EdifCell IBUF_SSTL3_II_DCI() {
        return _IBUF_SSTL3_II_DCI;
    }

    public static EdifCell IBUFDS() {
        return _IBUFDS;
    }

    public static EdifCell IBUFDS_BLVDS_25() {
        return _IBUFDS_BLVDS_25;
    }

    public static EdifCell IBUFDS_DIFF_OUT() {
        return _IBUFDS_DIFF_OUT;
    }

    public static EdifCell IBUFDS_LDT_25() {
        return _IBUFDS_LDT_25;
    }

    public static EdifCell IBUFDS_LVDS_25() {
        return _IBUFDS_LVDS_25;
    }

    public static EdifCell IBUFDS_LVDS_25_DCI() {
        return _IBUFDS_LVDS_25_DCI;
    }

    public static EdifCell IBUFDS_LVDS_33() {
        return _IBUFDS_LVDS_33;
    }

    public static EdifCell IBUFDS_LVDS_33_DCI() {
        return _IBUFDS_LVDS_33_DCI;
    }

    public static EdifCell IBUFDS_LVDSEXT_25() {
        return _IBUFDS_LVDSEXT_25;
    }

    public static EdifCell IBUFDS_LVDSEXT_25_DCI() {
        return _IBUFDS_LVDSEXT_25_DCI;
    }

    public static EdifCell IBUFDS_LVDSEXT_33() {
        return _IBUFDS_LVDSEXT_33;
    }

    public static EdifCell IBUFDS_LVDSEXT_33_DCI() {
        return _IBUFDS_LVDSEXT_33_DCI;
    }

    public static EdifCell IBUFDS_LVPECL_25() {
        return _IBUFDS_LVPECL_25;
    }

    public static EdifCell IBUFDS_LVPECL_33() {
        return _IBUFDS_LVPECL_33;
    }

    public static EdifCell IBUFDS_ULVDS_25() {
        return _IBUFDS_ULVDS_25;
    }

    public static EdifCell IBUFG() {
        return _IBUFG;
    }

    public static EdifCell IBUFG_AGP() {
        return _IBUFG_AGP;
    }

    public static EdifCell IBUFG_CTT() {
        return _IBUFG_CTT;
    }

    public static EdifCell IBUFG_GTL() {
        return _IBUFG_GTL;
    }

    public static EdifCell IBUFG_GTL_DCI() {
        return _IBUFG_GTL_DCI;
    }

    public static EdifCell IBUFG_GTLP() {
        return _IBUFG_GTLP;
    }

    public static EdifCell IBUFG_GTLP_DCI() {
        return _IBUFG_GTLP_DCI;
    }

    public static EdifCell IBUFG_HSTL_I() {
        return _IBUFG_HSTL_I;
    }

    public static EdifCell IBUFG_HSTL_I_18() {
        return _IBUFG_HSTL_I_18;
    }

    public static EdifCell IBUFG_HSTL_I_DCI() {
        return _IBUFG_HSTL_I_DCI;
    }

    public static EdifCell IBUFG_HSTL_I_DCI_18() {
        return _IBUFG_HSTL_I_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_II() {
        return _IBUFG_HSTL_II;
    }

    public static EdifCell IBUFG_HSTL_II_18() {
        return _IBUFG_HSTL_II_18;
    }

    public static EdifCell IBUFG_HSTL_II_DCI() {
        return _IBUFG_HSTL_II_DCI;
    }

    public static EdifCell IBUFG_HSTL_II_DCI_18() {
        return _IBUFG_HSTL_II_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_III() {
        return _IBUFG_HSTL_III;
    }

    public static EdifCell IBUFG_HSTL_III_18() {
        return _IBUFG_HSTL_III_18;
    }

    public static EdifCell IBUFG_HSTL_III_DCI() {
        return _IBUFG_HSTL_III_DCI;
    }

    public static EdifCell IBUFG_HSTL_III_DCI_18() {
        return _IBUFG_HSTL_III_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_IV() {
        return _IBUFG_HSTL_IV;
    }

    public static EdifCell IBUFG_HSTL_IV_18() {
        return _IBUFG_HSTL_IV_18;
    }

    public static EdifCell IBUFG_HSTL_IV_DCI() {
        return _IBUFG_HSTL_IV_DCI;
    }

    public static EdifCell IBUFG_HSTL_IV_DCI_18() {
        return _IBUFG_HSTL_IV_DCI_18;
    }

    public static EdifCell IBUFG_LVCMOS12() {
        return _IBUFG_LVCMOS12;
    }

    public static EdifCell IBUFG_LVCMOS15() {
        return _IBUFG_LVCMOS15;
    }

    public static EdifCell IBUFG_LVCMOS18() {
        return _IBUFG_LVCMOS18;
    }

    public static EdifCell IBUFG_LVCMOS2() {
        return _IBUFG_LVCMOS2;
    }

    public static EdifCell IBUFG_LVCMOS25() {
        return _IBUFG_LVCMOS25;
    }

    public static EdifCell IBUFG_LVCMOS33() {
        return _IBUFG_LVCMOS33;
    }

    public static EdifCell IBUFG_LVDCI_15() {
        return _IBUFG_LVDCI_15;
    }

    public static EdifCell IBUFG_LVDCI_18() {
        return _IBUFG_LVDCI_18;
    }

    public static EdifCell IBUFG_LVDCI_25() {
        return _IBUFG_LVDCI_25;
    }

    public static EdifCell IBUFG_LVDCI_33() {
        return _IBUFG_LVDCI_33;
    }

    public static EdifCell IBUFG_LVDCI_DV2_15() {
        return _IBUFG_LVDCI_DV2_15;
    }

    public static EdifCell IBUFG_LVDCI_DV2_18() {
        return _IBUFG_LVDCI_DV2_18;
    }

    public static EdifCell IBUFG_LVDCI_DV2_25() {
        return _IBUFG_LVDCI_DV2_25;
    }

    public static EdifCell IBUFG_LVDCI_DV2_33() {
        return _IBUFG_LVDCI_DV2_33;
    }

    public static EdifCell IBUFG_LVDS() {
        return _IBUFG_LVDS;
    }

    public static EdifCell IBUFG_LVPECL() {
        return _IBUFG_LVPECL;
    }

    public static EdifCell IBUFG_LVTTL() {
        return _IBUFG_LVTTL;
    }

    public static EdifCell IBUFG_PCI33_3() {
        return _IBUFG_PCI33_3;
    }

    public static EdifCell IBUFG_PCI33_5() {
        return _IBUFG_PCI33_5;
    }

    public static EdifCell IBUFG_PCI66_3() {
        return _IBUFG_PCI66_3;
    }

    public static EdifCell IBUFG_PCIX() {
        return _IBUFG_PCIX;
    }

    public static EdifCell IBUFG_PCIX66_3() {
        return _IBUFG_PCIX66_3;
    }

    public static EdifCell IBUFG_SSTL18_I() {
        return _IBUFG_SSTL18_I;
    }

    public static EdifCell IBUFG_SSTL18_I_DCI() {
        return _IBUFG_SSTL18_I_DCI;
    }

    public static EdifCell IBUFG_SSTL18_II() {
        return _IBUFG_SSTL18_II;
    }

    public static EdifCell IBUFG_SSTL18_II_DCI() {
        return _IBUFG_SSTL18_II_DCI;
    }

    public static EdifCell IBUFG_SSTL2_I() {
        return _IBUFG_SSTL2_I;
    }

    public static EdifCell IBUFG_SSTL2_I_DCI() {
        return _IBUFG_SSTL2_I_DCI;
    }

    public static EdifCell IBUFG_SSTL2_II() {
        return _IBUFG_SSTL2_II;
    }

    public static EdifCell IBUFG_SSTL2_II_DCI() {
        return _IBUFG_SSTL2_II_DCI;
    }

    public static EdifCell IBUFG_SSTL3_I() {
        return _IBUFG_SSTL3_I;
    }

    public static EdifCell IBUFG_SSTL3_I_DCI() {
        return _IBUFG_SSTL3_I_DCI;
    }

    public static EdifCell IBUFG_SSTL3_II() {
        return _IBUFG_SSTL3_II;
    }

    public static EdifCell IBUFG_SSTL3_II_DCI() {
        return _IBUFG_SSTL3_II_DCI;
    }

    public static EdifCell IBUFGDS() {
        return _IBUFGDS;
    }

    public static EdifCell IBUFGDS_BLVDS_25() {
        return _IBUFGDS_BLVDS_25;
    }

    public static EdifCell IBUFGDS_DIFF_OUT() {
        return _IBUFGDS_DIFF_OUT;
    }

    public static EdifCell IBUFGDS_LDT_25() {
        return _IBUFGDS_LDT_25;
    }

    public static EdifCell IBUFGDS_LVDS_25() {
        return _IBUFGDS_LVDS_25;
    }

    public static EdifCell IBUFGDS_LVDS_25_DCI() {
        return _IBUFGDS_LVDS_25_DCI;
    }

    public static EdifCell IBUFGDS_LVDS_33() {
        return _IBUFGDS_LVDS_33;
    }

    public static EdifCell IBUFGDS_LVDS_33_DCI() {
        return _IBUFGDS_LVDS_33_DCI;
    }

    public static EdifCell IBUFGDS_LVDSEXT_25() {
        return _IBUFGDS_LVDSEXT_25;
    }

    public static EdifCell IBUFGDS_LVDSEXT_25_DCI() {
        return _IBUFGDS_LVDSEXT_25_DCI;
    }

    public static EdifCell IBUFGDS_LVDSEXT_33() {
        return _IBUFGDS_LVDSEXT_33;
    }

    public static EdifCell IBUFGDS_LVDSEXT_33_DCI() {
        return _IBUFGDS_LVDSEXT_33_DCI;
    }

    public static EdifCell IBUFGDS_LVPECL_25() {
        return _IBUFGDS_LVPECL_25;
    }

    public static EdifCell IBUFGDS_LVPECL_33() {
        return _IBUFGDS_LVPECL_33;
    }

    public static EdifCell IBUFGDS_ULVDS_25() {
        return _IBUFGDS_ULVDS_25;
    }

    public static EdifCell ICAP_VIRTEX2() {
        return _ICAP_VIRTEX2;
    }

    public static EdifCell ICAP_VIRTEX4() {
        return _ICAP_VIRTEX4;
    }

    public static EdifCell ICAP_VIRTEX5() {
        return _ICAP_VIRTEX5;
    }

    public static EdifCell IDDR() {
        return _IDDR;
    }

    public static EdifCell IDDR2() {
        return _IDDR2;
    }

    public static EdifCell IDELAY() {
        return _IDELAY;
    }

    public static EdifCell IDELAYCTRL() {
        return _IDELAYCTRL;
    }

    public static EdifCell IFDDRCPE() {
        return _IFDDRCPE;
    }

    public static EdifCell IFDDRRSE() {
        return _IFDDRRSE;
    }

    public static EdifCell ILD() {
        return _ILD;
    }

    public static EdifCell INV() {
        return _INV;
    }

    public static EdifCell IOBUF() {
        return _IOBUF;
    }

    public static EdifCell IOBUF_AGP() {
        return _IOBUF_AGP;
    }

    public static EdifCell IOBUF_CTT() {
        return _IOBUF_CTT;
    }

    public static EdifCell IOBUF_F_12() {
        return _IOBUF_F_12;
    }

    public static EdifCell IOBUF_F_16() {
        return _IOBUF_F_16;
    }

    public static EdifCell IOBUF_F_2() {
        return _IOBUF_F_2;
    }

    public static EdifCell IOBUF_F_24() {
        return _IOBUF_F_24;
    }

    public static EdifCell IOBUF_F_4() {
        return _IOBUF_F_4;
    }

    public static EdifCell IOBUF_F_6() {
        return _IOBUF_F_6;
    }

    public static EdifCell IOBUF_F_8() {
        return _IOBUF_F_8;
    }

    public static EdifCell IOBUF_GTL() {
        return _IOBUF_GTL;
    }

    public static EdifCell IOBUF_GTL_DCI() {
        return _IOBUF_GTL_DCI;
    }

    public static EdifCell IOBUF_GTLP() {
        return _IOBUF_GTLP;
    }

    public static EdifCell IOBUF_GTLP_DCI() {
        return _IOBUF_GTLP_DCI;
    }

    public static EdifCell IOBUF_HSTL_I() {
        return _IOBUF_HSTL_I;
    }

    public static EdifCell IOBUF_HSTL_I_18() {
        return _IOBUF_HSTL_I_18;
    }

    public static EdifCell IOBUF_HSTL_II() {
        return _IOBUF_HSTL_II;
    }

    public static EdifCell IOBUF_HSTL_II_18() {
        return _IOBUF_HSTL_II_18;
    }

    public static EdifCell IOBUF_HSTL_II_DCI() {
        return _IOBUF_HSTL_II_DCI;
    }

    public static EdifCell IOBUF_HSTL_II_DCI_18() {
        return _IOBUF_HSTL_II_DCI_18;
    }

    public static EdifCell IOBUF_HSTL_III() {
        return _IOBUF_HSTL_III;
    }

    public static EdifCell IOBUF_HSTL_III_18() {
        return _IOBUF_HSTL_III_18;
    }

    public static EdifCell IOBUF_HSTL_IV() {
        return _IOBUF_HSTL_IV;
    }

    public static EdifCell IOBUF_HSTL_IV_18() {
        return _IOBUF_HSTL_IV_18;
    }

    public static EdifCell IOBUF_HSTL_IV_DCI() {
        return _IOBUF_HSTL_IV_DCI;
    }

    public static EdifCell IOBUF_HSTL_IV_DCI_18() {
        return _IOBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell IOBUF_LVCMOS12() {
        return _IOBUF_LVCMOS12;
    }

    public static EdifCell IOBUF_LVCMOS12_F_2() {
        return _IOBUF_LVCMOS12_F_2;
    }

    public static EdifCell IOBUF_LVCMOS12_F_4() {
        return _IOBUF_LVCMOS12_F_4;
    }

    public static EdifCell IOBUF_LVCMOS12_F_6() {
        return _IOBUF_LVCMOS12_F_6;
    }

    public static EdifCell IOBUF_LVCMOS12_F_8() {
        return _IOBUF_LVCMOS12_F_8;
    }

    public static EdifCell IOBUF_LVCMOS12_S_2() {
        return _IOBUF_LVCMOS12_S_2;
    }

    public static EdifCell IOBUF_LVCMOS12_S_4() {
        return _IOBUF_LVCMOS12_S_4;
    }

    public static EdifCell IOBUF_LVCMOS12_S_6() {
        return _IOBUF_LVCMOS12_S_6;
    }

    public static EdifCell IOBUF_LVCMOS12_S_8() {
        return _IOBUF_LVCMOS12_S_8;
    }

    public static EdifCell IOBUF_LVCMOS15() {
        return _IOBUF_LVCMOS15;
    }

    public static EdifCell IOBUF_LVCMOS15_F_12() {
        return _IOBUF_LVCMOS15_F_12;
    }

    public static EdifCell IOBUF_LVCMOS15_F_16() {
        return _IOBUF_LVCMOS15_F_16;
    }

    public static EdifCell IOBUF_LVCMOS15_F_2() {
        return _IOBUF_LVCMOS15_F_2;
    }

    public static EdifCell IOBUF_LVCMOS15_F_4() {
        return _IOBUF_LVCMOS15_F_4;
    }

    public static EdifCell IOBUF_LVCMOS15_F_6() {
        return _IOBUF_LVCMOS15_F_6;
    }

    public static EdifCell IOBUF_LVCMOS15_F_8() {
        return _IOBUF_LVCMOS15_F_8;
    }

    public static EdifCell IOBUF_LVCMOS15_S_12() {
        return _IOBUF_LVCMOS15_S_12;
    }

    public static EdifCell IOBUF_LVCMOS15_S_16() {
        return _IOBUF_LVCMOS15_S_16;
    }

    public static EdifCell IOBUF_LVCMOS15_S_2() {
        return _IOBUF_LVCMOS15_S_2;
    }

    public static EdifCell IOBUF_LVCMOS15_S_4() {
        return _IOBUF_LVCMOS15_S_4;
    }

    public static EdifCell IOBUF_LVCMOS15_S_6() {
        return _IOBUF_LVCMOS15_S_6;
    }

    public static EdifCell IOBUF_LVCMOS15_S_8() {
        return _IOBUF_LVCMOS15_S_8;
    }

    public static EdifCell IOBUF_LVCMOS18() {
        return _IOBUF_LVCMOS18;
    }

    public static EdifCell IOBUF_LVCMOS18_F_12() {
        return _IOBUF_LVCMOS18_F_12;
    }

    public static EdifCell IOBUF_LVCMOS18_F_16() {
        return _IOBUF_LVCMOS18_F_16;
    }

    public static EdifCell IOBUF_LVCMOS18_F_2() {
        return _IOBUF_LVCMOS18_F_2;
    }

    public static EdifCell IOBUF_LVCMOS18_F_4() {
        return _IOBUF_LVCMOS18_F_4;
    }

    public static EdifCell IOBUF_LVCMOS18_F_6() {
        return _IOBUF_LVCMOS18_F_6;
    }

    public static EdifCell IOBUF_LVCMOS18_F_8() {
        return _IOBUF_LVCMOS18_F_8;
    }

    public static EdifCell IOBUF_LVCMOS18_S_12() {
        return _IOBUF_LVCMOS18_S_12;
    }

    public static EdifCell IOBUF_LVCMOS18_S_16() {
        return _IOBUF_LVCMOS18_S_16;
    }

    public static EdifCell IOBUF_LVCMOS18_S_2() {
        return _IOBUF_LVCMOS18_S_2;
    }

    public static EdifCell IOBUF_LVCMOS18_S_4() {
        return _IOBUF_LVCMOS18_S_4;
    }

    public static EdifCell IOBUF_LVCMOS18_S_6() {
        return _IOBUF_LVCMOS18_S_6;
    }

    public static EdifCell IOBUF_LVCMOS18_S_8() {
        return _IOBUF_LVCMOS18_S_8;
    }

    public static EdifCell IOBUF_LVCMOS2() {
        return _IOBUF_LVCMOS2;
    }

    public static EdifCell IOBUF_LVCMOS25() {
        return _IOBUF_LVCMOS25;
    }

    public static EdifCell IOBUF_LVCMOS25_F_12() {
        return _IOBUF_LVCMOS25_F_12;
    }

    public static EdifCell IOBUF_LVCMOS25_F_16() {
        return _IOBUF_LVCMOS25_F_16;
    }

    public static EdifCell IOBUF_LVCMOS25_F_2() {
        return _IOBUF_LVCMOS25_F_2;
    }

    public static EdifCell IOBUF_LVCMOS25_F_24() {
        return _IOBUF_LVCMOS25_F_24;
    }

    public static EdifCell IOBUF_LVCMOS25_F_4() {
        return _IOBUF_LVCMOS25_F_4;
    }

    public static EdifCell IOBUF_LVCMOS25_F_6() {
        return _IOBUF_LVCMOS25_F_6;
    }

    public static EdifCell IOBUF_LVCMOS25_F_8() {
        return _IOBUF_LVCMOS25_F_8;
    }

    public static EdifCell IOBUF_LVCMOS25_S_12() {
        return _IOBUF_LVCMOS25_S_12;
    }

    public static EdifCell IOBUF_LVCMOS25_S_16() {
        return _IOBUF_LVCMOS25_S_16;
    }

    public static EdifCell IOBUF_LVCMOS25_S_2() {
        return _IOBUF_LVCMOS25_S_2;
    }

    public static EdifCell IOBUF_LVCMOS25_S_24() {
        return _IOBUF_LVCMOS25_S_24;
    }

    public static EdifCell IOBUF_LVCMOS25_S_4() {
        return _IOBUF_LVCMOS25_S_4;
    }

    public static EdifCell IOBUF_LVCMOS25_S_6() {
        return _IOBUF_LVCMOS25_S_6;
    }

    public static EdifCell IOBUF_LVCMOS25_S_8() {
        return _IOBUF_LVCMOS25_S_8;
    }

    public static EdifCell IOBUF_LVCMOS33() {
        return _IOBUF_LVCMOS33;
    }

    public static EdifCell IOBUF_LVCMOS33_F_12() {
        return _IOBUF_LVCMOS33_F_12;
    }

    public static EdifCell IOBUF_LVCMOS33_F_16() {
        return _IOBUF_LVCMOS33_F_16;
    }

    public static EdifCell IOBUF_LVCMOS33_F_2() {
        return _IOBUF_LVCMOS33_F_2;
    }

    public static EdifCell IOBUF_LVCMOS33_F_24() {
        return _IOBUF_LVCMOS33_F_24;
    }

    public static EdifCell IOBUF_LVCMOS33_F_4() {
        return _IOBUF_LVCMOS33_F_4;
    }

    public static EdifCell IOBUF_LVCMOS33_F_6() {
        return _IOBUF_LVCMOS33_F_6;
    }

    public static EdifCell IOBUF_LVCMOS33_F_8() {
        return _IOBUF_LVCMOS33_F_8;
    }

    public static EdifCell IOBUF_LVCMOS33_S_12() {
        return _IOBUF_LVCMOS33_S_12;
    }

    public static EdifCell IOBUF_LVCMOS33_S_16() {
        return _IOBUF_LVCMOS33_S_16;
    }

    public static EdifCell IOBUF_LVCMOS33_S_2() {
        return _IOBUF_LVCMOS33_S_2;
    }

    public static EdifCell IOBUF_LVCMOS33_S_24() {
        return _IOBUF_LVCMOS33_S_24;
    }

    public static EdifCell IOBUF_LVCMOS33_S_4() {
        return _IOBUF_LVCMOS33_S_4;
    }

    public static EdifCell IOBUF_LVCMOS33_S_6() {
        return _IOBUF_LVCMOS33_S_6;
    }

    public static EdifCell IOBUF_LVCMOS33_S_8() {
        return _IOBUF_LVCMOS33_S_8;
    }

    public static EdifCell IOBUF_LVDCI_15() {
        return _IOBUF_LVDCI_15;
    }

    public static EdifCell IOBUF_LVDCI_18() {
        return _IOBUF_LVDCI_18;
    }

    public static EdifCell IOBUF_LVDCI_25() {
        return _IOBUF_LVDCI_25;
    }

    public static EdifCell IOBUF_LVDCI_33() {
        return _IOBUF_LVDCI_33;
    }

    public static EdifCell IOBUF_LVDCI_DV2_15() {
        return _IOBUF_LVDCI_DV2_15;
    }

    public static EdifCell IOBUF_LVDCI_DV2_18() {
        return _IOBUF_LVDCI_DV2_18;
    }

    public static EdifCell IOBUF_LVDCI_DV2_25() {
        return _IOBUF_LVDCI_DV2_25;
    }

    public static EdifCell IOBUF_LVDCI_DV2_33() {
        return _IOBUF_LVDCI_DV2_33;
    }

    public static EdifCell IOBUF_LVDS() {
        return _IOBUF_LVDS;
    }

    public static EdifCell IOBUF_LVPECL() {
        return _IOBUF_LVPECL;
    }

    public static EdifCell IOBUF_LVTTL() {
        return _IOBUF_LVTTL;
    }

    public static EdifCell IOBUF_LVTTL_F_12() {
        return _IOBUF_LVTTL_F_12;
    }

    public static EdifCell IOBUF_LVTTL_F_16() {
        return _IOBUF_LVTTL_F_16;
    }

    public static EdifCell IOBUF_LVTTL_F_2() {
        return _IOBUF_LVTTL_F_2;
    }

    public static EdifCell IOBUF_LVTTL_F_24() {
        return _IOBUF_LVTTL_F_24;
    }

    public static EdifCell IOBUF_LVTTL_F_4() {
        return _IOBUF_LVTTL_F_4;
    }

    public static EdifCell IOBUF_LVTTL_F_6() {
        return _IOBUF_LVTTL_F_6;
    }

    public static EdifCell IOBUF_LVTTL_F_8() {
        return _IOBUF_LVTTL_F_8;
    }

    public static EdifCell IOBUF_LVTTL_S_12() {
        return _IOBUF_LVTTL_S_12;
    }

    public static EdifCell IOBUF_LVTTL_S_16() {
        return _IOBUF_LVTTL_S_16;
    }

    public static EdifCell IOBUF_LVTTL_S_2() {
        return _IOBUF_LVTTL_S_2;
    }

    public static EdifCell IOBUF_LVTTL_S_24() {
        return _IOBUF_LVTTL_S_24;
    }

    public static EdifCell IOBUF_LVTTL_S_4() {
        return _IOBUF_LVTTL_S_4;
    }

    public static EdifCell IOBUF_LVTTL_S_6() {
        return _IOBUF_LVTTL_S_6;
    }

    public static EdifCell IOBUF_LVTTL_S_8() {
        return _IOBUF_LVTTL_S_8;
    }

    public static EdifCell IOBUF_PCI33_3() {
        return _IOBUF_PCI33_3;
    }

    public static EdifCell IOBUF_PCI33_5() {
        return _IOBUF_PCI33_5;
    }

    public static EdifCell IOBUF_PCI66_3() {
        return _IOBUF_PCI66_3;
    }

    public static EdifCell IOBUF_PCIX() {
        return _IOBUF_PCIX;
    }

    public static EdifCell IOBUF_PCIX66_3() {
        return _IOBUF_PCIX66_3;
    }

    public static EdifCell IOBUF_S_12() {
        return _IOBUF_S_12;
    }

    public static EdifCell IOBUF_S_16() {
        return _IOBUF_S_16;
    }

    public static EdifCell IOBUF_S_2() {
        return _IOBUF_S_2;
    }

    public static EdifCell IOBUF_S_24() {
        return _IOBUF_S_24;
    }

    public static EdifCell IOBUF_S_4() {
        return _IOBUF_S_4;
    }

    public static EdifCell IOBUF_S_6() {
        return _IOBUF_S_6;
    }

    public static EdifCell IOBUF_S_8() {
        return _IOBUF_S_8;
    }

    public static EdifCell IOBUF_SSTL18_I() {
        return _IOBUF_SSTL18_I;
    }

    public static EdifCell IOBUF_SSTL18_II() {
        return _IOBUF_SSTL18_II;
    }

    public static EdifCell IOBUF_SSTL18_II_DCI() {
        return _IOBUF_SSTL18_II_DCI;
    }

    public static EdifCell IOBUF_SSTL2_I() {
        return _IOBUF_SSTL2_I;
    }

    public static EdifCell IOBUF_SSTL2_II() {
        return _IOBUF_SSTL2_II;
    }

    public static EdifCell IOBUF_SSTL2_II_DCI() {
        return _IOBUF_SSTL2_II_DCI;
    }

    public static EdifCell IOBUF_SSTL3_I() {
        return _IOBUF_SSTL3_I;
    }

    public static EdifCell IOBUF_SSTL3_II() {
        return _IOBUF_SSTL3_II;
    }

    public static EdifCell IOBUF_SSTL3_II_DCI() {
        return _IOBUF_SSTL3_II_DCI;
    }

    public static EdifCell IOBUFDS() {
        return _IOBUFDS;
    }

    public static EdifCell IOBUFDS_BLVDS_25() {
        return _IOBUFDS_BLVDS_25;
    }

    public static EdifCell IOBUFE() {
        return _IOBUFE;
    }

    public static EdifCell IOBUFE_F() {
        return _IOBUFE_F;
    }

    public static EdifCell IOBUFE_S() {
        return _IOBUFE_S;
    }

    public static EdifCell IODELAY() {
        return _IODELAY;
    }

    public static EdifCell ISERDES() {
        return _ISERDES;
    }

    public static EdifCell ISERDES_NODELAY() {
        return _ISERDES_NODELAY;
    }

    public static EdifCell JTAGPPC() {
        return _JTAGPPC;
    }

    public static EdifCell KEEP() {
        return _KEEP;
    }

    public static EdifCell KEEPER() {
        return _KEEPER;
    }

    public static EdifCell KEY_CLEAR() {
        return _KEY_CLEAR;
    }

    public static EdifCell LD() {
        return _LD;
    }

    public static EdifCell LD_1() {
        return _LD_1;
    }

    public static EdifCell LDC() {
        return _LDC;
    }

    public static EdifCell LDC_1() {
        return _LDC_1;
    }

    public static EdifCell LDCE() {
        return _LDCE;
    }

    public static EdifCell LDCE_1() {
        return _LDCE_1;
    }

    public static EdifCell LDCP() {
        return _LDCP;
    }

    public static EdifCell LDCP_1() {
        return _LDCP_1;
    }

    public static EdifCell LDCPE() {
        return _LDCPE;
    }

    public static EdifCell LDCPE_1() {
        return _LDCPE_1;
    }

    public static EdifCell LDE() {
        return _LDE;
    }

    public static EdifCell LDE_1() {
        return _LDE_1;
    }

    public static EdifCell LDG() {
        return _LDG;
    }

    public static EdifCell LDP() {
        return _LDP;
    }

    public static EdifCell LDP_1() {
        return _LDP_1;
    }

    public static EdifCell LDPE() {
        return _LDPE;
    }

    public static EdifCell LDPE_1() {
        return _LDPE_1;
    }

    public static EdifCell LUT1() {
        return _LUT1;
    }

    public static EdifCell LUT1_D() {
        return _LUT1_D;
    }

    public static EdifCell LUT1_L() {
        return _LUT1_L;
    }

    public static EdifCell LUT2() {
        return _LUT2;
    }

    public static EdifCell LUT2_D() {
        return _LUT2_D;
    }

    public static EdifCell LUT2_L() {
        return _LUT2_L;
    }

    public static EdifCell LUT3() {
        return _LUT3;
    }

    public static EdifCell LUT3_D() {
        return _LUT3_D;
    }

    public static EdifCell LUT3_L() {
        return _LUT3_L;
    }

    public static EdifCell LUT4() {
        return _LUT4;
    }

    public static EdifCell LUT4_D() {
        return _LUT4_D;
    }

    public static EdifCell LUT4_L() {
        return _LUT4_L;
    }

    public static EdifCell LUT5() {
        return _LUT5;
    }

    public static EdifCell LUT5_D() {
        return _LUT5_D;
    }

    public static EdifCell LUT5_L() {
        return _LUT5_L;
    }

    public static EdifCell LUT6() {
        return _LUT6;
    }

    public static EdifCell LUT6_D() {
        return _LUT6_D;
    }

    public static EdifCell LUT6_L() {
        return _LUT6_L;
    }

    public static EdifCell MERGE() {
        return _MERGE;
    }

    public static EdifCell MIN_OFF() {
        return _MIN_OFF;
    }

    public static EdifCell MULT18X18() {
        return _MULT18X18;
    }

    public static EdifCell MULT18X18S() {
        return _MULT18X18S;
    }

    public static EdifCell MULT18X18SIO() {
        return _MULT18X18SIO;
    }

    public static EdifCell MULT_AND() {
        return _MULT_AND;
    }

    public static EdifCell MUXCY() {
        return _MUXCY;
    }

    public static EdifCell MUXCY_D() {
        return _MUXCY_D;
    }

    public static EdifCell MUXCY_L() {
        return _MUXCY_L;
    }

    public static EdifCell MUXF5() {
        return _MUXF5;
    }

    public static EdifCell MUXF5_D() {
        return _MUXF5_D;
    }

    public static EdifCell MUXF5_L() {
        return _MUXF5_L;
    }

    public static EdifCell MUXF6() {
        return _MUXF6;
    }

    public static EdifCell MUXF6_D() {
        return _MUXF6_D;
    }

    public static EdifCell MUXF6_L() {
        return _MUXF6_L;
    }

    public static EdifCell MUXF7() {
        return _MUXF7;
    }

    public static EdifCell MUXF7_D() {
        return _MUXF7_D;
    }

    public static EdifCell MUXF7_L() {
        return _MUXF7_L;
    }

    public static EdifCell MUXF8() {
        return _MUXF8;
    }

    public static EdifCell MUXF8_D() {
        return _MUXF8_D;
    }

    public static EdifCell MUXF8_L() {
        return _MUXF8_L;
    }

    public static EdifCell NAND2() {
        return _NAND2;
    }

    public static EdifCell NAND2B1() {
        return _NAND2B1;
    }

    public static EdifCell NAND2B2() {
        return _NAND2B2;
    }

    public static EdifCell NAND3() {
        return _NAND3;
    }

    public static EdifCell NAND3B1() {
        return _NAND3B1;
    }

    public static EdifCell NAND3B2() {
        return _NAND3B2;
    }

    public static EdifCell NAND3B3() {
        return _NAND3B3;
    }

    public static EdifCell NAND4() {
        return _NAND4;
    }

    public static EdifCell NAND4B1() {
        return _NAND4B1;
    }

    public static EdifCell NAND4B2() {
        return _NAND4B2;
    }

    public static EdifCell NAND4B3() {
        return _NAND4B3;
    }

    public static EdifCell NAND4B4() {
        return _NAND4B4;
    }

    public static EdifCell NAND5() {
        return _NAND5;
    }

    public static EdifCell NAND5B1() {
        return _NAND5B1;
    }

    public static EdifCell NAND5B2() {
        return _NAND5B2;
    }

    public static EdifCell NAND5B3() {
        return _NAND5B3;
    }

    public static EdifCell NAND5B4() {
        return _NAND5B4;
    }

    public static EdifCell NAND5B5() {
        return _NAND5B5;
    }

    public static EdifCell NOR2() {
        return _NOR2;
    }

    public static EdifCell NOR2B1() {
        return _NOR2B1;
    }

    public static EdifCell NOR2B2() {
        return _NOR2B2;
    }

    public static EdifCell NOR3() {
        return _NOR3;
    }

    public static EdifCell NOR3B1() {
        return _NOR3B1;
    }

    public static EdifCell NOR3B2() {
        return _NOR3B2;
    }

    public static EdifCell NOR3B3() {
        return _NOR3B3;
    }

    public static EdifCell NOR4() {
        return _NOR4;
    }

    public static EdifCell NOR4B1() {
        return _NOR4B1;
    }

    public static EdifCell NOR4B2() {
        return _NOR4B2;
    }

    public static EdifCell NOR4B3() {
        return _NOR4B3;
    }

    public static EdifCell NOR4B4() {
        return _NOR4B4;
    }

    public static EdifCell NOR5() {
        return _NOR5;
    }

    public static EdifCell NOR5B1() {
        return _NOR5B1;
    }

    public static EdifCell NOR5B2() {
        return _NOR5B2;
    }

    public static EdifCell NOR5B3() {
        return _NOR5B3;
    }

    public static EdifCell NOR5B4() {
        return _NOR5B4;
    }

    public static EdifCell NOR5B5() {
        return _NOR5B5;
    }

    public static EdifCell OBUF() {
        return _OBUF;
    }

    public static EdifCell OBUF_AGP() {
        return _OBUF_AGP;
    }

    public static EdifCell OBUF_CTT() {
        return _OBUF_CTT;
    }

    public static EdifCell OBUF_F_12() {
        return _OBUF_F_12;
    }

    public static EdifCell OBUF_F_16() {
        return _OBUF_F_16;
    }

    public static EdifCell OBUF_F_2() {
        return _OBUF_F_2;
    }

    public static EdifCell OBUF_F_24() {
        return _OBUF_F_24;
    }

    public static EdifCell OBUF_F_4() {
        return _OBUF_F_4;
    }

    public static EdifCell OBUF_F_6() {
        return _OBUF_F_6;
    }

    public static EdifCell OBUF_F_8() {
        return _OBUF_F_8;
    }

    public static EdifCell OBUF_GTL() {
        return _OBUF_GTL;
    }

    public static EdifCell OBUF_GTL_DCI() {
        return _OBUF_GTL_DCI;
    }

    public static EdifCell OBUF_GTLP() {
        return _OBUF_GTLP;
    }

    public static EdifCell OBUF_GTLP_DCI() {
        return _OBUF_GTLP_DCI;
    }

    public static EdifCell OBUF_HSTL_I() {
        return _OBUF_HSTL_I;
    }

    public static EdifCell OBUF_HSTL_I_18() {
        return _OBUF_HSTL_I_18;
    }

    public static EdifCell OBUF_HSTL_I_DCI() {
        return _OBUF_HSTL_I_DCI;
    }

    public static EdifCell OBUF_HSTL_I_DCI_18() {
        return _OBUF_HSTL_I_DCI_18;
    }

    public static EdifCell OBUF_HSTL_II() {
        return _OBUF_HSTL_II;
    }

    public static EdifCell OBUF_HSTL_II_18() {
        return _OBUF_HSTL_II_18;
    }

    public static EdifCell OBUF_HSTL_II_DCI() {
        return _OBUF_HSTL_II_DCI;
    }

    public static EdifCell OBUF_HSTL_II_DCI_18() {
        return _OBUF_HSTL_II_DCI_18;
    }

    public static EdifCell OBUF_HSTL_III() {
        return _OBUF_HSTL_III;
    }

    public static EdifCell OBUF_HSTL_III_18() {
        return _OBUF_HSTL_III_18;
    }

    public static EdifCell OBUF_HSTL_III_DCI() {
        return _OBUF_HSTL_III_DCI;
    }

    public static EdifCell OBUF_HSTL_III_DCI_18() {
        return _OBUF_HSTL_III_DCI_18;
    }

    public static EdifCell OBUF_HSTL_IV() {
        return _OBUF_HSTL_IV;
    }

    public static EdifCell OBUF_HSTL_IV_18() {
        return _OBUF_HSTL_IV_18;
    }

    public static EdifCell OBUF_HSTL_IV_DCI() {
        return _OBUF_HSTL_IV_DCI;
    }

    public static EdifCell OBUF_HSTL_IV_DCI_18() {
        return _OBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell OBUF_LVCMOS12() {
        return _OBUF_LVCMOS12;
    }

    public static EdifCell OBUF_LVCMOS12_F_2() {
        return _OBUF_LVCMOS12_F_2;
    }

    public static EdifCell OBUF_LVCMOS12_F_4() {
        return _OBUF_LVCMOS12_F_4;
    }

    public static EdifCell OBUF_LVCMOS12_F_6() {
        return _OBUF_LVCMOS12_F_6;
    }

    public static EdifCell OBUF_LVCMOS12_F_8() {
        return _OBUF_LVCMOS12_F_8;
    }

    public static EdifCell OBUF_LVCMOS12_S_2() {
        return _OBUF_LVCMOS12_S_2;
    }

    public static EdifCell OBUF_LVCMOS12_S_4() {
        return _OBUF_LVCMOS12_S_4;
    }

    public static EdifCell OBUF_LVCMOS12_S_6() {
        return _OBUF_LVCMOS12_S_6;
    }

    public static EdifCell OBUF_LVCMOS12_S_8() {
        return _OBUF_LVCMOS12_S_8;
    }

    public static EdifCell OBUF_LVCMOS15() {
        return _OBUF_LVCMOS15;
    }

    public static EdifCell OBUF_LVCMOS15_F_12() {
        return _OBUF_LVCMOS15_F_12;
    }

    public static EdifCell OBUF_LVCMOS15_F_16() {
        return _OBUF_LVCMOS15_F_16;
    }

    public static EdifCell OBUF_LVCMOS15_F_2() {
        return _OBUF_LVCMOS15_F_2;
    }

    public static EdifCell OBUF_LVCMOS15_F_4() {
        return _OBUF_LVCMOS15_F_4;
    }

    public static EdifCell OBUF_LVCMOS15_F_6() {
        return _OBUF_LVCMOS15_F_6;
    }

    public static EdifCell OBUF_LVCMOS15_F_8() {
        return _OBUF_LVCMOS15_F_8;
    }

    public static EdifCell OBUF_LVCMOS15_S_12() {
        return _OBUF_LVCMOS15_S_12;
    }

    public static EdifCell OBUF_LVCMOS15_S_16() {
        return _OBUF_LVCMOS15_S_16;
    }

    public static EdifCell OBUF_LVCMOS15_S_2() {
        return _OBUF_LVCMOS15_S_2;
    }

    public static EdifCell OBUF_LVCMOS15_S_4() {
        return _OBUF_LVCMOS15_S_4;
    }

    public static EdifCell OBUF_LVCMOS15_S_6() {
        return _OBUF_LVCMOS15_S_6;
    }

    public static EdifCell OBUF_LVCMOS15_S_8() {
        return _OBUF_LVCMOS15_S_8;
    }

    public static EdifCell OBUF_LVCMOS18() {
        return _OBUF_LVCMOS18;
    }

    public static EdifCell OBUF_LVCMOS18_F_12() {
        return _OBUF_LVCMOS18_F_12;
    }

    public static EdifCell OBUF_LVCMOS18_F_16() {
        return _OBUF_LVCMOS18_F_16;
    }

    public static EdifCell OBUF_LVCMOS18_F_2() {
        return _OBUF_LVCMOS18_F_2;
    }

    public static EdifCell OBUF_LVCMOS18_F_4() {
        return _OBUF_LVCMOS18_F_4;
    }

    public static EdifCell OBUF_LVCMOS18_F_6() {
        return _OBUF_LVCMOS18_F_6;
    }

    public static EdifCell OBUF_LVCMOS18_F_8() {
        return _OBUF_LVCMOS18_F_8;
    }

    public static EdifCell OBUF_LVCMOS18_S_12() {
        return _OBUF_LVCMOS18_S_12;
    }

    public static EdifCell OBUF_LVCMOS18_S_16() {
        return _OBUF_LVCMOS18_S_16;
    }

    public static EdifCell OBUF_LVCMOS18_S_2() {
        return _OBUF_LVCMOS18_S_2;
    }

    public static EdifCell OBUF_LVCMOS18_S_4() {
        return _OBUF_LVCMOS18_S_4;
    }

    public static EdifCell OBUF_LVCMOS18_S_6() {
        return _OBUF_LVCMOS18_S_6;
    }

    public static EdifCell OBUF_LVCMOS18_S_8() {
        return _OBUF_LVCMOS18_S_8;
    }

    public static EdifCell OBUF_LVCMOS2() {
        return _OBUF_LVCMOS2;
    }

    public static EdifCell OBUF_LVCMOS25() {
        return _OBUF_LVCMOS25;
    }

    public static EdifCell OBUF_LVCMOS25_F_12() {
        return _OBUF_LVCMOS25_F_12;
    }

    public static EdifCell OBUF_LVCMOS25_F_16() {
        return _OBUF_LVCMOS25_F_16;
    }

    public static EdifCell OBUF_LVCMOS25_F_2() {
        return _OBUF_LVCMOS25_F_2;
    }

    public static EdifCell OBUF_LVCMOS25_F_24() {
        return _OBUF_LVCMOS25_F_24;
    }

    public static EdifCell OBUF_LVCMOS25_F_4() {
        return _OBUF_LVCMOS25_F_4;
    }

    public static EdifCell OBUF_LVCMOS25_F_6() {
        return _OBUF_LVCMOS25_F_6;
    }

    public static EdifCell OBUF_LVCMOS25_F_8() {
        return _OBUF_LVCMOS25_F_8;
    }

    public static EdifCell OBUF_LVCMOS25_S_12() {
        return _OBUF_LVCMOS25_S_12;
    }

    public static EdifCell OBUF_LVCMOS25_S_16() {
        return _OBUF_LVCMOS25_S_16;
    }

    public static EdifCell OBUF_LVCMOS25_S_2() {
        return _OBUF_LVCMOS25_S_2;
    }

    public static EdifCell OBUF_LVCMOS25_S_24() {
        return _OBUF_LVCMOS25_S_24;
    }

    public static EdifCell OBUF_LVCMOS25_S_4() {
        return _OBUF_LVCMOS25_S_4;
    }

    public static EdifCell OBUF_LVCMOS25_S_6() {
        return _OBUF_LVCMOS25_S_6;
    }

    public static EdifCell OBUF_LVCMOS25_S_8() {
        return _OBUF_LVCMOS25_S_8;
    }

    public static EdifCell OBUF_LVCMOS33() {
        return _OBUF_LVCMOS33;
    }

    public static EdifCell OBUF_LVCMOS33_F_12() {
        return _OBUF_LVCMOS33_F_12;
    }

    public static EdifCell OBUF_LVCMOS33_F_16() {
        return _OBUF_LVCMOS33_F_16;
    }

    public static EdifCell OBUF_LVCMOS33_F_2() {
        return _OBUF_LVCMOS33_F_2;
    }

    public static EdifCell OBUF_LVCMOS33_F_24() {
        return _OBUF_LVCMOS33_F_24;
    }

    public static EdifCell OBUF_LVCMOS33_F_4() {
        return _OBUF_LVCMOS33_F_4;
    }

    public static EdifCell OBUF_LVCMOS33_F_6() {
        return _OBUF_LVCMOS33_F_6;
    }

    public static EdifCell OBUF_LVCMOS33_F_8() {
        return _OBUF_LVCMOS33_F_8;
    }

    public static EdifCell OBUF_LVCMOS33_S_12() {
        return _OBUF_LVCMOS33_S_12;
    }

    public static EdifCell OBUF_LVCMOS33_S_16() {
        return _OBUF_LVCMOS33_S_16;
    }

    public static EdifCell OBUF_LVCMOS33_S_2() {
        return _OBUF_LVCMOS33_S_2;
    }

    public static EdifCell OBUF_LVCMOS33_S_24() {
        return _OBUF_LVCMOS33_S_24;
    }

    public static EdifCell OBUF_LVCMOS33_S_4() {
        return _OBUF_LVCMOS33_S_4;
    }

    public static EdifCell OBUF_LVCMOS33_S_6() {
        return _OBUF_LVCMOS33_S_6;
    }

    public static EdifCell OBUF_LVCMOS33_S_8() {
        return _OBUF_LVCMOS33_S_8;
    }

    public static EdifCell OBUF_LVDCI_15() {
        return _OBUF_LVDCI_15;
    }

    public static EdifCell OBUF_LVDCI_18() {
        return _OBUF_LVDCI_18;
    }

    public static EdifCell OBUF_LVDCI_25() {
        return _OBUF_LVDCI_25;
    }

    public static EdifCell OBUF_LVDCI_33() {
        return _OBUF_LVDCI_33;
    }

    public static EdifCell OBUF_LVDCI_DV2_15() {
        return _OBUF_LVDCI_DV2_15;
    }

    public static EdifCell OBUF_LVDCI_DV2_18() {
        return _OBUF_LVDCI_DV2_18;
    }

    public static EdifCell OBUF_LVDCI_DV2_25() {
        return _OBUF_LVDCI_DV2_25;
    }

    public static EdifCell OBUF_LVDCI_DV2_33() {
        return _OBUF_LVDCI_DV2_33;
    }

    public static EdifCell OBUF_LVDS() {
        return _OBUF_LVDS;
    }

    public static EdifCell OBUF_LVPECL() {
        return _OBUF_LVPECL;
    }

    public static EdifCell OBUF_LVTTL() {
        return _OBUF_LVTTL;
    }

    public static EdifCell OBUF_LVTTL_F_12() {
        return _OBUF_LVTTL_F_12;
    }

    public static EdifCell OBUF_LVTTL_F_16() {
        return _OBUF_LVTTL_F_16;
    }

    public static EdifCell OBUF_LVTTL_F_2() {
        return _OBUF_LVTTL_F_2;
    }

    public static EdifCell OBUF_LVTTL_F_24() {
        return _OBUF_LVTTL_F_24;
    }

    public static EdifCell OBUF_LVTTL_F_4() {
        return _OBUF_LVTTL_F_4;
    }

    public static EdifCell OBUF_LVTTL_F_6() {
        return _OBUF_LVTTL_F_6;
    }

    public static EdifCell OBUF_LVTTL_F_8() {
        return _OBUF_LVTTL_F_8;
    }

    public static EdifCell OBUF_LVTTL_S_12() {
        return _OBUF_LVTTL_S_12;
    }

    public static EdifCell OBUF_LVTTL_S_16() {
        return _OBUF_LVTTL_S_16;
    }

    public static EdifCell OBUF_LVTTL_S_2() {
        return _OBUF_LVTTL_S_2;
    }

    public static EdifCell OBUF_LVTTL_S_24() {
        return _OBUF_LVTTL_S_24;
    }

    public static EdifCell OBUF_LVTTL_S_4() {
        return _OBUF_LVTTL_S_4;
    }

    public static EdifCell OBUF_LVTTL_S_6() {
        return _OBUF_LVTTL_S_6;
    }

    public static EdifCell OBUF_LVTTL_S_8() {
        return _OBUF_LVTTL_S_8;
    }

    public static EdifCell OBUF_PCI33_3() {
        return _OBUF_PCI33_3;
    }

    public static EdifCell OBUF_PCI33_5() {
        return _OBUF_PCI33_5;
    }

    public static EdifCell OBUF_PCI66_3() {
        return _OBUF_PCI66_3;
    }

    public static EdifCell OBUF_PCIX() {
        return _OBUF_PCIX;
    }

    public static EdifCell OBUF_PCIX66_3() {
        return _OBUF_PCIX66_3;
    }

    public static EdifCell OBUF_S_12() {
        return _OBUF_S_12;
    }

    public static EdifCell OBUF_S_16() {
        return _OBUF_S_16;
    }

    public static EdifCell OBUF_S_2() {
        return _OBUF_S_2;
    }

    public static EdifCell OBUF_S_24() {
        return _OBUF_S_24;
    }

    public static EdifCell OBUF_S_4() {
        return _OBUF_S_4;
    }

    public static EdifCell OBUF_S_6() {
        return _OBUF_S_6;
    }

    public static EdifCell OBUF_S_8() {
        return _OBUF_S_8;
    }

    public static EdifCell OBUF_SSTL18_I() {
        return _OBUF_SSTL18_I;
    }

    public static EdifCell OBUF_SSTL18_I_DCI() {
        return _OBUF_SSTL18_I_DCI;
    }

    public static EdifCell OBUF_SSTL18_II() {
        return _OBUF_SSTL18_II;
    }

    public static EdifCell OBUF_SSTL18_II_DCI() {
        return _OBUF_SSTL18_II_DCI;
    }

    public static EdifCell OBUF_SSTL2_I() {
        return _OBUF_SSTL2_I;
    }

    public static EdifCell OBUF_SSTL2_I_DCI() {
        return _OBUF_SSTL2_I_DCI;
    }

    public static EdifCell OBUF_SSTL2_II() {
        return _OBUF_SSTL2_II;
    }

    public static EdifCell OBUF_SSTL2_II_DCI() {
        return _OBUF_SSTL2_II_DCI;
    }

    public static EdifCell OBUF_SSTL3_I() {
        return _OBUF_SSTL3_I;
    }

    public static EdifCell OBUF_SSTL3_I_DCI() {
        return _OBUF_SSTL3_I_DCI;
    }

    public static EdifCell OBUF_SSTL3_II() {
        return _OBUF_SSTL3_II;
    }

    public static EdifCell OBUF_SSTL3_II_DCI() {
        return _OBUF_SSTL3_II_DCI;
    }

    public static EdifCell OBUFDS() {
        return _OBUFDS;
    }

    public static EdifCell OBUFDS_BLVDS_25() {
        return _OBUFDS_BLVDS_25;
    }

    public static EdifCell OBUFDS_LDT_25() {
        return _OBUFDS_LDT_25;
    }

    public static EdifCell OBUFDS_LVDS_25() {
        return _OBUFDS_LVDS_25;
    }

    public static EdifCell OBUFDS_LVDS_33() {
        return _OBUFDS_LVDS_33;
    }

    public static EdifCell OBUFDS_LVDSEXT_25() {
        return _OBUFDS_LVDSEXT_25;
    }

    public static EdifCell OBUFDS_LVDSEXT_33() {
        return _OBUFDS_LVDSEXT_33;
    }

    public static EdifCell OBUFDS_LVPECL_25() {
        return _OBUFDS_LVPECL_25;
    }

    public static EdifCell OBUFDS_LVPECL_33() {
        return _OBUFDS_LVPECL_33;
    }

    public static EdifCell OBUFDS_ULVDS_25() {
        return _OBUFDS_ULVDS_25;
    }

    public static EdifCell OBUFE() {
        return _OBUFE;
    }

    public static EdifCell OBUFT() {
        return _OBUFT;
    }

    public static EdifCell OBUFT_AGP() {
        return _OBUFT_AGP;
    }

    public static EdifCell OBUFT_CTT() {
        return _OBUFT_CTT;
    }

    public static EdifCell OBUFT_F_12() {
        return _OBUFT_F_12;
    }

    public static EdifCell OBUFT_F_16() {
        return _OBUFT_F_16;
    }

    public static EdifCell OBUFT_F_2() {
        return _OBUFT_F_2;
    }

    public static EdifCell OBUFT_F_24() {
        return _OBUFT_F_24;
    }

    public static EdifCell OBUFT_F_4() {
        return _OBUFT_F_4;
    }

    public static EdifCell OBUFT_F_6() {
        return _OBUFT_F_6;
    }

    public static EdifCell OBUFT_F_8() {
        return _OBUFT_F_8;
    }

    public static EdifCell OBUFT_GTL() {
        return _OBUFT_GTL;
    }

    public static EdifCell OBUFT_GTL_DCI() {
        return _OBUFT_GTL_DCI;
    }

    public static EdifCell OBUFT_GTLP() {
        return _OBUFT_GTLP;
    }

    public static EdifCell OBUFT_GTLP_DCI() {
        return _OBUFT_GTLP_DCI;
    }

    public static EdifCell OBUFT_HSTL_I() {
        return _OBUFT_HSTL_I;
    }

    public static EdifCell OBUFT_HSTL_I_18() {
        return _OBUFT_HSTL_I_18;
    }

    public static EdifCell OBUFT_HSTL_I_DCI() {
        return _OBUFT_HSTL_I_DCI;
    }

    public static EdifCell OBUFT_HSTL_I_DCI_18() {
        return _OBUFT_HSTL_I_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_II() {
        return _OBUFT_HSTL_II;
    }

    public static EdifCell OBUFT_HSTL_II_18() {
        return _OBUFT_HSTL_II_18;
    }

    public static EdifCell OBUFT_HSTL_II_DCI() {
        return _OBUFT_HSTL_II_DCI;
    }

    public static EdifCell OBUFT_HSTL_II_DCI_18() {
        return _OBUFT_HSTL_II_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_III() {
        return _OBUFT_HSTL_III;
    }

    public static EdifCell OBUFT_HSTL_III_18() {
        return _OBUFT_HSTL_III_18;
    }

    public static EdifCell OBUFT_HSTL_III_DCI() {
        return _OBUFT_HSTL_III_DCI;
    }

    public static EdifCell OBUFT_HSTL_III_DCI_18() {
        return _OBUFT_HSTL_III_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_IV() {
        return _OBUFT_HSTL_IV;
    }

    public static EdifCell OBUFT_HSTL_IV_18() {
        return _OBUFT_HSTL_IV_18;
    }

    public static EdifCell OBUFT_HSTL_IV_DCI() {
        return _OBUFT_HSTL_IV_DCI;
    }

    public static EdifCell OBUFT_HSTL_IV_DCI_18() {
        return _OBUFT_HSTL_IV_DCI_18;
    }

    public static EdifCell OBUFT_LVCMOS12() {
        return _OBUFT_LVCMOS12;
    }

    public static EdifCell OBUFT_LVCMOS12_F_2() {
        return _OBUFT_LVCMOS12_F_2;
    }

    public static EdifCell OBUFT_LVCMOS12_F_4() {
        return _OBUFT_LVCMOS12_F_4;
    }

    public static EdifCell OBUFT_LVCMOS12_F_6() {
        return _OBUFT_LVCMOS12_F_6;
    }

    public static EdifCell OBUFT_LVCMOS12_F_8() {
        return _OBUFT_LVCMOS12_F_8;
    }

    public static EdifCell OBUFT_LVCMOS12_S_2() {
        return _OBUFT_LVCMOS12_S_2;
    }

    public static EdifCell OBUFT_LVCMOS12_S_4() {
        return _OBUFT_LVCMOS12_S_4;
    }

    public static EdifCell OBUFT_LVCMOS12_S_6() {
        return _OBUFT_LVCMOS12_S_6;
    }

    public static EdifCell OBUFT_LVCMOS12_S_8() {
        return _OBUFT_LVCMOS12_S_8;
    }

    public static EdifCell OBUFT_LVCMOS15() {
        return _OBUFT_LVCMOS15;
    }

    public static EdifCell OBUFT_LVCMOS15_F_12() {
        return _OBUFT_LVCMOS15_F_12;
    }

    public static EdifCell OBUFT_LVCMOS15_F_16() {
        return _OBUFT_LVCMOS15_F_16;
    }

    public static EdifCell OBUFT_LVCMOS15_F_2() {
        return _OBUFT_LVCMOS15_F_2;
    }

    public static EdifCell OBUFT_LVCMOS15_F_4() {
        return _OBUFT_LVCMOS15_F_4;
    }

    public static EdifCell OBUFT_LVCMOS15_F_6() {
        return _OBUFT_LVCMOS15_F_6;
    }

    public static EdifCell OBUFT_LVCMOS15_F_8() {
        return _OBUFT_LVCMOS15_F_8;
    }

    public static EdifCell OBUFT_LVCMOS15_S_12() {
        return _OBUFT_LVCMOS15_S_12;
    }

    public static EdifCell OBUFT_LVCMOS15_S_16() {
        return _OBUFT_LVCMOS15_S_16;
    }

    public static EdifCell OBUFT_LVCMOS15_S_2() {
        return _OBUFT_LVCMOS15_S_2;
    }

    public static EdifCell OBUFT_LVCMOS15_S_4() {
        return _OBUFT_LVCMOS15_S_4;
    }

    public static EdifCell OBUFT_LVCMOS15_S_6() {
        return _OBUFT_LVCMOS15_S_6;
    }

    public static EdifCell OBUFT_LVCMOS15_S_8() {
        return _OBUFT_LVCMOS15_S_8;
    }

    public static EdifCell OBUFT_LVCMOS18() {
        return _OBUFT_LVCMOS18;
    }

    public static EdifCell OBUFT_LVCMOS18_F_12() {
        return _OBUFT_LVCMOS18_F_12;
    }

    public static EdifCell OBUFT_LVCMOS18_F_16() {
        return _OBUFT_LVCMOS18_F_16;
    }

    public static EdifCell OBUFT_LVCMOS18_F_2() {
        return _OBUFT_LVCMOS18_F_2;
    }

    public static EdifCell OBUFT_LVCMOS18_F_4() {
        return _OBUFT_LVCMOS18_F_4;
    }

    public static EdifCell OBUFT_LVCMOS18_F_6() {
        return _OBUFT_LVCMOS18_F_6;
    }

    public static EdifCell OBUFT_LVCMOS18_F_8() {
        return _OBUFT_LVCMOS18_F_8;
    }

    public static EdifCell OBUFT_LVCMOS18_S_12() {
        return _OBUFT_LVCMOS18_S_12;
    }

    public static EdifCell OBUFT_LVCMOS18_S_16() {
        return _OBUFT_LVCMOS18_S_16;
    }

    public static EdifCell OBUFT_LVCMOS18_S_2() {
        return _OBUFT_LVCMOS18_S_2;
    }

    public static EdifCell OBUFT_LVCMOS18_S_4() {
        return _OBUFT_LVCMOS18_S_4;
    }

    public static EdifCell OBUFT_LVCMOS18_S_6() {
        return _OBUFT_LVCMOS18_S_6;
    }

    public static EdifCell OBUFT_LVCMOS18_S_8() {
        return _OBUFT_LVCMOS18_S_8;
    }

    public static EdifCell OBUFT_LVCMOS2() {
        return _OBUFT_LVCMOS2;
    }

    public static EdifCell OBUFT_LVCMOS25() {
        return _OBUFT_LVCMOS25;
    }

    public static EdifCell OBUFT_LVCMOS25_F_12() {
        return _OBUFT_LVCMOS25_F_12;
    }

    public static EdifCell OBUFT_LVCMOS25_F_16() {
        return _OBUFT_LVCMOS25_F_16;
    }

    public static EdifCell OBUFT_LVCMOS25_F_2() {
        return _OBUFT_LVCMOS25_F_2;
    }

    public static EdifCell OBUFT_LVCMOS25_F_24() {
        return _OBUFT_LVCMOS25_F_24;
    }

    public static EdifCell OBUFT_LVCMOS25_F_4() {
        return _OBUFT_LVCMOS25_F_4;
    }

    public static EdifCell OBUFT_LVCMOS25_F_6() {
        return _OBUFT_LVCMOS25_F_6;
    }

    public static EdifCell OBUFT_LVCMOS25_F_8() {
        return _OBUFT_LVCMOS25_F_8;
    }

    public static EdifCell OBUFT_LVCMOS25_S_12() {
        return _OBUFT_LVCMOS25_S_12;
    }

    public static EdifCell OBUFT_LVCMOS25_S_16() {
        return _OBUFT_LVCMOS25_S_16;
    }

    public static EdifCell OBUFT_LVCMOS25_S_2() {
        return _OBUFT_LVCMOS25_S_2;
    }

    public static EdifCell OBUFT_LVCMOS25_S_24() {
        return _OBUFT_LVCMOS25_S_24;
    }

    public static EdifCell OBUFT_LVCMOS25_S_4() {
        return _OBUFT_LVCMOS25_S_4;
    }

    public static EdifCell OBUFT_LVCMOS25_S_6() {
        return _OBUFT_LVCMOS25_S_6;
    }

    public static EdifCell OBUFT_LVCMOS25_S_8() {
        return _OBUFT_LVCMOS25_S_8;
    }

    public static EdifCell OBUFT_LVCMOS33() {
        return _OBUFT_LVCMOS33;
    }

    public static EdifCell OBUFT_LVCMOS33_F_12() {
        return _OBUFT_LVCMOS33_F_12;
    }

    public static EdifCell OBUFT_LVCMOS33_F_16() {
        return _OBUFT_LVCMOS33_F_16;
    }

    public static EdifCell OBUFT_LVCMOS33_F_2() {
        return _OBUFT_LVCMOS33_F_2;
    }

    public static EdifCell OBUFT_LVCMOS33_F_24() {
        return _OBUFT_LVCMOS33_F_24;
    }

    public static EdifCell OBUFT_LVCMOS33_F_4() {
        return _OBUFT_LVCMOS33_F_4;
    }

    public static EdifCell OBUFT_LVCMOS33_F_6() {
        return _OBUFT_LVCMOS33_F_6;
    }

    public static EdifCell OBUFT_LVCMOS33_F_8() {
        return _OBUFT_LVCMOS33_F_8;
    }

    public static EdifCell OBUFT_LVCMOS33_S_12() {
        return _OBUFT_LVCMOS33_S_12;
    }

    public static EdifCell OBUFT_LVCMOS33_S_16() {
        return _OBUFT_LVCMOS33_S_16;
    }

    public static EdifCell OBUFT_LVCMOS33_S_2() {
        return _OBUFT_LVCMOS33_S_2;
    }

    public static EdifCell OBUFT_LVCMOS33_S_24() {
        return _OBUFT_LVCMOS33_S_24;
    }

    public static EdifCell OBUFT_LVCMOS33_S_4() {
        return _OBUFT_LVCMOS33_S_4;
    }

    public static EdifCell OBUFT_LVCMOS33_S_6() {
        return _OBUFT_LVCMOS33_S_6;
    }

    public static EdifCell OBUFT_LVCMOS33_S_8() {
        return _OBUFT_LVCMOS33_S_8;
    }

    public static EdifCell OBUFT_LVDCI_15() {
        return _OBUFT_LVDCI_15;
    }

    public static EdifCell OBUFT_LVDCI_18() {
        return _OBUFT_LVDCI_18;
    }

    public static EdifCell OBUFT_LVDCI_25() {
        return _OBUFT_LVDCI_25;
    }

    public static EdifCell OBUFT_LVDCI_33() {
        return _OBUFT_LVDCI_33;
    }

    public static EdifCell OBUFT_LVDCI_DV2_15() {
        return _OBUFT_LVDCI_DV2_15;
    }

    public static EdifCell OBUFT_LVDCI_DV2_18() {
        return _OBUFT_LVDCI_DV2_18;
    }

    public static EdifCell OBUFT_LVDCI_DV2_25() {
        return _OBUFT_LVDCI_DV2_25;
    }

    public static EdifCell OBUFT_LVDCI_DV2_33() {
        return _OBUFT_LVDCI_DV2_33;
    }

    public static EdifCell OBUFT_LVDS() {
        return _OBUFT_LVDS;
    }

    public static EdifCell OBUFT_LVPECL() {
        return _OBUFT_LVPECL;
    }

    public static EdifCell OBUFT_LVTTL() {
        return _OBUFT_LVTTL;
    }

    public static EdifCell OBUFT_LVTTL_F_12() {
        return _OBUFT_LVTTL_F_12;
    }

    public static EdifCell OBUFT_LVTTL_F_16() {
        return _OBUFT_LVTTL_F_16;
    }

    public static EdifCell OBUFT_LVTTL_F_2() {
        return _OBUFT_LVTTL_F_2;
    }

    public static EdifCell OBUFT_LVTTL_F_24() {
        return _OBUFT_LVTTL_F_24;
    }

    public static EdifCell OBUFT_LVTTL_F_4() {
        return _OBUFT_LVTTL_F_4;
    }

    public static EdifCell OBUFT_LVTTL_F_6() {
        return _OBUFT_LVTTL_F_6;
    }

    public static EdifCell OBUFT_LVTTL_F_8() {
        return _OBUFT_LVTTL_F_8;
    }

    public static EdifCell OBUFT_LVTTL_S_12() {
        return _OBUFT_LVTTL_S_12;
    }

    public static EdifCell OBUFT_LVTTL_S_16() {
        return _OBUFT_LVTTL_S_16;
    }

    public static EdifCell OBUFT_LVTTL_S_2() {
        return _OBUFT_LVTTL_S_2;
    }

    public static EdifCell OBUFT_LVTTL_S_24() {
        return _OBUFT_LVTTL_S_24;
    }

    public static EdifCell OBUFT_LVTTL_S_4() {
        return _OBUFT_LVTTL_S_4;
    }

    public static EdifCell OBUFT_LVTTL_S_6() {
        return _OBUFT_LVTTL_S_6;
    }

    public static EdifCell OBUFT_LVTTL_S_8() {
        return _OBUFT_LVTTL_S_8;
    }

    public static EdifCell OBUFT_PCI33_3() {
        return _OBUFT_PCI33_3;
    }

    public static EdifCell OBUFT_PCI33_5() {
        return _OBUFT_PCI33_5;
    }

    public static EdifCell OBUFT_PCI66_3() {
        return _OBUFT_PCI66_3;
    }

    public static EdifCell OBUFT_PCIX() {
        return _OBUFT_PCIX;
    }

    public static EdifCell OBUFT_PCIX66_3() {
        return _OBUFT_PCIX66_3;
    }

    public static EdifCell OBUFT_S_12() {
        return _OBUFT_S_12;
    }

    public static EdifCell OBUFT_S_16() {
        return _OBUFT_S_16;
    }

    public static EdifCell OBUFT_S_2() {
        return _OBUFT_S_2;
    }

    public static EdifCell OBUFT_S_24() {
        return _OBUFT_S_24;
    }

    public static EdifCell OBUFT_S_4() {
        return _OBUFT_S_4;
    }

    public static EdifCell OBUFT_S_6() {
        return _OBUFT_S_6;
    }

    public static EdifCell OBUFT_S_8() {
        return _OBUFT_S_8;
    }

    public static EdifCell OBUFT_SSTL18_I() {
        return _OBUFT_SSTL18_I;
    }

    public static EdifCell OBUFT_SSTL18_I_DCI() {
        return _OBUFT_SSTL18_I_DCI;
    }

    public static EdifCell OBUFT_SSTL18_II() {
        return _OBUFT_SSTL18_II;
    }

    public static EdifCell OBUFT_SSTL18_II_DCI() {
        return _OBUFT_SSTL18_II_DCI;
    }

    public static EdifCell OBUFT_SSTL2_I() {
        return _OBUFT_SSTL2_I;
    }

    public static EdifCell OBUFT_SSTL2_I_DCI() {
        return _OBUFT_SSTL2_I_DCI;
    }

    public static EdifCell OBUFT_SSTL2_II() {
        return _OBUFT_SSTL2_II;
    }

    public static EdifCell OBUFT_SSTL2_II_DCI() {
        return _OBUFT_SSTL2_II_DCI;
    }

    public static EdifCell OBUFT_SSTL3_I() {
        return _OBUFT_SSTL3_I;
    }

    public static EdifCell OBUFT_SSTL3_I_DCI() {
        return _OBUFT_SSTL3_I_DCI;
    }

    public static EdifCell OBUFT_SSTL3_II() {
        return _OBUFT_SSTL3_II;
    }

    public static EdifCell OBUFT_SSTL3_II_DCI() {
        return _OBUFT_SSTL3_II_DCI;
    }

    public static EdifCell OBUFTDS() {
        return _OBUFTDS;
    }

    public static EdifCell OBUFTDS_BLVDS_25() {
        return _OBUFTDS_BLVDS_25;
    }

    public static EdifCell OBUFTDS_LDT_25() {
        return _OBUFTDS_LDT_25;
    }

    public static EdifCell OBUFTDS_LVDS_25() {
        return _OBUFTDS_LVDS_25;
    }

    public static EdifCell OBUFTDS_LVDS_33() {
        return _OBUFTDS_LVDS_33;
    }

    public static EdifCell OBUFTDS_LVDSEXT_25() {
        return _OBUFTDS_LVDSEXT_25;
    }

    public static EdifCell OBUFTDS_LVDSEXT_33() {
        return _OBUFTDS_LVDSEXT_33;
    }

    public static EdifCell OBUFTDS_LVPECL_25() {
        return _OBUFTDS_LVPECL_25;
    }

    public static EdifCell OBUFTDS_LVPECL_33() {
        return _OBUFTDS_LVPECL_33;
    }

    public static EdifCell OBUFTDS_ULVDS_25() {
        return _OBUFTDS_ULVDS_25;
    }

    public static EdifCell ODDR() {
        return _ODDR;
    }

    public static EdifCell ODDR2() {
        return _ODDR2;
    }

    public static EdifCell OFDDRCPE() {
        return _OFDDRCPE;
    }

    public static EdifCell OFDDRRSE() {
        return _OFDDRRSE;
    }

    public static EdifCell OFDDRTCPE() {
        return _OFDDRTCPE;
    }

    public static EdifCell OFDDRTRSE() {
        return _OFDDRTRSE;
    }

    public static EdifCell OPT_OFF() {
        return _OPT_OFF;
    }

    public static EdifCell OPT_UIM() {
        return _OPT_UIM;
    }

    public static EdifCell OR2() {
        return _OR2;
    }

    public static EdifCell OR2B1() {
        return _OR2B1;
    }

    public static EdifCell OR2B2() {
        return _OR2B2;
    }

    public static EdifCell OR3() {
        return _OR3;
    }

    public static EdifCell OR3B1() {
        return _OR3B1;
    }

    public static EdifCell OR3B2() {
        return _OR3B2;
    }

    public static EdifCell OR3B3() {
        return _OR3B3;
    }

    public static EdifCell OR4() {
        return _OR4;
    }

    public static EdifCell OR4B1() {
        return _OR4B1;
    }

    public static EdifCell OR4B2() {
        return _OR4B2;
    }

    public static EdifCell OR4B3() {
        return _OR4B3;
    }

    public static EdifCell OR4B4() {
        return _OR4B4;
    }

    public static EdifCell OR5() {
        return _OR5;
    }

    public static EdifCell OR5B1() {
        return _OR5B1;
    }

    public static EdifCell OR5B2() {
        return _OR5B2;
    }

    public static EdifCell OR5B3() {
        return _OR5B3;
    }

    public static EdifCell OR5B4() {
        return _OR5B4;
    }

    public static EdifCell OR5B5() {
        return _OR5B5;
    }

    public static EdifCell OR6() {
        return _OR6;
    }

    public static EdifCell OR7() {
        return _OR7;
    }

    public static EdifCell OR8() {
        return _OR8;
    }

    public static EdifCell ORCY() {
        return _ORCY;
    }

    public static EdifCell OSERDES() {
        return _OSERDES;
    }

    public static EdifCell PLL_ADV() {
        return _PLL_ADV;
    }

    public static EdifCell PLL_BASE() {
        return _PLL_BASE;
    }

    public static EdifCell PMCD() {
        return _PMCD;
    }

    public static EdifCell PPC405() {
        return _PPC405;
    }

    public static EdifCell PPC405_ADV() {
        return _PPC405_ADV;
    }

    public static EdifCell PULLDOWN() {
        return _PULLDOWN;
    }

    public static EdifCell PULLUP() {
        return _PULLUP;
    }

    public static EdifCell RAM128X1D() {
        return _RAM128X1D;
    }

    public static EdifCell RAM128X1S() {
        return _RAM128X1S;
    }

    public static EdifCell RAM128X1S_1() {
        return _RAM128X1S_1;
    }

    public static EdifCell RAM16X1D() {
        return _RAM16X1D;
    }

    public static EdifCell RAM16X1D_1() {
        return _RAM16X1D_1;
    }

    public static EdifCell RAM16X1S() {
        return _RAM16X1S;
    }

    public static EdifCell RAM16X1S_1() {
        return _RAM16X1S_1;
    }

    public static EdifCell RAM16X2S() {
        return _RAM16X2S;
    }

    public static EdifCell RAM16X4S() {
        return _RAM16X4S;
    }

    public static EdifCell RAM16X8S() {
        return _RAM16X8S;
    }

    public static EdifCell RAM256X1S() {
        return _RAM256X1S;
    }

    public static EdifCell RAM32M() {
        return _RAM32M;
    }

    public static EdifCell RAM32X1D() {
        return _RAM32X1D;
    }

    public static EdifCell RAM32X1D_1() {
        return _RAM32X1D_1;
    }

    public static EdifCell RAM32X1S() {
        return _RAM32X1S;
    }

    public static EdifCell RAM32X1S_1() {
        return _RAM32X1S_1;
    }

    public static EdifCell RAM32X2S() {
        return _RAM32X2S;
    }

    public static EdifCell RAM32X4S() {
        return _RAM32X4S;
    }

    public static EdifCell RAM32X8S() {
        return _RAM32X8S;
    }

    public static EdifCell RAM64M() {
        return _RAM64M;
    }

    public static EdifCell RAM64X1D() {
        return _RAM64X1D;
    }

    public static EdifCell RAM64X1D_1() {
        return _RAM64X1D_1;
    }

    public static EdifCell RAM64X1S() {
        return _RAM64X1S;
    }

    public static EdifCell RAM64X1S_1() {
        return _RAM64X1S_1;
    }

    public static EdifCell RAM64X2S() {
        return _RAM64X2S;
    }

    public static EdifCell RAMB16() {
        return _RAMB16;
    }

    public static EdifCell RAMB16_S1() {
        return _RAMB16_S1;
    }

    public static EdifCell RAMB16_S18() {
        return _RAMB16_S18;
    }

    public static EdifCell RAMB16_S18_S18() {
        return _RAMB16_S18_S18;
    }

    public static EdifCell RAMB16_S18_S36() {
        return _RAMB16_S18_S36;
    }

    public static EdifCell RAMB16_S1_S1() {
        return _RAMB16_S1_S1;
    }

    public static EdifCell RAMB16_S1_S18() {
        return _RAMB16_S1_S18;
    }

    public static EdifCell RAMB16_S1_S2() {
        return _RAMB16_S1_S2;
    }

    public static EdifCell RAMB16_S1_S36() {
        return _RAMB16_S1_S36;
    }

    public static EdifCell RAMB16_S1_S4() {
        return _RAMB16_S1_S4;
    }

    public static EdifCell RAMB16_S1_S9() {
        return _RAMB16_S1_S9;
    }

    public static EdifCell RAMB16_S2() {
        return _RAMB16_S2;
    }

    public static EdifCell RAMB16_S2_S18() {
        return _RAMB16_S2_S18;
    }

    public static EdifCell RAMB16_S2_S2() {
        return _RAMB16_S2_S2;
    }

    public static EdifCell RAMB16_S2_S36() {
        return _RAMB16_S2_S36;
    }

    public static EdifCell RAMB16_S2_S4() {
        return _RAMB16_S2_S4;
    }

    public static EdifCell RAMB16_S2_S9() {
        return _RAMB16_S2_S9;
    }

    public static EdifCell RAMB16_S36() {
        return _RAMB16_S36;
    }

    public static EdifCell RAMB16_S36_S36() {
        return _RAMB16_S36_S36;
    }

    public static EdifCell RAMB16_S4() {
        return _RAMB16_S4;
    }

    public static EdifCell RAMB16_S4_S18() {
        return _RAMB16_S4_S18;
    }

    public static EdifCell RAMB16_S4_S36() {
        return _RAMB16_S4_S36;
    }

    public static EdifCell RAMB16_S4_S4() {
        return _RAMB16_S4_S4;
    }

    public static EdifCell RAMB16_S4_S9() {
        return _RAMB16_S4_S9;
    }

    public static EdifCell RAMB16_S9() {
        return _RAMB16_S9;
    }

    public static EdifCell RAMB16_S9_S18() {
        return _RAMB16_S9_S18;
    }

    public static EdifCell RAMB16_S9_S36() {
        return _RAMB16_S9_S36;
    }

    public static EdifCell RAMB16_S9_S9() {
        return _RAMB16_S9_S9;
    }

    public static EdifCell RAMB18() {
        return _RAMB18;
    }

    public static EdifCell RAMB18SDP() {
        return _RAMB18SDP;
    }

    public static EdifCell RAMB32_S64_ECC() {
        return _RAMB32_S64_ECC;
    }

    public static EdifCell RAMB36() {
        return _RAMB36;
    }

    public static EdifCell RAMB36_EXP() {
        return _RAMB36_EXP;
    }

    public static EdifCell RAMB36SDP() {
        return _RAMB36SDP;
    }

    public static EdifCell RAMB36SDP_EXP() {
        return _RAMB36SDP_EXP;
    }

    public static EdifCell RAMB4_S1() {
        return _RAMB4_S1;
    }

    public static EdifCell RAMB4_S16() {
        return _RAMB4_S16;
    }

    public static EdifCell RAMB4_S16_S16() {
        return _RAMB4_S16_S16;
    }

    public static EdifCell RAMB4_S1_S1() {
        return _RAMB4_S1_S1;
    }

    public static EdifCell RAMB4_S1_S16() {
        return _RAMB4_S1_S16;
    }

    public static EdifCell RAMB4_S1_S2() {
        return _RAMB4_S1_S2;
    }

    public static EdifCell RAMB4_S1_S4() {
        return _RAMB4_S1_S4;
    }

    public static EdifCell RAMB4_S1_S8() {
        return _RAMB4_S1_S8;
    }

    public static EdifCell RAMB4_S2() {
        return _RAMB4_S2;
    }

    public static EdifCell RAMB4_S2_S16() {
        return _RAMB4_S2_S16;
    }

    public static EdifCell RAMB4_S2_S2() {
        return _RAMB4_S2_S2;
    }

    public static EdifCell RAMB4_S2_S4() {
        return _RAMB4_S2_S4;
    }

    public static EdifCell RAMB4_S2_S8() {
        return _RAMB4_S2_S8;
    }

    public static EdifCell RAMB4_S4() {
        return _RAMB4_S4;
    }

    public static EdifCell RAMB4_S4_S16() {
        return _RAMB4_S4_S16;
    }

    public static EdifCell RAMB4_S4_S4() {
        return _RAMB4_S4_S4;
    }

    public static EdifCell RAMB4_S4_S8() {
        return _RAMB4_S4_S8;
    }

    public static EdifCell RAMB4_S8() {
        return _RAMB4_S8;
    }

    public static EdifCell RAMB4_S8_S16() {
        return _RAMB4_S8_S16;
    }

    public static EdifCell RAMB4_S8_S8() {
        return _RAMB4_S8_S8;
    }

    public static EdifCell ROC() {
        return _ROC;
    }

    public static EdifCell ROCBUF() {
        return _ROCBUF;
    }

    public static EdifCell ROM128X1() {
        return _ROM128X1;
    }

    public static EdifCell ROM16X1() {
        return _ROM16X1;
    }

    public static EdifCell ROM256X1() {
        return _ROM256X1;
    }

    public static EdifCell ROM32X1() {
        return _ROM32X1;
    }

    public static EdifCell ROM64X1() {
        return _ROM64X1;
    }

    public static EdifCell SRL16() {
        return _SRL16;
    }

    public static EdifCell SRL16_1() {
        return _SRL16_1;
    }

    public static EdifCell SRL16E() {
        return _SRL16E;
    }

    public static EdifCell SRL16E_1() {
        return _SRL16E_1;
    }

    public static EdifCell SRLC16() {
        return _SRLC16;
    }

    public static EdifCell SRLC16_1() {
        return _SRLC16_1;
    }

    public static EdifCell SRLC16E() {
        return _SRLC16E;
    }

    public static EdifCell SRLC16E_1() {
        return _SRLC16E_1;
    }

    public static EdifCell SRLC32E() {
        return _SRLC32E;
    }

    public static EdifCell STARTBUF_FPGACORE() {
        return _STARTBUF_FPGACORE;
    }

    public static EdifCell STARTBUF_SPARTAN2() {
        return _STARTBUF_SPARTAN2;
    }

    public static EdifCell STARTBUF_SPARTAN3() {
        return _STARTBUF_SPARTAN3;
    }

    public static EdifCell STARTBUF_VIRTEX() {
        return _STARTBUF_VIRTEX;
    }

    public static EdifCell STARTBUF_VIRTEX2() {
        return _STARTBUF_VIRTEX2;
    }

    public static EdifCell STARTBUF_VIRTEX4() {
        return _STARTBUF_VIRTEX4;
    }

    public static EdifCell STARTUP_FPGACORE() {
        return _STARTUP_FPGACORE;
    }

    public static EdifCell STARTUP_SPARTAN2() {
        return _STARTUP_SPARTAN2;
    }

    public static EdifCell STARTUP_SPARTAN3() {
        return _STARTUP_SPARTAN3;
    }

    public static EdifCell STARTUP_SPARTAN3E() {
        return _STARTUP_SPARTAN3E;
    }

    public static EdifCell STARTUP_VIRTEX() {
        return _STARTUP_VIRTEX;
    }

    public static EdifCell STARTUP_VIRTEX2() {
        return _STARTUP_VIRTEX2;
    }

    public static EdifCell STARTUP_VIRTEX4() {
        return _STARTUP_VIRTEX4;
    }

    public static EdifCell STARTUP_VIRTEX5() {
        return _STARTUP_VIRTEX5;
    }

    public static EdifCell TBLOCK() {
        return _TBLOCK;
    }

    public static EdifCell TIMEGRP() {
        return _TIMEGRP;
    }

    public static EdifCell TIMESPEC() {
        return _TIMESPEC;
    }

    public static EdifCell TOC() {
        return _TOC;
    }

    public static EdifCell TOCBUF() {
        return _TOCBUF;
    }

    public static EdifCell USR_ACCESS_VIRTEX4() {
        return _USR_ACCESS_VIRTEX4;
    }

    public static EdifCell USR_ACCESS_VIRTEX5() {
        return _USR_ACCESS_VIRTEX5;
    }

    public static EdifCell VCC() {
        return _VCC;
    }

    public static EdifCell WIREAND() {
        return _WIREAND;
    }

    public static EdifCell XNOR2() {
        return _XNOR2;
    }

    public static EdifCell XNOR3() {
        return _XNOR3;
    }

    public static EdifCell XNOR4() {
        return _XNOR4;
    }

    public static EdifCell XNOR5() {
        return _XNOR5;
    }

    public static EdifCell XOR2() {
        return _XOR2;
    }

    public static EdifCell XOR3() {
        return _XOR3;
    }

    public static EdifCell XOR4() {
        return _XOR4;
    }

    public static EdifCell XOR5() {
        return _XOR5;
    }

    public static EdifCell XORCY() {
        return _XORCY;
    }

    public static EdifCell XORCY_D() {
        return _XORCY_D;
    }

    public static EdifCell XORCY_L() {
        return _XORCY_L;
    }

    private static void _initAND2() {
        try {
            _AND2 = new EdifCell(library, "AND2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2");
        }
        try {
            _AND2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND2B1() {
        try {
            _AND2B1 = new EdifCell(library, "AND2B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2B1");
        }
        try {
            _AND2B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND2B2() {
        try {
            _AND2B2 = new EdifCell(library, "AND2B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2B2");
        }
        try {
            _AND2B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3() {
        try {
            _AND3 = new EdifCell(library, "AND3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3");
        }
        try {
            _AND3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B1() {
        try {
            _AND3B1 = new EdifCell(library, "AND3B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B1");
        }
        try {
            _AND3B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B2() {
        try {
            _AND3B2 = new EdifCell(library, "AND3B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B2");
        }
        try {
            _AND3B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B3() {
        try {
            _AND3B3 = new EdifCell(library, "AND3B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B3");
        }
        try {
            _AND3B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4() {
        try {
            _AND4 = new EdifCell(library, "AND4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4");
        }
        try {
            _AND4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B1() {
        try {
            _AND4B1 = new EdifCell(library, "AND4B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B1");
        }
        try {
            _AND4B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B2() {
        try {
            _AND4B2 = new EdifCell(library, "AND4B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B2");
        }
        try {
            _AND4B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B3() {
        try {
            _AND4B3 = new EdifCell(library, "AND4B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B3");
        }
        try {
            _AND4B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B4() {
        try {
            _AND4B4 = new EdifCell(library, "AND4B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B4");
        }
        try {
            _AND4B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5() {
        try {
            _AND5 = new EdifCell(library, "AND5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5");
        }
        try {
            _AND5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B1() {
        try {
            _AND5B1 = new EdifCell(library, "AND5B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B1");
        }
        try {
            _AND5B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B2() {
        try {
            _AND5B2 = new EdifCell(library, "AND5B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B2");
        }
        try {
            _AND5B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B3() {
        try {
            _AND5B3 = new EdifCell(library, "AND5B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B3");
        }
        try {
            _AND5B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B4() {
        try {
            _AND5B4 = new EdifCell(library, "AND5B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B4");
        }
        try {
            _AND5B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B5() {
        try {
            _AND5B5 = new EdifCell(library, "AND5B5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B5");
        }
        try {
            _AND5B5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND6() {
        try {
            _AND6 = new EdifCell(library, "AND6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND6");
        }
        try {
            _AND6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND7() {
        try {
            _AND7 = new EdifCell(library, "AND7", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND7");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND7");
        }
        try {
            _AND7.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND8() {
        try {
            _AND8 = new EdifCell(library, "AND8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND8");
        }
        try {
            _AND8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I7_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_FPGACORE() {
        try {
            _BSCAN_FPGACORE = new EdifCell(library, "BSCAN_FPGACORE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_FPGACORE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_FPGACORE");
        }
        try {
            _BSCAN_FPGACORE.addPort(CAPTURE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(DRCK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(DRCK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SEL1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SEL2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDO1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDO2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_SPARTAN2() {
        try {
            _BSCAN_SPARTAN2 = new EdifCell(library, "BSCAN_SPARTAN2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_SPARTAN2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_SPARTAN2");
        }
        try {
            _BSCAN_SPARTAN2.addPort(DRCK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(DRCK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(SEL1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(SEL2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(TDO1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN2.addPort(TDO2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_SPARTAN3() {
        try {
            _BSCAN_SPARTAN3 = new EdifCell(library, "BSCAN_SPARTAN3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_SPARTAN3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_SPARTAN3");
        }
        try {
            _BSCAN_SPARTAN3.addPort(CAPTURE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(DRCK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(DRCK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SEL1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SEL2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDO1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDO2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX() {
        try {
            _BSCAN_VIRTEX = new EdifCell(library, "BSCAN_VIRTEX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX");
        }
        try {
            _BSCAN_VIRTEX.addPort(DRCK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(DRCK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(SEL1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(SEL2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(TDO1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX.addPort(TDO2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX2() {
        try {
            _BSCAN_VIRTEX2 = new EdifCell(library, "BSCAN_VIRTEX2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX2");
        }
        try {
            _BSCAN_VIRTEX2.addPort(CAPTURE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(DRCK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(DRCK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(SEL1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(SEL2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(TDO1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX2.addPort(TDO2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX4() {
        try {
            _BSCAN_VIRTEX4 = new EdifCell(library, "BSCAN_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX4");
        }
        try {
            _BSCAN_VIRTEX4.addPort(CAPTURE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(DRCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(SEL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(TDO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX5() {
        try {
            _BSCAN_VIRTEX5 = new EdifCell(library, "BSCAN_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX5");
        }
        try {
            _BSCAN_VIRTEX5.addPort(CAPTURE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(DRCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(RESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(SEL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(SHIFT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(TDI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(UPDATE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(TDO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUF() {
        try {
            _BUF = new EdifCell(library, "BUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUF");
        }
        try {
            _BUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFCF() {
        try {
            _BUFCF = new EdifCell(library, "BUFCF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFCF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFCF");
        }
        try {
            _BUFCF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFE() {
        try {
            _BUFE = new EdifCell(library, "BUFE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFE");
        }
        try {
            _BUFE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFE.addPort(E_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFFOE() {
        try {
            _BUFFOE = new EdifCell(library, "BUFFOE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFFOE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFFOE");
        }
        try {
            _BUFFOE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFFOE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFG() {
        try {
            _BUFG = new EdifCell(library, "BUFG", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFG");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFG");
        }
        try {
            _BUFG.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFG.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCE() {
        try {
            _BUFGCE = new EdifCell(library, "BUFGCE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCE");
        }
        try {
            _BUFGCE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCE_1() {
        try {
            _BUFGCE_1 = new EdifCell(library, "BUFGCE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCE_1");
        }
        try {
            _BUFGCE_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_1.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCTRL() {
        try {
            _BUFGCTRL = new EdifCell(library, "BUFGCTRL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCTRL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCTRL");
        }
        try {
            _BUFGCTRL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(CE0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(CE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(IGNORE0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(IGNORE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(S0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(S1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGDLL() {
        try {
            _BUFGDLL = new EdifCell(library, "BUFGDLL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGDLL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGDLL");
        }
        try {
            _BUFGDLL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGDLL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX() {
        try {
            _BUFGMUX = new EdifCell(library, "BUFGMUX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX");
        }
        try {
            _BUFGMUX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_1() {
        try {
            _BUFGMUX_1 = new EdifCell(library, "BUFGMUX_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_1");
        }
        try {
            _BUFGMUX_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_CTRL() {
        try {
            _BUFGMUX_CTRL = new EdifCell(library, "BUFGMUX_CTRL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_CTRL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_CTRL");
        }
        try {
            _BUFGMUX_CTRL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_VIRTEX4() {
        try {
            _BUFGMUX_VIRTEX4 = new EdifCell(library, "BUFGMUX_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_VIRTEX4");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGP() {
        try {
            _BUFGP = new EdifCell(library, "BUFGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGP");
        }
        try {
            _BUFGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGSR() {
        try {
            _BUFGSR = new EdifCell(library, "BUFGSR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGSR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGSR");
        }
        try {
            _BUFGSR.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGSR.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGTS() {
        try {
            _BUFGTS = new EdifCell(library, "BUFGTS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGTS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGTS");
        }
        try {
            _BUFGTS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGTS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIO() {
        try {
            _BUFIO = new EdifCell(library, "BUFIO", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIO");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIO");
        }
        try {
            _BUFIO.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFR() {
        try {
            _BUFR = new EdifCell(library, "BUFR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFR");
        }
        try {
            _BUFR.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFT() {
        try {
            _BUFT = new EdifCell(library, "BUFT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFT");
        }
        try {
            _BUFT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFT.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_FPGACORE() {
        try {
            _CAPTURE_FPGACORE = new EdifCell(library, "CAPTURE_FPGACORE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_FPGACORE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_FPGACORE");
        }
        try {
            _CAPTURE_FPGACORE.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_FPGACORE.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_SPARTAN2() {
        try {
            _CAPTURE_SPARTAN2 = new EdifCell(library, "CAPTURE_SPARTAN2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_SPARTAN2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_SPARTAN2");
        }
        try {
            _CAPTURE_SPARTAN2.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_SPARTAN2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_SPARTAN3() {
        try {
            _CAPTURE_SPARTAN3 = new EdifCell(library, "CAPTURE_SPARTAN3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_SPARTAN3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_SPARTAN3");
        }
        try {
            _CAPTURE_SPARTAN3.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_SPARTAN3.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX() {
        try {
            _CAPTURE_VIRTEX = new EdifCell(library, "CAPTURE_VIRTEX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX");
        }
        try {
            _CAPTURE_VIRTEX.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX2() {
        try {
            _CAPTURE_VIRTEX2 = new EdifCell(library, "CAPTURE_VIRTEX2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX2");
        }
        try {
            _CAPTURE_VIRTEX2.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX4() {
        try {
            _CAPTURE_VIRTEX4 = new EdifCell(library, "CAPTURE_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX4");
        }
        try {
            _CAPTURE_VIRTEX4.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX4.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX5() {
        try {
            _CAPTURE_VIRTEX5 = new EdifCell(library, "CAPTURE_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX5");
        }
        try {
            _CAPTURE_VIRTEX5.addPort(CAP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX5.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCARRY4() {
        try {
            _CARRY4 = new EdifCell(library, "CARRY4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CARRY4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CARRY4");
        }
        try {
            _CARRY4.addPort(CO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(O_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(CYINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(DI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(S_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCFGLUT5() {
        try {
            _CFGLUT5 = new EdifCell(library, "CFGLUT5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CFGLUT5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CFGLUT5");
        }
        try {
            _CFGLUT5.addPort(CDO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(O5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(O6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CDI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10() {
        try {
            _CLK_DIV10 = new EdifCell(library, "CLK_DIV10", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10");
        }
        try {
            _CLK_DIV10.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10R() {
        try {
            _CLK_DIV10R = new EdifCell(library, "CLK_DIV10R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10R");
        }
        try {
            _CLK_DIV10R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10RSD() {
        try {
            _CLK_DIV10RSD = new EdifCell(library, "CLK_DIV10RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10RSD");
        }
        try {
            _CLK_DIV10RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10SD() {
        try {
            _CLK_DIV10SD = new EdifCell(library, "CLK_DIV10SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10SD");
        }
        try {
            _CLK_DIV10SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12() {
        try {
            _CLK_DIV12 = new EdifCell(library, "CLK_DIV12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12");
        }
        try {
            _CLK_DIV12.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12R() {
        try {
            _CLK_DIV12R = new EdifCell(library, "CLK_DIV12R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12R");
        }
        try {
            _CLK_DIV12R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12RSD() {
        try {
            _CLK_DIV12RSD = new EdifCell(library, "CLK_DIV12RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12RSD");
        }
        try {
            _CLK_DIV12RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12SD() {
        try {
            _CLK_DIV12SD = new EdifCell(library, "CLK_DIV12SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12SD");
        }
        try {
            _CLK_DIV12SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14() {
        try {
            _CLK_DIV14 = new EdifCell(library, "CLK_DIV14", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14");
        }
        try {
            _CLK_DIV14.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14R() {
        try {
            _CLK_DIV14R = new EdifCell(library, "CLK_DIV14R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14R");
        }
        try {
            _CLK_DIV14R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14RSD() {
        try {
            _CLK_DIV14RSD = new EdifCell(library, "CLK_DIV14RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14RSD");
        }
        try {
            _CLK_DIV14RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14SD() {
        try {
            _CLK_DIV14SD = new EdifCell(library, "CLK_DIV14SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14SD");
        }
        try {
            _CLK_DIV14SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16() {
        try {
            _CLK_DIV16 = new EdifCell(library, "CLK_DIV16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16");
        }
        try {
            _CLK_DIV16.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16R() {
        try {
            _CLK_DIV16R = new EdifCell(library, "CLK_DIV16R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16R");
        }
        try {
            _CLK_DIV16R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16RSD() {
        try {
            _CLK_DIV16RSD = new EdifCell(library, "CLK_DIV16RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16RSD");
        }
        try {
            _CLK_DIV16RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16SD() {
        try {
            _CLK_DIV16SD = new EdifCell(library, "CLK_DIV16SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16SD");
        }
        try {
            _CLK_DIV16SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2() {
        try {
            _CLK_DIV2 = new EdifCell(library, "CLK_DIV2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2");
        }
        try {
            _CLK_DIV2.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2R() {
        try {
            _CLK_DIV2R = new EdifCell(library, "CLK_DIV2R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2R");
        }
        try {
            _CLK_DIV2R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2RSD() {
        try {
            _CLK_DIV2RSD = new EdifCell(library, "CLK_DIV2RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2RSD");
        }
        try {
            _CLK_DIV2RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2SD() {
        try {
            _CLK_DIV2SD = new EdifCell(library, "CLK_DIV2SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2SD");
        }
        try {
            _CLK_DIV2SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4() {
        try {
            _CLK_DIV4 = new EdifCell(library, "CLK_DIV4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4");
        }
        try {
            _CLK_DIV4.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4R() {
        try {
            _CLK_DIV4R = new EdifCell(library, "CLK_DIV4R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4R");
        }
        try {
            _CLK_DIV4R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4RSD() {
        try {
            _CLK_DIV4RSD = new EdifCell(library, "CLK_DIV4RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4RSD");
        }
        try {
            _CLK_DIV4RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4SD() {
        try {
            _CLK_DIV4SD = new EdifCell(library, "CLK_DIV4SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4SD");
        }
        try {
            _CLK_DIV4SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6() {
        try {
            _CLK_DIV6 = new EdifCell(library, "CLK_DIV6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6");
        }
        try {
            _CLK_DIV6.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6R() {
        try {
            _CLK_DIV6R = new EdifCell(library, "CLK_DIV6R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6R");
        }
        try {
            _CLK_DIV6R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6RSD() {
        try {
            _CLK_DIV6RSD = new EdifCell(library, "CLK_DIV6RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6RSD");
        }
        try {
            _CLK_DIV6RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6SD() {
        try {
            _CLK_DIV6SD = new EdifCell(library, "CLK_DIV6SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6SD");
        }
        try {
            _CLK_DIV6SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8() {
        try {
            _CLK_DIV8 = new EdifCell(library, "CLK_DIV8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8");
        }
        try {
            _CLK_DIV8.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8R() {
        try {
            _CLK_DIV8R = new EdifCell(library, "CLK_DIV8R", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8R");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8R");
        }
        try {
            _CLK_DIV8R.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8R.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8R.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8RSD() {
        try {
            _CLK_DIV8RSD = new EdifCell(library, "CLK_DIV8RSD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8RSD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8RSD");
        }
        try {
            _CLK_DIV8RSD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8RSD.addPort(CDRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8RSD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8SD() {
        try {
            _CLK_DIV8SD = new EdifCell(library, "CLK_DIV8SD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8SD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8SD");
        }
        try {
            _CLK_DIV8SD.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8SD.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLL() {
        try {
            _CLKDLL = new EdifCell(library, "CLKDLL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLL");
        }
        try {
            _CLKDLL.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLLE() {
        try {
            _CLKDLLE = new EdifCell(library, "CLKDLLE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLLE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLLE");
        }
        try {
            _CLKDLLE.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLLHF() {
        try {
            _CLKDLLHF = new EdifCell(library, "CLKDLLHF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLLHF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLLHF");
        }
        try {
            _CLKDLLHF.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCONFIG() {
        try {
            _CONFIG = new EdifCell(library, "CONFIG", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CONFIG");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CONFIG");
        }
    }

    private static void _initCRC32() {
        try {
            _CRC32 = new EdifCell(library, "CRC32", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CRC32");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CRC32");
        }
        try {
            _CRC32.addPort(CRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCIN_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCRC64() {
        try {
            _CRC64 = new EdifCell(library, "CRC64", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CRC64");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CRC64");
        }
        try {
            _CRC64.addPort(CRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCIN_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCC_FPGACORE() {
        try {
            _DCC_FPGACORE = new EdifCell(library, "DCC_FPGACORE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCC_FPGACORE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCC_FPGACORE");
        }
        try {
            _DCC_FPGACORE.addPort(BCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DONEOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DOUT7_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(GSR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(GTS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(GWE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(INITBOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(TDO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(CCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(CSB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DIN7_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(DONEIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(LBISTISOLATEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(M0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(M1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(M2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(PROGB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(TCK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(TDI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(TMS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCC_FPGACORE.addPort(WRITEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCIRESET() {
        try {
            _DCIRESET = new EdifCell(library, "DCIRESET", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCIRESET");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCIRESET");
        }
        try {
            _DCIRESET.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCIRESET.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM() {
        try {
            _DCM = new EdifCell(library, "DCM", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM");
        }
        try {
            _DCM.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFX_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFX180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(STATUS_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(DSSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSINCDEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_ADV() {
        try {
            _DCM_ADV = new EdifCell(library, "DCM_ADV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_ADV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_ADV");
        }
        try {
            _DCM_ADV.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFX_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFX180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DRDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DADDR_port_name, 7, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DWE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSINCDEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_BASE() {
        try {
            _DCM_BASE = new EdifCell(library, "DCM_BASE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_BASE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_BASE");
        }
        try {
            _DCM_BASE.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFX_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFX180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_PS() {
        try {
            _DCM_PS = new EdifCell(library, "DCM_PS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_PS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_PS");
        }
        try {
            _DCM_PS.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFX_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFX180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSINCDEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_SP() {
        try {
            _DCM_SP = new EdifCell(library, "DCM_SP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_SP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_SP");
        }
        try {
            _DCM_SP.addPort(CLK0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK270_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK2X_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK2X180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK90_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKDV_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFX_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFX180_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(STATUS_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(DSSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSINCDEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48() {
        try {
            _DSP48 = new EdifCell(library, "DSP48", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48");
        }
        try {
            _DSP48.addPort(BCOUT_port_name, 18, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(P_port_name, 48, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(PCOUT_port_name, 48, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(A_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(B_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(BCIN_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(C_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CARRYINSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECINSUB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECTRL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEM_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(OPMODE_port_name, 7, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(PCIN_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTCARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTCTRL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTM_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(SUBTRACT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48E() {
        try {
            _DSP48E = new EdifCell(library, "DSP48E", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48E");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48E");
        }
        try {
            _DSP48E.addPort(ACOUT_port_name, 30, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(BCOUT_port_name, 18, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYCASCOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYOUT_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(MULTSIGNOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(OVERFLOW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(P_port_name, 48, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PATTERNBDETECT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PATTERNDETECT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PCOUT_port_name, 48, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(UNDERFLOW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(A_port_name, 30, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(ACIN_port_name, 30, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(ALUMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(B_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(BCIN_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(C_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYCASCIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYINSEL_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEALUMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEB1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEB2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CECARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CECTRL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEM_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEMULTCARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(MULTSIGNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(OPMODE_port_name, 7, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PCIN_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTALLCARRYIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTALUMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTCTRL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTM_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initEMAC() {
        try {
            _EMAC = new EdifCell(library, "EMAC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: EMAC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: EMAC");
        }
        try {
            _EMAC.addPort(DCRHOSTDONEIR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTANINTERRUPT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXBADFRAME_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXCLIENTCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXD_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVLDMSW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVREG6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXFRAMEDROP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXGOODFRAME_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATS_port_name, 7, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATSBYTEVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATSVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXACK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXCLIENTCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXCOLLISION_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXGMIIMIICLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXRETRANSMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATSBYTEVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATSVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYENCOMMAALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYLOOPBACKMSB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMDOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMDTRI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMGTRXRESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMGTTXRESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYPOWERDOWN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYSYNCACQSTATUS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARDISPMODE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARDISPVAL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXD_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXER_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTANINTERRUPT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXBADFRAME_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXCLIENTCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXD_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVLDMSW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVREG6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXFRAMEDROP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXGOODFRAME_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATS_port_name, 7, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATSBYTEVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATSVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXACK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXCLIENTCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXCOLLISION_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXGMIIMIICLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXRETRANSMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATSBYTEVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATSVLD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYENCOMMAALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYLOOPBACKMSB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMDOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMDTRI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMGTRXRESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMGTTXRESET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYPOWERDOWN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYSYNCACQSTATUS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARDISPMODE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARDISPVAL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXD_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXER_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMACDCRACK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMACDCRDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTMIIMRDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTRDDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0DCMLOCKED_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0PAUSEREQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0PAUSEVAL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0RXCLIENTCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXCLIENTCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXD_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXDVLD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXDVLDMSW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXFIRSTBYTE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXGMIIMIICLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXIFGDELAY_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXUNDERRUN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1DCMLOCKED_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1PAUSEREQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1PAUSEVAL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1RXCLIENTCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXCLIENTCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXD_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXDVLD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXDVLDMSW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXFIRSTBYTE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXGMIIMIICLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXIFGDELAY_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXUNDERRUN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACABUS_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACDBUS_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACREAD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACWRITE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTADDR_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTEMAC1SEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTMIIMSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTOPCODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTREQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTWRDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0COL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0CRS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0GTXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MDIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MIITXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0PHYAD_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXBUFERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXBUFSTATUS_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHARISCOMMA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHECKINGCRC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCLKCORCNT_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCOMMADET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXD_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXDISPERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXDV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXER_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXLOSSOFSYNC_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXNOTINTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXRUNDISP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0SIGNALDET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0TXBUFERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1COL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1CRS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1GTXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MCLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MDIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MIITXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1PHYAD_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXBUFERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXBUFSTATUS_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHARISCOMMA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHECKINGCRC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCLKCORCNT_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCOMMADET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXD_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXDISPERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXDV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXER_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXLOSSOFSYNC_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXNOTINTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXRUNDISP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1SIGNALDET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1TXBUFERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(RESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC0CONFIGVEC_port_name, 80, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC0UNICASTADDR_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC1CONFIGVEC_port_name, 80, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC1UNICASTADDR_port_name, 48, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFD() {
        try {
            _FD = new EdifCell(library, "FD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FD");
        }
        try {
            _FD.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFD_1() {
        try {
            _FD_1 = new EdifCell(library, "FD_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FD_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FD_1");
        }
        try {
            _FD_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDC() {
        try {
            _FDC = new EdifCell(library, "FDC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDC");
        }
        try {
            _FDC.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDC_1() {
        try {
            _FDC_1 = new EdifCell(library, "FDC_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDC_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDC_1");
        }
        try {
            _FDC_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCE() {
        try {
            _FDCE = new EdifCell(library, "FDCE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCE");
        }
        try {
            _FDCE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCE_1() {
        try {
            _FDCE_1 = new EdifCell(library, "FDCE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCE_1");
        }
        try {
            _FDCE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCP() {
        try {
            _FDCP = new EdifCell(library, "FDCP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCP");
        }
        try {
            _FDCP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCP_1() {
        try {
            _FDCP_1 = new EdifCell(library, "FDCP_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCP_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCP_1");
        }
        try {
            _FDCP_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCPE() {
        try {
            _FDCPE = new EdifCell(library, "FDCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCPE");
        }
        try {
            _FDCPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCPE_1() {
        try {
            _FDCPE_1 = new EdifCell(library, "FDCPE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCPE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCPE_1");
        }
        try {
            _FDCPE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCPX1() {
        try {
            _FDCPX1 = new EdifCell(library, "FDCPX1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCPX1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCPX1");
        }
        try {
            _FDCPX1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPX1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPX1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPX1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPX1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDD() {
        try {
            _FDD = new EdifCell(library, "FDD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDD");
        }
        try {
            _FDD.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDD.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDD.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDC() {
        try {
            _FDDC = new EdifCell(library, "FDDC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDC");
        }
        try {
            _FDDC.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCE() {
        try {
            _FDDCE = new EdifCell(library, "FDDCE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCE");
        }
        try {
            _FDDCE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCP() {
        try {
            _FDDCP = new EdifCell(library, "FDDCP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCP");
        }
        try {
            _FDDCP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCPE() {
        try {
            _FDDCPE = new EdifCell(library, "FDDCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCPE");
        }
        try {
            _FDDCPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDP() {
        try {
            _FDDP = new EdifCell(library, "FDDP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDP");
        }
        try {
            _FDDP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDPE() {
        try {
            _FDDPE = new EdifCell(library, "FDDPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDPE");
        }
        try {
            _FDDPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDRCPE() {
        try {
            _FDDRCPE = new EdifCell(library, "FDDRCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDRCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDRCPE");
        }
        try {
            _FDDRCPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDRRSE() {
        try {
            _FDDRRSE = new EdifCell(library, "FDDRRSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDRRSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDRRSE");
        }
        try {
            _FDDRRSE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDE() {
        try {
            _FDE = new EdifCell(library, "FDE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDE");
        }
        try {
            _FDE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDE_1() {
        try {
            _FDE_1 = new EdifCell(library, "FDE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDE_1");
        }
        try {
            _FDE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDP() {
        try {
            _FDP = new EdifCell(library, "FDP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDP");
        }
        try {
            _FDP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDP_1() {
        try {
            _FDP_1 = new EdifCell(library, "FDP_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDP_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDP_1");
        }
        try {
            _FDP_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDPE() {
        try {
            _FDPE = new EdifCell(library, "FDPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDPE");
        }
        try {
            _FDPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDPE_1() {
        try {
            _FDPE_1 = new EdifCell(library, "FDPE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDPE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDPE_1");
        }
        try {
            _FDPE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDR() {
        try {
            _FDR = new EdifCell(library, "FDR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDR");
        }
        try {
            _FDR.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDR_1() {
        try {
            _FDR_1 = new EdifCell(library, "FDR_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDR_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDR_1");
        }
        try {
            _FDR_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRE() {
        try {
            _FDRE = new EdifCell(library, "FDRE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRE");
        }
        try {
            _FDRE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRE_1() {
        try {
            _FDRE_1 = new EdifCell(library, "FDRE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRE_1");
        }
        try {
            _FDRE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRS() {
        try {
            _FDRS = new EdifCell(library, "FDRS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRS");
        }
        try {
            _FDRS.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRS_1() {
        try {
            _FDRS_1 = new EdifCell(library, "FDRS_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRS_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRS_1");
        }
        try {
            _FDRS_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRSE() {
        try {
            _FDRSE = new EdifCell(library, "FDRSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRSE");
        }
        try {
            _FDRSE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRSE_1() {
        try {
            _FDRSE_1 = new EdifCell(library, "FDRSE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRSE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRSE_1");
        }
        try {
            _FDRSE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDS() {
        try {
            _FDS = new EdifCell(library, "FDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDS");
        }
        try {
            _FDS.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDS_1() {
        try {
            _FDS_1 = new EdifCell(library, "FDS_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDS_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDS_1");
        }
        try {
            _FDS_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDSE() {
        try {
            _FDSE = new EdifCell(library, "FDSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDSE");
        }
        try {
            _FDSE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDSE_1() {
        try {
            _FDSE_1 = new EdifCell(library, "FDSE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDSE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDSE_1");
        }
        try {
            _FDSE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO16() {
        try {
            _FIFO16 = new EdifCell(library, "FIFO16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO16");
        }
        try {
            _FIFO16.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDCOUNT_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRCOUNT_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18() {
        try {
            _FIFO18 = new EdifCell(library, "FIFO18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18");
        }
        try {
            _FIFO18.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DOP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDCOUNT_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRCOUNT_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DIP_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18_36() {
        try {
            _FIFO18_36 = new EdifCell(library, "FIFO18_36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18_36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18_36");
        }
        try {
            _FIFO18_36.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDCOUNT_port_name, 9, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRCOUNT_port_name, 9, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36() {
        try {
            _FIFO36 = new EdifCell(library, "FIFO36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36");
        }
        try {
            _FIFO36.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_72() {
        try {
            _FIFO36_72 = new EdifCell(library, "FIFO36_72", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_72");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_72");
        }
        try {
            _FIFO36_72.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DO_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DOP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(ECCPARITY_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDCOUNT_port_name, 9, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(SBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRCOUNT_port_name, 9, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DI_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DIP_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_72_EXP() {
        try {
            _FIFO36_72_EXP = new EdifCell(library, "FIFO36_72_EXP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_72_EXP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_72_EXP");
        }
        try {
            _FIFO36_72_EXP.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DO_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DOP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(ECCPARITY_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(SBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DI_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DIP_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_EXP() {
        try {
            _FIFO36_EXP = new EdifCell(library, "FIFO36_EXP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_EXP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_EXP");
        }
        try {
            _FIFO36_EXP.addPort(ALMOSTEMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(ALMOSTFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(EMPTY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(FULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCOUNT_port_name, 13, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFMAP() {
        try {
            _FMAP = new EdifCell(library, "FMAP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FMAP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FMAP");
        }
        try {
            _FMAP.addPort(O_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECC_VIRTEX4() {
        try {
            _FRAME_ECC_VIRTEX4 = new EdifCell(library, "FRAME_ECC_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECC_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECC_VIRTEX4");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(ERROR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(SYNDROME_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(SYNDROMEVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECC_VIRTEX5() {
        try {
            _FRAME_ECC_VIRTEX5 = new EdifCell(library, "FRAME_ECC_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECC_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECC_VIRTEX5");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(CRCERROR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(ECCERROR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(SYNDROME_port_name, 12, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(SYNDROMEVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTC() {
        try {
            _FTC = new EdifCell(library, "FTC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTC");
        }
        try {
            _FTC.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTCP() {
        try {
            _FTCP = new EdifCell(library, "FTCP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTCP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTCP");
        }
        try {
            _FTCP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTP() {
        try {
            _FTP = new EdifCell(library, "FTP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTP");
        }
        try {
            _FTP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGND() {
        try {
            _GND = new EdifCell(library, "GND", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GND");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GND");
        }
        try {
            _GND.addPort(G_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT() {
        try {
            _GT = new EdifCell(library, "GT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT");
        }
        try {
            _GT.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10() {
        try {
            _GT10 = new EdifCell(library, "GT10", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10");
        }
        try {
            _GT10.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_10GE_4() {
        try {
            _GT10_10GE_4 = new EdifCell(library, "GT10_10GE_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_10GE_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_10GE_4");
        }
        try {
            _GT10_10GE_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_10GE_8() {
        try {
            _GT10_10GE_8 = new EdifCell(library, "GT10_10GE_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_10GE_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_10GE_8");
        }
        try {
            _GT10_10GE_8.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GE_8.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_10GFC_4() {
        try {
            _GT10_10GFC_4 = new EdifCell(library, "GT10_10GFC_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_10GFC_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_10GFC_4");
        }
        try {
            _GT10_10GFC_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_10GFC_8() {
        try {
            _GT10_10GFC_8 = new EdifCell(library, "GT10_10GFC_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_10GFC_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_10GFC_8");
        }
        try {
            _GT10_10GFC_8.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_10GFC_8.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_AURORA_1() {
        try {
            _GT10_AURORA_1 = new EdifCell(library, "GT10_AURORA_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_AURORA_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_AURORA_1");
        }
        try {
            _GT10_AURORA_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_AURORA_2() {
        try {
            _GT10_AURORA_2 = new EdifCell(library, "GT10_AURORA_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_AURORA_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_AURORA_2");
        }
        try {
            _GT10_AURORA_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_AURORA_4() {
        try {
            _GT10_AURORA_4 = new EdifCell(library, "GT10_AURORA_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_AURORA_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_AURORA_4");
        }
        try {
            _GT10_AURORA_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORA_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_AURORAX_4() {
        try {
            _GT10_AURORAX_4 = new EdifCell(library, "GT10_AURORAX_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_AURORAX_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_AURORAX_4");
        }
        try {
            _GT10_AURORAX_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_AURORAX_8() {
        try {
            _GT10_AURORAX_8 = new EdifCell(library, "GT10_AURORAX_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_AURORAX_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_AURORAX_8");
        }
        try {
            _GT10_AURORAX_8.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_AURORAX_8.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_CUSTOM() {
        try {
            _GT10_CUSTOM = new EdifCell(library, "GT10_CUSTOM", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_CUSTOM");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_CUSTOM");
        }
        try {
            _GT10_CUSTOM.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_CUSTOM.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_INFINIBAND_1() {
        try {
            _GT10_INFINIBAND_1 = new EdifCell(library, "GT10_INFINIBAND_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_INFINIBAND_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_INFINIBAND_1");
        }
        try {
            _GT10_INFINIBAND_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_INFINIBAND_2() {
        try {
            _GT10_INFINIBAND_2 = new EdifCell(library, "GT10_INFINIBAND_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_INFINIBAND_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_INFINIBAND_2");
        }
        try {
            _GT10_INFINIBAND_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_INFINIBAND_4() {
        try {
            _GT10_INFINIBAND_4 = new EdifCell(library, "GT10_INFINIBAND_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_INFINIBAND_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_INFINIBAND_4");
        }
        try {
            _GT10_INFINIBAND_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_INFINIBAND_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_OC192_4() {
        try {
            _GT10_OC192_4 = new EdifCell(library, "GT10_OC192_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_OC192_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_OC192_4");
        }
        try {
            _GT10_OC192_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_OC192_8() {
        try {
            _GT10_OC192_8 = new EdifCell(library, "GT10_OC192_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_OC192_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_OC192_8");
        }
        try {
            _GT10_OC192_8.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC192_8.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_OC48_1() {
        try {
            _GT10_OC48_1 = new EdifCell(library, "GT10_OC48_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_OC48_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_OC48_1");
        }
        try {
            _GT10_OC48_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_OC48_2() {
        try {
            _GT10_OC48_2 = new EdifCell(library, "GT10_OC48_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_OC48_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_OC48_2");
        }
        try {
            _GT10_OC48_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_OC48_4() {
        try {
            _GT10_OC48_4 = new EdifCell(library, "GT10_OC48_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_OC48_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_OC48_4");
        }
        try {
            _GT10_OC48_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_OC48_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_PCI_EXPRESS_1() {
        try {
            _GT10_PCI_EXPRESS_1 = new EdifCell(library, "GT10_PCI_EXPRESS_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_PCI_EXPRESS_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_PCI_EXPRESS_1");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_PCI_EXPRESS_2() {
        try {
            _GT10_PCI_EXPRESS_2 = new EdifCell(library, "GT10_PCI_EXPRESS_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_PCI_EXPRESS_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_PCI_EXPRESS_2");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_PCI_EXPRESS_4() {
        try {
            _GT10_PCI_EXPRESS_4 = new EdifCell(library, "GT10_PCI_EXPRESS_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_PCI_EXPRESS_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_PCI_EXPRESS_4");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_PCI_EXPRESS_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_XAUI_1() {
        try {
            _GT10_XAUI_1 = new EdifCell(library, "GT10_XAUI_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_XAUI_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_XAUI_1");
        }
        try {
            _GT10_XAUI_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_XAUI_2() {
        try {
            _GT10_XAUI_2 = new EdifCell(library, "GT10_XAUI_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_XAUI_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_XAUI_2");
        }
        try {
            _GT10_XAUI_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT10_XAUI_4() {
        try {
            _GT10_XAUI_4 = new EdifCell(library, "GT10_XAUI_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT10_XAUI_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT10_XAUI_4");
        }
        try {
            _GT10_XAUI_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMARXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXOUTCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(BREFCLKNIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(BREFCLKPIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMAINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMAREGADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMAREGDATAIN_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMAREGRW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMAREGSTROBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(PMARXLOCKSEL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(REFCLKBSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT10_XAUI_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11() {
        try {
            _GT11 = new EdifCell(library, "GT11", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11");
        }
        try {
            _GT11.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(COMBUSOUT_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DRDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCALFAIL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCYCLELIMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXMCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPCSHCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRECCLK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRECCLK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSIGDET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSTATUS_port_name, 6, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TX1N_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TX1P_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCALFAIL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCYCLELIMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXOUTCLK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXOUTCLK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPCSHCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(COMBUSIN_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DADDR_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DWE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(GREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(REFCLK1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RX1N_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RX1P_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCLKSTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCIN_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCINTCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCPD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPMARESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCLKSTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCIN_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCINTCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCPD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENOOB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPMARESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11_CUSTOM() {
        try {
            _GT11_CUSTOM = new EdifCell(library, "GT11_CUSTOM", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11_CUSTOM");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11_CUSTOM");
        }
        try {
            _GT11_CUSTOM.addPort(CHBONDO_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DRDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCALFAIL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCHARISCOMMA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCHARISK_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCYCLELIMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDATA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDISPERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXMCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXNOTINTABLE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPCSHCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRECCLK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRECCLK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSIGDET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSTATUS_port_name, 6, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TX1N_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TX1P_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCALFAIL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCYCLELIMIT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXKERR_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXLOCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXOUTCLK1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXOUTCLK2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPCSHCLKOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXRUNDISP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(CHBONDI_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DADDR_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DWE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(GREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(REFCLK1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RX1N_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RX1P_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCLKSTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCOMMADETUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCIN_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCINTCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCPD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDEC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDEC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDESCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXIGNOREBTF_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPMARESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSLIDE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXBYPASS8B10B_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARDISPMODE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARDISPVAL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARISK_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCLKSTABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCDATAVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCDATAWIDTH_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCIN_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCINIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCINTCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCPD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXDATA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENC64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENC8B10BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENOOB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXGEARBOX64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXINTDATAWIDTH_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPMARESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXSCRAM64B66BUSE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11_DUAL() {
        try {
            _GT11_DUAL = new EdifCell(library, "GT11_DUAL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11_DUAL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11_DUAL");
        }
        try {
            _GT11_DUAL.addPort(CHBONDOA_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDOB_port_name, 5, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DOA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DRDYA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DRDYB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBUFERRA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBUFERRB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCALFAILA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCALFAILB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISCOMMAA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISCOMMAB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISKA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISKB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCOUTA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCOUTB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCYCLELIMITA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCYCLELIMITB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAA_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAB_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDISPERRA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDISPERRB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOCKA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOCKB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOSSOFSYNCA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOSSOFSYNCB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXMCLKA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXMCLKB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXNOTINTABLEA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXNOTINTABLEB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPCSHCLKOUTA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPCSHCLKOUTB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXREALIGNA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXREALIGNB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK1A_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK1B_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK2A_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK2B_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRUNDISPA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRUNDISPB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSIGDETA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSIGDETB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSTATUSA_port_name, 6, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSTATUSB_port_name, 6, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1NA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1NB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1PA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1PB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBUFERRA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBUFERRB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCALFAILA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCALFAILB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCOUTA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCOUTB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCYCLELIMITA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCYCLELIMITB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXKERRA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXKERRB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXLOCKA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXLOCKB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK1A_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK1B_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK2A_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK2B_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPCSHCLKOUTA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPCSHCLKOUTB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRUNDISPA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRUNDISPB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDIA_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDIB_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DADDRA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DIA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DWEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DWEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENCHANSYNCA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENCHANSYNCB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENMCOMMAALIGNA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENMCOMMAALIGNB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENPCOMMAALIGNA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENPCOMMAALIGNB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(GREFCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(GREFCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(LOOPBACKA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(LOOPBACKB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(POWERDOWNA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(POWERDOWNB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK1A_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK1B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK2A_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK2B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1NA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1NB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1PA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1PB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBLOCKSYNC64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBLOCKSYNC64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCLKSTABLEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCLKSTABLEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAVALIDA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAVALIDB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAWIDTHA_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAWIDTHB_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINB_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINITA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINITB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINTCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINTCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCPDA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCPDB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCRESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCRESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAWIDTHA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAWIDTHB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC8B10BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC8B10BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDESCRAM64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDESCRAM64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXIGNOREBTFA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXIGNOREBTFB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXINTDATAWIDTHA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXINTDATAWIDTHB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPMARESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPMARESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPOLARITYA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPOLARITYB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSLIDEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSLIDEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSYNCA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSYNCB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLK2A_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLK2B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBYPASS8B10BA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBYPASS8B10BB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPMODEA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPMODEB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPVALA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPVALB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARISKA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARISKB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCLKSTABLEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCLKSTABLEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAVALIDA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAVALIDB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAWIDTHA_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAWIDTHB_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINB_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINITA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINITB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINTCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINTCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCPDA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCPDB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCRESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCRESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAA_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAB_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAWIDTHA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAWIDTHB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC8B10BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC8B10BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENOOBA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENOOBB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXGEARBOX64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXGEARBOX64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINHIBITA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINHIBITB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINTDATAWIDTHA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINTDATAWIDTHB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPMARESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPMARESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPOLARITYA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPOLARITYB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRESETA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRESETB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSCRAM64B66BUSEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSCRAM64B66BUSEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSYNCA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSYNCB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLK2A_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLK2B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11CLK() {
        try {
            _GT11CLK = new EdifCell(library, "GT11CLK", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11CLK");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11CLK");
        }
        try {
            _GT11CLK.addPort(SYNCLK1OUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK2OUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(MGTCLKN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(MGTCLKP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(RXBCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK1IN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK2IN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11CLK_MGT() {
        try {
            _GT11CLK_MGT = new EdifCell(library, "GT11CLK_MGT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11CLK_MGT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11CLK_MGT");
        }
        try {
            _GT11CLK_MGT.addPort(SYNCLK1OUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(SYNCLK2OUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(MGTCLKN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(MGTCLKP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_AURORA_1() {
        try {
            _GT_AURORA_1 = new EdifCell(library, "GT_AURORA_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_AURORA_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_AURORA_1");
        }
        try {
            _GT_AURORA_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_AURORA_2() {
        try {
            _GT_AURORA_2 = new EdifCell(library, "GT_AURORA_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_AURORA_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_AURORA_2");
        }
        try {
            _GT_AURORA_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_AURORA_4() {
        try {
            _GT_AURORA_4 = new EdifCell(library, "GT_AURORA_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_AURORA_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_AURORA_4");
        }
        try {
            _GT_AURORA_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_AURORA_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_CUSTOM() {
        try {
            _GT_CUSTOM = new EdifCell(library, "GT_CUSTOM", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_CUSTOM");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_CUSTOM");
        }
        try {
            _GT_CUSTOM.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_CUSTOM.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_ETHERNET_1() {
        try {
            _GT_ETHERNET_1 = new EdifCell(library, "GT_ETHERNET_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_ETHERNET_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_ETHERNET_1");
        }
        try {
            _GT_ETHERNET_1.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_ETHERNET_2() {
        try {
            _GT_ETHERNET_2 = new EdifCell(library, "GT_ETHERNET_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_ETHERNET_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_ETHERNET_2");
        }
        try {
            _GT_ETHERNET_2.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_ETHERNET_4() {
        try {
            _GT_ETHERNET_4 = new EdifCell(library, "GT_ETHERNET_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_ETHERNET_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_ETHERNET_4");
        }
        try {
            _GT_ETHERNET_4.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_ETHERNET_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_FIBRE_CHAN_1() {
        try {
            _GT_FIBRE_CHAN_1 = new EdifCell(library, "GT_FIBRE_CHAN_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_FIBRE_CHAN_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_FIBRE_CHAN_1");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_FIBRE_CHAN_2() {
        try {
            _GT_FIBRE_CHAN_2 = new EdifCell(library, "GT_FIBRE_CHAN_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_FIBRE_CHAN_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_FIBRE_CHAN_2");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_FIBRE_CHAN_4() {
        try {
            _GT_FIBRE_CHAN_4 = new EdifCell(library, "GT_FIBRE_CHAN_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_FIBRE_CHAN_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_FIBRE_CHAN_4");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_FIBRE_CHAN_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_INFINIBAND_1() {
        try {
            _GT_INFINIBAND_1 = new EdifCell(library, "GT_INFINIBAND_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_INFINIBAND_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_INFINIBAND_1");
        }
        try {
            _GT_INFINIBAND_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_INFINIBAND_2() {
        try {
            _GT_INFINIBAND_2 = new EdifCell(library, "GT_INFINIBAND_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_INFINIBAND_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_INFINIBAND_2");
        }
        try {
            _GT_INFINIBAND_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_INFINIBAND_4() {
        try {
            _GT_INFINIBAND_4 = new EdifCell(library, "GT_INFINIBAND_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_INFINIBAND_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_INFINIBAND_4");
        }
        try {
            _GT_INFINIBAND_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_INFINIBAND_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_XAUI_1() {
        try {
            _GT_XAUI_1 = new EdifCell(library, "GT_XAUI_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_XAUI_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_XAUI_1");
        }
        try {
            _GT_XAUI_1.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCHARISCOMMA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCHARISK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXDATA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXDISPERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXNOTINTABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXKERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXRUNDISP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXBYPASS8B10B_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXCHARDISPMODE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXCHARDISPVAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXCHARISK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXDATA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_1.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_XAUI_2() {
        try {
            _GT_XAUI_2 = new EdifCell(library, "GT_XAUI_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_XAUI_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_XAUI_2");
        }
        try {
            _GT_XAUI_2.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCHARISCOMMA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCHARISK_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXDATA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXDISPERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXNOTINTABLE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXKERR_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXRUNDISP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXBYPASS8B10B_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXCHARDISPMODE_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXCHARDISPVAL_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXCHARISK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXDATA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_2.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT_XAUI_4() {
        try {
            _GT_XAUI_4 = new EdifCell(library, "GT_XAUI_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT_XAUI_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT_XAUI_4");
        }
        try {
            _GT_XAUI_4.addPort(CHBONDDONE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(CHBONDO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(CONFIGOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXBUFSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCHARISCOMMA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCHARISK_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCHECKINGCRC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCLKCORCNT_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCOMMADET_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXCRCERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXDISPERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXLOSSOFSYNC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXNOTINTABLE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXREALIGN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXRECCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXBUFERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXKERR_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXRUNDISP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(BREFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(BREFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(CHBONDI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(CONFIGENABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(CONFIGIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(ENCHANSYNC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(ENMCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(ENPCOMMAALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(LOOPBACK_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(POWERDOWN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(REFCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(REFCLKSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(RXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXBYPASS8B10B_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXCHARDISPMODE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXCHARDISPVAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXCHARISK_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXDATA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXFORCECRCERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXINHIBIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXPOLARITY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXRESET_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXUSRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT_XAUI_4.addPort(TXUSRCLK2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF() {
        try {
            _IBUF = new EdifCell(library, "IBUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF");
        }
        try {
            _IBUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_AGP() {
        try {
            _IBUF_AGP = new EdifCell(library, "IBUF_AGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_AGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_AGP");
        }
        try {
            _IBUF_AGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_AGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_CTT() {
        try {
            _IBUF_CTT = new EdifCell(library, "IBUF_CTT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_CTT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_CTT");
        }
        try {
            _IBUF_CTT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_CTT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTL() {
        try {
            _IBUF_GTL = new EdifCell(library, "IBUF_GTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTL");
        }
        try {
            _IBUF_GTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTL_DCI() {
        try {
            _IBUF_GTL_DCI = new EdifCell(library, "IBUF_GTL_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTL_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTL_DCI");
        }
        try {
            _IBUF_GTL_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTL_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTLP() {
        try {
            _IBUF_GTLP = new EdifCell(library, "IBUF_GTLP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTLP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTLP");
        }
        try {
            _IBUF_GTLP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTLP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTLP_DCI() {
        try {
            _IBUF_GTLP_DCI = new EdifCell(library, "IBUF_GTLP_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTLP_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTLP_DCI");
        }
        try {
            _IBUF_GTLP_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTLP_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I() {
        try {
            _IBUF_HSTL_I = new EdifCell(library, "IBUF_HSTL_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I");
        }
        try {
            _IBUF_HSTL_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_18() {
        try {
            _IBUF_HSTL_I_18 = new EdifCell(library, "IBUF_HSTL_I_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_18");
        }
        try {
            _IBUF_HSTL_I_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_DCI() {
        try {
            _IBUF_HSTL_I_DCI = new EdifCell(library, "IBUF_HSTL_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_DCI");
        }
        try {
            _IBUF_HSTL_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_DCI_18() {
        try {
            _IBUF_HSTL_I_DCI_18 = new EdifCell(library, "IBUF_HSTL_I_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_DCI_18");
        }
        try {
            _IBUF_HSTL_I_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II() {
        try {
            _IBUF_HSTL_II = new EdifCell(library, "IBUF_HSTL_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II");
        }
        try {
            _IBUF_HSTL_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_18() {
        try {
            _IBUF_HSTL_II_18 = new EdifCell(library, "IBUF_HSTL_II_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_18");
        }
        try {
            _IBUF_HSTL_II_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_DCI() {
        try {
            _IBUF_HSTL_II_DCI = new EdifCell(library, "IBUF_HSTL_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_DCI");
        }
        try {
            _IBUF_HSTL_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_DCI_18() {
        try {
            _IBUF_HSTL_II_DCI_18 = new EdifCell(library, "IBUF_HSTL_II_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_DCI_18");
        }
        try {
            _IBUF_HSTL_II_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III() {
        try {
            _IBUF_HSTL_III = new EdifCell(library, "IBUF_HSTL_III", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III");
        }
        try {
            _IBUF_HSTL_III.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_18() {
        try {
            _IBUF_HSTL_III_18 = new EdifCell(library, "IBUF_HSTL_III_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_18");
        }
        try {
            _IBUF_HSTL_III_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_DCI() {
        try {
            _IBUF_HSTL_III_DCI = new EdifCell(library, "IBUF_HSTL_III_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_DCI");
        }
        try {
            _IBUF_HSTL_III_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_DCI_18() {
        try {
            _IBUF_HSTL_III_DCI_18 = new EdifCell(library, "IBUF_HSTL_III_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_DCI_18");
        }
        try {
            _IBUF_HSTL_III_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV() {
        try {
            _IBUF_HSTL_IV = new EdifCell(library, "IBUF_HSTL_IV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV");
        }
        try {
            _IBUF_HSTL_IV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_18() {
        try {
            _IBUF_HSTL_IV_18 = new EdifCell(library, "IBUF_HSTL_IV_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_18");
        }
        try {
            _IBUF_HSTL_IV_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_DCI() {
        try {
            _IBUF_HSTL_IV_DCI = new EdifCell(library, "IBUF_HSTL_IV_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_DCI");
        }
        try {
            _IBUF_HSTL_IV_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_DCI_18() {
        try {
            _IBUF_HSTL_IV_DCI_18 = new EdifCell(library, "IBUF_HSTL_IV_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_DCI_18");
        }
        try {
            _IBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS12() {
        try {
            _IBUF_LVCMOS12 = new EdifCell(library, "IBUF_LVCMOS12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS12");
        }
        try {
            _IBUF_LVCMOS12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS15() {
        try {
            _IBUF_LVCMOS15 = new EdifCell(library, "IBUF_LVCMOS15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS15");
        }
        try {
            _IBUF_LVCMOS15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS18() {
        try {
            _IBUF_LVCMOS18 = new EdifCell(library, "IBUF_LVCMOS18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS18");
        }
        try {
            _IBUF_LVCMOS18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS2() {
        try {
            _IBUF_LVCMOS2 = new EdifCell(library, "IBUF_LVCMOS2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS2");
        }
        try {
            _IBUF_LVCMOS2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS25() {
        try {
            _IBUF_LVCMOS25 = new EdifCell(library, "IBUF_LVCMOS25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS25");
        }
        try {
            _IBUF_LVCMOS25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS33() {
        try {
            _IBUF_LVCMOS33 = new EdifCell(library, "IBUF_LVCMOS33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS33");
        }
        try {
            _IBUF_LVCMOS33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_15() {
        try {
            _IBUF_LVDCI_15 = new EdifCell(library, "IBUF_LVDCI_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_15");
        }
        try {
            _IBUF_LVDCI_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_18() {
        try {
            _IBUF_LVDCI_18 = new EdifCell(library, "IBUF_LVDCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_18");
        }
        try {
            _IBUF_LVDCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_25() {
        try {
            _IBUF_LVDCI_25 = new EdifCell(library, "IBUF_LVDCI_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_25");
        }
        try {
            _IBUF_LVDCI_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_33() {
        try {
            _IBUF_LVDCI_33 = new EdifCell(library, "IBUF_LVDCI_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_33");
        }
        try {
            _IBUF_LVDCI_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_15() {
        try {
            _IBUF_LVDCI_DV2_15 = new EdifCell(library, "IBUF_LVDCI_DV2_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_15");
        }
        try {
            _IBUF_LVDCI_DV2_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_18() {
        try {
            _IBUF_LVDCI_DV2_18 = new EdifCell(library, "IBUF_LVDCI_DV2_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_18");
        }
        try {
            _IBUF_LVDCI_DV2_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_25() {
        try {
            _IBUF_LVDCI_DV2_25 = new EdifCell(library, "IBUF_LVDCI_DV2_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_25");
        }
        try {
            _IBUF_LVDCI_DV2_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_33() {
        try {
            _IBUF_LVDCI_DV2_33 = new EdifCell(library, "IBUF_LVDCI_DV2_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_33");
        }
        try {
            _IBUF_LVDCI_DV2_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDS() {
        try {
            _IBUF_LVDS = new EdifCell(library, "IBUF_LVDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDS");
        }
        try {
            _IBUF_LVDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVPECL() {
        try {
            _IBUF_LVPECL = new EdifCell(library, "IBUF_LVPECL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVPECL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVPECL");
        }
        try {
            _IBUF_LVPECL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVPECL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVTTL() {
        try {
            _IBUF_LVTTL = new EdifCell(library, "IBUF_LVTTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVTTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVTTL");
        }
        try {
            _IBUF_LVTTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVTTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI33_3() {
        try {
            _IBUF_PCI33_3 = new EdifCell(library, "IBUF_PCI33_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI33_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI33_3");
        }
        try {
            _IBUF_PCI33_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI33_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI33_5() {
        try {
            _IBUF_PCI33_5 = new EdifCell(library, "IBUF_PCI33_5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI33_5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI33_5");
        }
        try {
            _IBUF_PCI33_5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI33_5.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI66_3() {
        try {
            _IBUF_PCI66_3 = new EdifCell(library, "IBUF_PCI66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI66_3");
        }
        try {
            _IBUF_PCI66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCIX() {
        try {
            _IBUF_PCIX = new EdifCell(library, "IBUF_PCIX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCIX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCIX");
        }
        try {
            _IBUF_PCIX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCIX.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCIX66_3() {
        try {
            _IBUF_PCIX66_3 = new EdifCell(library, "IBUF_PCIX66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCIX66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCIX66_3");
        }
        try {
            _IBUF_PCIX66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCIX66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_I() {
        try {
            _IBUF_SSTL18_I = new EdifCell(library, "IBUF_SSTL18_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_I");
        }
        try {
            _IBUF_SSTL18_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_I_DCI() {
        try {
            _IBUF_SSTL18_I_DCI = new EdifCell(library, "IBUF_SSTL18_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_I_DCI");
        }
        try {
            _IBUF_SSTL18_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_II() {
        try {
            _IBUF_SSTL18_II = new EdifCell(library, "IBUF_SSTL18_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_II");
        }
        try {
            _IBUF_SSTL18_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_II_DCI() {
        try {
            _IBUF_SSTL18_II_DCI = new EdifCell(library, "IBUF_SSTL18_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_II_DCI");
        }
        try {
            _IBUF_SSTL18_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_I() {
        try {
            _IBUF_SSTL2_I = new EdifCell(library, "IBUF_SSTL2_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_I");
        }
        try {
            _IBUF_SSTL2_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_I_DCI() {
        try {
            _IBUF_SSTL2_I_DCI = new EdifCell(library, "IBUF_SSTL2_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_I_DCI");
        }
        try {
            _IBUF_SSTL2_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_II() {
        try {
            _IBUF_SSTL2_II = new EdifCell(library, "IBUF_SSTL2_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_II");
        }
        try {
            _IBUF_SSTL2_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_II_DCI() {
        try {
            _IBUF_SSTL2_II_DCI = new EdifCell(library, "IBUF_SSTL2_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_II_DCI");
        }
        try {
            _IBUF_SSTL2_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_I() {
        try {
            _IBUF_SSTL3_I = new EdifCell(library, "IBUF_SSTL3_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_I");
        }
        try {
            _IBUF_SSTL3_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_I_DCI() {
        try {
            _IBUF_SSTL3_I_DCI = new EdifCell(library, "IBUF_SSTL3_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_I_DCI");
        }
        try {
            _IBUF_SSTL3_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_II() {
        try {
            _IBUF_SSTL3_II = new EdifCell(library, "IBUF_SSTL3_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_II");
        }
        try {
            _IBUF_SSTL3_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_II_DCI() {
        try {
            _IBUF_SSTL3_II_DCI = new EdifCell(library, "IBUF_SSTL3_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_II_DCI");
        }
        try {
            _IBUF_SSTL3_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS() {
        try {
            _IBUFDS = new EdifCell(library, "IBUFDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS");
        }
        try {
            _IBUFDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_BLVDS_25() {
        try {
            _IBUFDS_BLVDS_25 = new EdifCell(library, "IBUFDS_BLVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_BLVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_BLVDS_25");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_DIFF_OUT() {
        try {
            _IBUFDS_DIFF_OUT = new EdifCell(library, "IBUFDS_DIFF_OUT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_DIFF_OUT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_DIFF_OUT");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LDT_25() {
        try {
            _IBUFDS_LDT_25 = new EdifCell(library, "IBUFDS_LDT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LDT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LDT_25");
        }
        try {
            _IBUFDS_LDT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LDT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LDT_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_25() {
        try {
            _IBUFDS_LVDS_25 = new EdifCell(library, "IBUFDS_LVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_25");
        }
        try {
            _IBUFDS_LVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_25_DCI() {
        try {
            _IBUFDS_LVDS_25_DCI = new EdifCell(library, "IBUFDS_LVDS_25_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_25_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_25_DCI");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_33() {
        try {
            _IBUFDS_LVDS_33 = new EdifCell(library, "IBUFDS_LVDS_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_33");
        }
        try {
            _IBUFDS_LVDS_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_33_DCI() {
        try {
            _IBUFDS_LVDS_33_DCI = new EdifCell(library, "IBUFDS_LVDS_33_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_33_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_33_DCI");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_25() {
        try {
            _IBUFDS_LVDSEXT_25 = new EdifCell(library, "IBUFDS_LVDSEXT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_25");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_25_DCI() {
        try {
            _IBUFDS_LVDSEXT_25_DCI = new EdifCell(library, "IBUFDS_LVDSEXT_25_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_25_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_25_DCI");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_33() {
        try {
            _IBUFDS_LVDSEXT_33 = new EdifCell(library, "IBUFDS_LVDSEXT_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_33");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_33_DCI() {
        try {
            _IBUFDS_LVDSEXT_33_DCI = new EdifCell(library, "IBUFDS_LVDSEXT_33_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_33_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_33_DCI");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVPECL_25() {
        try {
            _IBUFDS_LVPECL_25 = new EdifCell(library, "IBUFDS_LVPECL_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVPECL_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVPECL_25");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVPECL_33() {
        try {
            _IBUFDS_LVPECL_33 = new EdifCell(library, "IBUFDS_LVPECL_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVPECL_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVPECL_33");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_ULVDS_25() {
        try {
            _IBUFDS_ULVDS_25 = new EdifCell(library, "IBUFDS_ULVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_ULVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_ULVDS_25");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG() {
        try {
            _IBUFG = new EdifCell(library, "IBUFG", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG");
        }
        try {
            _IBUFG.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_AGP() {
        try {
            _IBUFG_AGP = new EdifCell(library, "IBUFG_AGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_AGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_AGP");
        }
        try {
            _IBUFG_AGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_AGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_CTT() {
        try {
            _IBUFG_CTT = new EdifCell(library, "IBUFG_CTT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_CTT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_CTT");
        }
        try {
            _IBUFG_CTT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_CTT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTL() {
        try {
            _IBUFG_GTL = new EdifCell(library, "IBUFG_GTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTL");
        }
        try {
            _IBUFG_GTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTL_DCI() {
        try {
            _IBUFG_GTL_DCI = new EdifCell(library, "IBUFG_GTL_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTL_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTL_DCI");
        }
        try {
            _IBUFG_GTL_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTL_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTLP() {
        try {
            _IBUFG_GTLP = new EdifCell(library, "IBUFG_GTLP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTLP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTLP");
        }
        try {
            _IBUFG_GTLP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTLP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTLP_DCI() {
        try {
            _IBUFG_GTLP_DCI = new EdifCell(library, "IBUFG_GTLP_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTLP_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTLP_DCI");
        }
        try {
            _IBUFG_GTLP_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTLP_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I() {
        try {
            _IBUFG_HSTL_I = new EdifCell(library, "IBUFG_HSTL_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I");
        }
        try {
            _IBUFG_HSTL_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_18() {
        try {
            _IBUFG_HSTL_I_18 = new EdifCell(library, "IBUFG_HSTL_I_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_18");
        }
        try {
            _IBUFG_HSTL_I_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_DCI() {
        try {
            _IBUFG_HSTL_I_DCI = new EdifCell(library, "IBUFG_HSTL_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_DCI");
        }
        try {
            _IBUFG_HSTL_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_DCI_18() {
        try {
            _IBUFG_HSTL_I_DCI_18 = new EdifCell(library, "IBUFG_HSTL_I_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_DCI_18");
        }
        try {
            _IBUFG_HSTL_I_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II() {
        try {
            _IBUFG_HSTL_II = new EdifCell(library, "IBUFG_HSTL_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II");
        }
        try {
            _IBUFG_HSTL_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_18() {
        try {
            _IBUFG_HSTL_II_18 = new EdifCell(library, "IBUFG_HSTL_II_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_18");
        }
        try {
            _IBUFG_HSTL_II_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_DCI() {
        try {
            _IBUFG_HSTL_II_DCI = new EdifCell(library, "IBUFG_HSTL_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_DCI");
        }
        try {
            _IBUFG_HSTL_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_DCI_18() {
        try {
            _IBUFG_HSTL_II_DCI_18 = new EdifCell(library, "IBUFG_HSTL_II_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_DCI_18");
        }
        try {
            _IBUFG_HSTL_II_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III() {
        try {
            _IBUFG_HSTL_III = new EdifCell(library, "IBUFG_HSTL_III", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III");
        }
        try {
            _IBUFG_HSTL_III.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_18() {
        try {
            _IBUFG_HSTL_III_18 = new EdifCell(library, "IBUFG_HSTL_III_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_18");
        }
        try {
            _IBUFG_HSTL_III_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_DCI() {
        try {
            _IBUFG_HSTL_III_DCI = new EdifCell(library, "IBUFG_HSTL_III_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_DCI");
        }
        try {
            _IBUFG_HSTL_III_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_DCI_18() {
        try {
            _IBUFG_HSTL_III_DCI_18 = new EdifCell(library, "IBUFG_HSTL_III_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_DCI_18");
        }
        try {
            _IBUFG_HSTL_III_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV() {
        try {
            _IBUFG_HSTL_IV = new EdifCell(library, "IBUFG_HSTL_IV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV");
        }
        try {
            _IBUFG_HSTL_IV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_18() {
        try {
            _IBUFG_HSTL_IV_18 = new EdifCell(library, "IBUFG_HSTL_IV_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_18");
        }
        try {
            _IBUFG_HSTL_IV_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_DCI() {
        try {
            _IBUFG_HSTL_IV_DCI = new EdifCell(library, "IBUFG_HSTL_IV_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_DCI");
        }
        try {
            _IBUFG_HSTL_IV_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_DCI_18() {
        try {
            _IBUFG_HSTL_IV_DCI_18 = new EdifCell(library, "IBUFG_HSTL_IV_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_DCI_18");
        }
        try {
            _IBUFG_HSTL_IV_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS12() {
        try {
            _IBUFG_LVCMOS12 = new EdifCell(library, "IBUFG_LVCMOS12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS12");
        }
        try {
            _IBUFG_LVCMOS12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS15() {
        try {
            _IBUFG_LVCMOS15 = new EdifCell(library, "IBUFG_LVCMOS15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS15");
        }
        try {
            _IBUFG_LVCMOS15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS18() {
        try {
            _IBUFG_LVCMOS18 = new EdifCell(library, "IBUFG_LVCMOS18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS18");
        }
        try {
            _IBUFG_LVCMOS18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS2() {
        try {
            _IBUFG_LVCMOS2 = new EdifCell(library, "IBUFG_LVCMOS2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS2");
        }
        try {
            _IBUFG_LVCMOS2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS25() {
        try {
            _IBUFG_LVCMOS25 = new EdifCell(library, "IBUFG_LVCMOS25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS25");
        }
        try {
            _IBUFG_LVCMOS25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS33() {
        try {
            _IBUFG_LVCMOS33 = new EdifCell(library, "IBUFG_LVCMOS33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS33");
        }
        try {
            _IBUFG_LVCMOS33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_15() {
        try {
            _IBUFG_LVDCI_15 = new EdifCell(library, "IBUFG_LVDCI_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_15");
        }
        try {
            _IBUFG_LVDCI_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_18() {
        try {
            _IBUFG_LVDCI_18 = new EdifCell(library, "IBUFG_LVDCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_18");
        }
        try {
            _IBUFG_LVDCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_25() {
        try {
            _IBUFG_LVDCI_25 = new EdifCell(library, "IBUFG_LVDCI_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_25");
        }
        try {
            _IBUFG_LVDCI_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_33() {
        try {
            _IBUFG_LVDCI_33 = new EdifCell(library, "IBUFG_LVDCI_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_33");
        }
        try {
            _IBUFG_LVDCI_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_15() {
        try {
            _IBUFG_LVDCI_DV2_15 = new EdifCell(library, "IBUFG_LVDCI_DV2_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_15");
        }
        try {
            _IBUFG_LVDCI_DV2_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_18() {
        try {
            _IBUFG_LVDCI_DV2_18 = new EdifCell(library, "IBUFG_LVDCI_DV2_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_18");
        }
        try {
            _IBUFG_LVDCI_DV2_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_25() {
        try {
            _IBUFG_LVDCI_DV2_25 = new EdifCell(library, "IBUFG_LVDCI_DV2_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_25");
        }
        try {
            _IBUFG_LVDCI_DV2_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_33() {
        try {
            _IBUFG_LVDCI_DV2_33 = new EdifCell(library, "IBUFG_LVDCI_DV2_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_33");
        }
        try {
            _IBUFG_LVDCI_DV2_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDS() {
        try {
            _IBUFG_LVDS = new EdifCell(library, "IBUFG_LVDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDS");
        }
        try {
            _IBUFG_LVDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVPECL() {
        try {
            _IBUFG_LVPECL = new EdifCell(library, "IBUFG_LVPECL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVPECL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVPECL");
        }
        try {
            _IBUFG_LVPECL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVPECL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVTTL() {
        try {
            _IBUFG_LVTTL = new EdifCell(library, "IBUFG_LVTTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVTTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVTTL");
        }
        try {
            _IBUFG_LVTTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVTTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI33_3() {
        try {
            _IBUFG_PCI33_3 = new EdifCell(library, "IBUFG_PCI33_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI33_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI33_3");
        }
        try {
            _IBUFG_PCI33_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI33_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI33_5() {
        try {
            _IBUFG_PCI33_5 = new EdifCell(library, "IBUFG_PCI33_5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI33_5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI33_5");
        }
        try {
            _IBUFG_PCI33_5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI33_5.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI66_3() {
        try {
            _IBUFG_PCI66_3 = new EdifCell(library, "IBUFG_PCI66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI66_3");
        }
        try {
            _IBUFG_PCI66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCIX() {
        try {
            _IBUFG_PCIX = new EdifCell(library, "IBUFG_PCIX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCIX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCIX");
        }
        try {
            _IBUFG_PCIX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCIX.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCIX66_3() {
        try {
            _IBUFG_PCIX66_3 = new EdifCell(library, "IBUFG_PCIX66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCIX66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCIX66_3");
        }
        try {
            _IBUFG_PCIX66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCIX66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_I() {
        try {
            _IBUFG_SSTL18_I = new EdifCell(library, "IBUFG_SSTL18_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_I");
        }
        try {
            _IBUFG_SSTL18_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_I_DCI() {
        try {
            _IBUFG_SSTL18_I_DCI = new EdifCell(library, "IBUFG_SSTL18_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_I_DCI");
        }
        try {
            _IBUFG_SSTL18_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_II() {
        try {
            _IBUFG_SSTL18_II = new EdifCell(library, "IBUFG_SSTL18_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_II");
        }
        try {
            _IBUFG_SSTL18_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_II_DCI() {
        try {
            _IBUFG_SSTL18_II_DCI = new EdifCell(library, "IBUFG_SSTL18_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_II_DCI");
        }
        try {
            _IBUFG_SSTL18_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_I() {
        try {
            _IBUFG_SSTL2_I = new EdifCell(library, "IBUFG_SSTL2_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_I");
        }
        try {
            _IBUFG_SSTL2_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_I_DCI() {
        try {
            _IBUFG_SSTL2_I_DCI = new EdifCell(library, "IBUFG_SSTL2_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_I_DCI");
        }
        try {
            _IBUFG_SSTL2_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_II() {
        try {
            _IBUFG_SSTL2_II = new EdifCell(library, "IBUFG_SSTL2_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_II");
        }
        try {
            _IBUFG_SSTL2_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_II_DCI() {
        try {
            _IBUFG_SSTL2_II_DCI = new EdifCell(library, "IBUFG_SSTL2_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_II_DCI");
        }
        try {
            _IBUFG_SSTL2_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_I() {
        try {
            _IBUFG_SSTL3_I = new EdifCell(library, "IBUFG_SSTL3_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_I");
        }
        try {
            _IBUFG_SSTL3_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_I_DCI() {
        try {
            _IBUFG_SSTL3_I_DCI = new EdifCell(library, "IBUFG_SSTL3_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_I_DCI");
        }
        try {
            _IBUFG_SSTL3_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_II() {
        try {
            _IBUFG_SSTL3_II = new EdifCell(library, "IBUFG_SSTL3_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_II");
        }
        try {
            _IBUFG_SSTL3_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_II_DCI() {
        try {
            _IBUFG_SSTL3_II_DCI = new EdifCell(library, "IBUFG_SSTL3_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_II_DCI");
        }
        try {
            _IBUFG_SSTL3_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS() {
        try {
            _IBUFGDS = new EdifCell(library, "IBUFGDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS");
        }
        try {
            _IBUFGDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_BLVDS_25() {
        try {
            _IBUFGDS_BLVDS_25 = new EdifCell(library, "IBUFGDS_BLVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_BLVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_BLVDS_25");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_DIFF_OUT() {
        try {
            _IBUFGDS_DIFF_OUT = new EdifCell(library, "IBUFGDS_DIFF_OUT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_DIFF_OUT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_DIFF_OUT");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LDT_25() {
        try {
            _IBUFGDS_LDT_25 = new EdifCell(library, "IBUFGDS_LDT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LDT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LDT_25");
        }
        try {
            _IBUFGDS_LDT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LDT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LDT_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_25() {
        try {
            _IBUFGDS_LVDS_25 = new EdifCell(library, "IBUFGDS_LVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_25");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_25_DCI() {
        try {
            _IBUFGDS_LVDS_25_DCI = new EdifCell(library, "IBUFGDS_LVDS_25_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_25_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_25_DCI");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_33() {
        try {
            _IBUFGDS_LVDS_33 = new EdifCell(library, "IBUFGDS_LVDS_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_33");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_33_DCI() {
        try {
            _IBUFGDS_LVDS_33_DCI = new EdifCell(library, "IBUFGDS_LVDS_33_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_33_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_33_DCI");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_25() {
        try {
            _IBUFGDS_LVDSEXT_25 = new EdifCell(library, "IBUFGDS_LVDSEXT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_25");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_25_DCI() {
        try {
            _IBUFGDS_LVDSEXT_25_DCI = new EdifCell(library, "IBUFGDS_LVDSEXT_25_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_25_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_25_DCI");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_33() {
        try {
            _IBUFGDS_LVDSEXT_33 = new EdifCell(library, "IBUFGDS_LVDSEXT_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_33");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_33_DCI() {
        try {
            _IBUFGDS_LVDSEXT_33_DCI = new EdifCell(library, "IBUFGDS_LVDSEXT_33_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_33_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_33_DCI");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVPECL_25() {
        try {
            _IBUFGDS_LVPECL_25 = new EdifCell(library, "IBUFGDS_LVPECL_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVPECL_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVPECL_25");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVPECL_33() {
        try {
            _IBUFGDS_LVPECL_33 = new EdifCell(library, "IBUFGDS_LVPECL_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVPECL_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVPECL_33");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_ULVDS_25() {
        try {
            _IBUFGDS_ULVDS_25 = new EdifCell(library, "IBUFGDS_ULVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_ULVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_ULVDS_25");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(IB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX2() {
        try {
            _ICAP_VIRTEX2 = new EdifCell(library, "ICAP_VIRTEX2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX2");
        }
        try {
            _ICAP_VIRTEX2.addPort(BUSY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX2.addPort(O_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX2.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX2.addPort(I_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX2.addPort(WRITE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX4() {
        try {
            _ICAP_VIRTEX4 = new EdifCell(library, "ICAP_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX4");
        }
        try {
            _ICAP_VIRTEX4.addPort(BUSY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(O_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(I_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(WRITE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX5() {
        try {
            _ICAP_VIRTEX5 = new EdifCell(library, "ICAP_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX5");
        }
        try {
            _ICAP_VIRTEX5.addPort(BUSY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(O_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(I_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(WRITE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDDR() {
        try {
            _IDDR = new EdifCell(library, "IDDR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDDR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDDR");
        }
        try {
            _IDDR.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(Q2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDDR2() {
        try {
            _IDDR2 = new EdifCell(library, "IDDR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDDR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDDR2");
        }
        try {
            _IDDR2.addPort(Q0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAY() {
        try {
            _IDELAY = new EdifCell(library, "IDELAY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAY");
        }
        try {
            _IDELAY.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(INC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAYCTRL() {
        try {
            _IDELAYCTRL = new EdifCell(library, "IDELAYCTRL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAYCTRL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAYCTRL");
        }
        try {
            _IDELAYCTRL.addPort(RDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYCTRL.addPort(REFCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYCTRL.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIFDDRCPE() {
        try {
            _IFDDRCPE = new EdifCell(library, "IFDDRCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IFDDRCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IFDDRCPE");
        }
        try {
            _IFDDRCPE.addPort(Q0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIFDDRRSE() {
        try {
            _IFDDRRSE = new EdifCell(library, "IFDDRRSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IFDDRRSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IFDDRRSE");
        }
        try {
            _IFDDRRSE.addPort(Q0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initILD() {
        try {
            _ILD = new EdifCell(library, "ILD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ILD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ILD");
        }
        try {
            _ILD.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ILD.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ILD.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initINV() {
        try {
            _INV = new EdifCell(library, "INV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: INV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: INV");
        }
        try {
            _INV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _INV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF() {
        try {
            _IOBUF = new EdifCell(library, "IOBUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF");
        }
        try {
            _IOBUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_AGP() {
        try {
            _IOBUF_AGP = new EdifCell(library, "IOBUF_AGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_AGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_AGP");
        }
        try {
            _IOBUF_AGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_CTT() {
        try {
            _IOBUF_CTT = new EdifCell(library, "IOBUF_CTT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_CTT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_CTT");
        }
        try {
            _IOBUF_CTT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_12() {
        try {
            _IOBUF_F_12 = new EdifCell(library, "IOBUF_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_12");
        }
        try {
            _IOBUF_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_16() {
        try {
            _IOBUF_F_16 = new EdifCell(library, "IOBUF_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_16");
        }
        try {
            _IOBUF_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_2() {
        try {
            _IOBUF_F_2 = new EdifCell(library, "IOBUF_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_2");
        }
        try {
            _IOBUF_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_24() {
        try {
            _IOBUF_F_24 = new EdifCell(library, "IOBUF_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_24");
        }
        try {
            _IOBUF_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_4() {
        try {
            _IOBUF_F_4 = new EdifCell(library, "IOBUF_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_4");
        }
        try {
            _IOBUF_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_6() {
        try {
            _IOBUF_F_6 = new EdifCell(library, "IOBUF_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_6");
        }
        try {
            _IOBUF_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_8() {
        try {
            _IOBUF_F_8 = new EdifCell(library, "IOBUF_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_8");
        }
        try {
            _IOBUF_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTL() {
        try {
            _IOBUF_GTL = new EdifCell(library, "IOBUF_GTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTL");
        }
        try {
            _IOBUF_GTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTL_DCI() {
        try {
            _IOBUF_GTL_DCI = new EdifCell(library, "IOBUF_GTL_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTL_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTL_DCI");
        }
        try {
            _IOBUF_GTL_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTLP() {
        try {
            _IOBUF_GTLP = new EdifCell(library, "IOBUF_GTLP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTLP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTLP");
        }
        try {
            _IOBUF_GTLP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTLP_DCI() {
        try {
            _IOBUF_GTLP_DCI = new EdifCell(library, "IOBUF_GTLP_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTLP_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTLP_DCI");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_I() {
        try {
            _IOBUF_HSTL_I = new EdifCell(library, "IOBUF_HSTL_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_I");
        }
        try {
            _IOBUF_HSTL_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_I_18() {
        try {
            _IOBUF_HSTL_I_18 = new EdifCell(library, "IOBUF_HSTL_I_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_I_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_I_18");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II() {
        try {
            _IOBUF_HSTL_II = new EdifCell(library, "IOBUF_HSTL_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II");
        }
        try {
            _IOBUF_HSTL_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_18() {
        try {
            _IOBUF_HSTL_II_18 = new EdifCell(library, "IOBUF_HSTL_II_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_18");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_DCI() {
        try {
            _IOBUF_HSTL_II_DCI = new EdifCell(library, "IOBUF_HSTL_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_DCI");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_DCI_18() {
        try {
            _IOBUF_HSTL_II_DCI_18 = new EdifCell(library, "IOBUF_HSTL_II_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_DCI_18");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_III() {
        try {
            _IOBUF_HSTL_III = new EdifCell(library, "IOBUF_HSTL_III", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_III");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_III");
        }
        try {
            _IOBUF_HSTL_III.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_III_18() {
        try {
            _IOBUF_HSTL_III_18 = new EdifCell(library, "IOBUF_HSTL_III_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_III_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_III_18");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV() {
        try {
            _IOBUF_HSTL_IV = new EdifCell(library, "IOBUF_HSTL_IV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV");
        }
        try {
            _IOBUF_HSTL_IV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_18() {
        try {
            _IOBUF_HSTL_IV_18 = new EdifCell(library, "IOBUF_HSTL_IV_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_18");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_DCI() {
        try {
            _IOBUF_HSTL_IV_DCI = new EdifCell(library, "IOBUF_HSTL_IV_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_DCI");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_DCI_18() {
        try {
            _IOBUF_HSTL_IV_DCI_18 = new EdifCell(library, "IOBUF_HSTL_IV_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_DCI_18");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12() {
        try {
            _IOBUF_LVCMOS12 = new EdifCell(library, "IOBUF_LVCMOS12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12");
        }
        try {
            _IOBUF_LVCMOS12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_2() {
        try {
            _IOBUF_LVCMOS12_F_2 = new EdifCell(library, "IOBUF_LVCMOS12_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_2");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_4() {
        try {
            _IOBUF_LVCMOS12_F_4 = new EdifCell(library, "IOBUF_LVCMOS12_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_4");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_6() {
        try {
            _IOBUF_LVCMOS12_F_6 = new EdifCell(library, "IOBUF_LVCMOS12_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_6");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_8() {
        try {
            _IOBUF_LVCMOS12_F_8 = new EdifCell(library, "IOBUF_LVCMOS12_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_8");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_2() {
        try {
            _IOBUF_LVCMOS12_S_2 = new EdifCell(library, "IOBUF_LVCMOS12_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_2");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_4() {
        try {
            _IOBUF_LVCMOS12_S_4 = new EdifCell(library, "IOBUF_LVCMOS12_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_4");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_6() {
        try {
            _IOBUF_LVCMOS12_S_6 = new EdifCell(library, "IOBUF_LVCMOS12_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_6");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_8() {
        try {
            _IOBUF_LVCMOS12_S_8 = new EdifCell(library, "IOBUF_LVCMOS12_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_8");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15() {
        try {
            _IOBUF_LVCMOS15 = new EdifCell(library, "IOBUF_LVCMOS15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15");
        }
        try {
            _IOBUF_LVCMOS15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_12() {
        try {
            _IOBUF_LVCMOS15_F_12 = new EdifCell(library, "IOBUF_LVCMOS15_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_12");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_16() {
        try {
            _IOBUF_LVCMOS15_F_16 = new EdifCell(library, "IOBUF_LVCMOS15_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_16");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_2() {
        try {
            _IOBUF_LVCMOS15_F_2 = new EdifCell(library, "IOBUF_LVCMOS15_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_2");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_4() {
        try {
            _IOBUF_LVCMOS15_F_4 = new EdifCell(library, "IOBUF_LVCMOS15_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_4");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_6() {
        try {
            _IOBUF_LVCMOS15_F_6 = new EdifCell(library, "IOBUF_LVCMOS15_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_6");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_8() {
        try {
            _IOBUF_LVCMOS15_F_8 = new EdifCell(library, "IOBUF_LVCMOS15_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_8");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_12() {
        try {
            _IOBUF_LVCMOS15_S_12 = new EdifCell(library, "IOBUF_LVCMOS15_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_12");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_16() {
        try {
            _IOBUF_LVCMOS15_S_16 = new EdifCell(library, "IOBUF_LVCMOS15_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_16");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_2() {
        try {
            _IOBUF_LVCMOS15_S_2 = new EdifCell(library, "IOBUF_LVCMOS15_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_2");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_4() {
        try {
            _IOBUF_LVCMOS15_S_4 = new EdifCell(library, "IOBUF_LVCMOS15_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_4");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_6() {
        try {
            _IOBUF_LVCMOS15_S_6 = new EdifCell(library, "IOBUF_LVCMOS15_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_6");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_8() {
        try {
            _IOBUF_LVCMOS15_S_8 = new EdifCell(library, "IOBUF_LVCMOS15_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_8");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18() {
        try {
            _IOBUF_LVCMOS18 = new EdifCell(library, "IOBUF_LVCMOS18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18");
        }
        try {
            _IOBUF_LVCMOS18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_12() {
        try {
            _IOBUF_LVCMOS18_F_12 = new EdifCell(library, "IOBUF_LVCMOS18_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_12");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_16() {
        try {
            _IOBUF_LVCMOS18_F_16 = new EdifCell(library, "IOBUF_LVCMOS18_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_16");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_2() {
        try {
            _IOBUF_LVCMOS18_F_2 = new EdifCell(library, "IOBUF_LVCMOS18_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_2");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_4() {
        try {
            _IOBUF_LVCMOS18_F_4 = new EdifCell(library, "IOBUF_LVCMOS18_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_4");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_6() {
        try {
            _IOBUF_LVCMOS18_F_6 = new EdifCell(library, "IOBUF_LVCMOS18_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_6");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_8() {
        try {
            _IOBUF_LVCMOS18_F_8 = new EdifCell(library, "IOBUF_LVCMOS18_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_8");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_12() {
        try {
            _IOBUF_LVCMOS18_S_12 = new EdifCell(library, "IOBUF_LVCMOS18_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_12");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_16() {
        try {
            _IOBUF_LVCMOS18_S_16 = new EdifCell(library, "IOBUF_LVCMOS18_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_16");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_2() {
        try {
            _IOBUF_LVCMOS18_S_2 = new EdifCell(library, "IOBUF_LVCMOS18_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_2");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_4() {
        try {
            _IOBUF_LVCMOS18_S_4 = new EdifCell(library, "IOBUF_LVCMOS18_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_4");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_6() {
        try {
            _IOBUF_LVCMOS18_S_6 = new EdifCell(library, "IOBUF_LVCMOS18_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_6");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_8() {
        try {
            _IOBUF_LVCMOS18_S_8 = new EdifCell(library, "IOBUF_LVCMOS18_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_8");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS2() {
        try {
            _IOBUF_LVCMOS2 = new EdifCell(library, "IOBUF_LVCMOS2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS2");
        }
        try {
            _IOBUF_LVCMOS2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25() {
        try {
            _IOBUF_LVCMOS25 = new EdifCell(library, "IOBUF_LVCMOS25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25");
        }
        try {
            _IOBUF_LVCMOS25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_12() {
        try {
            _IOBUF_LVCMOS25_F_12 = new EdifCell(library, "IOBUF_LVCMOS25_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_12");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_16() {
        try {
            _IOBUF_LVCMOS25_F_16 = new EdifCell(library, "IOBUF_LVCMOS25_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_16");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_2() {
        try {
            _IOBUF_LVCMOS25_F_2 = new EdifCell(library, "IOBUF_LVCMOS25_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_2");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_24() {
        try {
            _IOBUF_LVCMOS25_F_24 = new EdifCell(library, "IOBUF_LVCMOS25_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_24");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_4() {
        try {
            _IOBUF_LVCMOS25_F_4 = new EdifCell(library, "IOBUF_LVCMOS25_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_4");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_6() {
        try {
            _IOBUF_LVCMOS25_F_6 = new EdifCell(library, "IOBUF_LVCMOS25_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_6");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_8() {
        try {
            _IOBUF_LVCMOS25_F_8 = new EdifCell(library, "IOBUF_LVCMOS25_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_8");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_12() {
        try {
            _IOBUF_LVCMOS25_S_12 = new EdifCell(library, "IOBUF_LVCMOS25_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_12");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_16() {
        try {
            _IOBUF_LVCMOS25_S_16 = new EdifCell(library, "IOBUF_LVCMOS25_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_16");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_2() {
        try {
            _IOBUF_LVCMOS25_S_2 = new EdifCell(library, "IOBUF_LVCMOS25_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_2");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_24() {
        try {
            _IOBUF_LVCMOS25_S_24 = new EdifCell(library, "IOBUF_LVCMOS25_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_24");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_4() {
        try {
            _IOBUF_LVCMOS25_S_4 = new EdifCell(library, "IOBUF_LVCMOS25_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_4");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_6() {
        try {
            _IOBUF_LVCMOS25_S_6 = new EdifCell(library, "IOBUF_LVCMOS25_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_6");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_8() {
        try {
            _IOBUF_LVCMOS25_S_8 = new EdifCell(library, "IOBUF_LVCMOS25_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_8");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33() {
        try {
            _IOBUF_LVCMOS33 = new EdifCell(library, "IOBUF_LVCMOS33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33");
        }
        try {
            _IOBUF_LVCMOS33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_12() {
        try {
            _IOBUF_LVCMOS33_F_12 = new EdifCell(library, "IOBUF_LVCMOS33_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_12");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_16() {
        try {
            _IOBUF_LVCMOS33_F_16 = new EdifCell(library, "IOBUF_LVCMOS33_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_16");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_2() {
        try {
            _IOBUF_LVCMOS33_F_2 = new EdifCell(library, "IOBUF_LVCMOS33_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_2");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_24() {
        try {
            _IOBUF_LVCMOS33_F_24 = new EdifCell(library, "IOBUF_LVCMOS33_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_24");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_4() {
        try {
            _IOBUF_LVCMOS33_F_4 = new EdifCell(library, "IOBUF_LVCMOS33_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_4");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_6() {
        try {
            _IOBUF_LVCMOS33_F_6 = new EdifCell(library, "IOBUF_LVCMOS33_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_6");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_8() {
        try {
            _IOBUF_LVCMOS33_F_8 = new EdifCell(library, "IOBUF_LVCMOS33_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_8");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_12() {
        try {
            _IOBUF_LVCMOS33_S_12 = new EdifCell(library, "IOBUF_LVCMOS33_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_12");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_16() {
        try {
            _IOBUF_LVCMOS33_S_16 = new EdifCell(library, "IOBUF_LVCMOS33_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_16");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_2() {
        try {
            _IOBUF_LVCMOS33_S_2 = new EdifCell(library, "IOBUF_LVCMOS33_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_2");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_24() {
        try {
            _IOBUF_LVCMOS33_S_24 = new EdifCell(library, "IOBUF_LVCMOS33_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_24");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_4() {
        try {
            _IOBUF_LVCMOS33_S_4 = new EdifCell(library, "IOBUF_LVCMOS33_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_4");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_6() {
        try {
            _IOBUF_LVCMOS33_S_6 = new EdifCell(library, "IOBUF_LVCMOS33_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_6");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_8() {
        try {
            _IOBUF_LVCMOS33_S_8 = new EdifCell(library, "IOBUF_LVCMOS33_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_8");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_15() {
        try {
            _IOBUF_LVDCI_15 = new EdifCell(library, "IOBUF_LVDCI_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_15");
        }
        try {
            _IOBUF_LVDCI_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_18() {
        try {
            _IOBUF_LVDCI_18 = new EdifCell(library, "IOBUF_LVDCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_18");
        }
        try {
            _IOBUF_LVDCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_25() {
        try {
            _IOBUF_LVDCI_25 = new EdifCell(library, "IOBUF_LVDCI_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_25");
        }
        try {
            _IOBUF_LVDCI_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_33() {
        try {
            _IOBUF_LVDCI_33 = new EdifCell(library, "IOBUF_LVDCI_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_33");
        }
        try {
            _IOBUF_LVDCI_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_15() {
        try {
            _IOBUF_LVDCI_DV2_15 = new EdifCell(library, "IOBUF_LVDCI_DV2_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_15");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_18() {
        try {
            _IOBUF_LVDCI_DV2_18 = new EdifCell(library, "IOBUF_LVDCI_DV2_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_18");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_25() {
        try {
            _IOBUF_LVDCI_DV2_25 = new EdifCell(library, "IOBUF_LVDCI_DV2_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_25");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_33() {
        try {
            _IOBUF_LVDCI_DV2_33 = new EdifCell(library, "IOBUF_LVDCI_DV2_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_33");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDS() {
        try {
            _IOBUF_LVDS = new EdifCell(library, "IOBUF_LVDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDS");
        }
        try {
            _IOBUF_LVDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVPECL() {
        try {
            _IOBUF_LVPECL = new EdifCell(library, "IOBUF_LVPECL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVPECL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVPECL");
        }
        try {
            _IOBUF_LVPECL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL() {
        try {
            _IOBUF_LVTTL = new EdifCell(library, "IOBUF_LVTTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL");
        }
        try {
            _IOBUF_LVTTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_12() {
        try {
            _IOBUF_LVTTL_F_12 = new EdifCell(library, "IOBUF_LVTTL_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_12");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_16() {
        try {
            _IOBUF_LVTTL_F_16 = new EdifCell(library, "IOBUF_LVTTL_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_16");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_2() {
        try {
            _IOBUF_LVTTL_F_2 = new EdifCell(library, "IOBUF_LVTTL_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_2");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_24() {
        try {
            _IOBUF_LVTTL_F_24 = new EdifCell(library, "IOBUF_LVTTL_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_24");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_4() {
        try {
            _IOBUF_LVTTL_F_4 = new EdifCell(library, "IOBUF_LVTTL_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_4");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_6() {
        try {
            _IOBUF_LVTTL_F_6 = new EdifCell(library, "IOBUF_LVTTL_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_6");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_8() {
        try {
            _IOBUF_LVTTL_F_8 = new EdifCell(library, "IOBUF_LVTTL_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_8");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_12() {
        try {
            _IOBUF_LVTTL_S_12 = new EdifCell(library, "IOBUF_LVTTL_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_12");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_16() {
        try {
            _IOBUF_LVTTL_S_16 = new EdifCell(library, "IOBUF_LVTTL_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_16");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_2() {
        try {
            _IOBUF_LVTTL_S_2 = new EdifCell(library, "IOBUF_LVTTL_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_2");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_24() {
        try {
            _IOBUF_LVTTL_S_24 = new EdifCell(library, "IOBUF_LVTTL_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_24");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_4() {
        try {
            _IOBUF_LVTTL_S_4 = new EdifCell(library, "IOBUF_LVTTL_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_4");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_6() {
        try {
            _IOBUF_LVTTL_S_6 = new EdifCell(library, "IOBUF_LVTTL_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_6");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_8() {
        try {
            _IOBUF_LVTTL_S_8 = new EdifCell(library, "IOBUF_LVTTL_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_8");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI33_3() {
        try {
            _IOBUF_PCI33_3 = new EdifCell(library, "IOBUF_PCI33_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI33_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI33_3");
        }
        try {
            _IOBUF_PCI33_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI33_5() {
        try {
            _IOBUF_PCI33_5 = new EdifCell(library, "IOBUF_PCI33_5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI33_5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI33_5");
        }
        try {
            _IOBUF_PCI33_5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI66_3() {
        try {
            _IOBUF_PCI66_3 = new EdifCell(library, "IOBUF_PCI66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI66_3");
        }
        try {
            _IOBUF_PCI66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCIX() {
        try {
            _IOBUF_PCIX = new EdifCell(library, "IOBUF_PCIX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCIX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCIX");
        }
        try {
            _IOBUF_PCIX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCIX66_3() {
        try {
            _IOBUF_PCIX66_3 = new EdifCell(library, "IOBUF_PCIX66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCIX66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCIX66_3");
        }
        try {
            _IOBUF_PCIX66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_12() {
        try {
            _IOBUF_S_12 = new EdifCell(library, "IOBUF_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_12");
        }
        try {
            _IOBUF_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_16() {
        try {
            _IOBUF_S_16 = new EdifCell(library, "IOBUF_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_16");
        }
        try {
            _IOBUF_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_2() {
        try {
            _IOBUF_S_2 = new EdifCell(library, "IOBUF_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_2");
        }
        try {
            _IOBUF_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_24() {
        try {
            _IOBUF_S_24 = new EdifCell(library, "IOBUF_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_24");
        }
        try {
            _IOBUF_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_4() {
        try {
            _IOBUF_S_4 = new EdifCell(library, "IOBUF_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_4");
        }
        try {
            _IOBUF_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_6() {
        try {
            _IOBUF_S_6 = new EdifCell(library, "IOBUF_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_6");
        }
        try {
            _IOBUF_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_8() {
        try {
            _IOBUF_S_8 = new EdifCell(library, "IOBUF_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_8");
        }
        try {
            _IOBUF_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_I() {
        try {
            _IOBUF_SSTL18_I = new EdifCell(library, "IOBUF_SSTL18_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_I");
        }
        try {
            _IOBUF_SSTL18_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_II() {
        try {
            _IOBUF_SSTL18_II = new EdifCell(library, "IOBUF_SSTL18_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_II");
        }
        try {
            _IOBUF_SSTL18_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_II_DCI() {
        try {
            _IOBUF_SSTL18_II_DCI = new EdifCell(library, "IOBUF_SSTL18_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_II_DCI");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_I() {
        try {
            _IOBUF_SSTL2_I = new EdifCell(library, "IOBUF_SSTL2_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_I");
        }
        try {
            _IOBUF_SSTL2_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_II() {
        try {
            _IOBUF_SSTL2_II = new EdifCell(library, "IOBUF_SSTL2_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_II");
        }
        try {
            _IOBUF_SSTL2_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_II_DCI() {
        try {
            _IOBUF_SSTL2_II_DCI = new EdifCell(library, "IOBUF_SSTL2_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_II_DCI");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_I() {
        try {
            _IOBUF_SSTL3_I = new EdifCell(library, "IOBUF_SSTL3_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_I");
        }
        try {
            _IOBUF_SSTL3_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_II() {
        try {
            _IOBUF_SSTL3_II = new EdifCell(library, "IOBUF_SSTL3_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_II");
        }
        try {
            _IOBUF_SSTL3_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_II_DCI() {
        try {
            _IOBUF_SSTL3_II_DCI = new EdifCell(library, "IOBUF_SSTL3_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_II_DCI");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS() {
        try {
            _IOBUFDS = new EdifCell(library, "IOBUFDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS");
        }
        try {
            _IOBUFDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(IOB_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_BLVDS_25() {
        try {
            _IOBUFDS_BLVDS_25 = new EdifCell(library, "IOBUFDS_BLVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_BLVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_BLVDS_25");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(IOB_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFE() {
        try {
            _IOBUFE = new EdifCell(library, "IOBUFE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFE");
        }
        try {
            _IOBUFE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(E_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFE_F() {
        try {
            _IOBUFE_F = new EdifCell(library, "IOBUFE_F", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFE_F");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFE_F");
        }
        try {
            _IOBUFE_F.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_F.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_F.addPort(E_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_F.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFE_S() {
        try {
            _IOBUFE_S = new EdifCell(library, "IOBUFE_S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFE_S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFE_S");
        }
        try {
            _IOBUFE_S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_S.addPort(IO_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_S.addPort(E_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE_S.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODELAY() {
        try {
            _IODELAY = new EdifCell(library, "IODELAY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODELAY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODELAY");
        }
        try {
            _IODELAY.addPort(DATAOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(DATAIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(IDATAIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(INC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(ODATAIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDES() {
        try {
            _ISERDES = new EdifCell(library, "ISERDES", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDES");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDES");
        }
        try {
            _ISERDES.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(BITSLIP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CE2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CLKDIV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYCE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYINC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(OCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(REV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTIN1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTIN2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDES_NODELAY() {
        try {
            _ISERDES_NODELAY = new EdifCell(library, "ISERDES_NODELAY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDES_NODELAY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDES_NODELAY");
        }
        try {
            _ISERDES_NODELAY.addPort(Q1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q6_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(BITSLIP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CE2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CLKDIV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(OCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTIN1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTIN2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAGPPC() {
        try {
            _JTAGPPC = new EdifCell(library, "JTAGPPC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAGPPC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAGPPC");
        }
        try {
            _JTAGPPC.addPort(TCK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDIPPC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TMS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDOPPC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDOTSPPC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEEP() {
        try {
            _KEEP = new EdifCell(library, "KEEP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEEP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEEP");
        }
        try {
            _KEEP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _KEEP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEEPER() {
        try {
            _KEEPER = new EdifCell(library, "KEEPER", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEEPER");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEEPER");
        }
        try {
            _KEEPER.addPort(O_port_name, 1, EdifPort.INOUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEY_CLEAR() {
        try {
            _KEY_CLEAR = new EdifCell(library, "KEY_CLEAR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEY_CLEAR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEY_CLEAR");
        }
        try {
            _KEY_CLEAR.addPort(KEYCLEARB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLD() {
        try {
            _LD = new EdifCell(library, "LD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LD");
        }
        try {
            _LD.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLD_1() {
        try {
            _LD_1 = new EdifCell(library, "LD_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LD_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LD_1");
        }
        try {
            _LD_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDC() {
        try {
            _LDC = new EdifCell(library, "LDC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDC");
        }
        try {
            _LDC.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDC_1() {
        try {
            _LDC_1 = new EdifCell(library, "LDC_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDC_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDC_1");
        }
        try {
            _LDC_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCE() {
        try {
            _LDCE = new EdifCell(library, "LDCE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCE");
        }
        try {
            _LDCE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCE_1() {
        try {
            _LDCE_1 = new EdifCell(library, "LDCE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCE_1");
        }
        try {
            _LDCE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCP() {
        try {
            _LDCP = new EdifCell(library, "LDCP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCP");
        }
        try {
            _LDCP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCP_1() {
        try {
            _LDCP_1 = new EdifCell(library, "LDCP_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCP_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCP_1");
        }
        try {
            _LDCP_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCPE() {
        try {
            _LDCPE = new EdifCell(library, "LDCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCPE");
        }
        try {
            _LDCPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCPE_1() {
        try {
            _LDCPE_1 = new EdifCell(library, "LDCPE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCPE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCPE_1");
        }
        try {
            _LDCPE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDE() {
        try {
            _LDE = new EdifCell(library, "LDE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDE");
        }
        try {
            _LDE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDE_1() {
        try {
            _LDE_1 = new EdifCell(library, "LDE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDE_1");
        }
        try {
            _LDE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDG() {
        try {
            _LDG = new EdifCell(library, "LDG", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDG");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDG");
        }
        try {
            _LDG.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDG.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDG.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDP() {
        try {
            _LDP = new EdifCell(library, "LDP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDP");
        }
        try {
            _LDP.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDP_1() {
        try {
            _LDP_1 = new EdifCell(library, "LDP_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDP_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDP_1");
        }
        try {
            _LDP_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDPE() {
        try {
            _LDPE = new EdifCell(library, "LDPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDPE");
        }
        try {
            _LDPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDPE_1() {
        try {
            _LDPE_1 = new EdifCell(library, "LDPE_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDPE_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDPE_1");
        }
        try {
            _LDPE_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(G_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(GE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1() {
        try {
            _LUT1 = new EdifCell(library, "LUT1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1");
        }
        try {
            _LUT1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1_D() {
        try {
            _LUT1_D = new EdifCell(library, "LUT1_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1_D");
        }
        try {
            _LUT1_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1_L() {
        try {
            _LUT1_L = new EdifCell(library, "LUT1_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1_L");
        }
        try {
            _LUT1_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2() {
        try {
            _LUT2 = new EdifCell(library, "LUT2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2");
        }
        try {
            _LUT2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2_D() {
        try {
            _LUT2_D = new EdifCell(library, "LUT2_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2_D");
        }
        try {
            _LUT2_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2_L() {
        try {
            _LUT2_L = new EdifCell(library, "LUT2_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2_L");
        }
        try {
            _LUT2_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3() {
        try {
            _LUT3 = new EdifCell(library, "LUT3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3");
        }
        try {
            _LUT3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3_D() {
        try {
            _LUT3_D = new EdifCell(library, "LUT3_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3_D");
        }
        try {
            _LUT3_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3_L() {
        try {
            _LUT3_L = new EdifCell(library, "LUT3_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3_L");
        }
        try {
            _LUT3_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4() {
        try {
            _LUT4 = new EdifCell(library, "LUT4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4");
        }
        try {
            _LUT4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4_D() {
        try {
            _LUT4_D = new EdifCell(library, "LUT4_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4_D");
        }
        try {
            _LUT4_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4_L() {
        try {
            _LUT4_L = new EdifCell(library, "LUT4_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4_L");
        }
        try {
            _LUT4_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5() {
        try {
            _LUT5 = new EdifCell(library, "LUT5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5");
        }
        try {
            _LUT5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5_D() {
        try {
            _LUT5_D = new EdifCell(library, "LUT5_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5_D");
        }
        try {
            _LUT5_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5_L() {
        try {
            _LUT5_L = new EdifCell(library, "LUT5_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5_L");
        }
        try {
            _LUT5_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6() {
        try {
            _LUT6 = new EdifCell(library, "LUT6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6");
        }
        try {
            _LUT6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6_D() {
        try {
            _LUT6_D = new EdifCell(library, "LUT6_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6_D");
        }
        try {
            _LUT6_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6_L() {
        try {
            _LUT6_L = new EdifCell(library, "LUT6_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6_L");
        }
        try {
            _LUT6_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMERGE() {
        try {
            _MERGE = new EdifCell(library, "MERGE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MERGE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MERGE");
        }
        try {
            _MERGE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMIN_OFF() {
        try {
            _MIN_OFF = new EdifCell(library, "MIN_OFF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MIN_OFF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MIN_OFF");
        }
        try {
            _MIN_OFF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18() {
        try {
            _MULT18X18 = new EdifCell(library, "MULT18X18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18");
        }
        try {
            _MULT18X18.addPort(P_port_name, 36, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18.addPort(A_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18.addPort(B_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18S() {
        try {
            _MULT18X18S = new EdifCell(library, "MULT18X18S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18S");
        }
        try {
            _MULT18X18S.addPort(P_port_name, 36, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(A_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(B_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18SIO() {
        try {
            _MULT18X18SIO = new EdifCell(library, "MULT18X18SIO", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18SIO");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18SIO");
        }
        try {
            _MULT18X18SIO.addPort(BCOUT_port_name, 18, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(P_port_name, 36, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(A_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(B_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(BCIN_port_name, 18, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT_AND() {
        try {
            _MULT_AND = new EdifCell(library, "MULT_AND", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT_AND");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT_AND");
        }
        try {
            _MULT_AND.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT_AND.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT_AND.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY() {
        try {
            _MUXCY = new EdifCell(library, "MUXCY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY");
        }
        try {
            _MUXCY.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(DI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY_D() {
        try {
            _MUXCY_D = new EdifCell(library, "MUXCY_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY_D");
        }
        try {
            _MUXCY_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(DI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY_L() {
        try {
            _MUXCY_L = new EdifCell(library, "MUXCY_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY_L");
        }
        try {
            _MUXCY_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(DI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5() {
        try {
            _MUXF5 = new EdifCell(library, "MUXF5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5");
        }
        try {
            _MUXF5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5_D() {
        try {
            _MUXF5_D = new EdifCell(library, "MUXF5_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5_D");
        }
        try {
            _MUXF5_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5_L() {
        try {
            _MUXF5_L = new EdifCell(library, "MUXF5_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5_L");
        }
        try {
            _MUXF5_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6() {
        try {
            _MUXF6 = new EdifCell(library, "MUXF6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6");
        }
        try {
            _MUXF6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6_D() {
        try {
            _MUXF6_D = new EdifCell(library, "MUXF6_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6_D");
        }
        try {
            _MUXF6_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6_L() {
        try {
            _MUXF6_L = new EdifCell(library, "MUXF6_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6_L");
        }
        try {
            _MUXF6_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7() {
        try {
            _MUXF7 = new EdifCell(library, "MUXF7", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7");
        }
        try {
            _MUXF7.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7_D() {
        try {
            _MUXF7_D = new EdifCell(library, "MUXF7_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7_D");
        }
        try {
            _MUXF7_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7_L() {
        try {
            _MUXF7_L = new EdifCell(library, "MUXF7_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7_L");
        }
        try {
            _MUXF7_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8() {
        try {
            _MUXF8 = new EdifCell(library, "MUXF8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8");
        }
        try {
            _MUXF8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8_D() {
        try {
            _MUXF8_D = new EdifCell(library, "MUXF8_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8_D");
        }
        try {
            _MUXF8_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8_L() {
        try {
            _MUXF8_L = new EdifCell(library, "MUXF8_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8_L");
        }
        try {
            _MUXF8_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2() {
        try {
            _NAND2 = new EdifCell(library, "NAND2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2");
        }
        try {
            _NAND2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2B1() {
        try {
            _NAND2B1 = new EdifCell(library, "NAND2B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2B1");
        }
        try {
            _NAND2B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2B2() {
        try {
            _NAND2B2 = new EdifCell(library, "NAND2B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2B2");
        }
        try {
            _NAND2B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3() {
        try {
            _NAND3 = new EdifCell(library, "NAND3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3");
        }
        try {
            _NAND3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B1() {
        try {
            _NAND3B1 = new EdifCell(library, "NAND3B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B1");
        }
        try {
            _NAND3B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B2() {
        try {
            _NAND3B2 = new EdifCell(library, "NAND3B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B2");
        }
        try {
            _NAND3B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B3() {
        try {
            _NAND3B3 = new EdifCell(library, "NAND3B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B3");
        }
        try {
            _NAND3B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4() {
        try {
            _NAND4 = new EdifCell(library, "NAND4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4");
        }
        try {
            _NAND4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B1() {
        try {
            _NAND4B1 = new EdifCell(library, "NAND4B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B1");
        }
        try {
            _NAND4B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B2() {
        try {
            _NAND4B2 = new EdifCell(library, "NAND4B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B2");
        }
        try {
            _NAND4B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B3() {
        try {
            _NAND4B3 = new EdifCell(library, "NAND4B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B3");
        }
        try {
            _NAND4B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B4() {
        try {
            _NAND4B4 = new EdifCell(library, "NAND4B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B4");
        }
        try {
            _NAND4B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5() {
        try {
            _NAND5 = new EdifCell(library, "NAND5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5");
        }
        try {
            _NAND5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B1() {
        try {
            _NAND5B1 = new EdifCell(library, "NAND5B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B1");
        }
        try {
            _NAND5B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B2() {
        try {
            _NAND5B2 = new EdifCell(library, "NAND5B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B2");
        }
        try {
            _NAND5B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B3() {
        try {
            _NAND5B3 = new EdifCell(library, "NAND5B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B3");
        }
        try {
            _NAND5B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B4() {
        try {
            _NAND5B4 = new EdifCell(library, "NAND5B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B4");
        }
        try {
            _NAND5B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B5() {
        try {
            _NAND5B5 = new EdifCell(library, "NAND5B5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B5");
        }
        try {
            _NAND5B5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2() {
        try {
            _NOR2 = new EdifCell(library, "NOR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2");
        }
        try {
            _NOR2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2B1() {
        try {
            _NOR2B1 = new EdifCell(library, "NOR2B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2B1");
        }
        try {
            _NOR2B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2B2() {
        try {
            _NOR2B2 = new EdifCell(library, "NOR2B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2B2");
        }
        try {
            _NOR2B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3() {
        try {
            _NOR3 = new EdifCell(library, "NOR3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3");
        }
        try {
            _NOR3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B1() {
        try {
            _NOR3B1 = new EdifCell(library, "NOR3B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B1");
        }
        try {
            _NOR3B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B2() {
        try {
            _NOR3B2 = new EdifCell(library, "NOR3B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B2");
        }
        try {
            _NOR3B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B3() {
        try {
            _NOR3B3 = new EdifCell(library, "NOR3B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B3");
        }
        try {
            _NOR3B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4() {
        try {
            _NOR4 = new EdifCell(library, "NOR4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4");
        }
        try {
            _NOR4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B1() {
        try {
            _NOR4B1 = new EdifCell(library, "NOR4B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B1");
        }
        try {
            _NOR4B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B2() {
        try {
            _NOR4B2 = new EdifCell(library, "NOR4B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B2");
        }
        try {
            _NOR4B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B3() {
        try {
            _NOR4B3 = new EdifCell(library, "NOR4B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B3");
        }
        try {
            _NOR4B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B4() {
        try {
            _NOR4B4 = new EdifCell(library, "NOR4B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B4");
        }
        try {
            _NOR4B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5() {
        try {
            _NOR5 = new EdifCell(library, "NOR5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5");
        }
        try {
            _NOR5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B1() {
        try {
            _NOR5B1 = new EdifCell(library, "NOR5B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B1");
        }
        try {
            _NOR5B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B2() {
        try {
            _NOR5B2 = new EdifCell(library, "NOR5B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B2");
        }
        try {
            _NOR5B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B3() {
        try {
            _NOR5B3 = new EdifCell(library, "NOR5B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B3");
        }
        try {
            _NOR5B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B4() {
        try {
            _NOR5B4 = new EdifCell(library, "NOR5B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B4");
        }
        try {
            _NOR5B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B5() {
        try {
            _NOR5B5 = new EdifCell(library, "NOR5B5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B5");
        }
        try {
            _NOR5B5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF() {
        try {
            _OBUF = new EdifCell(library, "OBUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF");
        }
        try {
            _OBUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_AGP() {
        try {
            _OBUF_AGP = new EdifCell(library, "OBUF_AGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_AGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_AGP");
        }
        try {
            _OBUF_AGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_AGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_CTT() {
        try {
            _OBUF_CTT = new EdifCell(library, "OBUF_CTT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_CTT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_CTT");
        }
        try {
            _OBUF_CTT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_CTT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_12() {
        try {
            _OBUF_F_12 = new EdifCell(library, "OBUF_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_12");
        }
        try {
            _OBUF_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_16() {
        try {
            _OBUF_F_16 = new EdifCell(library, "OBUF_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_16");
        }
        try {
            _OBUF_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_2() {
        try {
            _OBUF_F_2 = new EdifCell(library, "OBUF_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_2");
        }
        try {
            _OBUF_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_24() {
        try {
            _OBUF_F_24 = new EdifCell(library, "OBUF_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_24");
        }
        try {
            _OBUF_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_4() {
        try {
            _OBUF_F_4 = new EdifCell(library, "OBUF_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_4");
        }
        try {
            _OBUF_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_6() {
        try {
            _OBUF_F_6 = new EdifCell(library, "OBUF_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_6");
        }
        try {
            _OBUF_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_8() {
        try {
            _OBUF_F_8 = new EdifCell(library, "OBUF_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_8");
        }
        try {
            _OBUF_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTL() {
        try {
            _OBUF_GTL = new EdifCell(library, "OBUF_GTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTL");
        }
        try {
            _OBUF_GTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTL_DCI() {
        try {
            _OBUF_GTL_DCI = new EdifCell(library, "OBUF_GTL_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTL_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTL_DCI");
        }
        try {
            _OBUF_GTL_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTL_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTLP() {
        try {
            _OBUF_GTLP = new EdifCell(library, "OBUF_GTLP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTLP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTLP");
        }
        try {
            _OBUF_GTLP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTLP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTLP_DCI() {
        try {
            _OBUF_GTLP_DCI = new EdifCell(library, "OBUF_GTLP_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTLP_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTLP_DCI");
        }
        try {
            _OBUF_GTLP_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTLP_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I() {
        try {
            _OBUF_HSTL_I = new EdifCell(library, "OBUF_HSTL_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I");
        }
        try {
            _OBUF_HSTL_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_18() {
        try {
            _OBUF_HSTL_I_18 = new EdifCell(library, "OBUF_HSTL_I_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_18");
        }
        try {
            _OBUF_HSTL_I_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_DCI() {
        try {
            _OBUF_HSTL_I_DCI = new EdifCell(library, "OBUF_HSTL_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_DCI");
        }
        try {
            _OBUF_HSTL_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_DCI_18() {
        try {
            _OBUF_HSTL_I_DCI_18 = new EdifCell(library, "OBUF_HSTL_I_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_DCI_18");
        }
        try {
            _OBUF_HSTL_I_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II() {
        try {
            _OBUF_HSTL_II = new EdifCell(library, "OBUF_HSTL_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II");
        }
        try {
            _OBUF_HSTL_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_18() {
        try {
            _OBUF_HSTL_II_18 = new EdifCell(library, "OBUF_HSTL_II_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_18");
        }
        try {
            _OBUF_HSTL_II_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_DCI() {
        try {
            _OBUF_HSTL_II_DCI = new EdifCell(library, "OBUF_HSTL_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_DCI");
        }
        try {
            _OBUF_HSTL_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_DCI_18() {
        try {
            _OBUF_HSTL_II_DCI_18 = new EdifCell(library, "OBUF_HSTL_II_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_DCI_18");
        }
        try {
            _OBUF_HSTL_II_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III() {
        try {
            _OBUF_HSTL_III = new EdifCell(library, "OBUF_HSTL_III", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III");
        }
        try {
            _OBUF_HSTL_III.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_18() {
        try {
            _OBUF_HSTL_III_18 = new EdifCell(library, "OBUF_HSTL_III_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_18");
        }
        try {
            _OBUF_HSTL_III_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_DCI() {
        try {
            _OBUF_HSTL_III_DCI = new EdifCell(library, "OBUF_HSTL_III_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_DCI");
        }
        try {
            _OBUF_HSTL_III_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_DCI_18() {
        try {
            _OBUF_HSTL_III_DCI_18 = new EdifCell(library, "OBUF_HSTL_III_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_DCI_18");
        }
        try {
            _OBUF_HSTL_III_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV() {
        try {
            _OBUF_HSTL_IV = new EdifCell(library, "OBUF_HSTL_IV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV");
        }
        try {
            _OBUF_HSTL_IV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_18() {
        try {
            _OBUF_HSTL_IV_18 = new EdifCell(library, "OBUF_HSTL_IV_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_18");
        }
        try {
            _OBUF_HSTL_IV_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_DCI() {
        try {
            _OBUF_HSTL_IV_DCI = new EdifCell(library, "OBUF_HSTL_IV_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_DCI");
        }
        try {
            _OBUF_HSTL_IV_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_DCI_18() {
        try {
            _OBUF_HSTL_IV_DCI_18 = new EdifCell(library, "OBUF_HSTL_IV_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_DCI_18");
        }
        try {
            _OBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12() {
        try {
            _OBUF_LVCMOS12 = new EdifCell(library, "OBUF_LVCMOS12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12");
        }
        try {
            _OBUF_LVCMOS12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_2() {
        try {
            _OBUF_LVCMOS12_F_2 = new EdifCell(library, "OBUF_LVCMOS12_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_2");
        }
        try {
            _OBUF_LVCMOS12_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_4() {
        try {
            _OBUF_LVCMOS12_F_4 = new EdifCell(library, "OBUF_LVCMOS12_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_4");
        }
        try {
            _OBUF_LVCMOS12_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_6() {
        try {
            _OBUF_LVCMOS12_F_6 = new EdifCell(library, "OBUF_LVCMOS12_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_6");
        }
        try {
            _OBUF_LVCMOS12_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_8() {
        try {
            _OBUF_LVCMOS12_F_8 = new EdifCell(library, "OBUF_LVCMOS12_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_8");
        }
        try {
            _OBUF_LVCMOS12_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_2() {
        try {
            _OBUF_LVCMOS12_S_2 = new EdifCell(library, "OBUF_LVCMOS12_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_2");
        }
        try {
            _OBUF_LVCMOS12_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_4() {
        try {
            _OBUF_LVCMOS12_S_4 = new EdifCell(library, "OBUF_LVCMOS12_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_4");
        }
        try {
            _OBUF_LVCMOS12_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_6() {
        try {
            _OBUF_LVCMOS12_S_6 = new EdifCell(library, "OBUF_LVCMOS12_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_6");
        }
        try {
            _OBUF_LVCMOS12_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_8() {
        try {
            _OBUF_LVCMOS12_S_8 = new EdifCell(library, "OBUF_LVCMOS12_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_8");
        }
        try {
            _OBUF_LVCMOS12_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15() {
        try {
            _OBUF_LVCMOS15 = new EdifCell(library, "OBUF_LVCMOS15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15");
        }
        try {
            _OBUF_LVCMOS15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_12() {
        try {
            _OBUF_LVCMOS15_F_12 = new EdifCell(library, "OBUF_LVCMOS15_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_12");
        }
        try {
            _OBUF_LVCMOS15_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_16() {
        try {
            _OBUF_LVCMOS15_F_16 = new EdifCell(library, "OBUF_LVCMOS15_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_16");
        }
        try {
            _OBUF_LVCMOS15_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_2() {
        try {
            _OBUF_LVCMOS15_F_2 = new EdifCell(library, "OBUF_LVCMOS15_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_2");
        }
        try {
            _OBUF_LVCMOS15_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_4() {
        try {
            _OBUF_LVCMOS15_F_4 = new EdifCell(library, "OBUF_LVCMOS15_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_4");
        }
        try {
            _OBUF_LVCMOS15_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_6() {
        try {
            _OBUF_LVCMOS15_F_6 = new EdifCell(library, "OBUF_LVCMOS15_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_6");
        }
        try {
            _OBUF_LVCMOS15_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_8() {
        try {
            _OBUF_LVCMOS15_F_8 = new EdifCell(library, "OBUF_LVCMOS15_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_8");
        }
        try {
            _OBUF_LVCMOS15_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_12() {
        try {
            _OBUF_LVCMOS15_S_12 = new EdifCell(library, "OBUF_LVCMOS15_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_12");
        }
        try {
            _OBUF_LVCMOS15_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_16() {
        try {
            _OBUF_LVCMOS15_S_16 = new EdifCell(library, "OBUF_LVCMOS15_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_16");
        }
        try {
            _OBUF_LVCMOS15_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_2() {
        try {
            _OBUF_LVCMOS15_S_2 = new EdifCell(library, "OBUF_LVCMOS15_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_2");
        }
        try {
            _OBUF_LVCMOS15_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_4() {
        try {
            _OBUF_LVCMOS15_S_4 = new EdifCell(library, "OBUF_LVCMOS15_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_4");
        }
        try {
            _OBUF_LVCMOS15_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_6() {
        try {
            _OBUF_LVCMOS15_S_6 = new EdifCell(library, "OBUF_LVCMOS15_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_6");
        }
        try {
            _OBUF_LVCMOS15_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_8() {
        try {
            _OBUF_LVCMOS15_S_8 = new EdifCell(library, "OBUF_LVCMOS15_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_8");
        }
        try {
            _OBUF_LVCMOS15_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18() {
        try {
            _OBUF_LVCMOS18 = new EdifCell(library, "OBUF_LVCMOS18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18");
        }
        try {
            _OBUF_LVCMOS18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_12() {
        try {
            _OBUF_LVCMOS18_F_12 = new EdifCell(library, "OBUF_LVCMOS18_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_12");
        }
        try {
            _OBUF_LVCMOS18_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_16() {
        try {
            _OBUF_LVCMOS18_F_16 = new EdifCell(library, "OBUF_LVCMOS18_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_16");
        }
        try {
            _OBUF_LVCMOS18_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_2() {
        try {
            _OBUF_LVCMOS18_F_2 = new EdifCell(library, "OBUF_LVCMOS18_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_2");
        }
        try {
            _OBUF_LVCMOS18_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_4() {
        try {
            _OBUF_LVCMOS18_F_4 = new EdifCell(library, "OBUF_LVCMOS18_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_4");
        }
        try {
            _OBUF_LVCMOS18_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_6() {
        try {
            _OBUF_LVCMOS18_F_6 = new EdifCell(library, "OBUF_LVCMOS18_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_6");
        }
        try {
            _OBUF_LVCMOS18_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_8() {
        try {
            _OBUF_LVCMOS18_F_8 = new EdifCell(library, "OBUF_LVCMOS18_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_8");
        }
        try {
            _OBUF_LVCMOS18_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_12() {
        try {
            _OBUF_LVCMOS18_S_12 = new EdifCell(library, "OBUF_LVCMOS18_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_12");
        }
        try {
            _OBUF_LVCMOS18_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_16() {
        try {
            _OBUF_LVCMOS18_S_16 = new EdifCell(library, "OBUF_LVCMOS18_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_16");
        }
        try {
            _OBUF_LVCMOS18_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_2() {
        try {
            _OBUF_LVCMOS18_S_2 = new EdifCell(library, "OBUF_LVCMOS18_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_2");
        }
        try {
            _OBUF_LVCMOS18_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_4() {
        try {
            _OBUF_LVCMOS18_S_4 = new EdifCell(library, "OBUF_LVCMOS18_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_4");
        }
        try {
            _OBUF_LVCMOS18_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_6() {
        try {
            _OBUF_LVCMOS18_S_6 = new EdifCell(library, "OBUF_LVCMOS18_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_6");
        }
        try {
            _OBUF_LVCMOS18_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_8() {
        try {
            _OBUF_LVCMOS18_S_8 = new EdifCell(library, "OBUF_LVCMOS18_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_8");
        }
        try {
            _OBUF_LVCMOS18_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS2() {
        try {
            _OBUF_LVCMOS2 = new EdifCell(library, "OBUF_LVCMOS2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS2");
        }
        try {
            _OBUF_LVCMOS2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25() {
        try {
            _OBUF_LVCMOS25 = new EdifCell(library, "OBUF_LVCMOS25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25");
        }
        try {
            _OBUF_LVCMOS25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_12() {
        try {
            _OBUF_LVCMOS25_F_12 = new EdifCell(library, "OBUF_LVCMOS25_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_12");
        }
        try {
            _OBUF_LVCMOS25_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_16() {
        try {
            _OBUF_LVCMOS25_F_16 = new EdifCell(library, "OBUF_LVCMOS25_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_16");
        }
        try {
            _OBUF_LVCMOS25_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_2() {
        try {
            _OBUF_LVCMOS25_F_2 = new EdifCell(library, "OBUF_LVCMOS25_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_2");
        }
        try {
            _OBUF_LVCMOS25_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_24() {
        try {
            _OBUF_LVCMOS25_F_24 = new EdifCell(library, "OBUF_LVCMOS25_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_24");
        }
        try {
            _OBUF_LVCMOS25_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_4() {
        try {
            _OBUF_LVCMOS25_F_4 = new EdifCell(library, "OBUF_LVCMOS25_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_4");
        }
        try {
            _OBUF_LVCMOS25_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_6() {
        try {
            _OBUF_LVCMOS25_F_6 = new EdifCell(library, "OBUF_LVCMOS25_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_6");
        }
        try {
            _OBUF_LVCMOS25_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_8() {
        try {
            _OBUF_LVCMOS25_F_8 = new EdifCell(library, "OBUF_LVCMOS25_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_8");
        }
        try {
            _OBUF_LVCMOS25_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_12() {
        try {
            _OBUF_LVCMOS25_S_12 = new EdifCell(library, "OBUF_LVCMOS25_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_12");
        }
        try {
            _OBUF_LVCMOS25_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_16() {
        try {
            _OBUF_LVCMOS25_S_16 = new EdifCell(library, "OBUF_LVCMOS25_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_16");
        }
        try {
            _OBUF_LVCMOS25_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_2() {
        try {
            _OBUF_LVCMOS25_S_2 = new EdifCell(library, "OBUF_LVCMOS25_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_2");
        }
        try {
            _OBUF_LVCMOS25_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_24() {
        try {
            _OBUF_LVCMOS25_S_24 = new EdifCell(library, "OBUF_LVCMOS25_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_24");
        }
        try {
            _OBUF_LVCMOS25_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_4() {
        try {
            _OBUF_LVCMOS25_S_4 = new EdifCell(library, "OBUF_LVCMOS25_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_4");
        }
        try {
            _OBUF_LVCMOS25_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_6() {
        try {
            _OBUF_LVCMOS25_S_6 = new EdifCell(library, "OBUF_LVCMOS25_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_6");
        }
        try {
            _OBUF_LVCMOS25_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_8() {
        try {
            _OBUF_LVCMOS25_S_8 = new EdifCell(library, "OBUF_LVCMOS25_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_8");
        }
        try {
            _OBUF_LVCMOS25_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33() {
        try {
            _OBUF_LVCMOS33 = new EdifCell(library, "OBUF_LVCMOS33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33");
        }
        try {
            _OBUF_LVCMOS33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_12() {
        try {
            _OBUF_LVCMOS33_F_12 = new EdifCell(library, "OBUF_LVCMOS33_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_12");
        }
        try {
            _OBUF_LVCMOS33_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_16() {
        try {
            _OBUF_LVCMOS33_F_16 = new EdifCell(library, "OBUF_LVCMOS33_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_16");
        }
        try {
            _OBUF_LVCMOS33_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_2() {
        try {
            _OBUF_LVCMOS33_F_2 = new EdifCell(library, "OBUF_LVCMOS33_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_2");
        }
        try {
            _OBUF_LVCMOS33_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_24() {
        try {
            _OBUF_LVCMOS33_F_24 = new EdifCell(library, "OBUF_LVCMOS33_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_24");
        }
        try {
            _OBUF_LVCMOS33_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_4() {
        try {
            _OBUF_LVCMOS33_F_4 = new EdifCell(library, "OBUF_LVCMOS33_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_4");
        }
        try {
            _OBUF_LVCMOS33_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_6() {
        try {
            _OBUF_LVCMOS33_F_6 = new EdifCell(library, "OBUF_LVCMOS33_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_6");
        }
        try {
            _OBUF_LVCMOS33_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_8() {
        try {
            _OBUF_LVCMOS33_F_8 = new EdifCell(library, "OBUF_LVCMOS33_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_8");
        }
        try {
            _OBUF_LVCMOS33_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_12() {
        try {
            _OBUF_LVCMOS33_S_12 = new EdifCell(library, "OBUF_LVCMOS33_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_12");
        }
        try {
            _OBUF_LVCMOS33_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_16() {
        try {
            _OBUF_LVCMOS33_S_16 = new EdifCell(library, "OBUF_LVCMOS33_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_16");
        }
        try {
            _OBUF_LVCMOS33_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_2() {
        try {
            _OBUF_LVCMOS33_S_2 = new EdifCell(library, "OBUF_LVCMOS33_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_2");
        }
        try {
            _OBUF_LVCMOS33_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_24() {
        try {
            _OBUF_LVCMOS33_S_24 = new EdifCell(library, "OBUF_LVCMOS33_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_24");
        }
        try {
            _OBUF_LVCMOS33_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_4() {
        try {
            _OBUF_LVCMOS33_S_4 = new EdifCell(library, "OBUF_LVCMOS33_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_4");
        }
        try {
            _OBUF_LVCMOS33_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_6() {
        try {
            _OBUF_LVCMOS33_S_6 = new EdifCell(library, "OBUF_LVCMOS33_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_6");
        }
        try {
            _OBUF_LVCMOS33_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_8() {
        try {
            _OBUF_LVCMOS33_S_8 = new EdifCell(library, "OBUF_LVCMOS33_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_8");
        }
        try {
            _OBUF_LVCMOS33_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_15() {
        try {
            _OBUF_LVDCI_15 = new EdifCell(library, "OBUF_LVDCI_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_15");
        }
        try {
            _OBUF_LVDCI_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_18() {
        try {
            _OBUF_LVDCI_18 = new EdifCell(library, "OBUF_LVDCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_18");
        }
        try {
            _OBUF_LVDCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_25() {
        try {
            _OBUF_LVDCI_25 = new EdifCell(library, "OBUF_LVDCI_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_25");
        }
        try {
            _OBUF_LVDCI_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_33() {
        try {
            _OBUF_LVDCI_33 = new EdifCell(library, "OBUF_LVDCI_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_33");
        }
        try {
            _OBUF_LVDCI_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_15() {
        try {
            _OBUF_LVDCI_DV2_15 = new EdifCell(library, "OBUF_LVDCI_DV2_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_15");
        }
        try {
            _OBUF_LVDCI_DV2_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_18() {
        try {
            _OBUF_LVDCI_DV2_18 = new EdifCell(library, "OBUF_LVDCI_DV2_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_18");
        }
        try {
            _OBUF_LVDCI_DV2_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_25() {
        try {
            _OBUF_LVDCI_DV2_25 = new EdifCell(library, "OBUF_LVDCI_DV2_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_25");
        }
        try {
            _OBUF_LVDCI_DV2_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_33() {
        try {
            _OBUF_LVDCI_DV2_33 = new EdifCell(library, "OBUF_LVDCI_DV2_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_33");
        }
        try {
            _OBUF_LVDCI_DV2_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDS() {
        try {
            _OBUF_LVDS = new EdifCell(library, "OBUF_LVDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDS");
        }
        try {
            _OBUF_LVDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVPECL() {
        try {
            _OBUF_LVPECL = new EdifCell(library, "OBUF_LVPECL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVPECL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVPECL");
        }
        try {
            _OBUF_LVPECL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVPECL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL() {
        try {
            _OBUF_LVTTL = new EdifCell(library, "OBUF_LVTTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL");
        }
        try {
            _OBUF_LVTTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_12() {
        try {
            _OBUF_LVTTL_F_12 = new EdifCell(library, "OBUF_LVTTL_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_12");
        }
        try {
            _OBUF_LVTTL_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_16() {
        try {
            _OBUF_LVTTL_F_16 = new EdifCell(library, "OBUF_LVTTL_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_16");
        }
        try {
            _OBUF_LVTTL_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_2() {
        try {
            _OBUF_LVTTL_F_2 = new EdifCell(library, "OBUF_LVTTL_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_2");
        }
        try {
            _OBUF_LVTTL_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_24() {
        try {
            _OBUF_LVTTL_F_24 = new EdifCell(library, "OBUF_LVTTL_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_24");
        }
        try {
            _OBUF_LVTTL_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_4() {
        try {
            _OBUF_LVTTL_F_4 = new EdifCell(library, "OBUF_LVTTL_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_4");
        }
        try {
            _OBUF_LVTTL_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_6() {
        try {
            _OBUF_LVTTL_F_6 = new EdifCell(library, "OBUF_LVTTL_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_6");
        }
        try {
            _OBUF_LVTTL_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_8() {
        try {
            _OBUF_LVTTL_F_8 = new EdifCell(library, "OBUF_LVTTL_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_8");
        }
        try {
            _OBUF_LVTTL_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_12() {
        try {
            _OBUF_LVTTL_S_12 = new EdifCell(library, "OBUF_LVTTL_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_12");
        }
        try {
            _OBUF_LVTTL_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_16() {
        try {
            _OBUF_LVTTL_S_16 = new EdifCell(library, "OBUF_LVTTL_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_16");
        }
        try {
            _OBUF_LVTTL_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_2() {
        try {
            _OBUF_LVTTL_S_2 = new EdifCell(library, "OBUF_LVTTL_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_2");
        }
        try {
            _OBUF_LVTTL_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_24() {
        try {
            _OBUF_LVTTL_S_24 = new EdifCell(library, "OBUF_LVTTL_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_24");
        }
        try {
            _OBUF_LVTTL_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_4() {
        try {
            _OBUF_LVTTL_S_4 = new EdifCell(library, "OBUF_LVTTL_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_4");
        }
        try {
            _OBUF_LVTTL_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_6() {
        try {
            _OBUF_LVTTL_S_6 = new EdifCell(library, "OBUF_LVTTL_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_6");
        }
        try {
            _OBUF_LVTTL_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_8() {
        try {
            _OBUF_LVTTL_S_8 = new EdifCell(library, "OBUF_LVTTL_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_8");
        }
        try {
            _OBUF_LVTTL_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI33_3() {
        try {
            _OBUF_PCI33_3 = new EdifCell(library, "OBUF_PCI33_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI33_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI33_3");
        }
        try {
            _OBUF_PCI33_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI33_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI33_5() {
        try {
            _OBUF_PCI33_5 = new EdifCell(library, "OBUF_PCI33_5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI33_5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI33_5");
        }
        try {
            _OBUF_PCI33_5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI33_5.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI66_3() {
        try {
            _OBUF_PCI66_3 = new EdifCell(library, "OBUF_PCI66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI66_3");
        }
        try {
            _OBUF_PCI66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCIX() {
        try {
            _OBUF_PCIX = new EdifCell(library, "OBUF_PCIX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCIX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCIX");
        }
        try {
            _OBUF_PCIX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCIX.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCIX66_3() {
        try {
            _OBUF_PCIX66_3 = new EdifCell(library, "OBUF_PCIX66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCIX66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCIX66_3");
        }
        try {
            _OBUF_PCIX66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCIX66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_12() {
        try {
            _OBUF_S_12 = new EdifCell(library, "OBUF_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_12");
        }
        try {
            _OBUF_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_16() {
        try {
            _OBUF_S_16 = new EdifCell(library, "OBUF_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_16");
        }
        try {
            _OBUF_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_2() {
        try {
            _OBUF_S_2 = new EdifCell(library, "OBUF_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_2");
        }
        try {
            _OBUF_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_24() {
        try {
            _OBUF_S_24 = new EdifCell(library, "OBUF_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_24");
        }
        try {
            _OBUF_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_4() {
        try {
            _OBUF_S_4 = new EdifCell(library, "OBUF_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_4");
        }
        try {
            _OBUF_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_6() {
        try {
            _OBUF_S_6 = new EdifCell(library, "OBUF_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_6");
        }
        try {
            _OBUF_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_8() {
        try {
            _OBUF_S_8 = new EdifCell(library, "OBUF_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_8");
        }
        try {
            _OBUF_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_I() {
        try {
            _OBUF_SSTL18_I = new EdifCell(library, "OBUF_SSTL18_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_I");
        }
        try {
            _OBUF_SSTL18_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_I_DCI() {
        try {
            _OBUF_SSTL18_I_DCI = new EdifCell(library, "OBUF_SSTL18_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_I_DCI");
        }
        try {
            _OBUF_SSTL18_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_II() {
        try {
            _OBUF_SSTL18_II = new EdifCell(library, "OBUF_SSTL18_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_II");
        }
        try {
            _OBUF_SSTL18_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_II_DCI() {
        try {
            _OBUF_SSTL18_II_DCI = new EdifCell(library, "OBUF_SSTL18_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_II_DCI");
        }
        try {
            _OBUF_SSTL18_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_I() {
        try {
            _OBUF_SSTL2_I = new EdifCell(library, "OBUF_SSTL2_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_I");
        }
        try {
            _OBUF_SSTL2_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_I_DCI() {
        try {
            _OBUF_SSTL2_I_DCI = new EdifCell(library, "OBUF_SSTL2_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_I_DCI");
        }
        try {
            _OBUF_SSTL2_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_II() {
        try {
            _OBUF_SSTL2_II = new EdifCell(library, "OBUF_SSTL2_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_II");
        }
        try {
            _OBUF_SSTL2_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_II_DCI() {
        try {
            _OBUF_SSTL2_II_DCI = new EdifCell(library, "OBUF_SSTL2_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_II_DCI");
        }
        try {
            _OBUF_SSTL2_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_I() {
        try {
            _OBUF_SSTL3_I = new EdifCell(library, "OBUF_SSTL3_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_I");
        }
        try {
            _OBUF_SSTL3_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_I_DCI() {
        try {
            _OBUF_SSTL3_I_DCI = new EdifCell(library, "OBUF_SSTL3_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_I_DCI");
        }
        try {
            _OBUF_SSTL3_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_II() {
        try {
            _OBUF_SSTL3_II = new EdifCell(library, "OBUF_SSTL3_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_II");
        }
        try {
            _OBUF_SSTL3_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_II_DCI() {
        try {
            _OBUF_SSTL3_II_DCI = new EdifCell(library, "OBUF_SSTL3_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_II_DCI");
        }
        try {
            _OBUF_SSTL3_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS() {
        try {
            _OBUFDS = new EdifCell(library, "OBUFDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS");
        }
        try {
            _OBUFDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_BLVDS_25() {
        try {
            _OBUFDS_BLVDS_25 = new EdifCell(library, "OBUFDS_BLVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_BLVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_BLVDS_25");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LDT_25() {
        try {
            _OBUFDS_LDT_25 = new EdifCell(library, "OBUFDS_LDT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LDT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LDT_25");
        }
        try {
            _OBUFDS_LDT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LDT_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LDT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDS_25() {
        try {
            _OBUFDS_LVDS_25 = new EdifCell(library, "OBUFDS_LVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDS_25");
        }
        try {
            _OBUFDS_LVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDS_33() {
        try {
            _OBUFDS_LVDS_33 = new EdifCell(library, "OBUFDS_LVDS_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDS_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDS_33");
        }
        try {
            _OBUFDS_LVDS_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDSEXT_25() {
        try {
            _OBUFDS_LVDSEXT_25 = new EdifCell(library, "OBUFDS_LVDSEXT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDSEXT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDSEXT_25");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDSEXT_33() {
        try {
            _OBUFDS_LVDSEXT_33 = new EdifCell(library, "OBUFDS_LVDSEXT_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDSEXT_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDSEXT_33");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVPECL_25() {
        try {
            _OBUFDS_LVPECL_25 = new EdifCell(library, "OBUFDS_LVPECL_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVPECL_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVPECL_25");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVPECL_33() {
        try {
            _OBUFDS_LVPECL_33 = new EdifCell(library, "OBUFDS_LVPECL_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVPECL_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVPECL_33");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_ULVDS_25() {
        try {
            _OBUFDS_ULVDS_25 = new EdifCell(library, "OBUFDS_ULVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_ULVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_ULVDS_25");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFE() {
        try {
            _OBUFE = new EdifCell(library, "OBUFE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFE");
        }
        try {
            _OBUFE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFE.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFE.addPort(E_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT() {
        try {
            _OBUFT = new EdifCell(library, "OBUFT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT");
        }
        try {
            _OBUFT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_AGP() {
        try {
            _OBUFT_AGP = new EdifCell(library, "OBUFT_AGP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_AGP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_AGP");
        }
        try {
            _OBUFT_AGP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_AGP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_AGP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_CTT() {
        try {
            _OBUFT_CTT = new EdifCell(library, "OBUFT_CTT", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_CTT");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_CTT");
        }
        try {
            _OBUFT_CTT.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_CTT.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_CTT.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_12() {
        try {
            _OBUFT_F_12 = new EdifCell(library, "OBUFT_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_12");
        }
        try {
            _OBUFT_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_16() {
        try {
            _OBUFT_F_16 = new EdifCell(library, "OBUFT_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_16");
        }
        try {
            _OBUFT_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_2() {
        try {
            _OBUFT_F_2 = new EdifCell(library, "OBUFT_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_2");
        }
        try {
            _OBUFT_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_24() {
        try {
            _OBUFT_F_24 = new EdifCell(library, "OBUFT_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_24");
        }
        try {
            _OBUFT_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_4() {
        try {
            _OBUFT_F_4 = new EdifCell(library, "OBUFT_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_4");
        }
        try {
            _OBUFT_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_6() {
        try {
            _OBUFT_F_6 = new EdifCell(library, "OBUFT_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_6");
        }
        try {
            _OBUFT_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_8() {
        try {
            _OBUFT_F_8 = new EdifCell(library, "OBUFT_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_8");
        }
        try {
            _OBUFT_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTL() {
        try {
            _OBUFT_GTL = new EdifCell(library, "OBUFT_GTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTL");
        }
        try {
            _OBUFT_GTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTL_DCI() {
        try {
            _OBUFT_GTL_DCI = new EdifCell(library, "OBUFT_GTL_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTL_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTL_DCI");
        }
        try {
            _OBUFT_GTL_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTLP() {
        try {
            _OBUFT_GTLP = new EdifCell(library, "OBUFT_GTLP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTLP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTLP");
        }
        try {
            _OBUFT_GTLP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTLP_DCI() {
        try {
            _OBUFT_GTLP_DCI = new EdifCell(library, "OBUFT_GTLP_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTLP_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTLP_DCI");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I() {
        try {
            _OBUFT_HSTL_I = new EdifCell(library, "OBUFT_HSTL_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I");
        }
        try {
            _OBUFT_HSTL_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_18() {
        try {
            _OBUFT_HSTL_I_18 = new EdifCell(library, "OBUFT_HSTL_I_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_18");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_DCI() {
        try {
            _OBUFT_HSTL_I_DCI = new EdifCell(library, "OBUFT_HSTL_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_DCI");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_DCI_18() {
        try {
            _OBUFT_HSTL_I_DCI_18 = new EdifCell(library, "OBUFT_HSTL_I_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_DCI_18");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II() {
        try {
            _OBUFT_HSTL_II = new EdifCell(library, "OBUFT_HSTL_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II");
        }
        try {
            _OBUFT_HSTL_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_18() {
        try {
            _OBUFT_HSTL_II_18 = new EdifCell(library, "OBUFT_HSTL_II_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_18");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_DCI() {
        try {
            _OBUFT_HSTL_II_DCI = new EdifCell(library, "OBUFT_HSTL_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_DCI");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_DCI_18() {
        try {
            _OBUFT_HSTL_II_DCI_18 = new EdifCell(library, "OBUFT_HSTL_II_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_DCI_18");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III() {
        try {
            _OBUFT_HSTL_III = new EdifCell(library, "OBUFT_HSTL_III", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III");
        }
        try {
            _OBUFT_HSTL_III.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_18() {
        try {
            _OBUFT_HSTL_III_18 = new EdifCell(library, "OBUFT_HSTL_III_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_18");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_DCI() {
        try {
            _OBUFT_HSTL_III_DCI = new EdifCell(library, "OBUFT_HSTL_III_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_DCI");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_DCI_18() {
        try {
            _OBUFT_HSTL_III_DCI_18 = new EdifCell(library, "OBUFT_HSTL_III_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_DCI_18");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV() {
        try {
            _OBUFT_HSTL_IV = new EdifCell(library, "OBUFT_HSTL_IV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV");
        }
        try {
            _OBUFT_HSTL_IV.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_18() {
        try {
            _OBUFT_HSTL_IV_18 = new EdifCell(library, "OBUFT_HSTL_IV_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_18");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_DCI() {
        try {
            _OBUFT_HSTL_IV_DCI = new EdifCell(library, "OBUFT_HSTL_IV_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_DCI");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_DCI_18() {
        try {
            _OBUFT_HSTL_IV_DCI_18 = new EdifCell(library, "OBUFT_HSTL_IV_DCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_DCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_DCI_18");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12() {
        try {
            _OBUFT_LVCMOS12 = new EdifCell(library, "OBUFT_LVCMOS12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12");
        }
        try {
            _OBUFT_LVCMOS12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_2() {
        try {
            _OBUFT_LVCMOS12_F_2 = new EdifCell(library, "OBUFT_LVCMOS12_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_2");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_4() {
        try {
            _OBUFT_LVCMOS12_F_4 = new EdifCell(library, "OBUFT_LVCMOS12_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_4");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_6() {
        try {
            _OBUFT_LVCMOS12_F_6 = new EdifCell(library, "OBUFT_LVCMOS12_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_6");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_8() {
        try {
            _OBUFT_LVCMOS12_F_8 = new EdifCell(library, "OBUFT_LVCMOS12_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_8");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_2() {
        try {
            _OBUFT_LVCMOS12_S_2 = new EdifCell(library, "OBUFT_LVCMOS12_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_2");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_4() {
        try {
            _OBUFT_LVCMOS12_S_4 = new EdifCell(library, "OBUFT_LVCMOS12_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_4");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_6() {
        try {
            _OBUFT_LVCMOS12_S_6 = new EdifCell(library, "OBUFT_LVCMOS12_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_6");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_8() {
        try {
            _OBUFT_LVCMOS12_S_8 = new EdifCell(library, "OBUFT_LVCMOS12_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_8");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15() {
        try {
            _OBUFT_LVCMOS15 = new EdifCell(library, "OBUFT_LVCMOS15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15");
        }
        try {
            _OBUFT_LVCMOS15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_12() {
        try {
            _OBUFT_LVCMOS15_F_12 = new EdifCell(library, "OBUFT_LVCMOS15_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_12");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_16() {
        try {
            _OBUFT_LVCMOS15_F_16 = new EdifCell(library, "OBUFT_LVCMOS15_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_16");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_2() {
        try {
            _OBUFT_LVCMOS15_F_2 = new EdifCell(library, "OBUFT_LVCMOS15_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_2");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_4() {
        try {
            _OBUFT_LVCMOS15_F_4 = new EdifCell(library, "OBUFT_LVCMOS15_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_4");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_6() {
        try {
            _OBUFT_LVCMOS15_F_6 = new EdifCell(library, "OBUFT_LVCMOS15_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_6");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_8() {
        try {
            _OBUFT_LVCMOS15_F_8 = new EdifCell(library, "OBUFT_LVCMOS15_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_8");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_12() {
        try {
            _OBUFT_LVCMOS15_S_12 = new EdifCell(library, "OBUFT_LVCMOS15_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_12");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_16() {
        try {
            _OBUFT_LVCMOS15_S_16 = new EdifCell(library, "OBUFT_LVCMOS15_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_16");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_2() {
        try {
            _OBUFT_LVCMOS15_S_2 = new EdifCell(library, "OBUFT_LVCMOS15_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_2");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_4() {
        try {
            _OBUFT_LVCMOS15_S_4 = new EdifCell(library, "OBUFT_LVCMOS15_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_4");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_6() {
        try {
            _OBUFT_LVCMOS15_S_6 = new EdifCell(library, "OBUFT_LVCMOS15_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_6");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_8() {
        try {
            _OBUFT_LVCMOS15_S_8 = new EdifCell(library, "OBUFT_LVCMOS15_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_8");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18() {
        try {
            _OBUFT_LVCMOS18 = new EdifCell(library, "OBUFT_LVCMOS18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18");
        }
        try {
            _OBUFT_LVCMOS18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_12() {
        try {
            _OBUFT_LVCMOS18_F_12 = new EdifCell(library, "OBUFT_LVCMOS18_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_12");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_16() {
        try {
            _OBUFT_LVCMOS18_F_16 = new EdifCell(library, "OBUFT_LVCMOS18_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_16");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_2() {
        try {
            _OBUFT_LVCMOS18_F_2 = new EdifCell(library, "OBUFT_LVCMOS18_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_2");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_4() {
        try {
            _OBUFT_LVCMOS18_F_4 = new EdifCell(library, "OBUFT_LVCMOS18_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_4");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_6() {
        try {
            _OBUFT_LVCMOS18_F_6 = new EdifCell(library, "OBUFT_LVCMOS18_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_6");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_8() {
        try {
            _OBUFT_LVCMOS18_F_8 = new EdifCell(library, "OBUFT_LVCMOS18_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_8");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_12() {
        try {
            _OBUFT_LVCMOS18_S_12 = new EdifCell(library, "OBUFT_LVCMOS18_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_12");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_16() {
        try {
            _OBUFT_LVCMOS18_S_16 = new EdifCell(library, "OBUFT_LVCMOS18_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_16");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_2() {
        try {
            _OBUFT_LVCMOS18_S_2 = new EdifCell(library, "OBUFT_LVCMOS18_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_2");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_4() {
        try {
            _OBUFT_LVCMOS18_S_4 = new EdifCell(library, "OBUFT_LVCMOS18_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_4");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_6() {
        try {
            _OBUFT_LVCMOS18_S_6 = new EdifCell(library, "OBUFT_LVCMOS18_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_6");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_8() {
        try {
            _OBUFT_LVCMOS18_S_8 = new EdifCell(library, "OBUFT_LVCMOS18_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_8");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS2() {
        try {
            _OBUFT_LVCMOS2 = new EdifCell(library, "OBUFT_LVCMOS2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS2");
        }
        try {
            _OBUFT_LVCMOS2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25() {
        try {
            _OBUFT_LVCMOS25 = new EdifCell(library, "OBUFT_LVCMOS25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25");
        }
        try {
            _OBUFT_LVCMOS25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_12() {
        try {
            _OBUFT_LVCMOS25_F_12 = new EdifCell(library, "OBUFT_LVCMOS25_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_12");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_16() {
        try {
            _OBUFT_LVCMOS25_F_16 = new EdifCell(library, "OBUFT_LVCMOS25_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_16");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_2() {
        try {
            _OBUFT_LVCMOS25_F_2 = new EdifCell(library, "OBUFT_LVCMOS25_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_2");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_24() {
        try {
            _OBUFT_LVCMOS25_F_24 = new EdifCell(library, "OBUFT_LVCMOS25_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_24");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_4() {
        try {
            _OBUFT_LVCMOS25_F_4 = new EdifCell(library, "OBUFT_LVCMOS25_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_4");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_6() {
        try {
            _OBUFT_LVCMOS25_F_6 = new EdifCell(library, "OBUFT_LVCMOS25_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_6");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_8() {
        try {
            _OBUFT_LVCMOS25_F_8 = new EdifCell(library, "OBUFT_LVCMOS25_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_8");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_12() {
        try {
            _OBUFT_LVCMOS25_S_12 = new EdifCell(library, "OBUFT_LVCMOS25_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_12");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_16() {
        try {
            _OBUFT_LVCMOS25_S_16 = new EdifCell(library, "OBUFT_LVCMOS25_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_16");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_2() {
        try {
            _OBUFT_LVCMOS25_S_2 = new EdifCell(library, "OBUFT_LVCMOS25_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_2");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_24() {
        try {
            _OBUFT_LVCMOS25_S_24 = new EdifCell(library, "OBUFT_LVCMOS25_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_24");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_4() {
        try {
            _OBUFT_LVCMOS25_S_4 = new EdifCell(library, "OBUFT_LVCMOS25_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_4");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_6() {
        try {
            _OBUFT_LVCMOS25_S_6 = new EdifCell(library, "OBUFT_LVCMOS25_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_6");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_8() {
        try {
            _OBUFT_LVCMOS25_S_8 = new EdifCell(library, "OBUFT_LVCMOS25_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_8");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33() {
        try {
            _OBUFT_LVCMOS33 = new EdifCell(library, "OBUFT_LVCMOS33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33");
        }
        try {
            _OBUFT_LVCMOS33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_12() {
        try {
            _OBUFT_LVCMOS33_F_12 = new EdifCell(library, "OBUFT_LVCMOS33_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_12");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_16() {
        try {
            _OBUFT_LVCMOS33_F_16 = new EdifCell(library, "OBUFT_LVCMOS33_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_16");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_2() {
        try {
            _OBUFT_LVCMOS33_F_2 = new EdifCell(library, "OBUFT_LVCMOS33_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_2");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_24() {
        try {
            _OBUFT_LVCMOS33_F_24 = new EdifCell(library, "OBUFT_LVCMOS33_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_24");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_4() {
        try {
            _OBUFT_LVCMOS33_F_4 = new EdifCell(library, "OBUFT_LVCMOS33_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_4");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_6() {
        try {
            _OBUFT_LVCMOS33_F_6 = new EdifCell(library, "OBUFT_LVCMOS33_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_6");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_8() {
        try {
            _OBUFT_LVCMOS33_F_8 = new EdifCell(library, "OBUFT_LVCMOS33_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_8");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_12() {
        try {
            _OBUFT_LVCMOS33_S_12 = new EdifCell(library, "OBUFT_LVCMOS33_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_12");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_16() {
        try {
            _OBUFT_LVCMOS33_S_16 = new EdifCell(library, "OBUFT_LVCMOS33_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_16");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_2() {
        try {
            _OBUFT_LVCMOS33_S_2 = new EdifCell(library, "OBUFT_LVCMOS33_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_2");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_24() {
        try {
            _OBUFT_LVCMOS33_S_24 = new EdifCell(library, "OBUFT_LVCMOS33_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_24");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_4() {
        try {
            _OBUFT_LVCMOS33_S_4 = new EdifCell(library, "OBUFT_LVCMOS33_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_4");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_6() {
        try {
            _OBUFT_LVCMOS33_S_6 = new EdifCell(library, "OBUFT_LVCMOS33_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_6");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_8() {
        try {
            _OBUFT_LVCMOS33_S_8 = new EdifCell(library, "OBUFT_LVCMOS33_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_8");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_15() {
        try {
            _OBUFT_LVDCI_15 = new EdifCell(library, "OBUFT_LVDCI_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_15");
        }
        try {
            _OBUFT_LVDCI_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_18() {
        try {
            _OBUFT_LVDCI_18 = new EdifCell(library, "OBUFT_LVDCI_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_18");
        }
        try {
            _OBUFT_LVDCI_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_25() {
        try {
            _OBUFT_LVDCI_25 = new EdifCell(library, "OBUFT_LVDCI_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_25");
        }
        try {
            _OBUFT_LVDCI_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_33() {
        try {
            _OBUFT_LVDCI_33 = new EdifCell(library, "OBUFT_LVDCI_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_33");
        }
        try {
            _OBUFT_LVDCI_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_15() {
        try {
            _OBUFT_LVDCI_DV2_15 = new EdifCell(library, "OBUFT_LVDCI_DV2_15", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_15");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_15");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_18() {
        try {
            _OBUFT_LVDCI_DV2_18 = new EdifCell(library, "OBUFT_LVDCI_DV2_18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_18");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_25() {
        try {
            _OBUFT_LVDCI_DV2_25 = new EdifCell(library, "OBUFT_LVDCI_DV2_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_25");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_33() {
        try {
            _OBUFT_LVDCI_DV2_33 = new EdifCell(library, "OBUFT_LVDCI_DV2_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_33");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDS() {
        try {
            _OBUFT_LVDS = new EdifCell(library, "OBUFT_LVDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDS");
        }
        try {
            _OBUFT_LVDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDS.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVPECL() {
        try {
            _OBUFT_LVPECL = new EdifCell(library, "OBUFT_LVPECL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVPECL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVPECL");
        }
        try {
            _OBUFT_LVPECL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVPECL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVPECL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL() {
        try {
            _OBUFT_LVTTL = new EdifCell(library, "OBUFT_LVTTL", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL");
        }
        try {
            _OBUFT_LVTTL.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_12() {
        try {
            _OBUFT_LVTTL_F_12 = new EdifCell(library, "OBUFT_LVTTL_F_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_12");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_16() {
        try {
            _OBUFT_LVTTL_F_16 = new EdifCell(library, "OBUFT_LVTTL_F_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_16");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_2() {
        try {
            _OBUFT_LVTTL_F_2 = new EdifCell(library, "OBUFT_LVTTL_F_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_2");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_24() {
        try {
            _OBUFT_LVTTL_F_24 = new EdifCell(library, "OBUFT_LVTTL_F_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_24");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_4() {
        try {
            _OBUFT_LVTTL_F_4 = new EdifCell(library, "OBUFT_LVTTL_F_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_4");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_6() {
        try {
            _OBUFT_LVTTL_F_6 = new EdifCell(library, "OBUFT_LVTTL_F_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_6");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_8() {
        try {
            _OBUFT_LVTTL_F_8 = new EdifCell(library, "OBUFT_LVTTL_F_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_8");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_12() {
        try {
            _OBUFT_LVTTL_S_12 = new EdifCell(library, "OBUFT_LVTTL_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_12");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_16() {
        try {
            _OBUFT_LVTTL_S_16 = new EdifCell(library, "OBUFT_LVTTL_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_16");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_2() {
        try {
            _OBUFT_LVTTL_S_2 = new EdifCell(library, "OBUFT_LVTTL_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_2");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_24() {
        try {
            _OBUFT_LVTTL_S_24 = new EdifCell(library, "OBUFT_LVTTL_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_24");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_4() {
        try {
            _OBUFT_LVTTL_S_4 = new EdifCell(library, "OBUFT_LVTTL_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_4");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_6() {
        try {
            _OBUFT_LVTTL_S_6 = new EdifCell(library, "OBUFT_LVTTL_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_6");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_8() {
        try {
            _OBUFT_LVTTL_S_8 = new EdifCell(library, "OBUFT_LVTTL_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_8");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI33_3() {
        try {
            _OBUFT_PCI33_3 = new EdifCell(library, "OBUFT_PCI33_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI33_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI33_3");
        }
        try {
            _OBUFT_PCI33_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI33_5() {
        try {
            _OBUFT_PCI33_5 = new EdifCell(library, "OBUFT_PCI33_5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI33_5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI33_5");
        }
        try {
            _OBUFT_PCI33_5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_5.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_5.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI66_3() {
        try {
            _OBUFT_PCI66_3 = new EdifCell(library, "OBUFT_PCI66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI66_3");
        }
        try {
            _OBUFT_PCI66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI66_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCIX() {
        try {
            _OBUFT_PCIX = new EdifCell(library, "OBUFT_PCIX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCIX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCIX");
        }
        try {
            _OBUFT_PCIX.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCIX66_3() {
        try {
            _OBUFT_PCIX66_3 = new EdifCell(library, "OBUFT_PCIX66_3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCIX66_3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCIX66_3");
        }
        try {
            _OBUFT_PCIX66_3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX66_3.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX66_3.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_12() {
        try {
            _OBUFT_S_12 = new EdifCell(library, "OBUFT_S_12", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_12");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_12");
        }
        try {
            _OBUFT_S_12.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_12.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_12.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_16() {
        try {
            _OBUFT_S_16 = new EdifCell(library, "OBUFT_S_16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_16");
        }
        try {
            _OBUFT_S_16.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_16.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_16.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_2() {
        try {
            _OBUFT_S_2 = new EdifCell(library, "OBUFT_S_2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_2");
        }
        try {
            _OBUFT_S_2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_2.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_2.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_24() {
        try {
            _OBUFT_S_24 = new EdifCell(library, "OBUFT_S_24", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_24");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_24");
        }
        try {
            _OBUFT_S_24.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_24.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_24.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_4() {
        try {
            _OBUFT_S_4 = new EdifCell(library, "OBUFT_S_4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_4");
        }
        try {
            _OBUFT_S_4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_4.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_4.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_6() {
        try {
            _OBUFT_S_6 = new EdifCell(library, "OBUFT_S_6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_6");
        }
        try {
            _OBUFT_S_6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_6.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_6.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_8() {
        try {
            _OBUFT_S_8 = new EdifCell(library, "OBUFT_S_8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_8");
        }
        try {
            _OBUFT_S_8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_8.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_8.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_I() {
        try {
            _OBUFT_SSTL18_I = new EdifCell(library, "OBUFT_SSTL18_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_I");
        }
        try {
            _OBUFT_SSTL18_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_I_DCI() {
        try {
            _OBUFT_SSTL18_I_DCI = new EdifCell(library, "OBUFT_SSTL18_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_I_DCI");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_II() {
        try {
            _OBUFT_SSTL18_II = new EdifCell(library, "OBUFT_SSTL18_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_II");
        }
        try {
            _OBUFT_SSTL18_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_II_DCI() {
        try {
            _OBUFT_SSTL18_II_DCI = new EdifCell(library, "OBUFT_SSTL18_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_II_DCI");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_I() {
        try {
            _OBUFT_SSTL2_I = new EdifCell(library, "OBUFT_SSTL2_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_I");
        }
        try {
            _OBUFT_SSTL2_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_I_DCI() {
        try {
            _OBUFT_SSTL2_I_DCI = new EdifCell(library, "OBUFT_SSTL2_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_I_DCI");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_II() {
        try {
            _OBUFT_SSTL2_II = new EdifCell(library, "OBUFT_SSTL2_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_II");
        }
        try {
            _OBUFT_SSTL2_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_II_DCI() {
        try {
            _OBUFT_SSTL2_II_DCI = new EdifCell(library, "OBUFT_SSTL2_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_II_DCI");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_I() {
        try {
            _OBUFT_SSTL3_I = new EdifCell(library, "OBUFT_SSTL3_I", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_I");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_I");
        }
        try {
            _OBUFT_SSTL3_I.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_I_DCI() {
        try {
            _OBUFT_SSTL3_I_DCI = new EdifCell(library, "OBUFT_SSTL3_I_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_I_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_I_DCI");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_II() {
        try {
            _OBUFT_SSTL3_II = new EdifCell(library, "OBUFT_SSTL3_II", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_II");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_II");
        }
        try {
            _OBUFT_SSTL3_II.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_II_DCI() {
        try {
            _OBUFT_SSTL3_II_DCI = new EdifCell(library, "OBUFT_SSTL3_II_DCI", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_II_DCI");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_II_DCI");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS() {
        try {
            _OBUFTDS = new EdifCell(library, "OBUFTDS", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS");
        }
        try {
            _OBUFTDS.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_BLVDS_25() {
        try {
            _OBUFTDS_BLVDS_25 = new EdifCell(library, "OBUFTDS_BLVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_BLVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_BLVDS_25");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LDT_25() {
        try {
            _OBUFTDS_LDT_25 = new EdifCell(library, "OBUFTDS_LDT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LDT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LDT_25");
        }
        try {
            _OBUFTDS_LDT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDS_25() {
        try {
            _OBUFTDS_LVDS_25 = new EdifCell(library, "OBUFTDS_LVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDS_25");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDS_33() {
        try {
            _OBUFTDS_LVDS_33 = new EdifCell(library, "OBUFTDS_LVDS_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDS_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDS_33");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDSEXT_25() {
        try {
            _OBUFTDS_LVDSEXT_25 = new EdifCell(library, "OBUFTDS_LVDSEXT_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDSEXT_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDSEXT_25");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDSEXT_33() {
        try {
            _OBUFTDS_LVDSEXT_33 = new EdifCell(library, "OBUFTDS_LVDSEXT_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDSEXT_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDSEXT_33");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVPECL_25() {
        try {
            _OBUFTDS_LVPECL_25 = new EdifCell(library, "OBUFTDS_LVPECL_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVPECL_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVPECL_25");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVPECL_33() {
        try {
            _OBUFTDS_LVPECL_33 = new EdifCell(library, "OBUFTDS_LVPECL_33", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVPECL_33");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVPECL_33");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_ULVDS_25() {
        try {
            _OBUFTDS_ULVDS_25 = new EdifCell(library, "OBUFTDS_ULVDS_25", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_ULVDS_25");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_ULVDS_25");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(OB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODDR() {
        try {
            _ODDR = new EdifCell(library, "ODDR", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODDR");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODDR");
        }
        try {
            _ODDR.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(C_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(D2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODDR2() {
        try {
            _ODDR2 = new EdifCell(library, "ODDR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODDR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODDR2");
        }
        try {
            _ODDR2.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRCPE() {
        try {
            _OFDDRCPE = new EdifCell(library, "OFDDRCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRCPE");
        }
        try {
            _OFDDRCPE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRRSE() {
        try {
            _OFDDRRSE = new EdifCell(library, "OFDDRRSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRRSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRRSE");
        }
        try {
            _OFDDRRSE.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRTCPE() {
        try {
            _OFDDRTCPE = new EdifCell(library, "OFDDRTCPE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRTCPE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRTCPE");
        }
        try {
            _OFDDRTCPE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(CLR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(PRE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRTRSE() {
        try {
            _OFDDRTRSE = new EdifCell(library, "OFDDRTRSE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRTRSE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRTRSE");
        }
        try {
            _OFDDRTRSE.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(C0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(C1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(R_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(S_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(T_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOPT_OFF() {
        try {
            _OPT_OFF = new EdifCell(library, "OPT_OFF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OPT_OFF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OPT_OFF");
        }
        try {
            _OPT_OFF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOPT_UIM() {
        try {
            _OPT_UIM = new EdifCell(library, "OPT_UIM", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OPT_UIM");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OPT_UIM");
        }
        try {
            _OPT_UIM.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2() {
        try {
            _OR2 = new EdifCell(library, "OR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2");
        }
        try {
            _OR2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2B1() {
        try {
            _OR2B1 = new EdifCell(library, "OR2B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2B1");
        }
        try {
            _OR2B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2B2() {
        try {
            _OR2B2 = new EdifCell(library, "OR2B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2B2");
        }
        try {
            _OR2B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3() {
        try {
            _OR3 = new EdifCell(library, "OR3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3");
        }
        try {
            _OR3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B1() {
        try {
            _OR3B1 = new EdifCell(library, "OR3B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B1");
        }
        try {
            _OR3B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B2() {
        try {
            _OR3B2 = new EdifCell(library, "OR3B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B2");
        }
        try {
            _OR3B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B3() {
        try {
            _OR3B3 = new EdifCell(library, "OR3B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B3");
        }
        try {
            _OR3B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4() {
        try {
            _OR4 = new EdifCell(library, "OR4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4");
        }
        try {
            _OR4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B1() {
        try {
            _OR4B1 = new EdifCell(library, "OR4B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B1");
        }
        try {
            _OR4B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B2() {
        try {
            _OR4B2 = new EdifCell(library, "OR4B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B2");
        }
        try {
            _OR4B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B3() {
        try {
            _OR4B3 = new EdifCell(library, "OR4B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B3");
        }
        try {
            _OR4B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B4() {
        try {
            _OR4B4 = new EdifCell(library, "OR4B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B4");
        }
        try {
            _OR4B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5() {
        try {
            _OR5 = new EdifCell(library, "OR5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5");
        }
        try {
            _OR5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B1() {
        try {
            _OR5B1 = new EdifCell(library, "OR5B1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B1");
        }
        try {
            _OR5B1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B2() {
        try {
            _OR5B2 = new EdifCell(library, "OR5B2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B2");
        }
        try {
            _OR5B2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B3() {
        try {
            _OR5B3 = new EdifCell(library, "OR5B3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B3");
        }
        try {
            _OR5B3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B4() {
        try {
            _OR5B4 = new EdifCell(library, "OR5B4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B4");
        }
        try {
            _OR5B4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B5() {
        try {
            _OR5B5 = new EdifCell(library, "OR5B5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B5");
        }
        try {
            _OR5B5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR6() {
        try {
            _OR6 = new EdifCell(library, "OR6", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR6");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR6");
        }
        try {
            _OR6.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR7() {
        try {
            _OR7 = new EdifCell(library, "OR7", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR7");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR7");
        }
        try {
            _OR7.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR8() {
        try {
            _OR8 = new EdifCell(library, "OR8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR8");
        }
        try {
            _OR8.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I7_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initORCY() {
        try {
            _ORCY = new EdifCell(library, "ORCY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ORCY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ORCY");
        }
        try {
            _ORCY.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ORCY.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ORCY.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDES() {
        try {
            _OSERDES = new EdifCell(library, "OSERDES", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDES");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDES");
        }
        try {
            _OSERDES.addPort(OQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(TQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(CLKDIV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(OCE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(REV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTIN1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTIN2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(TCE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLL_ADV() {
        try {
            _PLL_ADV = new EdifCell(library, "PLL_ADV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLL_ADV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLL_ADV");
        }
        try {
            _PLL_ADV.addPort(CLKFBDCM_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKFBOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DRDY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKFBIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKIN1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKIN2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKINSEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DADDR_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DWE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(REL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLL_BASE() {
        try {
            _PLL_BASE = new EdifCell(library, "PLL_BASE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLL_BASE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLL_BASE");
        }
        try {
            _PLL_BASE.addPort(CLKFBOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT5_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(LOCKED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKFBIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPMCD() {
        try {
            _PMCD = new EdifCell(library, "PMCD", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PMCD");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PMCD");
        }
        try {
            _PMCD.addPort(CLKA1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D4_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D8_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKB1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKC1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKD1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(REL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPPC405() {
        try {
            _PPC405 = new EdifCell(library, "PPC405", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PPC405");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PPC405");
        }
        try {
            _PPC405.addPort(C405CPMCORESLEEPREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405CPMMSRCE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405CPMMSREE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405CPMTIMERIRQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405CPMTIMERRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DBGMSRWE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DBGSTOPACK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DBGWBCOMPLETE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DBGWBFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DBGWBIAR_port_name, 30, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DCRABUS_port_name, 10, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DCRDBUSOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DCRREAD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405DCRWRITE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGCAPTUREDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGEXTEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGPGMOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGSHIFTDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGTDO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGTDOEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405JTGUPDATEDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUABORT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUABUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUBE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUCACHEABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUGUARDED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUPRIORITY_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUREQUEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCURNW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUSIZE2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUU0ATTR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUWRDBUS_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBDCUWRITETHRU_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUABORT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUABUS_port_name, 30, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUCACHEABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUPRIORITY_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUREQUEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUSIZE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405PLBICUU0ATTR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405RSTCHIPRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405RSTCORERESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405RSTSYSRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCCYCLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCEVENEXECUTIONSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCODDEXECUTIONSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCTRACESTATUS_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCTRIGGEREVENTOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405TRCTRIGGEREVENTTYPE_port_name, 11, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(C405XXXMACHINECHECK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSOCMBRAMABUS_port_name, 22, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSOCMBRAMBYTEWRITE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSOCMBRAMEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSOCMBRAMWRDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSOCMBUSY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMEVENWRITEEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMODDWRITEEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMRDABUS_port_name, 21, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMWRABUS_port_name, 21, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISOCMBRAMWRDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(BRAMDSOCMCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(BRAMDSOCMRDDBUS_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(BRAMISOCMCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(BRAMISOCMRDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405CLOCK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405CORECLKINACTIVE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405CPUCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405JTAGCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405TIMERCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(CPMC405TIMERTICK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DBGC405DEBUGHALT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DBGC405EXTBUSHOLDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DBGC405UNCONDDEBUGEVENT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DCRC405ACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DCRC405DBUSIN_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSARCVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(DSCNTLVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(EICC405CRITINPUTIRQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(EICC405EXTINPUTIRQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISARCVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(ISCNTLVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(JTGC405BNDSCANTDO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(JTGC405TCK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(JTGC405TDI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(JTGC405TMS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(JTGC405TRSTNEG_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(MCBCPUCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(MCBJTAGEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(MCBTIMEREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(MCPPCRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCUADDRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCUBUSY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCUERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCURDDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCURDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCURDWDADDR_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCUSSIZE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405DCUWRDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICUADDRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICUBUSY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICUERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICURDDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICURDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICURDWDADDR_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBC405ICUSSIZE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(PLBCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(RSTC405RESETCHIP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(RSTC405RESETCORE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(RSTC405RESETSYS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TIEC405DETERMINISTICMULT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TIEC405DISOPERANDFWD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TIEC405MMUEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TIEDSOCMDCRADDR_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TIEISOCMDCRADDR_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TRCC405TRACEDISABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405.addPort(TRCC405TRIGGEREVENTIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPPC405_ADV() {
        try {
            _PPC405_ADV = new EdifCell(library, "PPC405_ADV", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PPC405_ADV");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PPC405_ADV");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECODED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECUDI_port_name, 3, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECUDIVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMENDIAN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMFLUSH_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMINSTRUCTION_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMINSTRVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADBYTEEN_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADDVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMOPERANDVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMRADATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMRBDATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMWRITEBACKOK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMXERCA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMCORESLEEPREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMMSRCE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMMSREE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMTIMERIRQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMTIMERRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGLOADDATAONAPUDBUS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGMSRWE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGSTOPACK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBCOMPLETE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBFULL_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBIAR_port_name, 30, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGCAPTUREDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGEXTEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGPGMOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGSHIFTDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGTDO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGTDOEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGUPDATEDR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUABORT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUABUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUBE_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUCACHEABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUGUARDED_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUPRIORITY_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUREQUEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCURNW_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUSIZE2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUU0ATTR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUWRDBUS_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUWRITETHRU_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUABORT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUABUS_port_name, 30, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUCACHEABLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUPRIORITY_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUREQUEST_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUSIZE_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUU0ATTR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTCHIPRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTCORERESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTSYSRESETREQ_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCCYCLE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCEVENEXECUTIONSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCODDEXECUTIONSTATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRACESTATUS_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRIGGEREVENTOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRIGGEREVENTTYPE_port_name, 11, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405XXXMACHINECHECK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACABUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACENABLER_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACREAD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACWRITE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMABUS_port_name, 22, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMBYTEWRITE_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMWRDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBUSY_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMRDADDRVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMWRADDRVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRABUS_port_name, 10, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRDBUSOUT_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRREAD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRWRITE_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMEVENWRITEEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMODDWRITEEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMRDABUS_port_name, 21, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMWRABUS_port_name, 21, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMWRDBUS_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMEVENEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMODDEN_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMRDSELECT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMDSOCMCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMDSOCMRDDBUS_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMDCRRDDBUS_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMRDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CLOCK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CORECLKINACTIVE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CPUCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405JTAGCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405SYNCBYPASS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405TIMERCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405TIMERTICK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMDCRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMFCMCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405DEBUGHALT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405EXTBUSHOLDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405UNCONDDEBUGEVENT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSARCVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSCNTLVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMRWCOMPLETE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EICC405CRITINPUTIRQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EICC405EXTINPUTIRQ_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EMACDCRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EMACDCRDBUS_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRDBUSIN_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUCR_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDCREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFORCEALIGN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFORCEBESTEERING_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFPUOP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDGPRWRITE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTBYTE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTDW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTHW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTQW_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTWD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLOAD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDPRIVOP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDRAEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDRBEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDSTORE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDTRAPBE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDTRAPLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDUPDATE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDXERCAEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDXEROVEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDECODEBUSY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDONE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXCEPTION_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXEBLOCKINGMCO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXECRFIELD_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXENONBLOCKINGMCO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUINSTRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPULOADWAIT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPURESULT_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPURESULTVALID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUSLEEPNOTREADY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUXERCA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUXEROV_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISARCVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISCNTLVALUE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405BNDSCANTDO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TCK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TDI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TMS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TRSTNEG_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBCPUCLKEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBJTAGEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBTIMEREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCPPCRST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUADDRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUBUSY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDWDADDR_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUSSIZE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUWRDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUADDRACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUBUSY_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUERR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDDACK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDDBUS_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDWDADDR_port_name, 3, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUSSIZE1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETCHIP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETCORE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETSYS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUCONTROL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI1_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI2_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI3_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI4_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI5_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI6_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI7_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI8_port_name, 24, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405DETERMINISTICMULT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405DISOPERANDFWD_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405MMUEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEDCRADDR_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT10_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT11_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT28_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT29_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT30_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT31_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT8_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT9_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TRCC405TRACEDISABLE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TRCC405TRIGGEREVENTIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPULLDOWN() {
        try {
            _PULLDOWN = new EdifCell(library, "PULLDOWN", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PULLDOWN");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PULLDOWN");
        }
        try {
            _PULLDOWN.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPULLUP() {
        try {
            _PULLUP = new EdifCell(library, "PULLUP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PULLUP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PULLUP");
        }
        try {
            _PULLUP.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1D() {
        try {
            _RAM128X1D = new EdifCell(library, "RAM128X1D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1D");
        }
        try {
            _RAM128X1D.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(A_port_name, 7, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(DPRA_port_name, 7, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1S() {
        try {
            _RAM128X1S = new EdifCell(library, "RAM128X1S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1S");
        }
        try {
            _RAM128X1S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1S_1() {
        try {
            _RAM128X1S_1 = new EdifCell(library, "RAM128X1S_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1S_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1S_1");
        }
        try {
            _RAM128X1S_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1D() {
        try {
            _RAM16X1D = new EdifCell(library, "RAM16X1D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1D");
        }
        try {
            _RAM16X1D.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1D_1() {
        try {
            _RAM16X1D_1 = new EdifCell(library, "RAM16X1D_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1D_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1D_1");
        }
        try {
            _RAM16X1D_1.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1S() {
        try {
            _RAM16X1S = new EdifCell(library, "RAM16X1S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1S");
        }
        try {
            _RAM16X1S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1S_1() {
        try {
            _RAM16X1S_1 = new EdifCell(library, "RAM16X1S_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1S_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1S_1");
        }
        try {
            _RAM16X1S_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X2S() {
        try {
            _RAM16X2S = new EdifCell(library, "RAM16X2S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X2S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X2S");
        }
        try {
            _RAM16X2S.addPort(O0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(O1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X4S() {
        try {
            _RAM16X4S = new EdifCell(library, "RAM16X4S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X4S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X4S");
        }
        try {
            _RAM16X4S.addPort(O0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X8S() {
        try {
            _RAM16X8S = new EdifCell(library, "RAM16X8S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X8S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X8S");
        }
        try {
            _RAM16X8S.addPort(O_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(D_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM256X1S() {
        try {
            _RAM256X1S = new EdifCell(library, "RAM256X1S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM256X1S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM256X1S");
        }
        try {
            _RAM256X1S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(A_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32M() {
        try {
            _RAM32M = new EdifCell(library, "RAM32M", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32M");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32M");
        }
        try {
            _RAM32M.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOC_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOD_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRA_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRB_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRC_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRD_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIC_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DID_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1D() {
        try {
            _RAM32X1D = new EdifCell(library, "RAM32X1D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1D");
        }
        try {
            _RAM32X1D.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1D_1() {
        try {
            _RAM32X1D_1 = new EdifCell(library, "RAM32X1D_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1D_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1D_1");
        }
        try {
            _RAM32X1D_1.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1S() {
        try {
            _RAM32X1S = new EdifCell(library, "RAM32X1S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1S");
        }
        try {
            _RAM32X1S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1S_1() {
        try {
            _RAM32X1S_1 = new EdifCell(library, "RAM32X1S_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1S_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1S_1");
        }
        try {
            _RAM32X1S_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X2S() {
        try {
            _RAM32X2S = new EdifCell(library, "RAM32X2S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X2S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X2S");
        }
        try {
            _RAM32X2S.addPort(O0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(O1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X4S() {
        try {
            _RAM32X4S = new EdifCell(library, "RAM32X4S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X4S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X4S");
        }
        try {
            _RAM32X4S.addPort(O0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O2_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O3_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X8S() {
        try {
            _RAM32X8S = new EdifCell(library, "RAM32X8S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X8S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X8S");
        }
        try {
            _RAM32X8S.addPort(O_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(D_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64M() {
        try {
            _RAM64M = new EdifCell(library, "RAM64M", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64M");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64M");
        }
        try {
            _RAM64M.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOC_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOD_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRA_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRB_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRC_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRD_port_name, 6, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIC_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DID_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1D() {
        try {
            _RAM64X1D = new EdifCell(library, "RAM64X1D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1D");
        }
        try {
            _RAM64X1D.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1D_1() {
        try {
            _RAM64X1D_1 = new EdifCell(library, "RAM64X1D_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1D_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1D_1");
        }
        try {
            _RAM64X1D_1.addPort(DPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(SPO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1S() {
        try {
            _RAM64X1S = new EdifCell(library, "RAM64X1S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1S");
        }
        try {
            _RAM64X1S.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1S_1() {
        try {
            _RAM64X1S_1 = new EdifCell(library, "RAM64X1S_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1S_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1S_1");
        }
        try {
            _RAM64X1S_1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X2S() {
        try {
            _RAM64X2S = new EdifCell(library, "RAM64X2S", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X2S");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X2S");
        }
        try {
            _RAM64X2S.addPort(O0_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(O1_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(D0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(D1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(WCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16() {
        try {
            _RAMB16 = new EdifCell(library, "RAMB16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16");
        }
        try {
            _RAMB16.addPort(CASCADEOUTA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEOUTB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOPA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ADDRA_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ADDRB_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEINA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEINB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIPA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(REGCEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(REGCEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(WEA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(WEB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1() {
        try {
            _RAMB16_S1 = new EdifCell(library, "RAMB16_S1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1");
        }
        try {
            _RAMB16_S1.addPort(DO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(ADDR_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(DI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18() {
        try {
            _RAMB16_S18 = new EdifCell(library, "RAMB16_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18");
        }
        try {
            _RAMB16_S18.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DOP_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(ADDR_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DIP_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18_S18() {
        try {
            _RAMB16_S18_S18 = new EdifCell(library, "RAMB16_S18_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18_S18");
        }
        try {
            _RAMB16_S18_S18.addPort(DOA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOPA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ADDRA_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIPA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18_S36() {
        try {
            _RAMB16_S18_S36 = new EdifCell(library, "RAMB16_S18_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18_S36");
        }
        try {
            _RAMB16_S18_S36.addPort(DOA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOPA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ADDRA_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIPA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S1() {
        try {
            _RAMB16_S1_S1 = new EdifCell(library, "RAMB16_S1_S1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S1");
        }
        try {
            _RAMB16_S1_S1.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DOB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ADDRB_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DIB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S18() {
        try {
            _RAMB16_S1_S18 = new EdifCell(library, "RAMB16_S1_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S18");
        }
        try {
            _RAMB16_S1_S18.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S2() {
        try {
            _RAMB16_S1_S2 = new EdifCell(library, "RAMB16_S1_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S2");
        }
        try {
            _RAMB16_S1_S2.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DOB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ADDRB_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DIB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S36() {
        try {
            _RAMB16_S1_S36 = new EdifCell(library, "RAMB16_S1_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S36");
        }
        try {
            _RAMB16_S1_S36.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S4() {
        try {
            _RAMB16_S1_S4 = new EdifCell(library, "RAMB16_S1_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S4");
        }
        try {
            _RAMB16_S1_S4.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ADDRB_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S9() {
        try {
            _RAMB16_S1_S9 = new EdifCell(library, "RAMB16_S1_S9", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S9");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S9");
        }
        try {
            _RAMB16_S1_S9.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DOPB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIPB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2() {
        try {
            _RAMB16_S2 = new EdifCell(library, "RAMB16_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2");
        }
        try {
            _RAMB16_S2.addPort(DO_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(ADDR_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(DI_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S18() {
        try {
            _RAMB16_S2_S18 = new EdifCell(library, "RAMB16_S2_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S18");
        }
        try {
            _RAMB16_S2_S18.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ADDRA_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S2() {
        try {
            _RAMB16_S2_S2 = new EdifCell(library, "RAMB16_S2_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S2");
        }
        try {
            _RAMB16_S2_S2.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DOB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ADDRA_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ADDRB_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DIB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S36() {
        try {
            _RAMB16_S2_S36 = new EdifCell(library, "RAMB16_S2_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S36");
        }
        try {
            _RAMB16_S2_S36.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ADDRA_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S4() {
        try {
            _RAMB16_S2_S4 = new EdifCell(library, "RAMB16_S2_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S4");
        }
        try {
            _RAMB16_S2_S4.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ADDRA_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ADDRB_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S9() {
        try {
            _RAMB16_S2_S9 = new EdifCell(library, "RAMB16_S2_S9", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S9");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S9");
        }
        try {
            _RAMB16_S2_S9.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DOPB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ADDRA_port_name, 13, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIPB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S36() {
        try {
            _RAMB16_S36 = new EdifCell(library, "RAMB16_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S36");
        }
        try {
            _RAMB16_S36.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(ADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S36_S36() {
        try {
            _RAMB16_S36_S36 = new EdifCell(library, "RAMB16_S36_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S36_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S36_S36");
        }
        try {
            _RAMB16_S36_S36.addPort(DOA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOPA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ADDRA_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIPA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4() {
        try {
            _RAMB16_S4 = new EdifCell(library, "RAMB16_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4");
        }
        try {
            _RAMB16_S4.addPort(DO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(ADDR_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(DI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S18() {
        try {
            _RAMB16_S4_S18 = new EdifCell(library, "RAMB16_S4_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S18");
        }
        try {
            _RAMB16_S4_S18.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S36() {
        try {
            _RAMB16_S4_S36 = new EdifCell(library, "RAMB16_S4_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S36");
        }
        try {
            _RAMB16_S4_S36.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S4() {
        try {
            _RAMB16_S4_S4 = new EdifCell(library, "RAMB16_S4_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S4");
        }
        try {
            _RAMB16_S4_S4.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ADDRB_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S9() {
        try {
            _RAMB16_S4_S9 = new EdifCell(library, "RAMB16_S4_S9", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S9");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S9");
        }
        try {
            _RAMB16_S4_S9.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DOPB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIPB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9() {
        try {
            _RAMB16_S9 = new EdifCell(library, "RAMB16_S9", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9");
        }
        try {
            _RAMB16_S9.addPort(DO_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DOP_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(ADDR_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DI_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DIP_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S18() {
        try {
            _RAMB16_S9_S18 = new EdifCell(library, "RAMB16_S9_S18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S18");
        }
        try {
            _RAMB16_S9_S18.addPort(DOA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOPA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIPA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S36() {
        try {
            _RAMB16_S9_S36 = new EdifCell(library, "RAMB16_S9_S36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S36");
        }
        try {
            _RAMB16_S9_S36.addPort(DOA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOPA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIPA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S9() {
        try {
            _RAMB16_S9_S9 = new EdifCell(library, "RAMB16_S9_S9", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S9");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S9");
        }
        try {
            _RAMB16_S9_S9.addPort(DOA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOPA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOPB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIPA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIPB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18() {
        try {
            _RAMB18 = new EdifCell(library, "RAMB18", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18");
        }
        try {
            _RAMB18.addPort(DOA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOPA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOPB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ADDRA_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ADDRB_port_name, 14, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIPA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIPB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(REGCEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(REGCEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(WEA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(WEB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18SDP() {
        try {
            _RAMB18SDP = new EdifCell(library, "RAMB18SDP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18SDP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18SDP");
        }
        try {
            _RAMB18SDP.addPort(DO_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DOP_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DI_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DIP_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(REGCE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WE_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WRADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB32_S64_ECC() {
        try {
            _RAMB32_S64_ECC = new EdifCell(library, "RAMB32_S64_ECC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB32_S64_ECC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB32_S64_ECC");
        }
        try {
            _RAMB32_S64_ECC.addPort(DO_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(STATUS_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(DI_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WRADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36() {
        try {
            _RAMB36 = new EdifCell(library, "RAMB36", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36");
        }
        try {
            _RAMB36.addPort(CASCADEOUTLATA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTLATB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTREGA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTREGB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOPA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ADDRA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ADDRB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINLATA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINLATB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINREGA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINREGB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIPA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(REGCEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(REGCEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(SSRA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(SSRB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(WEA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(WEB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36_EXP() {
        try {
            _RAMB36_EXP = new EdifCell(library, "RAMB36_EXP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36_EXP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36_EXP");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTLATA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTLATB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTREGA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTREGB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOB_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOPA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOPB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRAL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRAU_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRBL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRBU_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINLATA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINLATB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINREGA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINREGB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKAU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKBL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKBU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIA_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIB_port_name, 32, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIPA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIPB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENAU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENBL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENBU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEAU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEBL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEBU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKAU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKBL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKBU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRAL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRAU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRBL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRBU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEAL_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEAU_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEBL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEBU_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36SDP() {
        try {
            _RAMB36SDP = new EdifCell(library, "RAMB36SDP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36SDP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36SDP");
        }
        try {
            _RAMB36SDP.addPort(DBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DO_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DOP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(ECCPARITY_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(SBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DI_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DIP_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDEN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(REGCE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(SSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WE_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WRADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WRCLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WREN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36SDP_EXP() {
        try {
            _RAMB36SDP_EXP = new EdifCell(library, "RAMB36SDP_EXP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36SDP_EXP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36SDP_EXP");
        }
        try {
            _RAMB36SDP_EXP.addPort(DBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DO_port_name, 64, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DOP_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(ECCPARITY_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SBITERR_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DI_port_name, 64, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DIP_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDADDRL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDADDRU_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDENU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDENL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(REGCEL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(REGCEU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SSRL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SSRU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WEL_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WEU_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRADDRL_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRADDRU_port_name, 15, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRCLKL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRCLKU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRENL_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRENU_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1() {
        try {
            _RAMB4_S1 = new EdifCell(library, "RAMB4_S1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1");
        }
        try {
            _RAMB4_S1.addPort(DO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(ADDR_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(DI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S16() {
        try {
            _RAMB4_S16 = new EdifCell(library, "RAMB4_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S16");
        }
        try {
            _RAMB4_S16.addPort(DO_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(ADDR_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(DI_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S16_S16() {
        try {
            _RAMB4_S16_S16 = new EdifCell(library, "RAMB4_S16_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S16_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S16_S16");
        }
        try {
            _RAMB4_S16_S16.addPort(DOA_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ADDRA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DIA_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S1() {
        try {
            _RAMB4_S1_S1 = new EdifCell(library, "RAMB4_S1_S1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S1");
        }
        try {
            _RAMB4_S1_S1.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DOB_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ADDRB_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DIB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S16() {
        try {
            _RAMB4_S1_S16 = new EdifCell(library, "RAMB4_S1_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S16");
        }
        try {
            _RAMB4_S1_S16.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S2() {
        try {
            _RAMB4_S1_S2 = new EdifCell(library, "RAMB4_S1_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S2");
        }
        try {
            _RAMB4_S1_S2.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DOB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DIB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S4() {
        try {
            _RAMB4_S1_S4 = new EdifCell(library, "RAMB4_S1_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S4");
        }
        try {
            _RAMB4_S1_S4.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S8() {
        try {
            _RAMB4_S1_S8 = new EdifCell(library, "RAMB4_S1_S8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S8");
        }
        try {
            _RAMB4_S1_S8.addPort(DOA_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ADDRA_port_name, 12, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DIA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2() {
        try {
            _RAMB4_S2 = new EdifCell(library, "RAMB4_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2");
        }
        try {
            _RAMB4_S2.addPort(DO_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(ADDR_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(DI_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S16() {
        try {
            _RAMB4_S2_S16 = new EdifCell(library, "RAMB4_S2_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S16");
        }
        try {
            _RAMB4_S2_S16.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S2() {
        try {
            _RAMB4_S2_S2 = new EdifCell(library, "RAMB4_S2_S2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S2");
        }
        try {
            _RAMB4_S2_S2.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DOB_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ADDRB_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DIB_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S4() {
        try {
            _RAMB4_S2_S4 = new EdifCell(library, "RAMB4_S2_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S4");
        }
        try {
            _RAMB4_S2_S4.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S8() {
        try {
            _RAMB4_S2_S8 = new EdifCell(library, "RAMB4_S2_S8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S8");
        }
        try {
            _RAMB4_S2_S8.addPort(DOA_port_name, 2, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ADDRA_port_name, 11, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DIA_port_name, 2, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4() {
        try {
            _RAMB4_S4 = new EdifCell(library, "RAMB4_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4");
        }
        try {
            _RAMB4_S4.addPort(DO_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(ADDR_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(DI_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S16() {
        try {
            _RAMB4_S4_S16 = new EdifCell(library, "RAMB4_S4_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S16");
        }
        try {
            _RAMB4_S4_S16.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ADDRA_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S4() {
        try {
            _RAMB4_S4_S4 = new EdifCell(library, "RAMB4_S4_S4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S4");
        }
        try {
            _RAMB4_S4_S4.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DOB_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ADDRA_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ADDRB_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DIB_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S8() {
        try {
            _RAMB4_S4_S8 = new EdifCell(library, "RAMB4_S4_S8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S8");
        }
        try {
            _RAMB4_S4_S8.addPort(DOA_port_name, 4, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ADDRA_port_name, 10, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DIA_port_name, 4, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8() {
        try {
            _RAMB4_S8 = new EdifCell(library, "RAMB4_S8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8");
        }
        try {
            _RAMB4_S8.addPort(DO_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(ADDR_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(DI_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(EN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(RST_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(WE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8_S16() {
        try {
            _RAMB4_S8_S16 = new EdifCell(library, "RAMB4_S8_S16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8_S16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8_S16");
        }
        try {
            _RAMB4_S8_S16.addPort(DOA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DOB_port_name, 16, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ADDRA_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ADDRB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DIA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DIB_port_name, 16, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8_S8() {
        try {
            _RAMB4_S8_S8 = new EdifCell(library, "RAMB4_S8_S8", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8_S8");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8_S8");
        }
        try {
            _RAMB4_S8_S8.addPort(DOA_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DOB_port_name, 8, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ADDRA_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ADDRB_port_name, 9, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(CLKA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(CLKB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DIA_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DIB_port_name, 8, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ENA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ENB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(RSTA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(RSTB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(WEA_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(WEB_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROC() {
        try {
            _ROC = new EdifCell(library, "ROC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROC");
        }
        try {
            _ROC.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROCBUF() {
        try {
            _ROCBUF = new EdifCell(library, "ROCBUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROCBUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROCBUF");
        }
        try {
            _ROCBUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROCBUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM128X1() {
        try {
            _ROM128X1 = new EdifCell(library, "ROM128X1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM128X1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM128X1");
        }
        try {
            _ROM128X1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM16X1() {
        try {
            _ROM16X1 = new EdifCell(library, "ROM16X1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM16X1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM16X1");
        }
        try {
            _ROM16X1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM256X1() {
        try {
            _ROM256X1 = new EdifCell(library, "ROM256X1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM256X1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM256X1");
        }
        try {
            _ROM256X1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A6_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A7_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM32X1() {
        try {
            _ROM32X1 = new EdifCell(library, "ROM32X1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM32X1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM32X1");
        }
        try {
            _ROM32X1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM64X1() {
        try {
            _ROM64X1 = new EdifCell(library, "ROM64X1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM64X1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM64X1");
        }
        try {
            _ROM64X1.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A5_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16() {
        try {
            _SRL16 = new EdifCell(library, "SRL16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16");
        }
        try {
            _SRL16.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16_1() {
        try {
            _SRL16_1 = new EdifCell(library, "SRL16_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16_1");
        }
        try {
            _SRL16_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16E() {
        try {
            _SRL16E = new EdifCell(library, "SRL16E", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16E");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16E");
        }
        try {
            _SRL16E.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16E_1() {
        try {
            _SRL16E_1 = new EdifCell(library, "SRL16E_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16E_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16E_1");
        }
        try {
            _SRL16E_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16() {
        try {
            _SRLC16 = new EdifCell(library, "SRLC16", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16");
        }
        try {
            _SRLC16.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(Q15_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16_1() {
        try {
            _SRLC16_1 = new EdifCell(library, "SRLC16_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16_1");
        }
        try {
            _SRLC16_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(Q15_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16E() {
        try {
            _SRLC16E = new EdifCell(library, "SRLC16E", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16E");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16E");
        }
        try {
            _SRLC16E.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(Q15_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16E_1() {
        try {
            _SRLC16E_1 = new EdifCell(library, "SRLC16E_1", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16E_1");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16E_1");
        }
        try {
            _SRLC16E_1.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(Q15_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC32E() {
        try {
            _SRLC32E = new EdifCell(library, "SRLC32E", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC32E");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC32E");
        }
        try {
            _SRLC32E.addPort(Q_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(Q31_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(A_port_name, 5, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(CE_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(D_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_FPGACORE() {
        try {
            _STARTBUF_FPGACORE = new EdifCell(library, "STARTBUF_FPGACORE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_FPGACORE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_FPGACORE");
        }
        try {
            _STARTBUF_FPGACORE.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_FPGACORE.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_FPGACORE.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_SPARTAN2() {
        try {
            _STARTBUF_SPARTAN2 = new EdifCell(library, "STARTBUF_SPARTAN2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_SPARTAN2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_SPARTAN2");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GTSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_SPARTAN3() {
        try {
            _STARTBUF_SPARTAN3 = new EdifCell(library, "STARTBUF_SPARTAN3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_SPARTAN3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_SPARTAN3");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GTSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX() {
        try {
            _STARTBUF_VIRTEX = new EdifCell(library, "STARTBUF_VIRTEX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GTSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX2() {
        try {
            _STARTBUF_VIRTEX2 = new EdifCell(library, "STARTBUF_VIRTEX2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX2");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GTSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX4() {
        try {
            _STARTBUF_VIRTEX4 = new EdifCell(library, "STARTBUF_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX4");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(EOSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GSROUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GTSOUT_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(CLKIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GSRIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRCCLKOIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRCCLKTSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRDONEOIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRDONETSIN_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_FPGACORE() {
        try {
            _STARTUP_FPGACORE = new EdifCell(library, "STARTUP_FPGACORE", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_FPGACORE");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_FPGACORE");
        }
        try {
            _STARTUP_FPGACORE.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_FPGACORE.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN2() {
        try {
            _STARTUP_SPARTAN2 = new EdifCell(library, "STARTUP_SPARTAN2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN2");
        }
        try {
            _STARTUP_SPARTAN2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN2.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN2.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN3() {
        try {
            _STARTUP_SPARTAN3 = new EdifCell(library, "STARTUP_SPARTAN3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN3");
        }
        try {
            _STARTUP_SPARTAN3.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN3E() {
        try {
            _STARTUP_SPARTAN3E = new EdifCell(library, "STARTUP_SPARTAN3E", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN3E");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN3E");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(MBT_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX() {
        try {
            _STARTUP_VIRTEX = new EdifCell(library, "STARTUP_VIRTEX", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX");
        }
        try {
            _STARTUP_VIRTEX.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX2() {
        try {
            _STARTUP_VIRTEX2 = new EdifCell(library, "STARTUP_VIRTEX2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX2");
        }
        try {
            _STARTUP_VIRTEX2.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX2.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX2.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX4() {
        try {
            _STARTUP_VIRTEX4 = new EdifCell(library, "STARTUP_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX4");
        }
        try {
            _STARTUP_VIRTEX4.addPort(EOS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRCCLKO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRCCLKTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRDONEO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRDONETS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX5() {
        try {
            _STARTUP_VIRTEX5 = new EdifCell(library, "STARTUP_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX5");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CFGCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CFGMCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(DINSPI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(EOS_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(TCKSPI_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CLK_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(GSR_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(GTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRCCLKO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRCCLKTS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRDONEO_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRDONETS_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTBLOCK() {
        try {
            _TBLOCK = new EdifCell(library, "TBLOCK", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TBLOCK");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TBLOCK");
        }
    }

    private static void _initTIMEGRP() {
        try {
            _TIMEGRP = new EdifCell(library, "TIMEGRP", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TIMEGRP");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TIMEGRP");
        }
    }

    private static void _initTIMESPEC() {
        try {
            _TIMESPEC = new EdifCell(library, "TIMESPEC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TIMESPEC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TIMESPEC");
        }
    }

    private static void _initTOC() {
        try {
            _TOC = new EdifCell(library, "TOC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TOC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TOC");
        }
        try {
            _TOC.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTOCBUF() {
        try {
            _TOCBUF = new EdifCell(library, "TOCBUF", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TOCBUF");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TOCBUF");
        }
        try {
            _TOCBUF.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TOCBUF.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESS_VIRTEX4() {
        try {
            _USR_ACCESS_VIRTEX4 = new EdifCell(library, "USR_ACCESS_VIRTEX4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESS_VIRTEX4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESS_VIRTEX4");
        }
        try {
            _USR_ACCESS_VIRTEX4.addPort(DATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX4.addPort(DATAVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESS_VIRTEX5() {
        try {
            _USR_ACCESS_VIRTEX5 = new EdifCell(library, "USR_ACCESS_VIRTEX5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESS_VIRTEX5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESS_VIRTEX5");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(CFGCLK_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(DATA_port_name, 32, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(DATAVALID_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initVCC() {
        try {
            _VCC = new EdifCell(library, "VCC", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: VCC");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: VCC");
        }
        try {
            _VCC.addPort(P_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initWIREAND() {
        try {
            _WIREAND = new EdifCell(library, "WIREAND", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: WIREAND");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: WIREAND");
        }
        try {
            _WIREAND.addPort(I_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR2() {
        try {
            _XNOR2 = new EdifCell(library, "XNOR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR2");
        }
        try {
            _XNOR2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR3() {
        try {
            _XNOR3 = new EdifCell(library, "XNOR3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR3");
        }
        try {
            _XNOR3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR4() {
        try {
            _XNOR4 = new EdifCell(library, "XNOR4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR4");
        }
        try {
            _XNOR4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR5() {
        try {
            _XNOR5 = new EdifCell(library, "XNOR5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR5");
        }
        try {
            _XNOR5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR2() {
        try {
            _XOR2 = new EdifCell(library, "XOR2", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR2");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR2");
        }
        try {
            _XOR2.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR2.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR2.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR3() {
        try {
            _XOR3 = new EdifCell(library, "XOR3", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR3");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR3");
        }
        try {
            _XOR3.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR4() {
        try {
            _XOR4 = new EdifCell(library, "XOR4", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR4");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR4");
        }
        try {
            _XOR4.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR5() {
        try {
            _XOR5 = new EdifCell(library, "XOR5", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR5");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR5");
        }
        try {
            _XOR5.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I0_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I1_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I2_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I3_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I4_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY() {
        try {
            _XORCY = new EdifCell(library, "XORCY", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY");
        }
        try {
            _XORCY.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY.addPort(LI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY_D() {
        try {
            _XORCY_D = new EdifCell(library, "XORCY_D", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY_D");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY_D");
        }
        try {
            _XORCY_D.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(O_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(LI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY_L() {
        try {
            _XORCY_L = new EdifCell(library, "XORCY_L", true);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY_L");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY_L");
        }
        try {
            _XORCY_L.addPort(LO_port_name, 1, EdifPort.OUT);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_L.addPort(CI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_L.addPort(LI_port_name, 1, EdifPort.IN);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

}
