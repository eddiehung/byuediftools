/* Generated By:JavaCC: Do not edit this line. EdifParserCoreConstants.java */
package edu.byu.ece.edif.util.parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EdifParserCoreConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ANGLE = 6;
  /** RegularExpression Id. */
  int BEHAVIOR = 7;
  /** RegularExpression Id. */
  int CALCULATED = 8;
  /** RegularExpression Id. */
  int CAPACITANCE = 9;
  /** RegularExpression Id. */
  int CENTERCENTER = 10;
  /** RegularExpression Id. */
  int CENTERLEFT = 11;
  /** RegularExpression Id. */
  int CENTERRIGHT = 12;
  /** RegularExpression Id. */
  int CHARGE = 13;
  /** RegularExpression Id. */
  int CONDUCTANCE = 14;
  /** RegularExpression Id. */
  int CURRENT = 15;
  /** RegularExpression Id. */
  int DISTANCE = 16;
  /** RegularExpression Id. */
  int DOCUMENT = 17;
  /** RegularExpression Id. */
  int ENERGY = 18;
  /** RegularExpression Id. */
  int EXTEND = 19;
  /** RegularExpression Id. */
  int FLUX = 20;
  /** RegularExpression Id. */
  int FREQUENCY = 21;
  /** RegularExpression Id. */
  int GENERIC = 22;
  /** RegularExpression Id. */
  int GRAPHIC = 23;
  /** RegularExpression Id. */
  int INDUCTANCE = 24;
  /** RegularExpression Id. */
  int INOUT = 25;
  /** RegularExpression Id. */
  int INPUT = 26;
  /** RegularExpression Id. */
  int LOGICMODEL = 27;
  /** RegularExpression Id. */
  int LOWERCENTER = 28;
  /** RegularExpression Id. */
  int LOWERLEFT = 29;
  /** RegularExpression Id. */
  int LOWERRIGHT = 30;
  /** RegularExpression Id. */
  int MASKLAYOUT = 31;
  /** RegularExpression Id. */
  int MASS = 32;
  /** RegularExpression Id. */
  int MEASURED = 33;
  /** RegularExpression Id. */
  int MX = 34;
  /** RegularExpression Id. */
  int MXR90 = 35;
  /** RegularExpression Id. */
  int MY = 36;
  /** RegularExpression Id. */
  int MYR90 = 37;
  /** RegularExpression Id. */
  int NETLIST = 38;
  /** RegularExpression Id. */
  int OUTPUT = 39;
  /** RegularExpression Id. */
  int PCBLAYOUT = 40;
  /** RegularExpression Id. */
  int POWER = 41;
  /** RegularExpression Id. */
  int R0 = 42;
  /** RegularExpression Id. */
  int R180 = 43;
  /** RegularExpression Id. */
  int R270 = 44;
  /** RegularExpression Id. */
  int R90 = 45;
  /** RegularExpression Id. */
  int REQUIRED = 46;
  /** RegularExpression Id. */
  int RESISTANCE = 47;
  /** RegularExpression Id. */
  int RIPPER = 48;
  /** RegularExpression Id. */
  int ROUND = 49;
  /** RegularExpression Id. */
  int SCHEMATIC = 50;
  /** RegularExpression Id. */
  int STRANGER = 51;
  /** RegularExpression Id. */
  int SYMBOLIC = 52;
  /** RegularExpression Id. */
  int TEMPERATURE = 53;
  /** RegularExpression Id. */
  int TIE = 54;
  /** RegularExpression Id. */
  int TIME = 55;
  /** RegularExpression Id. */
  int TRUNCATE = 56;
  /** RegularExpression Id. */
  int UPPERCENTER = 57;
  /** RegularExpression Id. */
  int UPPERLEFT = 58;
  /** RegularExpression Id. */
  int UPPERRIGHT = 59;
  /** RegularExpression Id. */
  int VOLTAGE = 60;
  /** RegularExpression Id. */
  int ACLOAD = 61;
  /** RegularExpression Id. */
  int AFTER = 62;
  /** RegularExpression Id. */
  int ANNOTATE = 63;
  /** RegularExpression Id. */
  int APPLY = 64;
  /** RegularExpression Id. */
  int ARC = 65;
  /** RegularExpression Id. */
  int ARRAY = 66;
  /** RegularExpression Id. */
  int ARRAYMACRO = 67;
  /** RegularExpression Id. */
  int ARRAYRELATEDINFO = 68;
  /** RegularExpression Id. */
  int ARRAYSITE = 69;
  /** RegularExpression Id. */
  int ATLEAST = 70;
  /** RegularExpression Id. */
  int ATMOST = 71;
  /** RegularExpression Id. */
  int AUTHOR = 72;
  /** RegularExpression Id. */
  int BASEARRAY = 73;
  /** RegularExpression Id. */
  int BECOMES = 74;
  /** RegularExpression Id. */
  int BETWEEN = 75;
  /** RegularExpression Id. */
  int BOOLEAN = 76;
  /** RegularExpression Id. */
  int BOOLEANDISPLAY = 77;
  /** RegularExpression Id. */
  int BOOLEANMAP = 78;
  /** RegularExpression Id. */
  int BORDERPATTERN = 79;
  /** RegularExpression Id. */
  int BORDERWIDTH = 80;
  /** RegularExpression Id. */
  int BOUNDINGBOX = 81;
  /** RegularExpression Id. */
  int CELL = 82;
  /** RegularExpression Id. */
  int CELLREF = 83;
  /** RegularExpression Id. */
  int CELLTYPE = 84;
  /** RegularExpression Id. */
  int CHANGE = 85;
  /** RegularExpression Id. */
  int CIRCLE = 86;
  /** RegularExpression Id. */
  int COLOR = 87;
  /** RegularExpression Id. */
  int COMMENT = 88;
  /** RegularExpression Id. */
  int COMMENTGRAPHICS = 89;
  /** RegularExpression Id. */
  int COMPOUND = 90;
  /** RegularExpression Id. */
  int CONNECTLOCATION = 91;
  /** RegularExpression Id. */
  int CONTENTS = 92;
  /** RegularExpression Id. */
  int CORNERTYPE = 93;
  /** RegularExpression Id. */
  int CRITICALITY = 94;
  /** RegularExpression Id. */
  int CURRENTMAP = 95;
  /** RegularExpression Id. */
  int CURVE = 96;
  /** RegularExpression Id. */
  int CYCLE = 97;
  /** RegularExpression Id. */
  int DATAORIGIN = 98;
  /** RegularExpression Id. */
  int DCFANINLOAD = 99;
  /** RegularExpression Id. */
  int DCFANOUTLOAD = 100;
  /** RegularExpression Id. */
  int DCMAXFANIN = 101;
  /** RegularExpression Id. */
  int DCMAXFANOUT = 102;
  /** RegularExpression Id. */
  int DELAY = 103;
  /** RegularExpression Id. */
  int DELTA = 104;
  /** RegularExpression Id. */
  int DERIVATION = 105;
  /** RegularExpression Id. */
  int DESIGN = 106;
  /** RegularExpression Id. */
  int DESIGNATOR = 107;
  /** RegularExpression Id. */
  int DIFFERENCE = 108;
  /** RegularExpression Id. */
  int DIRECTION = 109;
  /** RegularExpression Id. */
  int DISPLAY = 110;
  /** RegularExpression Id. */
  int DOMINATES = 111;
  /** RegularExpression Id. */
  int DOT = 112;
  /** RegularExpression Id. */
  int DURATION = 113;
  /** RegularExpression Id. */
  int E = 114;
  /** RegularExpression Id. */
  int EDIF = 115;
  /** RegularExpression Id. */
  int EDIFLEVEL = 116;
  /** RegularExpression Id. */
  int EDIFVERSION = 117;
  /** RegularExpression Id. */
  int ENCLOSUREDISTANCE = 118;
  /** RegularExpression Id. */
  int ENDTYPE = 119;
  /** RegularExpression Id. */
  int ENTRY = 120;
  /** RegularExpression Id. */
  int EVENT = 121;
  /** RegularExpression Id. */
  int EXACTLY = 122;
  /** RegularExpression Id. */
  int EXTERNAL = 123;
  /** RegularExpression Id. */
  int FABRICATE = 124;
  /** RegularExpression Id. */
  int FALSE = 125;
  /** RegularExpression Id. */
  int FIGURE = 126;
  /** RegularExpression Id. */
  int FIGUREAREA = 127;
  /** RegularExpression Id. */
  int FIGUREGROUP = 128;
  /** RegularExpression Id. */
  int FIGUREGROUPOBJECT = 129;
  /** RegularExpression Id. */
  int FIGUREGROUPOVERRIDE = 130;
  /** RegularExpression Id. */
  int FIGUREGROUPREF = 131;
  /** RegularExpression Id. */
  int FIGUREPERIMETER = 132;
  /** RegularExpression Id. */
  int FIGUREWIDTH = 133;
  /** RegularExpression Id. */
  int FILLPATTERN = 134;
  /** RegularExpression Id. */
  int FOLLOW = 135;
  /** RegularExpression Id. */
  int FORBIDDENEVENT = 136;
  /** RegularExpression Id. */
  int GLOBALPORTREF = 137;
  /** RegularExpression Id. */
  int GREATERTHAN = 138;
  /** RegularExpression Id. */
  int GRIDMAP = 139;
  /** RegularExpression Id. */
  int IGNORE = 140;
  /** RegularExpression Id. */
  int INCLUDEFIGUREGROUP = 141;
  /** RegularExpression Id. */
  int INITIAL = 142;
  /** RegularExpression Id. */
  int INSTANCE = 143;
  /** RegularExpression Id. */
  int INSTANCEBACKANNOTATE = 144;
  /** RegularExpression Id. */
  int INSTANCEGROUP = 145;
  /** RegularExpression Id. */
  int INSTANCEMAP = 146;
  /** RegularExpression Id. */
  int INSTANCEREF = 147;
  /** RegularExpression Id. */
  int INTEGER = 148;
  /** RegularExpression Id. */
  int INTEGERDISPLAY = 149;
  /** RegularExpression Id. */
  int INTERFACE = 150;
  /** RegularExpression Id. */
  int INTERFIGUREGROUPSPACING = 151;
  /** RegularExpression Id. */
  int INTERSECTION = 152;
  /** RegularExpression Id. */
  int INTRAFIGUREGROUPSPACING = 153;
  /** RegularExpression Id. */
  int INVERSE = 154;
  /** RegularExpression Id. */
  int ISOLATED = 155;
  /** RegularExpression Id. */
  int JOINED = 156;
  /** RegularExpression Id. */
  int JUSTIFY = 157;
  /** RegularExpression Id. */
  int KEYWORDDISPLAY = 158;
  /** RegularExpression Id. */
  int KEYWORDLEVEL = 159;
  /** RegularExpression Id. */
  int KEYWORDMAP = 160;
  /** RegularExpression Id. */
  int LESSTHAN = 161;
  /** RegularExpression Id. */
  int LIBRARY = 162;
  /** RegularExpression Id. */
  int LIBRARYREF = 163;
  /** RegularExpression Id. */
  int LISTOFNETS = 164;
  /** RegularExpression Id. */
  int LISTOFPORTS = 165;
  /** RegularExpression Id. */
  int LOADDELAY = 166;
  /** RegularExpression Id. */
  int LOGICASSIGN = 167;
  /** RegularExpression Id. */
  int LOGICINPUT = 168;
  /** RegularExpression Id. */
  int LOGICLIST = 169;
  /** RegularExpression Id. */
  int LOGICMAPINPUT = 170;
  /** RegularExpression Id. */
  int LOGICMAPOUTPUT = 171;
  /** RegularExpression Id. */
  int LOGICONEOF = 172;
  /** RegularExpression Id. */
  int LOGICOUTPUT = 173;
  /** RegularExpression Id. */
  int LOGICPORT = 174;
  /** RegularExpression Id. */
  int LOGICREF = 175;
  /** RegularExpression Id. */
  int LOGICVALUE = 176;
  /** RegularExpression Id. */
  int LOGICWAVEFORM = 177;
  /** RegularExpression Id. */
  int MAINTAIN = 178;
  /** RegularExpression Id. */
  int MATCH = 179;
  /** RegularExpression Id. */
  int MEMBER = 180;
  /** RegularExpression Id. */
  int MINOMAX = 181;
  /** RegularExpression Id. */
  int MINOMAXDISPLAY = 182;
  /** RegularExpression Id. */
  int MNM = 183;
  /** RegularExpression Id. */
  int MULTIPLEVALUESET = 184;
  /** RegularExpression Id. */
  int MUSTJOIN = 185;
  /** RegularExpression Id. */
  int NAME = 186;
  /** RegularExpression Id. */
  int NET = 187;
  /** RegularExpression Id. */
  int NETBACKANNOTATE = 188;
  /** RegularExpression Id. */
  int NETBUNDLE = 189;
  /** RegularExpression Id. */
  int NETDELAY = 190;
  /** RegularExpression Id. */
  int NETGROUP = 191;
  /** RegularExpression Id. */
  int NETMAP = 192;
  /** RegularExpression Id. */
  int NETREF = 193;
  /** RegularExpression Id. */
  int NOCHANGE = 194;
  /** RegularExpression Id. */
  int NONPERMUTABLE = 195;
  /** RegularExpression Id. */
  int NOTALLOWED = 196;
  /** RegularExpression Id. */
  int NOTCHSPACING = 197;
  /** RegularExpression Id. */
  int NUMBER = 198;
  /** RegularExpression Id. */
  int NUMBERDEFINITION = 199;
  /** RegularExpression Id. */
  int NUMBERDISPLAY = 200;
  /** RegularExpression Id. */
  int OFFPAGECONNECTOR = 201;
  /** RegularExpression Id. */
  int OFFSETEVENT = 202;
  /** RegularExpression Id. */
  int OPENSHAPE = 203;
  /** RegularExpression Id. */
  int ORIENTATION = 204;
  /** RegularExpression Id. */
  int ORIGIN = 205;
  /** RegularExpression Id. */
  int OVERHANGDISTANCE = 206;
  /** RegularExpression Id. */
  int OVERLAPDISTANCE = 207;
  /** RegularExpression Id. */
  int OVERSIZE = 208;
  /** RegularExpression Id. */
  int OWNER = 209;
  /** RegularExpression Id. */
  int PAGE = 210;
  /** RegularExpression Id. */
  int PAGESIZE = 211;
  /** RegularExpression Id. */
  int PARAMETER = 212;
  /** RegularExpression Id. */
  int PARAMETERASSIGN = 213;
  /** RegularExpression Id. */
  int PARAMETERDISPLAY = 214;
  /** RegularExpression Id. */
  int PATH = 215;
  /** RegularExpression Id. */
  int PATHDELAY = 216;
  /** RegularExpression Id. */
  int PATHWIDTH = 217;
  /** RegularExpression Id. */
  int PERMUTABLE = 218;
  /** RegularExpression Id. */
  int PHYSICALDESIGNRULE = 219;
  /** RegularExpression Id. */
  int PLUG = 220;
  /** RegularExpression Id. */
  int POINT = 221;
  /** RegularExpression Id. */
  int POINTDISPLAY = 222;
  /** RegularExpression Id. */
  int POINTLIST = 223;
  /** RegularExpression Id. */
  int POLYGON = 224;
  /** RegularExpression Id. */
  int PORT = 225;
  /** RegularExpression Id. */
  int PORTBACKANNOTATE = 226;
  /** RegularExpression Id. */
  int PORTBUNDLE = 227;
  /** RegularExpression Id. */
  int PORTDELAY = 228;
  /** RegularExpression Id. */
  int PORTGROUP = 229;
  /** RegularExpression Id. */
  int PORTIMPLEMENTATION = 230;
  /** RegularExpression Id. */
  int PORTINSTANCE = 231;
  /** RegularExpression Id. */
  int PORTLIST = 232;
  /** RegularExpression Id. */
  int PORTLISTALIAS = 233;
  /** RegularExpression Id. */
  int PORTMAP = 234;
  /** RegularExpression Id. */
  int PORTREF = 235;
  /** RegularExpression Id. */
  int PROGRAM = 236;
  /** RegularExpression Id. */
  int PROPERTY = 237;
  /** RegularExpression Id. */
  int PROPERTYDISPLAY = 238;
  /** RegularExpression Id. */
  int PROTECTIONFRAME = 239;
  /** RegularExpression Id. */
  int PT = 240;
  /** RegularExpression Id. */
  int RANGEVECTOR = 241;
  /** RegularExpression Id. */
  int RECTANGLE = 242;
  /** RegularExpression Id. */
  int RECTANGLESIZE = 243;
  /** RegularExpression Id. */
  int RENAME = 244;
  /** RegularExpression Id. */
  int RESOLVES = 245;
  /** RegularExpression Id. */
  int SCALE = 246;
  /** RegularExpression Id. */
  int SCALEX = 247;
  /** RegularExpression Id. */
  int SCALEY = 248;
  /** RegularExpression Id. */
  int SECTION = 249;
  /** RegularExpression Id. */
  int SHAPE = 250;
  /** RegularExpression Id. */
  int SIMULATE = 251;
  /** RegularExpression Id. */
  int SIMULATIONINFO = 252;
  /** RegularExpression Id. */
  int SINGLEVALUESET = 253;
  /** RegularExpression Id. */
  int SITE = 254;
  /** RegularExpression Id. */
  int SOCKET = 255;
  /** RegularExpression Id. */
  int SOCKETSET = 256;
  /** RegularExpression Id. */
  int STATUS = 257;
  /** RegularExpression Id. */
  int STEADY = 258;
  /** RegularExpression Id. */
  int STRING = 259;
  /** RegularExpression Id. */
  int STRINGDISPLAY = 260;
  /** RegularExpression Id. */
  int STRONG = 261;
  /** RegularExpression Id. */
  int SYMBOL = 262;
  /** RegularExpression Id. */
  int SYMMETRY = 263;
  /** RegularExpression Id. */
  int TABLE = 264;
  /** RegularExpression Id. */
  int TABLEDEFAULT = 265;
  /** RegularExpression Id. */
  int TECHNOLOGY = 266;
  /** RegularExpression Id. */
  int TEXTHEIGHT = 267;
  /** RegularExpression Id. */
  int TIMEINTERVAL = 268;
  /** RegularExpression Id. */
  int TIMESTAMP = 269;
  /** RegularExpression Id. */
  int TIMING = 270;
  /** RegularExpression Id. */
  int TRANSFORM = 271;
  /** RegularExpression Id. */
  int TRANSITION = 272;
  /** RegularExpression Id. */
  int TRIGGER = 273;
  /** RegularExpression Id. */
  int TRUE = 274;
  /** RegularExpression Id. */
  int UNCONSTRAINED = 275;
  /** RegularExpression Id. */
  int UNDEFINED = 276;
  /** RegularExpression Id. */
  int UNION = 277;
  /** RegularExpression Id. */
  int UNIT = 278;
  /** RegularExpression Id. */
  int UNUSED = 279;
  /** RegularExpression Id. */
  int USERDATA = 280;
  /** RegularExpression Id. */
  int VERSION = 281;
  /** RegularExpression Id. */
  int VIEW = 282;
  /** RegularExpression Id. */
  int VIEWLIST = 283;
  /** RegularExpression Id. */
  int VIEWMAP = 284;
  /** RegularExpression Id. */
  int VIEWREF = 285;
  /** RegularExpression Id. */
  int VIEWTYPE = 286;
  /** RegularExpression Id. */
  int VISIBLE = 287;
  /** RegularExpression Id. */
  int VOLTAGEMAP = 288;
  /** RegularExpression Id. */
  int WAVEVALUE = 289;
  /** RegularExpression Id. */
  int WEAK = 290;
  /** RegularExpression Id. */
  int WEAKJOINED = 291;
  /** RegularExpression Id. */
  int WHEN = 292;
  /** RegularExpression Id. */
  int WRITTEN = 293;
  /** RegularExpression Id. */
  int ABS = 294;
  /** RegularExpression Id. */
  int AND = 295;
  /** RegularExpression Id. */
  int CEILING = 296;
  /** RegularExpression Id. */
  int CONCAT = 297;
  /** RegularExpression Id. */
  int CONSTANT = 298;
  /** RegularExpression Id. */
  int CONSTRAINT = 299;
  /** RegularExpression Id. */
  int DIVIDE = 300;
  /** RegularExpression Id. */
  int EQUAL = 301;
  /** RegularExpression Id. */
  int FIX = 302;
  /** RegularExpression Id. */
  int FLOOR = 303;
  /** RegularExpression Id. */
  int INCREASING = 304;
  /** RegularExpression Id. */
  int MAX = 305;
  /** RegularExpression Id. */
  int MIN = 306;
  /** RegularExpression Id. */
  int MOD = 307;
  /** RegularExpression Id. */
  int NEGATE = 308;
  /** RegularExpression Id. */
  int NOT = 309;
  /** RegularExpression Id. */
  int OR = 310;
  /** RegularExpression Id. */
  int POINTSUBTRACT = 311;
  /** RegularExpression Id. */
  int POINTSUM = 312;
  /** RegularExpression Id. */
  int PRODUCT = 313;
  /** RegularExpression Id. */
  int STRICTLYINCREASING = 314;
  /** RegularExpression Id. */
  int SUBTRACT = 315;
  /** RegularExpression Id. */
  int SUM = 316;
  /** RegularExpression Id. */
  int VARIABLE = 317;
  /** RegularExpression Id. */
  int XCOORD = 318;
  /** RegularExpression Id. */
  int XOR = 319;
  /** RegularExpression Id. */
  int YCOORD = 320;
  /** RegularExpression Id. */
  int INTEGER_TOK = 321;
  /** RegularExpression Id. */
  int STRING_TOK = 322;
  /** RegularExpression Id. */
  int IDENTIFIER = 323;
  /** RegularExpression Id. */
  int LETTER = 324;
  /** RegularExpression Id. */
  int DIGIT = 325;
  /** RegularExpression Id. */
  int LBR = 326;
  /** RegularExpression Id. */
  int RBR = 327;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"ANGLE\"",
    "\"BEHAVIOR\"",
    "\"CALCULATED\"",
    "\"CAPACITANCE\"",
    "\"CENTERCENTER\"",
    "\"CENTERLEFT\"",
    "\"CENTERRIGHT\"",
    "\"CHARGE\"",
    "\"CONDUCTANCE\"",
    "\"CURRENT\"",
    "\"DISTANCE\"",
    "\"DOCUMENT\"",
    "\"ENERGY\"",
    "\"EXTEND\"",
    "\"FLUX\"",
    "\"FREQUENCY\"",
    "\"GENERIC\"",
    "\"GRAPHIC\"",
    "\"INDUCTANCE\"",
    "\"INOUT\"",
    "\"INPUT\"",
    "\"LOGICMODEL\"",
    "\"LOWERCENTER\"",
    "\"LOWERLEFT\"",
    "\"LOWERRIGHT\"",
    "\"MASKLAYOUT\"",
    "\"MASS\"",
    "\"MEASURED\"",
    "\"MX\"",
    "\"MXR90\"",
    "\"MY\"",
    "\"MYR90\"",
    "\"NETLIST\"",
    "\"OUTPUT\"",
    "\"PCBLAYOUT\"",
    "\"POWER\"",
    "\"R0\"",
    "\"R180\"",
    "\"R270\"",
    "\"R90\"",
    "\"REQUIRED\"",
    "\"RESISTANCE\"",
    "\"RIPPER\"",
    "\"ROUND\"",
    "\"SCHEMATIC\"",
    "\"STRANGER\"",
    "\"SYMBOLIC\"",
    "\"TEMPERATURE\"",
    "\"TIE\"",
    "\"TIME\"",
    "\"TRUNCATE\"",
    "\"UPPERCENTER\"",
    "\"UPPERLEFT\"",
    "\"UPPERRIGHT\"",
    "\"VOLTAGE\"",
    "\"acLoad\"",
    "\"after\"",
    "\"annotate\"",
    "\"apply\"",
    "\"arc\"",
    "\"array\"",
    "\"arrayMacro\"",
    "\"arrayRelatedInfo\"",
    "\"arraySite\"",
    "\"atLeast\"",
    "\"atMost\"",
    "\"author\"",
    "\"baseArray\"",
    "\"becomes\"",
    "\"between\"",
    "\"boolean\"",
    "\"booleanDisplay\"",
    "\"booleanMap\"",
    "\"borderPattern\"",
    "\"borderWidth\"",
    "\"boundingBox\"",
    "\"cell\"",
    "\"cellRef\"",
    "\"cellType\"",
    "\"change\"",
    "\"circle\"",
    "\"color\"",
    "\"comment\"",
    "\"commentGraphics\"",
    "\"compound\"",
    "\"connectLocation\"",
    "\"contents\"",
    "\"cornerType\"",
    "\"criticality\"",
    "\"currentMap\"",
    "\"curve\"",
    "\"cycle\"",
    "\"dataOrigin\"",
    "\"dcFaninLoad\"",
    "\"dcFanoutLoad\"",
    "\"dcMaxFanin\"",
    "\"dcMaxFanout\"",
    "\"delay\"",
    "\"delta\"",
    "\"derivation\"",
    "\"design\"",
    "\"designator\"",
    "\"difference\"",
    "\"direction\"",
    "\"display\"",
    "\"dominates\"",
    "\"dot\"",
    "\"duration\"",
    "\"e\"",
    "\"edif\"",
    "\"edifLevel\"",
    "\"edifVersion\"",
    "\"enclosureDistance\"",
    "\"endType\"",
    "\"entry\"",
    "\"event\"",
    "\"exactly\"",
    "\"external\"",
    "\"fabricate\"",
    "\"false\"",
    "\"figure\"",
    "\"figureArea\"",
    "\"figureGroup\"",
    "\"figureGroupObject\"",
    "\"figureGroupOverride\"",
    "\"figureGroupRef\"",
    "\"figurePerimeter\"",
    "\"figureWidth\"",
    "\"fillPattern\"",
    "\"follow\"",
    "\"forbiddenEvent\"",
    "\"globalPortref\"",
    "\"greaterThan\"",
    "\"gridMap\"",
    "\"ignore\"",
    "\"includeFigureGroup\"",
    "\"initial\"",
    "\"instance\"",
    "\"instanceBackAnnotate\"",
    "\"instanceGroup\"",
    "\"instanceMap\"",
    "\"instanceRef\"",
    "\"integer\"",
    "\"integerDisplay\"",
    "\"interface\"",
    "\"interFigureGroupSpacing\"",
    "\"intersection\"",
    "\"intraFigureGroupSpacing\"",
    "\"inverse\"",
    "\"isolated\"",
    "\"joined\"",
    "\"justify\"",
    "\"keywordDisplay\"",
    "\"keywordLevel\"",
    "\"keywordMap\"",
    "\"lessThan\"",
    "\"library\"",
    "\"libraryRef\"",
    "\"listofNets\"",
    "\"listOfPorts\"",
    "\"loadDelay\"",
    "\"logicAssign\"",
    "\"logicInput\"",
    "\"logicList\"",
    "\"logicMapinput\"",
    "\"logicMapOutput\"",
    "\"logicOneOf\"",
    "\"logicOutput\"",
    "\"logicPort\"",
    "\"logicRef\"",
    "\"logicValue\"",
    "\"logicWaveform\"",
    "\"maintain\"",
    "\"match\"",
    "\"member\"",
    "\"miNoMax\"",
    "\"miNoMaxDisplay\"",
    "\"mnm\"",
    "\"multipleValueSet\"",
    "\"mustJoin\"",
    "\"name\"",
    "\"net\"",
    "\"netBackAnnotate\"",
    "\"netBundle\"",
    "\"netDelay\"",
    "\"netGroup\"",
    "\"netMap\"",
    "\"netRef\"",
    "\"noChange\"",
    "\"nonPermutable\"",
    "\"notAllowed\"",
    "\"notchSpacing\"",
    "\"number\"",
    "\"numberDefinition\"",
    "\"numberDisplay\"",
    "\"offPageConnector\"",
    "\"offsetEvent\"",
    "\"openShape\"",
    "\"orientation\"",
    "\"origin\"",
    "\"overhangDistance\"",
    "\"overlapDistance\"",
    "\"oversize\"",
    "\"owner\"",
    "\"page\"",
    "\"pageSize\"",
    "\"parameter\"",
    "\"parameterAssign\"",
    "\"parameterDisplay\"",
    "\"path\"",
    "\"pathDelay\"",
    "\"pathWidth\"",
    "\"permutable\"",
    "\"physicalDesignRule\"",
    "\"plug\"",
    "\"point\"",
    "\"pointDisplay\"",
    "\"pointList\"",
    "\"polygon\"",
    "\"port\"",
    "\"portBackAnnotate\"",
    "\"portBundle\"",
    "\"portDelay\"",
    "\"portGroup\"",
    "\"portImplementation\"",
    "\"portInstance\"",
    "\"portList\"",
    "\"portListAlias\"",
    "\"portMap\"",
    "<PORTREF>",
    "\"program\"",
    "\"property\"",
    "\"propertyDisplay\"",
    "\"protectionFrame\"",
    "\"pt\"",
    "\"rangeVector\"",
    "\"rectangle\"",
    "\"rectangleSize\"",
    "\"rename\"",
    "\"resolves\"",
    "\"scale\"",
    "\"scalex\"",
    "\"scaley\"",
    "\"section\"",
    "\"shape\"",
    "\"simulate\"",
    "\"simulationInfo\"",
    "\"singleValueSet\"",
    "\"site\"",
    "\"socket\"",
    "\"socketSet\"",
    "\"status\"",
    "\"steady\"",
    "\"string\"",
    "\"stringDisplay\"",
    "\"strong\"",
    "\"symbol\"",
    "\"symmetry\"",
    "\"table\"",
    "\"tableDefault\"",
    "\"technology\"",
    "\"textheight\"",
    "\"timeinterval\"",
    "\"timeStamp\"",
    "\"timing\"",
    "\"transform\"",
    "\"transition\"",
    "\"trigger\"",
    "\"true\"",
    "\"unconstrained\"",
    "\"undefined\"",
    "\"union\"",
    "\"unit\"",
    "\"unused\"",
    "\"userData\"",
    "\"version\"",
    "\"view\"",
    "\"viewList\"",
    "\"viewMap\"",
    "\"viewRef\"",
    "\"viewType\"",
    "\"visible\"",
    "\"voltageMap\"",
    "\"waveValue\"",
    "\"weak\"",
    "\"weakJoined\"",
    "\"when\"",
    "\"written\"",
    "\"abs\"",
    "\"and\"",
    "\"ceiling\"",
    "\"concat\"",
    "\"constant\"",
    "\"constraint\"",
    "\"divide\"",
    "\"equal\"",
    "\"fix\"",
    "\"floor\"",
    "\"increasing\"",
    "\"max\"",
    "\"min\"",
    "\"mod\"",
    "\"negate\"",
    "\"not\"",
    "\"or\"",
    "\"pointSubtract\"",
    "\"pointSum\"",
    "\"product\"",
    "\"strictlyIncreasing\"",
    "\"subtract\"",
    "\"sum\"",
    "\"variable\"",
    "\"xCoord\"",
    "\"xor\"",
    "\"yCoord\"",
    "<INTEGER_TOK>",
    "<STRING_TOK>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
  };

}
