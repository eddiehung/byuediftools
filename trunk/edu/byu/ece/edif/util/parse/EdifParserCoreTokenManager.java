/* EdifParserCoreTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. EdifParserCoreTokenManager.java */
package edu.byu.ece.edif.util.parse;
import edu.byu.ece.edif.core.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings("unused")public class EdifParserCoreTokenManager implements EdifParserCoreConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffcffffffffc0L) != 0L || (active1 & 0xf003ffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xfffe00000003ffffL) != 0L || (active4 & 0xfc7fdfffffffffffL) != 0L || (active5 & 0x1L) != 0L)
         {
            jjmatchedKind = 323;
            return 6;
         }
         if ((active1 & 0xffc000000000000L) != 0L || (active4 & 0x200000000000L) != 0L)
            return 6;
         if ((active0 & 0x30000000000L) != 0L || (active3 & 0x1f7fffffc0000L) != 0L || (active4 & 0x380000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            return 13;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffff9c3ffffffc0L) != 0L || (active1 & 0xfffbffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xfffef0001fffcfffL) != 0L || (active4 & 0xfe3fffffffffffffL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 1;
            }
            return 6;
         }
         if ((active0 & 0x20000000000L) != 0L || (active3 & 0x7ffe0000000L) != 0L || (active4 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 1;
            }
            return 12;
         }
         if ((active0 & 0x43c00000000L) != 0L || (active3 & 0x1000000003000L) != 0L || (active4 & 0x40000000000000L) != 0L)
            return 6;
         return -1;
      case 2:
         if ((active3 & 0x7fe00000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 2;
            }
            return 11;
         }
         if ((active0 & 0xffbfdbebffffffc0L) != 0L || (active1 & 0xfffafffffffffffdL) != 0L || (active2 & 0x77fffffffffffffL) != 0L || (active3 & 0xfffef001ffffffccL) != 0L || (active4 & 0x6f91bf3fffffffffL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 2;
            }
            return 6;
         }
         if ((active0 & 0x40200000000000L) != 0L || (active1 & 0x1000000000002L) != 0L || (active2 & 0xf880000000000000L) != 0L || (active3 & 0x33L) != 0L || (active4 & 0x902e40c000000000L) != 0L)
            return 6;
         return -1;
      case 3:
         if ((active0 & 0x80180100100000L) != 0L || (active1 & 0x380000001c0000L) != 0L || (active2 & 0x400000000000000L) != 0L || (active3 & 0x40000000138c0000L) != 0L || (active4 & 0x1c7c440000L) != 0L)
            return 6;
         if ((active0 & 0xff3fc3eaffefffc0L) != 0L || (active1 & 0xffc2ffffffe3fffdL) != 0L || (active2 & 0xf37fffffffffffffL) != 0L || (active3 & 0xbffef001ec73ffffL) != 0L || (active4 & 0x6f91bf2383bbffffL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 3;
            }
            return 6;
         }
         if ((active3 & 0x7fe00000000L) != 0L)
            return 10;
         return -1;
      case 4:
         if ((active0 & 0x4002022806000040L) != 0L || (active1 & 0x230001830080003dL) != 0L || (active2 & 0x8000000000000L) != 0L || (active3 & 0x5c00000e0020000L) != 0L || (active4 & 0x180a00000200300L) != 0L)
            return 6;
         if ((active0 & 0xbf3dc1c2f9efff80L) != 0L || (active1 & 0xdcf2fe7cff7bffc0L) != 0L || (active2 & 0xf377ffffffffffffL) != 0L || (active3 & 0xba3ef7fd0f79ffffL) != 0L || (active4 & 0x6e111f2bfb9bfcffL) != 0L || (active5 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x20010080000c2000L) != 0L || (active1 & 0xc0000c0000600180L) != 0L || (active2 & 0x100000100010bfL) != 0L || (active3 & 0x81900000000021c3L) != 0L || (active4 & 0x401012000080407fL) != 0L || (active5 & 0x1L) != 0L)
            return 6;
         if ((active0 & 0x9f3cc142f9e3df80L) != 0L || (active1 & 0x1cf2f27cff1bfe78L) != 0L || (active2 & 0xf367ffffefffef40L) != 0L || (active3 & 0x3a2ef7fdcf79de3cL) != 0L || (active4 & 0x2f810d2bfb1bbe80L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 5;
            }
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000004000c08000L) != 0L || (active1 & 0x480400003087c40L) != 0L || (active2 & 0x60000c24304800L) != 0L || (active3 & 0x200140100000000L) != 0L || (active4 & 0x2000120b2020000L) != 0L)
            return 6;
         if ((active0 & 0x8f3cc102f9235f80L) != 0L || (active1 & 0x9872ba7cfc138238L) != 0L || (active2 & 0xf307fff3cbcfa77fL) != 0L || (active3 & 0x382ee3fccf79dfbcL) != 0L || (active4 & 0x2d810c0b4919be91L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 6;
            }
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x8118400200030080L) != 0L || (active1 & 0x802000014100000L) != 0L || (active2 & 0xc2048002080f8000L) != 0L || (active3 & 0x820630000090004L) != 0L || (active4 & 0x2900040049000080L) != 0L)
            return 6;
         if ((active0 & 0xe248100f9205f00L) != 0L || (active1 & 0x9070ba7cea03e238L) != 0L || (active2 & 0x31437ff9c3e0277fL) != 0L || (active3 & 0x300e80fccf70dfb8L) != 0L || (active4 & 0x481080b0019be11L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 7;
            }
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x404010020200000L) != 0L || (active1 & 0x1010a00000000220L) != 0L || (active2 & 0x2000424000400000L) != 0L || (active3 & 0xc003083700800L) != 0L || (active4 & 0x20010a001L) != 0L)
            return 6;
         if ((active0 & 0xa208000d9005f00L) != 0L || (active1 & 0x80601a7cea03e018L) != 0L || (active2 & 0x11433db9c3af277fL) != 0L || (active3 & 0x3002c2cc4c00d7b8L) != 0L || (active4 & 0x481080900091e10L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 8;
            }
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x8008000c9000900L) != 0L || (active1 & 0x80001a24a0004008L) != 0L || (active2 & 0x1111900000000L) != 0L || (active3 & 0x804000010L) != 0L || (active4 & 0x1080900010c00L) != 0L)
            return 6;
         if ((active0 & 0x220000010005600L) != 0L || (active1 & 0x6000584a03a010L) != 0L || (active2 & 0x11422ca0c3af277fL) != 0L || (active3 & 0x300ac2c44860d7a8L) != 0L || (active4 & 0x480000000081210L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x220000010005200L) != 0L || (active1 & 0x20004840030000L) != 0L || (active2 & 0x20a0000c046fL) != 0L || (active3 & 0x2000000001400L) != 0L)
            return 6;
         if ((active0 & 0x400L) != 0L || (active1 & 0x4000100a00a010L) != 0L || (active2 & 0x11420c00c3a32310L) != 0L || (active3 & 0x3008c2c44860c3a8L) != 0L || (active4 & 0x480000000081210L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 323;
               jjmatchedPos = 10;
            }
            return 6;
         }
         return -1;
      case 11:
         if ((active0 & 0x400L) != 0L || (active1 & 0x1000000000L) != 0L || (active2 & 0x81000000L) != 0L || (active3 & 0x8040000020L) != 0L || (active4 & 0x1200L) != 0L)
            return 6;
         if ((active1 & 0x4000000a00a010L) != 0L || (active2 & 0x11420c0042a3231eL) != 0L || (active3 & 0x3008c2440860c388L) != 0L || (active4 & 0x480000000080010L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active1 & 0x4000000a002010L) != 0L || (active2 & 0x1140080042a1211eL) != 0L || (active3 & 0x3000c0440860c280L) != 0L || (active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 12;
            return 6;
         }
         if ((active1 & 0x8000L) != 0L || (active2 & 0x2040000020200L) != 0L || (active3 & 0x8020000000108L) != 0L || (active4 & 0x80000000080010L) != 0L)
            return 6;
         return -1;
      case 13:
         if ((active1 & 0x4000000a000010L) != 0L || (active2 & 0x1100000002812016L) != 0L || (active3 & 0xc0440860c280L) != 0L || (active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 13;
            return 6;
         }
         if ((active1 & 0x2000L) != 0L || (active2 & 0x40080040200108L) != 0L || (active3 & 0x3000000000000000L) != 0L)
            return 6;
         return -1;
      case 14:
         if ((active1 & 0x40000000000010L) != 0L || (active2 & 0x100000002812006L) != 0L || (active3 & 0x4408404280L) != 0L || (active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 14;
            return 6;
         }
         if ((active1 & 0xa000000L) != 0L || (active2 & 0x1000000000000010L) != 0L || (active3 & 0xc00000208000L) != 0L)
            return 6;
         return -1;
      case 15:
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x2812006L) != 0L || (active3 & 0x4008000000L) != 0L || (active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 15;
            return 6;
         }
         if ((active1 & 0x10L) != 0L || (active2 & 0x100000000000000L) != 0L || (active3 & 0x400404280L) != 0L)
            return 6;
         return -1;
      case 16:
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x2L) != 0L)
            return 6;
         if ((active2 & 0x2812004L) != 0L || (active3 & 0x4008000000L) != 0L || (active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 16;
            return 6;
         }
         return -1;
      case 17:
         if ((active2 & 0x2000L) != 0L || (active3 & 0x4008000000L) != 0L || (active4 & 0x400000000000000L) != 0L)
            return 6;
         if ((active2 & 0x2810004L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 17;
            return 6;
         }
         return -1;
      case 18:
         if ((active2 & 0x4L) != 0L)
            return 6;
         if ((active2 & 0x2810000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 18;
            return 6;
         }
         return -1;
      case 19:
         if ((active2 & 0x10000L) != 0L)
            return 6;
         if ((active2 & 0x2800000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 19;
            return 6;
         }
         return -1;
      case 20:
         if ((active2 & 0x2800000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 20;
            return 6;
         }
         return -1;
      case 21:
         if ((active2 & 0x2800000L) != 0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 21;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 326);
      case 41:
         return jjStopAtPos(0, 327);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe000000000000040L, 0x1ffL, 0x0L, 0x0L, 0xc000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x3fe00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xff00L, 0x3fffc0000L, 0x0L, 0x0L, 0xf0000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x3fffc00000000L, 0x0L, 0x0L, 0x100000000000L, 0x0L);
      case 69:
      case 101:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0xff8000000000000L, 0x0L, 0x0L, 0x200000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0xf000000000000000L, 0x1ffL, 0x0L, 0xc00000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L, 0xe00L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L, 0xffff000L, 0x0L, 0x1000000000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x30000000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c0000000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x78000000L, 0x0L, 0x3fffe00000000L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x3f80000000L, 0x0L, 0x3fc000000000000L, 0x0L, 0xe000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0xfc00000000000000L, 0x1ffL, 0x30000000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L, 0x3fe00L, 0x40000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L, 0x0L, 0x1f7fffffc0000L, 0x380000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3fc0000000000L, 0x0L, 0x0L, 0x3e000000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c000000000000L, 0x0L, 0x0L, 0xffc0000000000000L, 0x1c000000000000ffL, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0x0L, 0x0L, 0x0L, 0x7ff00L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L, 0x0L, 0x0L, 0x1f80000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L, 0x0L, 0x20000001fe000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3e00000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xc000000000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 6);
         break;
      case 49:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 50:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 57:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000300L, active1, 0x3000000400000200L, active2, 0x40c000000000000L, active3, 0x2000003fc0000L, active4, 0x2002000200000300L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004010000000000L, active1, 0x7800000000L, active2, 0L, active3, 0x1c0000000000000L, active4, 0x4000000000000000L, active5, 0x1L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x38000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c04200401c80L, active1, 0xf80001c0c00L, active2, 0xf8100003c0000000L, active3, 0x23c000004000003L, active4, 0x10010c02000c00L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0x600L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x200000L, active2, 0L, active3, 0x400000008000000L, active4, 0x1000000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc1000000010000L, active1, 0xc000700000400000L, active2, 0x60003c0000007fL, active3, 0x7800000000000000L, active4, 0x45000fc007000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0x200L, active3, 0x10000000L, active4, 0x800000000000L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000007040040L, active1, 0x1c0000000000000L, active2, 0x80000007ffe000L, active3, 0L, active4, 0x1008000f80000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002020078024000L, active1, 0x180003f83f000L, active2, 0x3ffc010000180L, active3, 0x800007ffe000003cL, active4, 0x81a80e0100000001L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000000000L, active1, 0x1L, active2, 0L, active3, 0x800L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000a00000L, active1, 0x4000003eL, active2, 0xc00L, active3, 0xf00000003000L, active4, 0x200002000078000L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 84:
      case 116:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 240, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0xc0L, active2, 0L, active3, 0L, active4, 0x40000000000003eL, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000008000L, active1, 0x2000180000100L, active2, 0x300000020000000L, active3, 0x1c0L, active4, 0x1800000000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0x1c000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800080000L, active1, 0xc00000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10002000000000L, active1, 0x200000000L, active2, 0L, active3, 0L, active4, 0xc0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 6);
         break;
      case 55:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 56:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200802000L, active1, 0x400000000200000L, active2, 0x4000000000L, active3, 0x5c0000000000000L, active4, 0xc00018002L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x1000000000000000L, active2, 0xc00000000L, active3, 0L, active4, 0x800000000000300L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x40000200000400L, active2, 0x2000L, active3, 0x820c000000000004L, active4, 0x1000000080401L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 295, 6);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 307, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x80000000000000L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x240000L, active1, 0x200000000000000L, active2, 0x400L, active3, 0x1c800L, active4, 0x107d000004L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x101800000000L, active2, 0L, active3, 0x600L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040L, active1, 0xc000000000000000L, active2, 0x3ff800000003fL, active3, 0xc0000L, active4, 0x10000000000000L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000080L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38000040000000L, active2, 0x4000010004800L, active3, 0xe0003000L, active4, 0x180012000620000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000100L, active1, 0x20000180009c0040L, active2, 0x1000000000000c0L, active3, 0x100000000L, active4, 0x100000000L, active5, 0L);
      case 77:
      case 109:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 183, 6);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 316, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0xb0000000000000L, active1, 0x806007000080L, active2, 0x410000000000000L, active3, 0x18000000000001c0L, active4, 0x70c0L, active5, 0L);
      case 78:
      case 110:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000405c00L, active1, 0x18000000L, active2, 0x60000000001000L, active3, 0x2012000000020008L, active4, 0xe0000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x7000L, active2, 0x8000200L, active3, 0xf00000000000L, active4, 0x4200800000000000L, active5, 0x1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xe01000004000200L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 319, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x8002800008000L, active1, 0x22201a041803cL, active2, 0x100L, active3, 0x7fe04700000L, active4, 0x2400000002000038L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 294, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x800180010000L, active1, 0x4c0000000200L, active2, 0x2000032200f8000L, active3, 0x20000000000000L, active4, 0x80000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 112, 6);
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000c000080000L, active1, 0x900000400000900L, active2, 0xf008000003f00000L, active3, 0x4000000003800033L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x102000000100000L, active1, 0x20000L, active2, 0L, active3, 0x10000000L, active4, 0x200000840000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0x100200000000L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x20070000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 302, 6);
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 305, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L, active5, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1c0000000L, active3, 0x8000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 6);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 6);
         break;
      case 57:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000280L, active1, 0x200fc0000003cL, active2, 0x400L, active3, 0x10000000700010L, active4, 0x10200000000004L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L, active2, 0x3010000000000300L, active3, 0x1c0L, active4, 0x40L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0x400000000400000L, active2, 0x8000000000000L, active3, 0x20L, active4, 0x20000000000L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x18000L, active2, 0x4000004000000800L, active3, 0L, active4, 0x200000000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 186, 6);
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 6);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 274, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x4e04020070480000L, active1, 0x800200000000240L, active2, 0x5f00000L, active3, 0xa1000L, active4, 0x200103000L, active5, 0L);
      case 70:
      case 102:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 220, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x2002100000002000L, active4, 0x20000L, active5, 0L);
      case 72:
      case 104:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0x3000004L, active4, 0x400L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800008000000L, active1, 0x8e0000000000L, active2, 0x3ff8000000000L, active3, 0L, active4, 0x2400100080004018L, active5, 0L);
      case 75:
      case 107:
         if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0x800000001L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000040L, active1, 0x40000200187001L, active2, 0x80020c0L, active3, 0x1c0000000000000L, active4, 0x10000000300L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000000L, active2, 0L, active3, 0x4000001L, active4, 0x80L, active5, 0L);
      case 78:
      case 110:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 292, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x102000000000000L, active1, 0x200000028220000L, active2, 0x4000010000000L, active3, 0xe0000800L, active4, 0x180000000018000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xa000000000000000L, active1, 0x800480L, active2, 0x60000000001000L, active3, 0x20000000000000L, active4, 0x4000800000280020L, active5, 0x1L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x21008000800000L, active1, 0x400004000000L, active2, 0L, active3, 0x400600000000208L, active4, 0L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4a000L, active1, 0x1100000080000000L, active2, 0xc02000000L, active3, 0x1c002L, active4, 0x1000001000000L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x2000000000000000L, active2, 0x200000000L, active3, 0x8000400L, active4, 0xc0002800000L, active5, 0L);
      case 84:
      case 116:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 278, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000011c00L, active1, 0x80010050000000L, active2, 0x3000030200fc000L, active3, 0x20c87fc00000000L, active4, 0x800002100000802L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400007020000L, active1, 0xc000000000000000L, active2, 0x3fL, active3, 0x1800000000000000L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0x1c0000000L, active3, 0L, active4, 0x78000000L, active5, 0L);
      case 88:
      case 120:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 6);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 6);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 6);
         break;
      case 65:
      case 97:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x3000010000010000L, active1, 0x240L, active2, 0x1000000c0a0f8200L, active3, 0xc000000000205L, active4, 0x2000020100000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc00000000L, active4, 0x80000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000009000200L, active1, 0x200000000000L, active2, 0x3ff8000000000L, active3, 0L, active4, 0x400000000000000L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0x4000000000L, active3, 0x1001000000L, active4, 0x100001000004L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 6);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 6);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 6);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 6);
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 250, 6);
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000009c00L, active1, 0x1000bb01f800L, active2, 0x4010000010000000L, active3, 0x8182e000000005caL, active4, 0x1000000800281L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000L, active1, 0xc0000200000L, active2, 0x300000L, active3, 0x2100000000L, active4, 0x20000L, active5, 0L);
      case 72:
      case 104:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0x4020L, active4, 0x800L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000000000L, active1, 0x1000000040000000L, active2, 0x100000020004100L, active3, 0x20000c008002000L, active4, 0x10002001000L, active5, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 76:
      case 108:
         if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 301, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x10400000400000L, active2, 0L, active3, 0x3820030000008010L, active4, 0x8000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000020000L, active1, 0x400L, active2, 0x60000000000800L, active3, 0x10040000700000L, active4, 0x10000000L, active5, 0L);
      case 78:
      case 110:
         if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 277, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000080000L, active1, 0x801800000000L, active2, 0L, active3, 0x1000L, active4, 0x84438L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x40000404000100L, active2, 0x31c0000080L, active3, 0L, active4, 0x40L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 6);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 6);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 6);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 209, 6);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 303, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0xe00000070400000L, active1, 0xc800000000080000L, active2, 0x8000000005c0103fL, active3, 0x100000000000L, active4, 0x4800000020000000L, active5, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x80L, active2, 0L, active3, 0x90800L, active4, 0x1a000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 6);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 6);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 121, 6);
         else if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x402000000100000L, active2, 0x4000200000400L, active3, 0xc0000000L, active4, 0x1900c2040000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8200204100L, active1, 0L, active2, 0x2000000000002000L, active3, 0x4000000L, active4, 0x200000000000002L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x20020000000000L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 6);
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 6);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000038L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8104000080000000L, active1, 0xc20000007000L, active2, 0x64008000004840L, active3, 0x180014040000c000L, active4, 0x801040211000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000010004000L, active1, 0x1000000048000000L, active2, 0x1000000000000000L, active3, 0x800008000000L, active4, 0x200000000000000L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 6);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 6);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 6);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 279, 6);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 318, 6);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 320, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2100L, active3, 0x40000000L, active4, 0x200L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 6);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 6);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 6);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 6);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 244, 6);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 300, 6);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 308, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x220000L, active1, 0x8030000000080c00L, active2, 0x400030043fL, active3, 0x2000001001700000L, active4, 0x2020020800L, active5, 0L);
      case 70:
      case 102:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 193, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6000000000L, active2, 0x3022c00000L, active3, 0L, active4, 0x8000L, active5, 0L);
      case 71:
      case 103:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 261, 6);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 270, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000000000L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0x100000010L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x800L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00280L, active1, 0x2000800020000L, active2, 0x10000000000L, active3, 0x30002090000L, active4, 0x8110000L, active5, 0L);
      case 76:
      case 108:
         if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x410000020000100L, active1, 0x400000000000000L, active2, 0x4000020000000200L, active3, 0x80000010L, active4, 0x80000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0x8L, active2, 0xc0000000000L, active3, 0x4000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 205, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x18000L, active1, 0x800080093000000L, active2, 0x20000000000f8000L, active3, 0xc008000000004L, active4, 0x10000001000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0x8200300000000000L, active3, 0x200000100000000L, active4, 0x802000400L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 192, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0x100400000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 6);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 6);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 6);
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x820400240001c00L, active1, 0x100420018210L, active2, 0x800dc0000000L, active3, 0x602000000188L, active4, 0x80000000000L, active5, 0L);
      case 83:
      case 115:
         if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 257, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x40000000000060L, active2, 0x5000000L, active3, 0x20L, active4, 0x180000000080000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 6);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 6);
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 297, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x800001000000L, active1, 0x200000000000L, active2, 0x8000000L, active3, 0x4001400L, active4, 0x400000000002081L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x22000000000000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 135, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 247, 6);
         break;
      case 89:
      case 121:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 6);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 248, 6);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 258, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20800001000100L, active1, 0x9800086040000008L, active2, 0x40030c0200400000L, active3, 0xc001800L, active4, 0x80000002000L);
      case 67:
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 6);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x10400L, active1, 0L, active2, 0xf8000L, active3, 0x400000000L, active4, 0x800000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000001c0000100L, active3, 0x2000180L, active4, 0x10L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 6);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 154, 6);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 287, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x608400230000000L, active1, 0x100000000010L, active2, 0x800009002000L, active3, 0x22000000000600L, active4, 0x100000200L);
      case 70:
      case 102:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 6);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 285, 6);
         break;
      case 71:
      case 103:
         if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 296, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xfL, active3, 0xc000000000004L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x810000040000000L, active1, 0x200400000020L, active2, 0x204020002800000L, active3, 0xc0000000L, active4, 0x800000800L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L, active2, 0x100004000000000L, active3, 0x1001000000L, active4, 0x2400000200000400L);
      case 77:
      case 109:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 236, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 6);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 224, 6);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 249, 6);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 281, 6);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x220000L, active1, 0x804026000L, active2, 0x111000000000L, active3, 0x800004000L, active4, 0x40000100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10008000080L, active1, 0x2000000000000L, active2, 0x400000000000L, active3, 0x2000000010L, active4, 0x8000L);
      case 80:
      case 112:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 6);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 234, 6);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 284, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x108000L, active2, 0x2000000210L, active3, 0x4000008020L, active4, 0x40000000L);
      case 82:
      case 114:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 273, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0x20000000000200L, active2, 0x200400L, active3, 0L, active4, 0x80L);
      case 83:
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000L, active3, 0x38000000000L, active4, 0x1000008000001L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 6);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 6);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 313, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x8104000000004200L, active1, 0x8200ba000000L, active2, 0x40L, active3, 0x1800e00000700000L, active4, 0x1091000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40001000000000L, active2, 0x8000200000000000L, active3, 0L, active4, 0x180000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L, active2, 0x20L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 6);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 6);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 157, 6);
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x90000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 280, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x4200L, active1, 0x8200L, active2, 0x1000004000000000L, active3, 0x2000001001000020L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x80000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0x8L, active2, 0x1400000L, active3, 0x2000000000200L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 6);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 6);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 6);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 155, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x2000L, active2, 0x40000040200000L, active3, 0x800008000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 6);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 6);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 6);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 6);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 6);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 208, 6);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 211, 6);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 251, 6);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 286, 6);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 317, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0xc00L, active1, 0x10800000000000L, active2, 0x1001010000f0110L, active3, 0x700080L, active4, 0x101001L);
      case 70:
      case 102:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 175, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000020000000L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000040000000L, active1, 0x402020000L, active2, 0x2800000L, active3, 0x4000L, active4, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000001000L, active1, 0x20000010000L, active2, 0x20L, active3, 0x1000800000000100L, active4, 0x1080000010010L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 76:
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x848000010L, active2, 0x2001000080000000L, active3, 0xc004008000000L, active4, 0L);
      case 77:
      case 109:
         if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 312, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80004000L, active2, 0x100000000L, active3, 0L, active4, 0x100002000L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 6);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 6);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 178, 6);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x200800011000000L, active1, 0x106000000000L, active2, 0L, active3, 0L, active4, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0x200000000000L, active2, 0x2000000200L, active3, 0L, active4, 0x400L);
      case 80:
      case 112:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 191, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xd0000000000L, active3, 0x800L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 6);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8040000000000000L, active2, 0x40080000000fL, active3, 0L, active4, 0x88000L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 6);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 245, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L, active2, 0x28000000000L, active3, 0xc0000000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 6);
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 283, 6);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 298, 6);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 315, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000100L, active1, 0x1000081000000020L, active2, 0x200000000440L, active3, 0x28002001000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L, active2, 0L, active3, 0x2000000008L, active4, 0x200000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x400L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 190, 6);
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 263, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0x400000000000L, active4, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80004010L, active2, 0x100000000L, active3, 0x28400000000L, active4, 0x100080200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x800001000000L, active1, 0x100000000000L, active2, 0L, active3, 0x20L, active4, 0L);
      case 68:
      case 100:
         if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 276, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0x20L, active3, 0x400008004000L, active4, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 6);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 124, 6);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 150, 6);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 189, 6);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 203, 6);
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 289, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000100L, active1, 0x8040000000000000L, active2, 0x2000880000040L, active3, 0x8004000000410L, active4, 0x800000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0x400L);
      case 72:
      case 104:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 217, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000040000000L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20002440002000L, active2, 0x40048040202000L, active3, 0x9000L, active4, 0x400000000000000L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 116, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0x2000000804000000L, active4, 0L);
      case 77:
      case 109:
         if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 271, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x4600L, active1, 0L, active2, 0x1000000000000100L, active3, 0L, active4, 0x1080000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xa4808000000L, active2, 0x18000000000fL, active3, 0x1000800000000200L, active4, 0x10000L);
      case 80:
      case 112:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 229, 6);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 269, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000L, active2, 0x200000000000L, active3, 0x40000000L, active4, 0L);
      case 82:
      case 114:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000008L, active2, 0x2000080210L, active3, 0x600000L, active4, 0x1000L);
      case 83:
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x10L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 6);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 6);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 6);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 169, 6);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 6);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 223, 6);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 256, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000010000000L, active1, 0x8000L, active2, 0x1001000000L, active3, 0x2000000000008L, active4, 0x80000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000080000000L, active1, 0L, active2, 0x1010002800000L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 6);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 6);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 166, 6);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 216, 6);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 127, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x802000000L, active2, 0x100000000050400L, active3, 0x200008L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x4200L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 6);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 196, 6);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 291, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x400000L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 6);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 6);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 6);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 108, 6);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 176, 6);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 218, 6);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 227, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000010000000L, active1, 0L, active2, 0x80100L, active3, 0x8000000L, active4, 0L);
      case 70:
      case 102:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 163, 6);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 172, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 304, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000002000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000010L, active3, 0x4000000040a0L, active4, 0x80000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20040000000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 98, 6);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 101, 6);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 105, 6);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 272, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000040000000000L, active3, 0x1000808400000600L, active4, 0x400000000000000L);
      case 79:
      case 111:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20001000020000L, active2, 0L, active3, 0x2000000001000L, active4, 0L);
      case 80:
      case 112:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 6);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 6);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 160, 6);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 288, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x10L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 107, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L, active1, 0L, active2, 0x2820040L, active3, 0L, active4, 0x80000000000000L);
      case 83:
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 164, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L, active2, 0x40000040200000L, active3, 0x8000000008000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 11, 6);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 6);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 6);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 6);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 168, 6);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 267, 6);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 299, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x400L, active1, 0x40018010L, active2, 0x2000000220L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000L, active2, 0x28000000000fL, active3, 0x2000000000000000L, active4, 0x200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0x1000L);
      case 89:
      case 121:
         if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 266, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1008000000L, active2, 0L, active3, 0x40000000L, active4, 0x80000000001000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0x8000000000L, active4, 0x400000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 99, 6);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 6);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 6);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0x8010L, active2, 0x82800000L, active3, 0x2000004000000000L, active4, 0L);
      case 70:
      case 102:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(10, 147, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 72:
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 80, 6);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 133, 6);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x1008020000400000L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0x100L, active4, 0x210L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 117, 6);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(10, 134, 6);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 138, 6);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 167, 6);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 204, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000002a0L, active4, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1002000001020000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 10;
         }
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 146, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2002000L, active2, 0x4004004020000eL, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 28, 6);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 57, 6);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 241, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 165, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400008204000L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 6);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 102, 6);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 173, 6);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 202, 6);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x8000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 81, 6);
         break;
      case 89:
      case 121:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000008100L, active4, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 100, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 231, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x310L, active3, 0x200L, active4, 0x80000L);
      case 71:
      case 103:
         if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(11, 197, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000080L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 159, 6);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(11, 268, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000L, active2, 0x40000040200000L, active3, 0x8L, active4, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 152, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000004000000000L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x6L, active3, 0x400000000L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x400000000000L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 10, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000L, active2, 0x2000000002008L, active3, 0x800000000000L, active4, 0x400000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x2000000000600000L, active4, 0L);
      case 84:
      case 116:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(11, 265, 6);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000L, active2, 0x1000000000000000L, active3, 0x4000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100040000020000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 222, 6);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2, active3, active4, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x2000L, active2, 0x1040000040210000L, active3, 0x800000004000L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x200L, active4, 0L);
      case 68:
      case 100:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 275, 6);
         break;
      case 69:
      case 101:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(12, 195, 6);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 243, 6);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x100000000002008L, active3, 0x2000000000000000L, active4, 0x400000000000000L);
      case 70:
      case 102:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 137, 6);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0xa000010L, active2, 0L, active3, 0x200000L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L);
      case 77:
      case 109:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 177, 6);
         break;
      case 78:
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 79, 6);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x100L, active3, 0x8000L, active4, 0L);
      case 80:
      case 112:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 145, 6);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 233, 6);
         break;
      case 84:
      case 116:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 170, 6);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 311, 6);
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000000000L, active2, 0x10L, active3, 0x4400000080L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 200, 6);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(12, 260, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, active3, active4, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000000000L, active2, 0L, active3, 0x404400000000L, active4, 0x400000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x2000000L, active2, 0L, active3, 0x8000L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x14L, active3, 0L, active4, 0L);
      case 70:
      case 102:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(13, 131, 6);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2000L, active3, 0x200000L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x80L, active4, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x10L, active2, 0x10000L, active3, 0x8004000L, active4, 0L);
      case 79:
      case 111:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 252, 6);
         return jjMoveStringLiteralDfa14_0(active1, 0x8000000L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(13, 136, 6);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 171, 6);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 253, 6);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1000000000000000L, active3, 0x200L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 77, 6);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 149, 6);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 158, 6);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 182, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, active3, active4, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x400000L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x4000L, active4, 0L);
      case 69:
      case 101:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 188, 6);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 207, 6);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 239, 6);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x100000000000002L, active3, 0L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa15_0(active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(14, 91, 6);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(14, 213, 6);
         return jjMoveStringLiteralDfa15_0(active1, 0x40000000000000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x280L, active4, 0L);
      case 82:
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(14, 132, 6);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x2004L, active3, 0x8000000L, active4, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 89, 6);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x4400000000L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 238, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2, active3, active4, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000000000000L, active2, 0x2L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(15, 206, 6);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(15, 226, 6);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0x400000000000000L);
      case 78:
      case 110:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(15, 199, 6);
         break;
      case 79:
      case 111:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(15, 68, 6);
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x12000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(15, 201, 6);
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 184, 6);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 89:
      case 121:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(15, 214, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2, active3, active4, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 118, 6);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x4L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2800000L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(16, 129, 6);
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, active3, active4, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa18_0(active2, 0x10000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active2, 0x4L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(17, 219, 6);
         break;
      case 71:
      case 103:
         if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 314, 6);
         break;
      case 78:
      case 110:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 230, 6);
         break;
      case 80:
      case 112:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(17, 141, 6);
         return jjMoveStringLiteralDfa18_0(active2, 0x2800000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa19_0(active2, 0x2800000L);
      case 69:
      case 101:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(18, 130, 6);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa20_0(active2, 0x2800000L);
      case 69:
      case 101:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(19, 144, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2, 0L, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active2, 0x2800000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2, 0L, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active2, 0x2800000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2, 0L, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(22, 151, 6);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(22, 153, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 321)
                        kind = 321;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  else if (curChar == 38)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 321)
                     kind = 321;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 322)
                     kind = 322;
                  break;
               case 5:
                  if (curChar != 38)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 323)
                        kind = 323;
                     { jjCheckNAdd(6); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 3:
                  { jjAddStates(2, 3); }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 323)
                     kind = 323;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               case 8:
                  if ((0x4000000040L & l) != 0L && kind > 235)
                     kind = 235;
                  break;
               case 9:
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 15:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(2, 3); }
                  break;
               //default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
               default : if (i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   13, 18, 3, 4, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public EdifParserCoreTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public EdifParserCoreTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 19; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xcfL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[19];
    private final int[] jjstateSet = new int[2 * 19];

    
    protected char curChar;
}
