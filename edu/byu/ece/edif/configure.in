
AC_INIT(config.mk.in)

if test -z "$EDIF"; then
  echo "You must set the EDIF environment variable before running configure"
  exit 3
fi

if test ! -d "$EDIF"; then
   echo "\$EDIF is set to '$EDIF', but it does not exist"
   exit 3
fi

if test ! -w "$EDIF"; then
   echo "Warning: \$EDIF is set to '$EDIF', but it is not writable by you."
   echo "This may or may not be a problem.  If you are running under"
   echo "Windows, then you might be able to ignore this problem and"
   echo "proceed with the build.  If you continue to have problems,"
   echo "try upgrading to cygwin1.1.0 or later"
fi

AC_MSG_CHECKING([if \$EDIF ('$EDIF') contains "cygdrive"])
echo "$EDIF" | egrep 'cygdrive|cygwin' > /dev/null
status=$?
if test "$status" -eq 1 ; then
    AC_MSG_RESULT([ok
	'$EDIF' does not contain cygdrive or cygwin, which is right.])
else
    AC_MSG_WARN(['\$EDIF == $EDIF,
which contains 'cygdrive' or 'cygwin'.
It could be that you have incorrectly set EDIF.
If you have installed Cygwin in c:/cygwin, and your Ptolemy II installation
is in a directory outside of the c:/cygwin tree, then Cygwin may
change your EDIF variable to include "/cygdrive/c".  This
will cause problems with non-Cygwin tools like javac that do
not understand /cygdrive/c

EDIF can end up with cygdrive or cygwin in it if
you mistakenly do something like EDIF=`pwd`.

Under Cygwin, try permanently setting EDIF in the control panel 
(Start->Control Panels->Advanced->Environment Variables)
or temporary set it within bash:
  EDIF=c:/users/yourname/ptII
  export EDIF
and then rerun
  ./configure'])
fi

#if test ! -f glpk/Makefile; then
#   echo "You must run byucc/edif/glpk/configure before running byucc/edif/configure"
#   exit 3
#fi

#if test ! -f glpk/jni/java/glpk.jar; then
#   echo "You must run make in byucc/edif/glpk and create glpk.jar before running configure"
#   exit 3
#fi

# check for java
AC_PATH_PROG(JAVA, java, no)
if test $JAVA = no ; then
   AC_MSG_ERROR([could not find java - make sure it is in your PATH])
fi

AC_SUBST(JAVA)

# check for javac
AC_PATH_PROG(JAVAC, javac, no)
if test $JAVAC = no ; then
   AC_MSG_ERROR([could not find javac - make sure it is in your PATH])
fi

AC_SUBST(JAVAC)

# check for wget
AC_PATH_PROG(WGET, wget, no)
if test $WGET = no ; then
   AC_MSG_WARN([could not find wget - if you wish to compile the jacl.jar, please add this to your PATH])
fi
AC_SUBST(WGET)

# check for tar
AC_PATH_PROG(TAR, tar, no)
if test $TAR = no ; then
   AC_MSG_WARN([could not find tar - if you wish to compile the jacl.jar, please add this to your PATH])
fi
AC_SUBST(TAR)

# check for gunzip
AC_PATH_PROG(GUNZIP, gunzip, no)
if test $GUNZIP = no ; then
   AC_MSG_WARN([could not find gunzip - if you wish to compile the jacl.jar, please add this to your PATH])
fi
AC_SUBST(GUNZIP)

# check for jar
AC_PATH_PROG(JAR, jar, no)
if test $JAR = no ; then
   AC_MSG_WARN([could not find jar - if you wish to compile the jacl.jar, please add this to your PATH])
fi
AC_SUBST(TAR)


# check for jikes
AC_PATH_PROG(JIKES, jikes, no)
#if test $JIKES = no ; then
#   AC_MSG_ERROR([could not find jikes - make sure it is in your PATH if you would like to use it])
#fi

AC_SUBST(JIKES)

# check for javadoc
AC_PATH_PROG(JAVADOC, javadoc, no)
if test $JAVADOC = no ; then
AC_MSG_WARN([could not find javadoc - if you wish to run 'make docs' and generate the javadoc for the edif package, please put javadoc in your PATH])
#   AC_MSG_ERROR([could not find jikes - make sure it is in your PATH])
fi

AC_SUBST(JAVADOC)

# check for cvs
AC_PATH_PROG(CVS, cvs, no)
#if test $CVS = no ; then
#   AC_MSG_ERROR([could not find cvs - make sure it is in your PATH])
#fi
#AC_SUBST(CVS)

#check for javaCC/jjtree
AC_ARG_WITH(javacc, [  --with-javacc=PATH      specify the path to javacc (/usr/local/javacc) ], JAVACC_PATH=$withval, JAVACC_PATH=no)

if test $JAVACC_PATH = no ; then

   AC_PATH_PROG(JAVACC, javacc, no)
   if test $JAVACC = no ; then
       AC_MSG_WARN([could not find javaCC - if you wish to compile the .jj files in byucc/edif/javacc or in byucc/edif/xilinx, put it in your PATH, or specify its location with the --with-javacc=PATH option])
#      AC_MSG_ERROR([could not find javaCC - make sure it is in your PATH])
   fi

   AC_PATH_PROG(JJTREE, jjtree, no)
   if test $JJTREE = no ; then
       AC_MSG_WARN([could not find jjtree - if you wish to compile the .jjt files in byucc/edif/xilinx, put it in your PATH, or specify its location with the --with-javacc=PATH option])
#      AC_MSG_ERROR([could not find jjtree - make sure it is in your PATH])
   fi
else
   AC_MSG_CHECKING([for javaCC path])
   JAVACC=$JAVACC_PATH/bin/javacc
   AC_MSG_RESULT([$JAVACC])
   AC_MSG_CHECKING([for jjtree path])
   JJTREE=$JAVACC_PATH/bin/jjtree
   AC_MSG_RESULT([$JJTREE])
fi

AC_SUBST(JAVACC)
AC_SUBST(JJTREE)

AC_MSG_CHECKING([for the CLASSPATH separator])
case "`uname -s`" in
     CYGWIN_NT-*) CLASSPATHSEPARATOR=";";;
     CYGWIN_98-*) CLASSPATHSEPARATOR=";";;
     *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])

AC_SUBST(CLASSPATHSEPARATOR)


# JHDL jar
AC_MSG_CHECKING([for JHDL jar])
AC_ARG_WITH(jhdl, [  --with-jhdl=JARFILE     specify the path to your JHDL.jar file ], JHDL_JAR=$withval, JHDL_JAR=no)
AC_MSG_RESULT([$JHDL_JAR])
if test $JHDL_JAR = no ; then
   AC_MSG_WARN([could not find JHDL.jar - if you wish to include it for the build, specify its location using the --with-jhdl=JARFILE option])
   else		      
ECLIPSE_CLASSPATH_LIBS="$ECLIPSE_CLASSPATH_LIBS \	
 <classpathentry kind=\"lib\" path=\"$JHDL_JAR\"/> "
fi
AC_CHECK_FILE($JHDL_JAR, , JHDL_JAR=no)
AC_SUBST(JHDL_JAR)

#JSAP jar
AC_MSG_CHECKING([for JSAP jar])
AC_ARG_WITH(jsap, [  --with-jsap=JARFILE     specify the path to your JSAP jar ], JSAP_JAR=$withval, JSAP_JAR=no)
AC_MSG_RESULT([$JSAP_JAR])
AC_CHECK_FILE($JSAP_JAR, , JSAP_JAR=no)
if test $JSAP_JAR = no ; then
   AC_MSG_WARN([could not find JSAP jar - if you wish to include it for the build, specify its location using the --with-jsap=JARFILE option])
else
ECLIPSE_CLASSPATH_LIBS="$ECLIPSE_CLASSPATH_LIBS \
 <classpathentry kind=\"lib\" path=\"$JSAP_JAR\"/> "
fi
AC_SUBST(JSAP_JAR)

AC_SUBST(ECLIPSE_CLASSPATH_LIBS)


AC_OUTPUT([config.mk .classpath])
