/*
 *XilinxGenLib/*
/*
 * Copyright (c) 2013 Brigham Young University
 * 
 * This file is part of the BYU EDIF Tools.
 * 
 * BYU EDIF Tools is free software: you may redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 2 of the License, or (at your option) any
 * later version.
 * 
 * BYU EDIF Tools is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * A copy of the GNU General Public License is included with the BYU EDIF Tools.
 * It can be found at /edu/byu/edif/doc/gpl2.txt. You may also get a copy of the
 * license at <http://www.gnu.org/licenses/>.
 * 
 */

package edu.byu.ece.edif.arch.xilinx;

import edu.byu.ece.edif.core.EdifCell;
import edu.byu.ece.edif.core.EdifEnvironment;
import edu.byu.ece.edif.core.EdifLibrary;
import edu.byu.ece.edif.core.EdifNameConflictException;
import edu.byu.ece.edif.core.EdifPort;
import edu.byu.ece.edif.core.EdifRuntimeException;
import edu.byu.ece.edif.core.InvalidEdifNameException;
import edu.byu.ece.edif.core.NamedObject;

/*** This class is auto-generated - do not modify ***/

public class XilinxGenLib {

    public static EdifLibrary library;

    private static EdifCell _AND2;
    private static EdifCell _AND2B1;
    private static EdifCell _AND2B1L;
    private static EdifCell _AND2B2;
    private static EdifCell _AND3;
    private static EdifCell _AND3B1;
    private static EdifCell _AND3B2;
    private static EdifCell _AND3B3;
    private static EdifCell _AND4;
    private static EdifCell _AND4B1;
    private static EdifCell _AND4B2;
    private static EdifCell _AND4B3;
    private static EdifCell _AND4B4;
    private static EdifCell _AND5;
    private static EdifCell _AND5B1;
    private static EdifCell _AND5B2;
    private static EdifCell _AND5B3;
    private static EdifCell _AND5B4;
    private static EdifCell _AND5B5;
    private static EdifCell _AND6;
    private static EdifCell _AND7;
    private static EdifCell _AND8;
    private static EdifCell _AUTOBUF;
    private static EdifCell _BSCANE2;
    private static EdifCell _BSCAN_FPGACORE;
    private static EdifCell _BSCAN_SPARTAN3;
    private static EdifCell _BSCAN_SPARTAN3A;
    private static EdifCell _BSCAN_SPARTAN6;
    private static EdifCell _BSCAN_VIRTEX4;
    private static EdifCell _BSCAN_VIRTEX5;
    private static EdifCell _BSCAN_VIRTEX6;
    private static EdifCell _BUF;
    private static EdifCell _BUFCF;
    private static EdifCell _BUFE;
    private static EdifCell _BUFFOE;
    private static EdifCell _BUFG;
    private static EdifCell _BUFGCE;
    private static EdifCell _BUFGCE_1;
    private static EdifCell _BUFGCTRL;
    private static EdifCell _BUFGDLL;
    private static EdifCell _BUFGMUX;
    private static EdifCell _BUFGMUX_1;
    private static EdifCell _BUFGMUX_CTRL;
    private static EdifCell _BUFGMUX_VIRTEX4;
    private static EdifCell _BUFGP;
    private static EdifCell _BUFGSR;
    private static EdifCell _BUFGTS;
    private static EdifCell _BUFG_LB;
    private static EdifCell _BUFH;
    private static EdifCell _BUFHCE;
    private static EdifCell _BUFIO;
    private static EdifCell _BUFIO2;
    private static EdifCell _BUFIO2FB;
    private static EdifCell _BUFIO2_2CLK;
    private static EdifCell _BUFIODQS;
    private static EdifCell _BUFMR;
    private static EdifCell _BUFMRCE;
    private static EdifCell _BUFPLL;
    private static EdifCell _BUFPLL_MCB;
    private static EdifCell _BUFR;
    private static EdifCell _BUFT;
    private static EdifCell _CAPTUREE2;
    private static EdifCell _CAPTURE_FPGACORE;
    private static EdifCell _CAPTURE_SPARTAN3;
    private static EdifCell _CAPTURE_SPARTAN3A;
    private static EdifCell _CAPTURE_VIRTEX4;
    private static EdifCell _CAPTURE_VIRTEX5;
    private static EdifCell _CAPTURE_VIRTEX6;
    private static EdifCell _CARRY4;
    private static EdifCell _CFGLUT5;
    private static EdifCell _CLKDLL;
    private static EdifCell _CLKDLLE;
    private static EdifCell _CLKDLLHF;
    private static EdifCell _CLK_DIV10;
    private static EdifCell _CLK_DIV10R;
    private static EdifCell _CLK_DIV10RSD;
    private static EdifCell _CLK_DIV10SD;
    private static EdifCell _CLK_DIV12;
    private static EdifCell _CLK_DIV12R;
    private static EdifCell _CLK_DIV12RSD;
    private static EdifCell _CLK_DIV12SD;
    private static EdifCell _CLK_DIV14;
    private static EdifCell _CLK_DIV14R;
    private static EdifCell _CLK_DIV14RSD;
    private static EdifCell _CLK_DIV14SD;
    private static EdifCell _CLK_DIV16;
    private static EdifCell _CLK_DIV16R;
    private static EdifCell _CLK_DIV16RSD;
    private static EdifCell _CLK_DIV16SD;
    private static EdifCell _CLK_DIV2;
    private static EdifCell _CLK_DIV2R;
    private static EdifCell _CLK_DIV2RSD;
    private static EdifCell _CLK_DIV2SD;
    private static EdifCell _CLK_DIV4;
    private static EdifCell _CLK_DIV4R;
    private static EdifCell _CLK_DIV4RSD;
    private static EdifCell _CLK_DIV4SD;
    private static EdifCell _CLK_DIV6;
    private static EdifCell _CLK_DIV6R;
    private static EdifCell _CLK_DIV6RSD;
    private static EdifCell _CLK_DIV6SD;
    private static EdifCell _CLK_DIV8;
    private static EdifCell _CLK_DIV8R;
    private static EdifCell _CLK_DIV8RSD;
    private static EdifCell _CLK_DIV8SD;
    private static EdifCell _CONFIG;
    private static EdifCell _CRC32;
    private static EdifCell _CRC64;
    private static EdifCell _DCIRESET;
    private static EdifCell _DCM;
    private static EdifCell _DCM_ADV;
    private static EdifCell _DCM_BASE;
    private static EdifCell _DCM_CLKGEN;
    private static EdifCell _DCM_PS;
    private static EdifCell _DCM_SP;
    private static EdifCell _DNA_PORT;
    private static EdifCell _DSP48;
    private static EdifCell _DSP48A;
    private static EdifCell _DSP48A1;
    private static EdifCell _DSP48E;
    private static EdifCell _DSP48E1;
    private static EdifCell _EFUSE_USR;
    private static EdifCell _EMAC;
    private static EdifCell _FD;
    private static EdifCell _FDC;
    private static EdifCell _FDCE;
    private static EdifCell _FDCE_1;
    private static EdifCell _FDCP;
    private static EdifCell _FDCPE;
    private static EdifCell _FDCPE_1;
    private static EdifCell _FDCP_1;
    private static EdifCell _FDC_1;
    private static EdifCell _FDD;
    private static EdifCell _FDDC;
    private static EdifCell _FDDCE;
    private static EdifCell _FDDCP;
    private static EdifCell _FDDCPE;
    private static EdifCell _FDDP;
    private static EdifCell _FDDPE;
    private static EdifCell _FDDRCPE;
    private static EdifCell _FDDRRSE;
    private static EdifCell _FDE;
    private static EdifCell _FDE_1;
    private static EdifCell _FDP;
    private static EdifCell _FDPE;
    private static EdifCell _FDPE_1;
    private static EdifCell _FDP_1;
    private static EdifCell _FDR;
    private static EdifCell _FDRE;
    private static EdifCell _FDRE_1;
    private static EdifCell _FDRS;
    private static EdifCell _FDRSE;
    private static EdifCell _FDRSE_1;
    private static EdifCell _FDRS_1;
    private static EdifCell _FDR_1;
    private static EdifCell _FDS;
    private static EdifCell _FDSE;
    private static EdifCell _FDSE_1;
    private static EdifCell _FDS_1;
    private static EdifCell _FD_1;
    private static EdifCell _FIFO16;
    private static EdifCell _FIFO18;
    private static EdifCell _FIFO18E1;
    private static EdifCell _FIFO18_36;
    private static EdifCell _FIFO36;
    private static EdifCell _FIFO36E1;
    private static EdifCell _FIFO36_72;
    private static EdifCell _FIFO36_72_EXP;
    private static EdifCell _FIFO36_EXP;
    private static EdifCell _FMAP;
    private static EdifCell _FRAME_ECCE2;
    private static EdifCell _FRAME_ECC_VIRTEX4;
    private static EdifCell _FRAME_ECC_VIRTEX5;
    private static EdifCell _FRAME_ECC_VIRTEX6;
    private static EdifCell _FTC;
    private static EdifCell _FTCP;
    private static EdifCell _FTP;
    private static EdifCell _GND;
    private static EdifCell _GT11;
    private static EdifCell _GT11CLK;
    private static EdifCell _GT11CLK_MGT;
    private static EdifCell _GT11_CUSTOM;
    private static EdifCell _GT11_DUAL;
    private static EdifCell _GTHE1_QUAD;
    private static EdifCell _GTHE2_CHANNEL;
    private static EdifCell _GTHE2_COMMON;
    private static EdifCell _GTPA1_DUAL;
    private static EdifCell _GTPE2_CHANNEL;
    private static EdifCell _GTPE2_COMMON;
    private static EdifCell _GTP_DUAL;
    private static EdifCell _GTXE1;
    private static EdifCell _GTXE2_CHANNEL;
    private static EdifCell _GTXE2_COMMON;
    private static EdifCell _GTX_DUAL;
    private static EdifCell _IBUF;
    private static EdifCell _IBUFDS;
    private static EdifCell _IBUFDS_BLVDS_25;
    private static EdifCell _IBUFDS_DIFF_OUT;
    private static EdifCell _IBUFDS_DIFF_OUT_IBUFDISABLE;
    private static EdifCell _IBUFDS_DIFF_OUT_INTERMDISABLE;
    private static EdifCell _IBUFDS_DLY_ADJ;
    private static EdifCell _IBUFDS_GTE2;
    private static EdifCell _IBUFDS_GTHE1;
    private static EdifCell _IBUFDS_GTXE1;
    private static EdifCell _IBUFDS_IBUFDISABLE;
    private static EdifCell _IBUFDS_INTERMDISABLE;
    private static EdifCell _IBUFDS_LDT_25;
    private static EdifCell _IBUFDS_LVDSEXT_25;
    private static EdifCell _IBUFDS_LVDSEXT_25_DCI;
    private static EdifCell _IBUFDS_LVDSEXT_33;
    private static EdifCell _IBUFDS_LVDSEXT_33_DCI;
    private static EdifCell _IBUFDS_LVDS_25;
    private static EdifCell _IBUFDS_LVDS_25_DCI;
    private static EdifCell _IBUFDS_LVDS_33;
    private static EdifCell _IBUFDS_LVDS_33_DCI;
    private static EdifCell _IBUFDS_LVPECL_25;
    private static EdifCell _IBUFDS_LVPECL_33;
    private static EdifCell _IBUFDS_ULVDS_25;
    private static EdifCell _IBUFG;
    private static EdifCell _IBUFGDS;
    private static EdifCell _IBUFGDS_BLVDS_25;
    private static EdifCell _IBUFGDS_DIFF_OUT;
    private static EdifCell _IBUFGDS_LDT_25;
    private static EdifCell _IBUFGDS_LVDSEXT_25;
    private static EdifCell _IBUFGDS_LVDSEXT_25_DCI;
    private static EdifCell _IBUFGDS_LVDSEXT_33;
    private static EdifCell _IBUFGDS_LVDSEXT_33_DCI;
    private static EdifCell _IBUFGDS_LVDS_25;
    private static EdifCell _IBUFGDS_LVDS_25_DCI;
    private static EdifCell _IBUFGDS_LVDS_33;
    private static EdifCell _IBUFGDS_LVDS_33_DCI;
    private static EdifCell _IBUFGDS_LVPECL_25;
    private static EdifCell _IBUFGDS_LVPECL_33;
    private static EdifCell _IBUFGDS_ULVDS_25;
    private static EdifCell _IBUFG_AGP;
    private static EdifCell _IBUFG_CTT;
    private static EdifCell _IBUFG_GTL;
    private static EdifCell _IBUFG_GTLP;
    private static EdifCell _IBUFG_GTLP_DCI;
    private static EdifCell _IBUFG_GTL_DCI;
    private static EdifCell _IBUFG_HSTL_I;
    private static EdifCell _IBUFG_HSTL_II;
    private static EdifCell _IBUFG_HSTL_III;
    private static EdifCell _IBUFG_HSTL_III_18;
    private static EdifCell _IBUFG_HSTL_III_DCI;
    private static EdifCell _IBUFG_HSTL_III_DCI_18;
    private static EdifCell _IBUFG_HSTL_II_18;
    private static EdifCell _IBUFG_HSTL_II_DCI;
    private static EdifCell _IBUFG_HSTL_II_DCI_18;
    private static EdifCell _IBUFG_HSTL_IV;
    private static EdifCell _IBUFG_HSTL_IV_18;
    private static EdifCell _IBUFG_HSTL_IV_DCI;
    private static EdifCell _IBUFG_HSTL_IV_DCI_18;
    private static EdifCell _IBUFG_HSTL_I_18;
    private static EdifCell _IBUFG_HSTL_I_DCI;
    private static EdifCell _IBUFG_HSTL_I_DCI_18;
    private static EdifCell _IBUFG_LVCMOS12;
    private static EdifCell _IBUFG_LVCMOS15;
    private static EdifCell _IBUFG_LVCMOS18;
    private static EdifCell _IBUFG_LVCMOS2;
    private static EdifCell _IBUFG_LVCMOS25;
    private static EdifCell _IBUFG_LVCMOS33;
    private static EdifCell _IBUFG_LVDCI_15;
    private static EdifCell _IBUFG_LVDCI_18;
    private static EdifCell _IBUFG_LVDCI_25;
    private static EdifCell _IBUFG_LVDCI_33;
    private static EdifCell _IBUFG_LVDCI_DV2_15;
    private static EdifCell _IBUFG_LVDCI_DV2_18;
    private static EdifCell _IBUFG_LVDCI_DV2_25;
    private static EdifCell _IBUFG_LVDCI_DV2_33;
    private static EdifCell _IBUFG_LVDS;
    private static EdifCell _IBUFG_LVPECL;
    private static EdifCell _IBUFG_LVTTL;
    private static EdifCell _IBUFG_PCI33_3;
    private static EdifCell _IBUFG_PCI33_5;
    private static EdifCell _IBUFG_PCI66_3;
    private static EdifCell _IBUFG_PCIX;
    private static EdifCell _IBUFG_PCIX66_3;
    private static EdifCell _IBUFG_SSTL18_I;
    private static EdifCell _IBUFG_SSTL18_II;
    private static EdifCell _IBUFG_SSTL18_II_DCI;
    private static EdifCell _IBUFG_SSTL18_I_DCI;
    private static EdifCell _IBUFG_SSTL2_I;
    private static EdifCell _IBUFG_SSTL2_II;
    private static EdifCell _IBUFG_SSTL2_II_DCI;
    private static EdifCell _IBUFG_SSTL2_I_DCI;
    private static EdifCell _IBUFG_SSTL3_I;
    private static EdifCell _IBUFG_SSTL3_II;
    private static EdifCell _IBUFG_SSTL3_II_DCI;
    private static EdifCell _IBUFG_SSTL3_I_DCI;
    private static EdifCell _IBUF_AGP;
    private static EdifCell _IBUF_CTT;
    private static EdifCell _IBUF_DLY_ADJ;
    private static EdifCell _IBUF_GTL;
    private static EdifCell _IBUF_GTLP;
    private static EdifCell _IBUF_GTLP_DCI;
    private static EdifCell _IBUF_GTL_DCI;
    private static EdifCell _IBUF_HSTL_I;
    private static EdifCell _IBUF_HSTL_II;
    private static EdifCell _IBUF_HSTL_III;
    private static EdifCell _IBUF_HSTL_III_18;
    private static EdifCell _IBUF_HSTL_III_DCI;
    private static EdifCell _IBUF_HSTL_III_DCI_18;
    private static EdifCell _IBUF_HSTL_II_18;
    private static EdifCell _IBUF_HSTL_II_DCI;
    private static EdifCell _IBUF_HSTL_II_DCI_18;
    private static EdifCell _IBUF_HSTL_IV;
    private static EdifCell _IBUF_HSTL_IV_18;
    private static EdifCell _IBUF_HSTL_IV_DCI;
    private static EdifCell _IBUF_HSTL_IV_DCI_18;
    private static EdifCell _IBUF_HSTL_I_18;
    private static EdifCell _IBUF_HSTL_I_DCI;
    private static EdifCell _IBUF_HSTL_I_DCI_18;
    private static EdifCell _IBUF_IBUFDISABLE;
    private static EdifCell _IBUF_INTERMDISABLE;
    private static EdifCell _IBUF_LVCMOS12;
    private static EdifCell _IBUF_LVCMOS15;
    private static EdifCell _IBUF_LVCMOS18;
    private static EdifCell _IBUF_LVCMOS2;
    private static EdifCell _IBUF_LVCMOS25;
    private static EdifCell _IBUF_LVCMOS33;
    private static EdifCell _IBUF_LVDCI_15;
    private static EdifCell _IBUF_LVDCI_18;
    private static EdifCell _IBUF_LVDCI_25;
    private static EdifCell _IBUF_LVDCI_33;
    private static EdifCell _IBUF_LVDCI_DV2_15;
    private static EdifCell _IBUF_LVDCI_DV2_18;
    private static EdifCell _IBUF_LVDCI_DV2_25;
    private static EdifCell _IBUF_LVDCI_DV2_33;
    private static EdifCell _IBUF_LVDS;
    private static EdifCell _IBUF_LVPECL;
    private static EdifCell _IBUF_LVTTL;
    private static EdifCell _IBUF_PCI33_3;
    private static EdifCell _IBUF_PCI33_5;
    private static EdifCell _IBUF_PCI66_3;
    private static EdifCell _IBUF_PCIX;
    private static EdifCell _IBUF_PCIX66_3;
    private static EdifCell _IBUF_SSTL18_I;
    private static EdifCell _IBUF_SSTL18_II;
    private static EdifCell _IBUF_SSTL18_II_DCI;
    private static EdifCell _IBUF_SSTL18_I_DCI;
    private static EdifCell _IBUF_SSTL2_I;
    private static EdifCell _IBUF_SSTL2_II;
    private static EdifCell _IBUF_SSTL2_II_DCI;
    private static EdifCell _IBUF_SSTL2_I_DCI;
    private static EdifCell _IBUF_SSTL3_I;
    private static EdifCell _IBUF_SSTL3_II;
    private static EdifCell _IBUF_SSTL3_II_DCI;
    private static EdifCell _IBUF_SSTL3_I_DCI;
    private static EdifCell _ICAPE2;
    private static EdifCell _ICAP_SPARTAN3A;
    private static EdifCell _ICAP_SPARTAN6;
    private static EdifCell _ICAP_VIRTEX4;
    private static EdifCell _ICAP_VIRTEX5;
    private static EdifCell _ICAP_VIRTEX6;
    private static EdifCell _IDDR;
    private static EdifCell _IDDR2;
    private static EdifCell _IDDR_2CLK;
    private static EdifCell _IDELAY;
    private static EdifCell _IDELAYCTRL;
    private static EdifCell _IDELAYE2;
    private static EdifCell _IDELAYE2_FINEDELAY;
    private static EdifCell _IFDDRCPE;
    private static EdifCell _IFDDRRSE;
    private static EdifCell _ILD;
    private static EdifCell _INV;
    private static EdifCell _IN_FIFO;
    private static EdifCell _IOBUF;
    private static EdifCell _IOBUFDS;
    private static EdifCell _IOBUFDS_BLVDS_25;
    private static EdifCell _IOBUFDS_DCIEN;
    private static EdifCell _IOBUFDS_DIFF_OUT;
    private static EdifCell _IOBUFDS_DIFF_OUT_DCIEN;
    private static EdifCell _IOBUFDS_DIFF_OUT_INTERMDISABLE;
    private static EdifCell _IOBUFDS_INTERMDISABLE;
    private static EdifCell _IOBUFE;
    private static EdifCell _IOBUF_AGP;
    private static EdifCell _IOBUF_CTT;
    private static EdifCell _IOBUF_DCIEN;
    private static EdifCell _IOBUF_F_12;
    private static EdifCell _IOBUF_F_16;
    private static EdifCell _IOBUF_F_2;
    private static EdifCell _IOBUF_F_24;
    private static EdifCell _IOBUF_F_4;
    private static EdifCell _IOBUF_F_6;
    private static EdifCell _IOBUF_F_8;
    private static EdifCell _IOBUF_GTL;
    private static EdifCell _IOBUF_GTLP;
    private static EdifCell _IOBUF_GTLP_DCI;
    private static EdifCell _IOBUF_GTL_DCI;
    private static EdifCell _IOBUF_HSTL_I;
    private static EdifCell _IOBUF_HSTL_II;
    private static EdifCell _IOBUF_HSTL_III;
    private static EdifCell _IOBUF_HSTL_III_18;
    private static EdifCell _IOBUF_HSTL_II_18;
    private static EdifCell _IOBUF_HSTL_II_DCI;
    private static EdifCell _IOBUF_HSTL_II_DCI_18;
    private static EdifCell _IOBUF_HSTL_IV;
    private static EdifCell _IOBUF_HSTL_IV_18;
    private static EdifCell _IOBUF_HSTL_IV_DCI;
    private static EdifCell _IOBUF_HSTL_IV_DCI_18;
    private static EdifCell _IOBUF_HSTL_I_18;
    private static EdifCell _IOBUF_INTERMDISABLE;
    private static EdifCell _IOBUF_LVCMOS12;
    private static EdifCell _IOBUF_LVCMOS12_F_2;
    private static EdifCell _IOBUF_LVCMOS12_F_4;
    private static EdifCell _IOBUF_LVCMOS12_F_6;
    private static EdifCell _IOBUF_LVCMOS12_F_8;
    private static EdifCell _IOBUF_LVCMOS12_S_2;
    private static EdifCell _IOBUF_LVCMOS12_S_4;
    private static EdifCell _IOBUF_LVCMOS12_S_6;
    private static EdifCell _IOBUF_LVCMOS12_S_8;
    private static EdifCell _IOBUF_LVCMOS15;
    private static EdifCell _IOBUF_LVCMOS15_F_12;
    private static EdifCell _IOBUF_LVCMOS15_F_16;
    private static EdifCell _IOBUF_LVCMOS15_F_2;
    private static EdifCell _IOBUF_LVCMOS15_F_4;
    private static EdifCell _IOBUF_LVCMOS15_F_6;
    private static EdifCell _IOBUF_LVCMOS15_F_8;
    private static EdifCell _IOBUF_LVCMOS15_S_12;
    private static EdifCell _IOBUF_LVCMOS15_S_16;
    private static EdifCell _IOBUF_LVCMOS15_S_2;
    private static EdifCell _IOBUF_LVCMOS15_S_4;
    private static EdifCell _IOBUF_LVCMOS15_S_6;
    private static EdifCell _IOBUF_LVCMOS15_S_8;
    private static EdifCell _IOBUF_LVCMOS18;
    private static EdifCell _IOBUF_LVCMOS18_F_12;
    private static EdifCell _IOBUF_LVCMOS18_F_16;
    private static EdifCell _IOBUF_LVCMOS18_F_2;
    private static EdifCell _IOBUF_LVCMOS18_F_4;
    private static EdifCell _IOBUF_LVCMOS18_F_6;
    private static EdifCell _IOBUF_LVCMOS18_F_8;
    private static EdifCell _IOBUF_LVCMOS18_S_12;
    private static EdifCell _IOBUF_LVCMOS18_S_16;
    private static EdifCell _IOBUF_LVCMOS18_S_2;
    private static EdifCell _IOBUF_LVCMOS18_S_4;
    private static EdifCell _IOBUF_LVCMOS18_S_6;
    private static EdifCell _IOBUF_LVCMOS18_S_8;
    private static EdifCell _IOBUF_LVCMOS2;
    private static EdifCell _IOBUF_LVCMOS25;
    private static EdifCell _IOBUF_LVCMOS25_F_12;
    private static EdifCell _IOBUF_LVCMOS25_F_16;
    private static EdifCell _IOBUF_LVCMOS25_F_2;
    private static EdifCell _IOBUF_LVCMOS25_F_24;
    private static EdifCell _IOBUF_LVCMOS25_F_4;
    private static EdifCell _IOBUF_LVCMOS25_F_6;
    private static EdifCell _IOBUF_LVCMOS25_F_8;
    private static EdifCell _IOBUF_LVCMOS25_S_12;
    private static EdifCell _IOBUF_LVCMOS25_S_16;
    private static EdifCell _IOBUF_LVCMOS25_S_2;
    private static EdifCell _IOBUF_LVCMOS25_S_24;
    private static EdifCell _IOBUF_LVCMOS25_S_4;
    private static EdifCell _IOBUF_LVCMOS25_S_6;
    private static EdifCell _IOBUF_LVCMOS25_S_8;
    private static EdifCell _IOBUF_LVCMOS33;
    private static EdifCell _IOBUF_LVCMOS33_F_12;
    private static EdifCell _IOBUF_LVCMOS33_F_16;
    private static EdifCell _IOBUF_LVCMOS33_F_2;
    private static EdifCell _IOBUF_LVCMOS33_F_24;
    private static EdifCell _IOBUF_LVCMOS33_F_4;
    private static EdifCell _IOBUF_LVCMOS33_F_6;
    private static EdifCell _IOBUF_LVCMOS33_F_8;
    private static EdifCell _IOBUF_LVCMOS33_S_12;
    private static EdifCell _IOBUF_LVCMOS33_S_16;
    private static EdifCell _IOBUF_LVCMOS33_S_2;
    private static EdifCell _IOBUF_LVCMOS33_S_24;
    private static EdifCell _IOBUF_LVCMOS33_S_4;
    private static EdifCell _IOBUF_LVCMOS33_S_6;
    private static EdifCell _IOBUF_LVCMOS33_S_8;
    private static EdifCell _IOBUF_LVDCI_15;
    private static EdifCell _IOBUF_LVDCI_18;
    private static EdifCell _IOBUF_LVDCI_25;
    private static EdifCell _IOBUF_LVDCI_33;
    private static EdifCell _IOBUF_LVDCI_DV2_15;
    private static EdifCell _IOBUF_LVDCI_DV2_18;
    private static EdifCell _IOBUF_LVDCI_DV2_25;
    private static EdifCell _IOBUF_LVDCI_DV2_33;
    private static EdifCell _IOBUF_LVDS;
    private static EdifCell _IOBUF_LVPECL;
    private static EdifCell _IOBUF_LVTTL;
    private static EdifCell _IOBUF_LVTTL_F_12;
    private static EdifCell _IOBUF_LVTTL_F_16;
    private static EdifCell _IOBUF_LVTTL_F_2;
    private static EdifCell _IOBUF_LVTTL_F_24;
    private static EdifCell _IOBUF_LVTTL_F_4;
    private static EdifCell _IOBUF_LVTTL_F_6;
    private static EdifCell _IOBUF_LVTTL_F_8;
    private static EdifCell _IOBUF_LVTTL_S_12;
    private static EdifCell _IOBUF_LVTTL_S_16;
    private static EdifCell _IOBUF_LVTTL_S_2;
    private static EdifCell _IOBUF_LVTTL_S_24;
    private static EdifCell _IOBUF_LVTTL_S_4;
    private static EdifCell _IOBUF_LVTTL_S_6;
    private static EdifCell _IOBUF_LVTTL_S_8;
    private static EdifCell _IOBUF_PCI33_3;
    private static EdifCell _IOBUF_PCI33_5;
    private static EdifCell _IOBUF_PCI66_3;
    private static EdifCell _IOBUF_PCIX;
    private static EdifCell _IOBUF_PCIX66_3;
    private static EdifCell _IOBUF_SSTL18_I;
    private static EdifCell _IOBUF_SSTL18_II;
    private static EdifCell _IOBUF_SSTL18_II_DCI;
    private static EdifCell _IOBUF_SSTL2_I;
    private static EdifCell _IOBUF_SSTL2_II;
    private static EdifCell _IOBUF_SSTL2_II_DCI;
    private static EdifCell _IOBUF_SSTL3_I;
    private static EdifCell _IOBUF_SSTL3_II;
    private static EdifCell _IOBUF_SSTL3_II_DCI;
    private static EdifCell _IOBUF_S_12;
    private static EdifCell _IOBUF_S_16;
    private static EdifCell _IOBUF_S_2;
    private static EdifCell _IOBUF_S_24;
    private static EdifCell _IOBUF_S_4;
    private static EdifCell _IOBUF_S_6;
    private static EdifCell _IOBUF_S_8;
    private static EdifCell _IODELAY;
    private static EdifCell _IODELAY2;
    private static EdifCell _IODELAYE1;
    private static EdifCell _IODRP2;
    private static EdifCell _IODRP2_MCB;
    private static EdifCell _ISERDES;
    private static EdifCell _ISERDES2;
    private static EdifCell _ISERDESE1;
    private static EdifCell _ISERDESE2;
    private static EdifCell _ISERDES_NODELAY;
    private static EdifCell _JTAGPPC;
    private static EdifCell _JTAGPPC440;
    private static EdifCell _JTAG_SIME2;
    private static EdifCell _JTAG_SIM_SPARTAN3A;
    private static EdifCell _JTAG_SIM_SPARTAN6;
    private static EdifCell _JTAG_SIM_VIRTEX4;
    private static EdifCell _JTAG_SIM_VIRTEX5;
    private static EdifCell _JTAG_SIM_VIRTEX6;
    private static EdifCell _KEEP;
    private static EdifCell _KEEPER;
    private static EdifCell _KEY_CLEAR;
    private static EdifCell _LD;
    private static EdifCell _LDC;
    private static EdifCell _LDCE;
    private static EdifCell _LDCE_1;
    private static EdifCell _LDCP;
    private static EdifCell _LDCPE;
    private static EdifCell _LDCPE_1;
    private static EdifCell _LDCP_1;
    private static EdifCell _LDC_1;
    private static EdifCell _LDE;
    private static EdifCell _LDE_1;
    private static EdifCell _LDG;
    private static EdifCell _LDP;
    private static EdifCell _LDPE;
    private static EdifCell _LDPE_1;
    private static EdifCell _LDP_1;
    private static EdifCell _LD_1;
    private static EdifCell _LUT1;
    private static EdifCell _LUT1_D;
    private static EdifCell _LUT1_L;
    private static EdifCell _LUT2;
    private static EdifCell _LUT2_D;
    private static EdifCell _LUT2_L;
    private static EdifCell _LUT3;
    private static EdifCell _LUT3_D;
    private static EdifCell _LUT3_L;
    private static EdifCell _LUT4;
    private static EdifCell _LUT4_D;
    private static EdifCell _LUT4_L;
    private static EdifCell _LUT5;
    private static EdifCell _LUT5_D;
    private static EdifCell _LUT5_L;
    private static EdifCell _LUT6;
    private static EdifCell _LUT6_2;
    private static EdifCell _LUT6_D;
    private static EdifCell _LUT6_L;
    private static EdifCell _MCB;
    private static EdifCell _MERGE;
    private static EdifCell _MIN_OFF;
    private static EdifCell _MMCME2_ADV;
    private static EdifCell _MMCME2_BASE;
    private static EdifCell _MMCM_ADV;
    private static EdifCell _MMCM_BASE;
    private static EdifCell _MULT18X18;
    private static EdifCell _MULT18X18S;
    private static EdifCell _MULT18X18SIO;
    private static EdifCell _MULT_AND;
    private static EdifCell _MUXCY;
    private static EdifCell _MUXCY_D;
    private static EdifCell _MUXCY_L;
    private static EdifCell _MUXF5;
    private static EdifCell _MUXF5_D;
    private static EdifCell _MUXF5_L;
    private static EdifCell _MUXF6;
    private static EdifCell _MUXF6_D;
    private static EdifCell _MUXF6_L;
    private static EdifCell _MUXF7;
    private static EdifCell _MUXF7_D;
    private static EdifCell _MUXF7_L;
    private static EdifCell _MUXF8;
    private static EdifCell _MUXF8_D;
    private static EdifCell _MUXF8_L;
    private static EdifCell _NAND2;
    private static EdifCell _NAND2B1;
    private static EdifCell _NAND2B2;
    private static EdifCell _NAND3;
    private static EdifCell _NAND3B1;
    private static EdifCell _NAND3B2;
    private static EdifCell _NAND3B3;
    private static EdifCell _NAND4;
    private static EdifCell _NAND4B1;
    private static EdifCell _NAND4B2;
    private static EdifCell _NAND4B3;
    private static EdifCell _NAND4B4;
    private static EdifCell _NAND5;
    private static EdifCell _NAND5B1;
    private static EdifCell _NAND5B2;
    private static EdifCell _NAND5B3;
    private static EdifCell _NAND5B4;
    private static EdifCell _NAND5B5;
    private static EdifCell _NOR2;
    private static EdifCell _NOR2B1;
    private static EdifCell _NOR2B2;
    private static EdifCell _NOR3;
    private static EdifCell _NOR3B1;
    private static EdifCell _NOR3B2;
    private static EdifCell _NOR3B3;
    private static EdifCell _NOR4;
    private static EdifCell _NOR4B1;
    private static EdifCell _NOR4B2;
    private static EdifCell _NOR4B3;
    private static EdifCell _NOR4B4;
    private static EdifCell _NOR5;
    private static EdifCell _NOR5B1;
    private static EdifCell _NOR5B2;
    private static EdifCell _NOR5B3;
    private static EdifCell _NOR5B4;
    private static EdifCell _NOR5B5;
    private static EdifCell _OBUF;
    private static EdifCell _OBUFDS;
    private static EdifCell _OBUFDS_BLVDS_25;
    private static EdifCell _OBUFDS_LDT_25;
    private static EdifCell _OBUFDS_LVDSEXT_25;
    private static EdifCell _OBUFDS_LVDSEXT_33;
    private static EdifCell _OBUFDS_LVDS_25;
    private static EdifCell _OBUFDS_LVDS_33;
    private static EdifCell _OBUFDS_LVPECL_25;
    private static EdifCell _OBUFDS_LVPECL_33;
    private static EdifCell _OBUFDS_ULVDS_25;
    private static EdifCell _OBUFE;
    private static EdifCell _OBUFT;
    private static EdifCell _OBUFTDS;
    private static EdifCell _OBUFTDS_BLVDS_25;
    private static EdifCell _OBUFTDS_LDT_25;
    private static EdifCell _OBUFTDS_LVDSEXT_25;
    private static EdifCell _OBUFTDS_LVDSEXT_33;
    private static EdifCell _OBUFTDS_LVDS_25;
    private static EdifCell _OBUFTDS_LVDS_33;
    private static EdifCell _OBUFTDS_LVPECL_25;
    private static EdifCell _OBUFTDS_LVPECL_33;
    private static EdifCell _OBUFTDS_ULVDS_25;
    private static EdifCell _OBUFT_AGP;
    private static EdifCell _OBUFT_CTT;
    private static EdifCell _OBUFT_F_12;
    private static EdifCell _OBUFT_F_16;
    private static EdifCell _OBUFT_F_2;
    private static EdifCell _OBUFT_F_24;
    private static EdifCell _OBUFT_F_4;
    private static EdifCell _OBUFT_F_6;
    private static EdifCell _OBUFT_F_8;
    private static EdifCell _OBUFT_GTL;
    private static EdifCell _OBUFT_GTLP;
    private static EdifCell _OBUFT_GTLP_DCI;
    private static EdifCell _OBUFT_GTL_DCI;
    private static EdifCell _OBUFT_HSTL_I;
    private static EdifCell _OBUFT_HSTL_II;
    private static EdifCell _OBUFT_HSTL_III;
    private static EdifCell _OBUFT_HSTL_III_18;
    private static EdifCell _OBUFT_HSTL_III_DCI;
    private static EdifCell _OBUFT_HSTL_III_DCI_18;
    private static EdifCell _OBUFT_HSTL_II_18;
    private static EdifCell _OBUFT_HSTL_II_DCI;
    private static EdifCell _OBUFT_HSTL_II_DCI_18;
    private static EdifCell _OBUFT_HSTL_IV;
    private static EdifCell _OBUFT_HSTL_IV_18;
    private static EdifCell _OBUFT_HSTL_IV_DCI;
    private static EdifCell _OBUFT_HSTL_IV_DCI_18;
    private static EdifCell _OBUFT_HSTL_I_18;
    private static EdifCell _OBUFT_HSTL_I_DCI;
    private static EdifCell _OBUFT_HSTL_I_DCI_18;
    private static EdifCell _OBUFT_LVCMOS12;
    private static EdifCell _OBUFT_LVCMOS12_F_2;
    private static EdifCell _OBUFT_LVCMOS12_F_4;
    private static EdifCell _OBUFT_LVCMOS12_F_6;
    private static EdifCell _OBUFT_LVCMOS12_F_8;
    private static EdifCell _OBUFT_LVCMOS12_S_2;
    private static EdifCell _OBUFT_LVCMOS12_S_4;
    private static EdifCell _OBUFT_LVCMOS12_S_6;
    private static EdifCell _OBUFT_LVCMOS12_S_8;
    private static EdifCell _OBUFT_LVCMOS15;
    private static EdifCell _OBUFT_LVCMOS15_F_12;
    private static EdifCell _OBUFT_LVCMOS15_F_16;
    private static EdifCell _OBUFT_LVCMOS15_F_2;
    private static EdifCell _OBUFT_LVCMOS15_F_4;
    private static EdifCell _OBUFT_LVCMOS15_F_6;
    private static EdifCell _OBUFT_LVCMOS15_F_8;
    private static EdifCell _OBUFT_LVCMOS15_S_12;
    private static EdifCell _OBUFT_LVCMOS15_S_16;
    private static EdifCell _OBUFT_LVCMOS15_S_2;
    private static EdifCell _OBUFT_LVCMOS15_S_4;
    private static EdifCell _OBUFT_LVCMOS15_S_6;
    private static EdifCell _OBUFT_LVCMOS15_S_8;
    private static EdifCell _OBUFT_LVCMOS18;
    private static EdifCell _OBUFT_LVCMOS18_F_12;
    private static EdifCell _OBUFT_LVCMOS18_F_16;
    private static EdifCell _OBUFT_LVCMOS18_F_2;
    private static EdifCell _OBUFT_LVCMOS18_F_4;
    private static EdifCell _OBUFT_LVCMOS18_F_6;
    private static EdifCell _OBUFT_LVCMOS18_F_8;
    private static EdifCell _OBUFT_LVCMOS18_S_12;
    private static EdifCell _OBUFT_LVCMOS18_S_16;
    private static EdifCell _OBUFT_LVCMOS18_S_2;
    private static EdifCell _OBUFT_LVCMOS18_S_4;
    private static EdifCell _OBUFT_LVCMOS18_S_6;
    private static EdifCell _OBUFT_LVCMOS18_S_8;
    private static EdifCell _OBUFT_LVCMOS2;
    private static EdifCell _OBUFT_LVCMOS25;
    private static EdifCell _OBUFT_LVCMOS25_F_12;
    private static EdifCell _OBUFT_LVCMOS25_F_16;
    private static EdifCell _OBUFT_LVCMOS25_F_2;
    private static EdifCell _OBUFT_LVCMOS25_F_24;
    private static EdifCell _OBUFT_LVCMOS25_F_4;
    private static EdifCell _OBUFT_LVCMOS25_F_6;
    private static EdifCell _OBUFT_LVCMOS25_F_8;
    private static EdifCell _OBUFT_LVCMOS25_S_12;
    private static EdifCell _OBUFT_LVCMOS25_S_16;
    private static EdifCell _OBUFT_LVCMOS25_S_2;
    private static EdifCell _OBUFT_LVCMOS25_S_24;
    private static EdifCell _OBUFT_LVCMOS25_S_4;
    private static EdifCell _OBUFT_LVCMOS25_S_6;
    private static EdifCell _OBUFT_LVCMOS25_S_8;
    private static EdifCell _OBUFT_LVCMOS33;
    private static EdifCell _OBUFT_LVCMOS33_F_12;
    private static EdifCell _OBUFT_LVCMOS33_F_16;
    private static EdifCell _OBUFT_LVCMOS33_F_2;
    private static EdifCell _OBUFT_LVCMOS33_F_24;
    private static EdifCell _OBUFT_LVCMOS33_F_4;
    private static EdifCell _OBUFT_LVCMOS33_F_6;
    private static EdifCell _OBUFT_LVCMOS33_F_8;
    private static EdifCell _OBUFT_LVCMOS33_S_12;
    private static EdifCell _OBUFT_LVCMOS33_S_16;
    private static EdifCell _OBUFT_LVCMOS33_S_2;
    private static EdifCell _OBUFT_LVCMOS33_S_24;
    private static EdifCell _OBUFT_LVCMOS33_S_4;
    private static EdifCell _OBUFT_LVCMOS33_S_6;
    private static EdifCell _OBUFT_LVCMOS33_S_8;
    private static EdifCell _OBUFT_LVDCI_15;
    private static EdifCell _OBUFT_LVDCI_18;
    private static EdifCell _OBUFT_LVDCI_25;
    private static EdifCell _OBUFT_LVDCI_33;
    private static EdifCell _OBUFT_LVDCI_DV2_15;
    private static EdifCell _OBUFT_LVDCI_DV2_18;
    private static EdifCell _OBUFT_LVDCI_DV2_25;
    private static EdifCell _OBUFT_LVDCI_DV2_33;
    private static EdifCell _OBUFT_LVDS;
    private static EdifCell _OBUFT_LVPECL;
    private static EdifCell _OBUFT_LVTTL;
    private static EdifCell _OBUFT_LVTTL_F_12;
    private static EdifCell _OBUFT_LVTTL_F_16;
    private static EdifCell _OBUFT_LVTTL_F_2;
    private static EdifCell _OBUFT_LVTTL_F_24;
    private static EdifCell _OBUFT_LVTTL_F_4;
    private static EdifCell _OBUFT_LVTTL_F_6;
    private static EdifCell _OBUFT_LVTTL_F_8;
    private static EdifCell _OBUFT_LVTTL_S_12;
    private static EdifCell _OBUFT_LVTTL_S_16;
    private static EdifCell _OBUFT_LVTTL_S_2;
    private static EdifCell _OBUFT_LVTTL_S_24;
    private static EdifCell _OBUFT_LVTTL_S_4;
    private static EdifCell _OBUFT_LVTTL_S_6;
    private static EdifCell _OBUFT_LVTTL_S_8;
    private static EdifCell _OBUFT_PCI33_3;
    private static EdifCell _OBUFT_PCI33_5;
    private static EdifCell _OBUFT_PCI66_3;
    private static EdifCell _OBUFT_PCIX;
    private static EdifCell _OBUFT_PCIX66_3;
    private static EdifCell _OBUFT_SSTL18_I;
    private static EdifCell _OBUFT_SSTL18_II;
    private static EdifCell _OBUFT_SSTL18_II_DCI;
    private static EdifCell _OBUFT_SSTL18_I_DCI;
    private static EdifCell _OBUFT_SSTL2_I;
    private static EdifCell _OBUFT_SSTL2_II;
    private static EdifCell _OBUFT_SSTL2_II_DCI;
    private static EdifCell _OBUFT_SSTL2_I_DCI;
    private static EdifCell _OBUFT_SSTL3_I;
    private static EdifCell _OBUFT_SSTL3_II;
    private static EdifCell _OBUFT_SSTL3_II_DCI;
    private static EdifCell _OBUFT_SSTL3_I_DCI;
    private static EdifCell _OBUFT_S_12;
    private static EdifCell _OBUFT_S_16;
    private static EdifCell _OBUFT_S_2;
    private static EdifCell _OBUFT_S_24;
    private static EdifCell _OBUFT_S_4;
    private static EdifCell _OBUFT_S_6;
    private static EdifCell _OBUFT_S_8;
    private static EdifCell _OBUF_AGP;
    private static EdifCell _OBUF_CTT;
    private static EdifCell _OBUF_F_12;
    private static EdifCell _OBUF_F_16;
    private static EdifCell _OBUF_F_2;
    private static EdifCell _OBUF_F_24;
    private static EdifCell _OBUF_F_4;
    private static EdifCell _OBUF_F_6;
    private static EdifCell _OBUF_F_8;
    private static EdifCell _OBUF_GTL;
    private static EdifCell _OBUF_GTLP;
    private static EdifCell _OBUF_GTLP_DCI;
    private static EdifCell _OBUF_GTL_DCI;
    private static EdifCell _OBUF_HSTL_I;
    private static EdifCell _OBUF_HSTL_II;
    private static EdifCell _OBUF_HSTL_III;
    private static EdifCell _OBUF_HSTL_III_18;
    private static EdifCell _OBUF_HSTL_III_DCI;
    private static EdifCell _OBUF_HSTL_III_DCI_18;
    private static EdifCell _OBUF_HSTL_II_18;
    private static EdifCell _OBUF_HSTL_II_DCI;
    private static EdifCell _OBUF_HSTL_II_DCI_18;
    private static EdifCell _OBUF_HSTL_IV;
    private static EdifCell _OBUF_HSTL_IV_18;
    private static EdifCell _OBUF_HSTL_IV_DCI;
    private static EdifCell _OBUF_HSTL_IV_DCI_18;
    private static EdifCell _OBUF_HSTL_I_18;
    private static EdifCell _OBUF_HSTL_I_DCI;
    private static EdifCell _OBUF_HSTL_I_DCI_18;
    private static EdifCell _OBUF_LVCMOS12;
    private static EdifCell _OBUF_LVCMOS12_F_2;
    private static EdifCell _OBUF_LVCMOS12_F_4;
    private static EdifCell _OBUF_LVCMOS12_F_6;
    private static EdifCell _OBUF_LVCMOS12_F_8;
    private static EdifCell _OBUF_LVCMOS12_S_2;
    private static EdifCell _OBUF_LVCMOS12_S_4;
    private static EdifCell _OBUF_LVCMOS12_S_6;
    private static EdifCell _OBUF_LVCMOS12_S_8;
    private static EdifCell _OBUF_LVCMOS15;
    private static EdifCell _OBUF_LVCMOS15_F_12;
    private static EdifCell _OBUF_LVCMOS15_F_16;
    private static EdifCell _OBUF_LVCMOS15_F_2;
    private static EdifCell _OBUF_LVCMOS15_F_4;
    private static EdifCell _OBUF_LVCMOS15_F_6;
    private static EdifCell _OBUF_LVCMOS15_F_8;
    private static EdifCell _OBUF_LVCMOS15_S_12;
    private static EdifCell _OBUF_LVCMOS15_S_16;
    private static EdifCell _OBUF_LVCMOS15_S_2;
    private static EdifCell _OBUF_LVCMOS15_S_4;
    private static EdifCell _OBUF_LVCMOS15_S_6;
    private static EdifCell _OBUF_LVCMOS15_S_8;
    private static EdifCell _OBUF_LVCMOS18;
    private static EdifCell _OBUF_LVCMOS18_F_12;
    private static EdifCell _OBUF_LVCMOS18_F_16;
    private static EdifCell _OBUF_LVCMOS18_F_2;
    private static EdifCell _OBUF_LVCMOS18_F_4;
    private static EdifCell _OBUF_LVCMOS18_F_6;
    private static EdifCell _OBUF_LVCMOS18_F_8;
    private static EdifCell _OBUF_LVCMOS18_S_12;
    private static EdifCell _OBUF_LVCMOS18_S_16;
    private static EdifCell _OBUF_LVCMOS18_S_2;
    private static EdifCell _OBUF_LVCMOS18_S_4;
    private static EdifCell _OBUF_LVCMOS18_S_6;
    private static EdifCell _OBUF_LVCMOS18_S_8;
    private static EdifCell _OBUF_LVCMOS2;
    private static EdifCell _OBUF_LVCMOS25;
    private static EdifCell _OBUF_LVCMOS25_F_12;
    private static EdifCell _OBUF_LVCMOS25_F_16;
    private static EdifCell _OBUF_LVCMOS25_F_2;
    private static EdifCell _OBUF_LVCMOS25_F_24;
    private static EdifCell _OBUF_LVCMOS25_F_4;
    private static EdifCell _OBUF_LVCMOS25_F_6;
    private static EdifCell _OBUF_LVCMOS25_F_8;
    private static EdifCell _OBUF_LVCMOS25_S_12;
    private static EdifCell _OBUF_LVCMOS25_S_16;
    private static EdifCell _OBUF_LVCMOS25_S_2;
    private static EdifCell _OBUF_LVCMOS25_S_24;
    private static EdifCell _OBUF_LVCMOS25_S_4;
    private static EdifCell _OBUF_LVCMOS25_S_6;
    private static EdifCell _OBUF_LVCMOS25_S_8;
    private static EdifCell _OBUF_LVCMOS33;
    private static EdifCell _OBUF_LVCMOS33_F_12;
    private static EdifCell _OBUF_LVCMOS33_F_16;
    private static EdifCell _OBUF_LVCMOS33_F_2;
    private static EdifCell _OBUF_LVCMOS33_F_24;
    private static EdifCell _OBUF_LVCMOS33_F_4;
    private static EdifCell _OBUF_LVCMOS33_F_6;
    private static EdifCell _OBUF_LVCMOS33_F_8;
    private static EdifCell _OBUF_LVCMOS33_S_12;
    private static EdifCell _OBUF_LVCMOS33_S_16;
    private static EdifCell _OBUF_LVCMOS33_S_2;
    private static EdifCell _OBUF_LVCMOS33_S_24;
    private static EdifCell _OBUF_LVCMOS33_S_4;
    private static EdifCell _OBUF_LVCMOS33_S_6;
    private static EdifCell _OBUF_LVCMOS33_S_8;
    private static EdifCell _OBUF_LVDCI_15;
    private static EdifCell _OBUF_LVDCI_18;
    private static EdifCell _OBUF_LVDCI_25;
    private static EdifCell _OBUF_LVDCI_33;
    private static EdifCell _OBUF_LVDCI_DV2_15;
    private static EdifCell _OBUF_LVDCI_DV2_18;
    private static EdifCell _OBUF_LVDCI_DV2_25;
    private static EdifCell _OBUF_LVDCI_DV2_33;
    private static EdifCell _OBUF_LVDS;
    private static EdifCell _OBUF_LVPECL;
    private static EdifCell _OBUF_LVTTL;
    private static EdifCell _OBUF_LVTTL_F_12;
    private static EdifCell _OBUF_LVTTL_F_16;
    private static EdifCell _OBUF_LVTTL_F_2;
    private static EdifCell _OBUF_LVTTL_F_24;
    private static EdifCell _OBUF_LVTTL_F_4;
    private static EdifCell _OBUF_LVTTL_F_6;
    private static EdifCell _OBUF_LVTTL_F_8;
    private static EdifCell _OBUF_LVTTL_S_12;
    private static EdifCell _OBUF_LVTTL_S_16;
    private static EdifCell _OBUF_LVTTL_S_2;
    private static EdifCell _OBUF_LVTTL_S_24;
    private static EdifCell _OBUF_LVTTL_S_4;
    private static EdifCell _OBUF_LVTTL_S_6;
    private static EdifCell _OBUF_LVTTL_S_8;
    private static EdifCell _OBUF_PCI33_3;
    private static EdifCell _OBUF_PCI33_5;
    private static EdifCell _OBUF_PCI66_3;
    private static EdifCell _OBUF_PCIX;
    private static EdifCell _OBUF_PCIX66_3;
    private static EdifCell _OBUF_SSTL18_I;
    private static EdifCell _OBUF_SSTL18_II;
    private static EdifCell _OBUF_SSTL18_II_DCI;
    private static EdifCell _OBUF_SSTL18_I_DCI;
    private static EdifCell _OBUF_SSTL2_I;
    private static EdifCell _OBUF_SSTL2_II;
    private static EdifCell _OBUF_SSTL2_II_DCI;
    private static EdifCell _OBUF_SSTL2_I_DCI;
    private static EdifCell _OBUF_SSTL3_I;
    private static EdifCell _OBUF_SSTL3_II;
    private static EdifCell _OBUF_SSTL3_II_DCI;
    private static EdifCell _OBUF_SSTL3_I_DCI;
    private static EdifCell _OBUF_S_12;
    private static EdifCell _OBUF_S_16;
    private static EdifCell _OBUF_S_2;
    private static EdifCell _OBUF_S_24;
    private static EdifCell _OBUF_S_4;
    private static EdifCell _OBUF_S_6;
    private static EdifCell _OBUF_S_8;
    private static EdifCell _ODDR;
    private static EdifCell _ODDR2;
    private static EdifCell _ODELAYE2;
    private static EdifCell _ODELAYE2_FINEDELAY;
    private static EdifCell _OFDDRCPE;
    private static EdifCell _OFDDRRSE;
    private static EdifCell _OFDDRTCPE;
    private static EdifCell _OFDDRTRSE;
    private static EdifCell _OPT_OFF;
    private static EdifCell _OPT_UIM;
    private static EdifCell _OR2;
    private static EdifCell _OR2B1;
    private static EdifCell _OR2B2;
    private static EdifCell _OR2L;
    private static EdifCell _OR3;
    private static EdifCell _OR3B1;
    private static EdifCell _OR3B2;
    private static EdifCell _OR3B3;
    private static EdifCell _OR4;
    private static EdifCell _OR4B1;
    private static EdifCell _OR4B2;
    private static EdifCell _OR4B3;
    private static EdifCell _OR4B4;
    private static EdifCell _OR5;
    private static EdifCell _OR5B1;
    private static EdifCell _OR5B2;
    private static EdifCell _OR5B3;
    private static EdifCell _OR5B4;
    private static EdifCell _OR5B5;
    private static EdifCell _OR6;
    private static EdifCell _OR7;
    private static EdifCell _OR8;
    private static EdifCell _ORCY;
    private static EdifCell _OSERDES;
    private static EdifCell _OSERDES2;
    private static EdifCell _OSERDESE1;
    private static EdifCell _OSERDESE2;
    private static EdifCell _OUT_FIFO;
    private static EdifCell _PCIE_2_0;
    private static EdifCell _PCIE_2_1;
    private static EdifCell _PCIE_3_0;
    private static EdifCell _PCIE_A1;
    private static EdifCell _PCIE_EP;
    private static EdifCell _PCIE_INTERNAL_1_1;
    private static EdifCell _PHASER_IN;
    private static EdifCell _PHASER_IN_PHY;
    private static EdifCell _PHASER_OUT;
    private static EdifCell _PHASER_OUT_PHY;
    private static EdifCell _PHASER_REF;
    private static EdifCell _PHY_CONTROL;
    private static EdifCell _PLLE2_ADV;
    private static EdifCell _PLLE2_BASE;
    private static EdifCell _PLL_ADV;
    private static EdifCell _PLL_BASE;
    private static EdifCell _PMCD;
    private static EdifCell _POST_CRC_INTERNAL;
    private static EdifCell _PPC405_ADV;
    private static EdifCell _PPC440;
    private static EdifCell _PS7;
    private static EdifCell _PULLDOWN;
    private static EdifCell _PULLUP;
    private static EdifCell _RAM128X1D;
    private static EdifCell _RAM128X1S;
    private static EdifCell _RAM128X1S_1;
    private static EdifCell _RAM16X1D;
    private static EdifCell _RAM16X1D_1;
    private static EdifCell _RAM16X1S;
    private static EdifCell _RAM16X1S_1;
    private static EdifCell _RAM16X2S;
    private static EdifCell _RAM16X4S;
    private static EdifCell _RAM16X8S;
    private static EdifCell _RAM256X1S;
    private static EdifCell _RAM32M;
    private static EdifCell _RAM32X1D;
    private static EdifCell _RAM32X1D_1;
    private static EdifCell _RAM32X1S;
    private static EdifCell _RAM32X1S_1;
    private static EdifCell _RAM32X2S;
    private static EdifCell _RAM32X4S;
    private static EdifCell _RAM32X8S;
    private static EdifCell _RAM64M;
    private static EdifCell _RAM64X1D;
    private static EdifCell _RAM64X1D_1;
    private static EdifCell _RAM64X1S;
    private static EdifCell _RAM64X1S_1;
    private static EdifCell _RAM64X2S;
    private static EdifCell _RAMB16;
    private static EdifCell _RAMB16BWE;
    private static EdifCell _RAMB16BWER;
    private static EdifCell _RAMB16BWE_S18;
    private static EdifCell _RAMB16BWE_S18_S18;
    private static EdifCell _RAMB16BWE_S18_S9;
    private static EdifCell _RAMB16BWE_S36;
    private static EdifCell _RAMB16BWE_S36_S18;
    private static EdifCell _RAMB16BWE_S36_S36;
    private static EdifCell _RAMB16BWE_S36_S9;
    private static EdifCell _RAMB16_S1;
    private static EdifCell _RAMB16_S18;
    private static EdifCell _RAMB16_S18_S18;
    private static EdifCell _RAMB16_S18_S36;
    private static EdifCell _RAMB16_S1_S1;
    private static EdifCell _RAMB16_S1_S18;
    private static EdifCell _RAMB16_S1_S2;
    private static EdifCell _RAMB16_S1_S36;
    private static EdifCell _RAMB16_S1_S4;
    private static EdifCell _RAMB16_S1_S9;
    private static EdifCell _RAMB16_S2;
    private static EdifCell _RAMB16_S2_S18;
    private static EdifCell _RAMB16_S2_S2;
    private static EdifCell _RAMB16_S2_S36;
    private static EdifCell _RAMB16_S2_S4;
    private static EdifCell _RAMB16_S2_S9;
    private static EdifCell _RAMB16_S36;
    private static EdifCell _RAMB16_S36_S36;
    private static EdifCell _RAMB16_S4;
    private static EdifCell _RAMB16_S4_S18;
    private static EdifCell _RAMB16_S4_S36;
    private static EdifCell _RAMB16_S4_S4;
    private static EdifCell _RAMB16_S4_S9;
    private static EdifCell _RAMB16_S9;
    private static EdifCell _RAMB16_S9_S18;
    private static EdifCell _RAMB16_S9_S36;
    private static EdifCell _RAMB16_S9_S9;
    private static EdifCell _RAMB18;
    private static EdifCell _RAMB18E1;
    private static EdifCell _RAMB18SDP;
    private static EdifCell _RAMB32_S64_ECC;
    private static EdifCell _RAMB36;
    private static EdifCell _RAMB36E1;
    private static EdifCell _RAMB36SDP;
    private static EdifCell _RAMB36SDP_EXP;
    private static EdifCell _RAMB36_EXP;
    private static EdifCell _RAMB4_S1;
    private static EdifCell _RAMB4_S16;
    private static EdifCell _RAMB4_S16_S16;
    private static EdifCell _RAMB4_S1_S1;
    private static EdifCell _RAMB4_S1_S16;
    private static EdifCell _RAMB4_S1_S2;
    private static EdifCell _RAMB4_S1_S4;
    private static EdifCell _RAMB4_S1_S8;
    private static EdifCell _RAMB4_S2;
    private static EdifCell _RAMB4_S2_S16;
    private static EdifCell _RAMB4_S2_S2;
    private static EdifCell _RAMB4_S2_S4;
    private static EdifCell _RAMB4_S2_S8;
    private static EdifCell _RAMB4_S4;
    private static EdifCell _RAMB4_S4_S16;
    private static EdifCell _RAMB4_S4_S4;
    private static EdifCell _RAMB4_S4_S8;
    private static EdifCell _RAMB4_S8;
    private static EdifCell _RAMB4_S8_S16;
    private static EdifCell _RAMB4_S8_S8;
    private static EdifCell _RAMB8BWER;
    private static EdifCell _ROC;
    private static EdifCell _ROCBUF;
    private static EdifCell _ROM128X1;
    private static EdifCell _ROM16X1;
    private static EdifCell _ROM256X1;
    private static EdifCell _ROM32X1;
    private static EdifCell _ROM64X1;
    private static EdifCell _SIM_CONFIGE2;
    private static EdifCell _SIM_CONFIG_S3A;
    private static EdifCell _SIM_CONFIG_S3A_SERIAL;
    private static EdifCell _SIM_CONFIG_S6;
    private static EdifCell _SIM_CONFIG_S6_SERIAL;
    private static EdifCell _SIM_CONFIG_V5;
    private static EdifCell _SIM_CONFIG_V5_SERIAL;
    private static EdifCell _SIM_CONFIG_V6;
    private static EdifCell _SIM_CONFIG_V6_SERIAL;
    private static EdifCell _SPI_ACCESS;
    private static EdifCell _SRL16;
    private static EdifCell _SRL16E;
    private static EdifCell _SRL16E_1;
    private static EdifCell _SRL16_1;
    private static EdifCell _SRLC16;
    private static EdifCell _SRLC16E;
    private static EdifCell _SRLC16E_1;
    private static EdifCell _SRLC16_1;
    private static EdifCell _SRLC32E;
    private static EdifCell _STARTBUF_FPGACORE;
    private static EdifCell _STARTBUF_SPARTAN2;
    private static EdifCell _STARTBUF_SPARTAN3;
    private static EdifCell _STARTBUF_VIRTEX;
    private static EdifCell _STARTBUF_VIRTEX2;
    private static EdifCell _STARTBUF_VIRTEX4;
    private static EdifCell _STARTUPE2;
    private static EdifCell _STARTUP_FPGACORE;
    private static EdifCell _STARTUP_SPARTAN3;
    private static EdifCell _STARTUP_SPARTAN3A;
    private static EdifCell _STARTUP_SPARTAN3E;
    private static EdifCell _STARTUP_SPARTAN6;
    private static EdifCell _STARTUP_VIRTEX4;
    private static EdifCell _STARTUP_VIRTEX5;
    private static EdifCell _STARTUP_VIRTEX6;
    private static EdifCell _SUSPEND_SYNC;
    private static EdifCell _SYSMON;
    private static EdifCell _TBLOCK;
    private static EdifCell _TEMAC;
    private static EdifCell _TEMAC_SINGLE;
    private static EdifCell _TIMEGRP;
    private static EdifCell _TIMESPEC;
    private static EdifCell _TOC;
    private static EdifCell _TOCBUF;
    private static EdifCell _USR_ACCESSE2;
    private static EdifCell _USR_ACCESS_VIRTEX4;
    private static EdifCell _USR_ACCESS_VIRTEX5;
    private static EdifCell _USR_ACCESS_VIRTEX6;
    private static EdifCell _VCC;
    private static EdifCell _WIREAND;
    private static EdifCell _XADC;
    private static EdifCell _XNOR2;
    private static EdifCell _XNOR3;
    private static EdifCell _XNOR4;
    private static EdifCell _XNOR5;
    private static EdifCell _XOR2;
    private static EdifCell _XOR3;
    private static EdifCell _XOR4;
    private static EdifCell _XOR5;
    private static EdifCell _XORCY;
    private static EdifCell _XORCY_D;
    private static EdifCell _XORCY_L;
    private static EdifCell _ZHOLD_DELAY;
    private static EdifCell _BITSLICE_CONTROL;
    private static EdifCell _BUFCE_LEAF;
    private static EdifCell _BUFCE_ROW;
    private static EdifCell _BUFGCE_DIV;
    private static EdifCell _CARRY8;
    private static EdifCell _DNA_PORTE3;
    private static EdifCell _DSP48E2;
    private static EdifCell _FIFO18E2;
    private static EdifCell _FIFO36E2;
    private static EdifCell _GTHE3_CHANNEL;
    private static EdifCell _GTHE3_COMMON;
    private static EdifCell _IBUFDS_GTE3;
    private static EdifCell _ICAPE3;
    private static EdifCell _IDELAYE3;
    private static EdifCell _IN_FIFOE3;
    private static EdifCell _ISERDESE3;
    private static EdifCell _MMCME3_ADV;
    private static EdifCell _MMCME3_BASE;
    private static EdifCell _MUXF9;
    private static EdifCell _ODELAYE3;
    private static EdifCell _OSERDESE3;
    private static EdifCell _RAM256X1D;
    private static EdifCell _RAM32M16;
    private static EdifCell _RAM512X1S;
    private static EdifCell _RAM64M8;
    private static EdifCell _RAMB18E2;
    private static EdifCell _RAMB36E2;
    private static EdifCell _RX_BITSLICE;
    private static EdifCell _STARTUPE3;
    private static EdifCell _SYSMON_AMS;
    private static EdifCell _TXPLL_ADV;
    private static EdifCell _TXPLL_BASE;
    private static EdifCell _TX_BITSLICE;

    private static NamedObject O_port_name;
    private static NamedObject I0_port_name;
    private static NamedObject I1_port_name;
    private static NamedObject DI_port_name;
    private static NamedObject SRI_port_name;
    private static NamedObject I2_port_name;
    private static NamedObject I3_port_name;
    private static NamedObject I4_port_name;
    private static NamedObject I5_port_name;
    private static NamedObject I6_port_name;
    private static NamedObject I7_port_name;
    private static NamedObject I_port_name;
    private static NamedObject CAPTURE_port_name;
    private static NamedObject DRCK_port_name;
    private static NamedObject RESET_port_name;
    private static NamedObject RUNTEST_port_name;
    private static NamedObject SEL_port_name;
    private static NamedObject SHIFT_port_name;
    private static NamedObject TCK_port_name;
    private static NamedObject TDI_port_name;
    private static NamedObject TMS_port_name;
    private static NamedObject UPDATE_port_name;
    private static NamedObject TDO_port_name;
    private static NamedObject DRCK1_port_name;
    private static NamedObject DRCK2_port_name;
    private static NamedObject SEL1_port_name;
    private static NamedObject SEL2_port_name;
    private static NamedObject TDO1_port_name;
    private static NamedObject TDO2_port_name;
    private static NamedObject E_port_name;
    private static NamedObject CE_port_name;
    private static NamedObject CE0_port_name;
    private static NamedObject CE1_port_name;
    private static NamedObject IGNORE0_port_name;
    private static NamedObject IGNORE1_port_name;
    private static NamedObject S0_port_name;
    private static NamedObject S1_port_name;
    private static NamedObject S_port_name;
    private static NamedObject CLKOUT_port_name;
    private static NamedObject CLKIN_port_name;
    private static NamedObject DIVCLK_port_name;
    private static NamedObject IOCLK_port_name;
    private static NamedObject SERDESSTROBE_port_name;
    private static NamedObject IB_port_name;
    private static NamedObject DQSMASK_port_name;
    private static NamedObject LOCK_port_name;
    private static NamedObject GCLK_port_name;
    private static NamedObject LOCKED_port_name;
    private static NamedObject PLLIN_port_name;
    private static NamedObject IOCLK0_port_name;
    private static NamedObject IOCLK1_port_name;
    private static NamedObject SERDESSTROBE0_port_name;
    private static NamedObject SERDESSTROBE1_port_name;
    private static NamedObject PLLIN0_port_name;
    private static NamedObject PLLIN1_port_name;
    private static NamedObject CLR_port_name;
    private static NamedObject T_port_name;
    private static NamedObject CAP_port_name;
    private static NamedObject CLK_port_name;
    private static NamedObject CO_port_name;
    private static NamedObject CI_port_name;
    private static NamedObject CYINIT_port_name;
    private static NamedObject CDO_port_name;
    private static NamedObject O5_port_name;
    private static NamedObject O6_port_name;
    private static NamedObject CDI_port_name;
    private static NamedObject CLK0_port_name;
    private static NamedObject CLK180_port_name;
    private static NamedObject CLK270_port_name;
    private static NamedObject CLK2X_port_name;
    private static NamedObject CLK90_port_name;
    private static NamedObject CLKDV_port_name;
    private static NamedObject CLKFB_port_name;
    private static NamedObject RST_port_name;
    private static NamedObject CLK2X180_port_name;
    private static NamedObject CDRST_port_name;
    private static NamedObject CRCOUT_port_name;
    private static NamedObject CRCCLK_port_name;
    private static NamedObject CRCDATAVALID_port_name;
    private static NamedObject CRCDATAWIDTH_port_name;
    private static NamedObject CRCIN_port_name;
    private static NamedObject CRCRESET_port_name;
    private static NamedObject CLKFX_port_name;
    private static NamedObject CLKFX180_port_name;
    private static NamedObject PSDONE_port_name;
    private static NamedObject STATUS_port_name;
    private static NamedObject DSSEN_port_name;
    private static NamedObject PSCLK_port_name;
    private static NamedObject PSEN_port_name;
    private static NamedObject PSINCDEC_port_name;
    private static NamedObject DO_port_name;
    private static NamedObject DRDY_port_name;
    private static NamedObject DADDR_port_name;
    private static NamedObject DCLK_port_name;
    private static NamedObject DEN_port_name;
    private static NamedObject DWE_port_name;
    private static NamedObject CLKFXDV_port_name;
    private static NamedObject PROGDONE_port_name;
    private static NamedObject FREEZEDCM_port_name;
    private static NamedObject PROGCLK_port_name;
    private static NamedObject PROGDATA_port_name;
    private static NamedObject PROGEN_port_name;
    private static NamedObject DOUT_port_name;
    private static NamedObject DIN_port_name;
    private static NamedObject READ_port_name;
    private static NamedObject BCOUT_port_name;
    private static NamedObject P_port_name;
    private static NamedObject PCOUT_port_name;
    private static NamedObject A_port_name;
    private static NamedObject B_port_name;
    private static NamedObject BCIN_port_name;
    private static NamedObject C_port_name;
    private static NamedObject CARRYIN_port_name;
    private static NamedObject CARRYINSEL_port_name;
    private static NamedObject CEA_port_name;
    private static NamedObject CEB_port_name;
    private static NamedObject CEC_port_name;
    private static NamedObject CECARRYIN_port_name;
    private static NamedObject CECINSUB_port_name;
    private static NamedObject CECTRL_port_name;
    private static NamedObject CEM_port_name;
    private static NamedObject CEP_port_name;
    private static NamedObject OPMODE_port_name;
    private static NamedObject PCIN_port_name;
    private static NamedObject RSTA_port_name;
    private static NamedObject RSTB_port_name;
    private static NamedObject RSTC_port_name;
    private static NamedObject RSTCARRYIN_port_name;
    private static NamedObject RSTCTRL_port_name;
    private static NamedObject RSTM_port_name;
    private static NamedObject RSTP_port_name;
    private static NamedObject SUBTRACT_port_name;
    private static NamedObject CARRYOUT_port_name;
    private static NamedObject CED_port_name;
    private static NamedObject CEOPMODE_port_name;
    private static NamedObject D_port_name;
    private static NamedObject RSTD_port_name;
    private static NamedObject RSTOPMODE_port_name;
    private static NamedObject CARRYOUTF_port_name;
    private static NamedObject M_port_name;
    private static NamedObject ACOUT_port_name;
    private static NamedObject CARRYCASCOUT_port_name;
    private static NamedObject MULTSIGNOUT_port_name;
    private static NamedObject OVERFLOW_port_name;
    private static NamedObject PATTERNBDETECT_port_name;
    private static NamedObject PATTERNDETECT_port_name;
    private static NamedObject UNDERFLOW_port_name;
    private static NamedObject ACIN_port_name;
    private static NamedObject ALUMODE_port_name;
    private static NamedObject CARRYCASCIN_port_name;
    private static NamedObject CEA1_port_name;
    private static NamedObject CEA2_port_name;
    private static NamedObject CEALUMODE_port_name;
    private static NamedObject CEB1_port_name;
    private static NamedObject CEB2_port_name;
    private static NamedObject CEMULTCARRYIN_port_name;
    private static NamedObject MULTSIGNIN_port_name;
    private static NamedObject RSTALLCARRYIN_port_name;
    private static NamedObject RSTALUMODE_port_name;
    private static NamedObject CEAD_port_name;
    private static NamedObject CEINMODE_port_name;
    private static NamedObject INMODE_port_name;
    private static NamedObject RSTINMODE_port_name;
    private static NamedObject EFUSEUSR_port_name;
    private static NamedObject DCRHOSTDONEIR_port_name;
    private static NamedObject EMAC0CLIENTANINTERRUPT_port_name;
    private static NamedObject EMAC0CLIENTRXBADFRAME_port_name;
    private static NamedObject EMAC0CLIENTRXCLIENTCLKOUT_port_name;
    private static NamedObject EMAC0CLIENTRXD_port_name;
    private static NamedObject EMAC0CLIENTRXDVLD_port_name;
    private static NamedObject EMAC0CLIENTRXDVLDMSW_port_name;
    private static NamedObject EMAC0CLIENTRXDVREG6_port_name;
    private static NamedObject EMAC0CLIENTRXFRAMEDROP_port_name;
    private static NamedObject EMAC0CLIENTRXGOODFRAME_port_name;
    private static NamedObject EMAC0CLIENTRXSTATS_port_name;
    private static NamedObject EMAC0CLIENTRXSTATSBYTEVLD_port_name;
    private static NamedObject EMAC0CLIENTRXSTATSVLD_port_name;
    private static NamedObject EMAC0CLIENTTXACK_port_name;
    private static NamedObject EMAC0CLIENTTXCLIENTCLKOUT_port_name;
    private static NamedObject EMAC0CLIENTTXCOLLISION_port_name;
    private static NamedObject EMAC0CLIENTTXGMIIMIICLKOUT_port_name;
    private static NamedObject EMAC0CLIENTTXRETRANSMIT_port_name;
    private static NamedObject EMAC0CLIENTTXSTATS_port_name;
    private static NamedObject EMAC0CLIENTTXSTATSBYTEVLD_port_name;
    private static NamedObject EMAC0CLIENTTXSTATSVLD_port_name;
    private static NamedObject EMAC0PHYENCOMMAALIGN_port_name;
    private static NamedObject EMAC0PHYLOOPBACKMSB_port_name;
    private static NamedObject EMAC0PHYMCLKOUT_port_name;
    private static NamedObject EMAC0PHYMDOUT_port_name;
    private static NamedObject EMAC0PHYMDTRI_port_name;
    private static NamedObject EMAC0PHYMGTRXRESET_port_name;
    private static NamedObject EMAC0PHYMGTTXRESET_port_name;
    private static NamedObject EMAC0PHYPOWERDOWN_port_name;
    private static NamedObject EMAC0PHYSYNCACQSTATUS_port_name;
    private static NamedObject EMAC0PHYTXCHARDISPMODE_port_name;
    private static NamedObject EMAC0PHYTXCHARDISPVAL_port_name;
    private static NamedObject EMAC0PHYTXCHARISK_port_name;
    private static NamedObject EMAC0PHYTXCLK_port_name;
    private static NamedObject EMAC0PHYTXD_port_name;
    private static NamedObject EMAC0PHYTXEN_port_name;
    private static NamedObject EMAC0PHYTXER_port_name;
    private static NamedObject EMAC1CLIENTANINTERRUPT_port_name;
    private static NamedObject EMAC1CLIENTRXBADFRAME_port_name;
    private static NamedObject EMAC1CLIENTRXCLIENTCLKOUT_port_name;
    private static NamedObject EMAC1CLIENTRXD_port_name;
    private static NamedObject EMAC1CLIENTRXDVLD_port_name;
    private static NamedObject EMAC1CLIENTRXDVLDMSW_port_name;
    private static NamedObject EMAC1CLIENTRXDVREG6_port_name;
    private static NamedObject EMAC1CLIENTRXFRAMEDROP_port_name;
    private static NamedObject EMAC1CLIENTRXGOODFRAME_port_name;
    private static NamedObject EMAC1CLIENTRXSTATS_port_name;
    private static NamedObject EMAC1CLIENTRXSTATSBYTEVLD_port_name;
    private static NamedObject EMAC1CLIENTRXSTATSVLD_port_name;
    private static NamedObject EMAC1CLIENTTXACK_port_name;
    private static NamedObject EMAC1CLIENTTXCLIENTCLKOUT_port_name;
    private static NamedObject EMAC1CLIENTTXCOLLISION_port_name;
    private static NamedObject EMAC1CLIENTTXGMIIMIICLKOUT_port_name;
    private static NamedObject EMAC1CLIENTTXRETRANSMIT_port_name;
    private static NamedObject EMAC1CLIENTTXSTATS_port_name;
    private static NamedObject EMAC1CLIENTTXSTATSBYTEVLD_port_name;
    private static NamedObject EMAC1CLIENTTXSTATSVLD_port_name;
    private static NamedObject EMAC1PHYENCOMMAALIGN_port_name;
    private static NamedObject EMAC1PHYLOOPBACKMSB_port_name;
    private static NamedObject EMAC1PHYMCLKOUT_port_name;
    private static NamedObject EMAC1PHYMDOUT_port_name;
    private static NamedObject EMAC1PHYMDTRI_port_name;
    private static NamedObject EMAC1PHYMGTRXRESET_port_name;
    private static NamedObject EMAC1PHYMGTTXRESET_port_name;
    private static NamedObject EMAC1PHYPOWERDOWN_port_name;
    private static NamedObject EMAC1PHYSYNCACQSTATUS_port_name;
    private static NamedObject EMAC1PHYTXCHARDISPMODE_port_name;
    private static NamedObject EMAC1PHYTXCHARDISPVAL_port_name;
    private static NamedObject EMAC1PHYTXCHARISK_port_name;
    private static NamedObject EMAC1PHYTXCLK_port_name;
    private static NamedObject EMAC1PHYTXD_port_name;
    private static NamedObject EMAC1PHYTXEN_port_name;
    private static NamedObject EMAC1PHYTXER_port_name;
    private static NamedObject EMACDCRACK_port_name;
    private static NamedObject EMACDCRDBUS_port_name;
    private static NamedObject HOSTMIIMRDY_port_name;
    private static NamedObject HOSTRDDATA_port_name;
    private static NamedObject CLIENTEMAC0DCMLOCKED_port_name;
    private static NamedObject CLIENTEMAC0PAUSEREQ_port_name;
    private static NamedObject CLIENTEMAC0PAUSEVAL_port_name;
    private static NamedObject CLIENTEMAC0RXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMAC0TXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMAC0TXD_port_name;
    private static NamedObject CLIENTEMAC0TXDVLD_port_name;
    private static NamedObject CLIENTEMAC0TXDVLDMSW_port_name;
    private static NamedObject CLIENTEMAC0TXFIRSTBYTE_port_name;
    private static NamedObject CLIENTEMAC0TXGMIIMIICLKIN_port_name;
    private static NamedObject CLIENTEMAC0TXIFGDELAY_port_name;
    private static NamedObject CLIENTEMAC0TXUNDERRUN_port_name;
    private static NamedObject CLIENTEMAC1DCMLOCKED_port_name;
    private static NamedObject CLIENTEMAC1PAUSEREQ_port_name;
    private static NamedObject CLIENTEMAC1PAUSEVAL_port_name;
    private static NamedObject CLIENTEMAC1RXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMAC1TXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMAC1TXD_port_name;
    private static NamedObject CLIENTEMAC1TXDVLD_port_name;
    private static NamedObject CLIENTEMAC1TXDVLDMSW_port_name;
    private static NamedObject CLIENTEMAC1TXFIRSTBYTE_port_name;
    private static NamedObject CLIENTEMAC1TXGMIIMIICLKIN_port_name;
    private static NamedObject CLIENTEMAC1TXIFGDELAY_port_name;
    private static NamedObject CLIENTEMAC1TXUNDERRUN_port_name;
    private static NamedObject DCREMACABUS_port_name;
    private static NamedObject DCREMACCLK_port_name;
    private static NamedObject DCREMACDBUS_port_name;
    private static NamedObject DCREMACENABLE_port_name;
    private static NamedObject DCREMACREAD_port_name;
    private static NamedObject DCREMACWRITE_port_name;
    private static NamedObject HOSTADDR_port_name;
    private static NamedObject HOSTCLK_port_name;
    private static NamedObject HOSTEMAC1SEL_port_name;
    private static NamedObject HOSTMIIMSEL_port_name;
    private static NamedObject HOSTOPCODE_port_name;
    private static NamedObject HOSTREQ_port_name;
    private static NamedObject HOSTWRDATA_port_name;
    private static NamedObject PHYEMAC0COL_port_name;
    private static NamedObject PHYEMAC0CRS_port_name;
    private static NamedObject PHYEMAC0GTXCLK_port_name;
    private static NamedObject PHYEMAC0MCLKIN_port_name;
    private static NamedObject PHYEMAC0MDIN_port_name;
    private static NamedObject PHYEMAC0MIITXCLK_port_name;
    private static NamedObject PHYEMAC0PHYAD_port_name;
    private static NamedObject PHYEMAC0RXBUFERR_port_name;
    private static NamedObject PHYEMAC0RXBUFSTATUS_port_name;
    private static NamedObject PHYEMAC0RXCHARISCOMMA_port_name;
    private static NamedObject PHYEMAC0RXCHARISK_port_name;
    private static NamedObject PHYEMAC0RXCHECKINGCRC_port_name;
    private static NamedObject PHYEMAC0RXCLK_port_name;
    private static NamedObject PHYEMAC0RXCLKCORCNT_port_name;
    private static NamedObject PHYEMAC0RXCOMMADET_port_name;
    private static NamedObject PHYEMAC0RXD_port_name;
    private static NamedObject PHYEMAC0RXDISPERR_port_name;
    private static NamedObject PHYEMAC0RXDV_port_name;
    private static NamedObject PHYEMAC0RXER_port_name;
    private static NamedObject PHYEMAC0RXLOSSOFSYNC_port_name;
    private static NamedObject PHYEMAC0RXNOTINTABLE_port_name;
    private static NamedObject PHYEMAC0RXRUNDISP_port_name;
    private static NamedObject PHYEMAC0SIGNALDET_port_name;
    private static NamedObject PHYEMAC0TXBUFERR_port_name;
    private static NamedObject PHYEMAC1COL_port_name;
    private static NamedObject PHYEMAC1CRS_port_name;
    private static NamedObject PHYEMAC1GTXCLK_port_name;
    private static NamedObject PHYEMAC1MCLKIN_port_name;
    private static NamedObject PHYEMAC1MDIN_port_name;
    private static NamedObject PHYEMAC1MIITXCLK_port_name;
    private static NamedObject PHYEMAC1PHYAD_port_name;
    private static NamedObject PHYEMAC1RXBUFERR_port_name;
    private static NamedObject PHYEMAC1RXBUFSTATUS_port_name;
    private static NamedObject PHYEMAC1RXCHARISCOMMA_port_name;
    private static NamedObject PHYEMAC1RXCHARISK_port_name;
    private static NamedObject PHYEMAC1RXCHECKINGCRC_port_name;
    private static NamedObject PHYEMAC1RXCLK_port_name;
    private static NamedObject PHYEMAC1RXCLKCORCNT_port_name;
    private static NamedObject PHYEMAC1RXCOMMADET_port_name;
    private static NamedObject PHYEMAC1RXD_port_name;
    private static NamedObject PHYEMAC1RXDISPERR_port_name;
    private static NamedObject PHYEMAC1RXDV_port_name;
    private static NamedObject PHYEMAC1RXER_port_name;
    private static NamedObject PHYEMAC1RXLOSSOFSYNC_port_name;
    private static NamedObject PHYEMAC1RXNOTINTABLE_port_name;
    private static NamedObject PHYEMAC1RXRUNDISP_port_name;
    private static NamedObject PHYEMAC1SIGNALDET_port_name;
    private static NamedObject PHYEMAC1TXBUFERR_port_name;
    private static NamedObject TIEEMAC0CONFIGVEC_port_name;
    private static NamedObject TIEEMAC0UNICASTADDR_port_name;
    private static NamedObject TIEEMAC1CONFIGVEC_port_name;
    private static NamedObject TIEEMAC1UNICASTADDR_port_name;
    private static NamedObject Q_port_name;
    private static NamedObject PRE_port_name;
    private static NamedObject C0_port_name;
    private static NamedObject C1_port_name;
    private static NamedObject D0_port_name;
    private static NamedObject D1_port_name;
    private static NamedObject R_port_name;
    private static NamedObject ALMOSTEMPTY_port_name;
    private static NamedObject ALMOSTFULL_port_name;
    private static NamedObject DOP_port_name;
    private static NamedObject EMPTY_port_name;
    private static NamedObject FULL_port_name;
    private static NamedObject RDCOUNT_port_name;
    private static NamedObject RDERR_port_name;
    private static NamedObject WRCOUNT_port_name;
    private static NamedObject WRERR_port_name;
    private static NamedObject DIP_port_name;
    private static NamedObject RDCLK_port_name;
    private static NamedObject RDEN_port_name;
    private static NamedObject WRCLK_port_name;
    private static NamedObject WREN_port_name;
    private static NamedObject REGCE_port_name;
    private static NamedObject RSTREG_port_name;
    private static NamedObject DBITERR_port_name;
    private static NamedObject ECCPARITY_port_name;
    private static NamedObject SBITERR_port_name;
    private static NamedObject INJECTDBITERR_port_name;
    private static NamedObject INJECTSBITERR_port_name;
    private static NamedObject RDCLKL_port_name;
    private static NamedObject RDCLKU_port_name;
    private static NamedObject RDRCLKL_port_name;
    private static NamedObject RDRCLKU_port_name;
    private static NamedObject WRCLKL_port_name;
    private static NamedObject WRCLKU_port_name;
    private static NamedObject CRCERROR_port_name;
    private static NamedObject ECCERROR_port_name;
    private static NamedObject ECCERRORSINGLE_port_name;
    private static NamedObject FAR_port_name;
    private static NamedObject SYNBIT_port_name;
    private static NamedObject SYNDROME_port_name;
    private static NamedObject SYNDROMEVALID_port_name;
    private static NamedObject SYNWORD_port_name;
    private static NamedObject ERROR_port_name;
    private static NamedObject G_port_name;
    private static NamedObject CHBONDO_port_name;
    private static NamedObject COMBUSOUT_port_name;
    private static NamedObject RXBUFERR_port_name;
    private static NamedObject RXCALFAIL_port_name;
    private static NamedObject RXCHARISCOMMA_port_name;
    private static NamedObject RXCHARISK_port_name;
    private static NamedObject RXCOMMADET_port_name;
    private static NamedObject RXCRCOUT_port_name;
    private static NamedObject RXCYCLELIMIT_port_name;
    private static NamedObject RXDATA_port_name;
    private static NamedObject RXDISPERR_port_name;
    private static NamedObject RXLOCK_port_name;
    private static NamedObject RXLOSSOFSYNC_port_name;
    private static NamedObject RXMCLK_port_name;
    private static NamedObject RXNOTINTABLE_port_name;
    private static NamedObject RXPCSHCLKOUT_port_name;
    private static NamedObject RXREALIGN_port_name;
    private static NamedObject RXRECCLK1_port_name;
    private static NamedObject RXRECCLK2_port_name;
    private static NamedObject RXRUNDISP_port_name;
    private static NamedObject RXSIGDET_port_name;
    private static NamedObject RXSTATUS_port_name;
    private static NamedObject TX1N_port_name;
    private static NamedObject TX1P_port_name;
    private static NamedObject TXBUFERR_port_name;
    private static NamedObject TXCALFAIL_port_name;
    private static NamedObject TXCRCOUT_port_name;
    private static NamedObject TXCYCLELIMIT_port_name;
    private static NamedObject TXKERR_port_name;
    private static NamedObject TXLOCK_port_name;
    private static NamedObject TXOUTCLK1_port_name;
    private static NamedObject TXOUTCLK2_port_name;
    private static NamedObject TXPCSHCLKOUT_port_name;
    private static NamedObject TXRUNDISP_port_name;
    private static NamedObject CHBONDI_port_name;
    private static NamedObject COMBUSIN_port_name;
    private static NamedObject ENCHANSYNC_port_name;
    private static NamedObject ENMCOMMAALIGN_port_name;
    private static NamedObject ENPCOMMAALIGN_port_name;
    private static NamedObject GREFCLK_port_name;
    private static NamedObject LOOPBACK_port_name;
    private static NamedObject POWERDOWN_port_name;
    private static NamedObject REFCLK1_port_name;
    private static NamedObject REFCLK2_port_name;
    private static NamedObject RX1N_port_name;
    private static NamedObject RX1P_port_name;
    private static NamedObject RXBLOCKSYNC64B66BUSE_port_name;
    private static NamedObject RXCLKSTABLE_port_name;
    private static NamedObject RXCOMMADETUSE_port_name;
    private static NamedObject RXCRCCLK_port_name;
    private static NamedObject RXCRCDATAVALID_port_name;
    private static NamedObject RXCRCDATAWIDTH_port_name;
    private static NamedObject RXCRCIN_port_name;
    private static NamedObject RXCRCINIT_port_name;
    private static NamedObject RXCRCINTCLK_port_name;
    private static NamedObject RXCRCPD_port_name;
    private static NamedObject RXCRCRESET_port_name;
    private static NamedObject RXDATAWIDTH_port_name;
    private static NamedObject RXDEC64B66BUSE_port_name;
    private static NamedObject RXDEC8B10BUSE_port_name;
    private static NamedObject RXDESCRAM64B66BUSE_port_name;
    private static NamedObject RXIGNOREBTF_port_name;
    private static NamedObject RXINTDATAWIDTH_port_name;
    private static NamedObject RXPMARESET_port_name;
    private static NamedObject RXPOLARITY_port_name;
    private static NamedObject RXRESET_port_name;
    private static NamedObject RXSLIDE_port_name;
    private static NamedObject RXSYNC_port_name;
    private static NamedObject RXUSRCLK_port_name;
    private static NamedObject RXUSRCLK2_port_name;
    private static NamedObject TXBYPASS8B10B_port_name;
    private static NamedObject TXCHARDISPMODE_port_name;
    private static NamedObject TXCHARDISPVAL_port_name;
    private static NamedObject TXCHARISK_port_name;
    private static NamedObject TXCLKSTABLE_port_name;
    private static NamedObject TXCRCCLK_port_name;
    private static NamedObject TXCRCDATAVALID_port_name;
    private static NamedObject TXCRCDATAWIDTH_port_name;
    private static NamedObject TXCRCIN_port_name;
    private static NamedObject TXCRCINIT_port_name;
    private static NamedObject TXCRCINTCLK_port_name;
    private static NamedObject TXCRCPD_port_name;
    private static NamedObject TXCRCRESET_port_name;
    private static NamedObject TXDATA_port_name;
    private static NamedObject TXDATAWIDTH_port_name;
    private static NamedObject TXENC64B66BUSE_port_name;
    private static NamedObject TXENC8B10BUSE_port_name;
    private static NamedObject TXENOOB_port_name;
    private static NamedObject TXGEARBOX64B66BUSE_port_name;
    private static NamedObject TXINHIBIT_port_name;
    private static NamedObject TXINTDATAWIDTH_port_name;
    private static NamedObject TXPMARESET_port_name;
    private static NamedObject TXPOLARITY_port_name;
    private static NamedObject TXRESET_port_name;
    private static NamedObject TXSCRAM64B66BUSE_port_name;
    private static NamedObject TXSYNC_port_name;
    private static NamedObject TXUSRCLK_port_name;
    private static NamedObject TXUSRCLK2_port_name;
    private static NamedObject SYNCLK1OUT_port_name;
    private static NamedObject SYNCLK2OUT_port_name;
    private static NamedObject MGTCLKN_port_name;
    private static NamedObject MGTCLKP_port_name;
    private static NamedObject REFCLK_port_name;
    private static NamedObject RXBCLK_port_name;
    private static NamedObject SYNCLK1IN_port_name;
    private static NamedObject SYNCLK2IN_port_name;
    private static NamedObject CHBONDOA_port_name;
    private static NamedObject CHBONDOB_port_name;
    private static NamedObject DOA_port_name;
    private static NamedObject DOB_port_name;
    private static NamedObject DRDYA_port_name;
    private static NamedObject DRDYB_port_name;
    private static NamedObject RXBUFERRA_port_name;
    private static NamedObject RXBUFERRB_port_name;
    private static NamedObject RXCALFAILA_port_name;
    private static NamedObject RXCALFAILB_port_name;
    private static NamedObject RXCHARISCOMMAA_port_name;
    private static NamedObject RXCHARISCOMMAB_port_name;
    private static NamedObject RXCHARISKA_port_name;
    private static NamedObject RXCHARISKB_port_name;
    private static NamedObject RXCOMMADETA_port_name;
    private static NamedObject RXCOMMADETB_port_name;
    private static NamedObject RXCRCOUTA_port_name;
    private static NamedObject RXCRCOUTB_port_name;
    private static NamedObject RXCYCLELIMITA_port_name;
    private static NamedObject RXCYCLELIMITB_port_name;
    private static NamedObject RXDATAA_port_name;
    private static NamedObject RXDATAB_port_name;
    private static NamedObject RXDISPERRA_port_name;
    private static NamedObject RXDISPERRB_port_name;
    private static NamedObject RXLOCKA_port_name;
    private static NamedObject RXLOCKB_port_name;
    private static NamedObject RXLOSSOFSYNCA_port_name;
    private static NamedObject RXLOSSOFSYNCB_port_name;
    private static NamedObject RXMCLKA_port_name;
    private static NamedObject RXMCLKB_port_name;
    private static NamedObject RXNOTINTABLEA_port_name;
    private static NamedObject RXNOTINTABLEB_port_name;
    private static NamedObject RXPCSHCLKOUTA_port_name;
    private static NamedObject RXPCSHCLKOUTB_port_name;
    private static NamedObject RXREALIGNA_port_name;
    private static NamedObject RXREALIGNB_port_name;
    private static NamedObject RXRECCLK1A_port_name;
    private static NamedObject RXRECCLK1B_port_name;
    private static NamedObject RXRECCLK2A_port_name;
    private static NamedObject RXRECCLK2B_port_name;
    private static NamedObject RXRUNDISPA_port_name;
    private static NamedObject RXRUNDISPB_port_name;
    private static NamedObject RXSIGDETA_port_name;
    private static NamedObject RXSIGDETB_port_name;
    private static NamedObject RXSTATUSA_port_name;
    private static NamedObject RXSTATUSB_port_name;
    private static NamedObject TX1NA_port_name;
    private static NamedObject TX1NB_port_name;
    private static NamedObject TX1PA_port_name;
    private static NamedObject TX1PB_port_name;
    private static NamedObject TXBUFERRA_port_name;
    private static NamedObject TXBUFERRB_port_name;
    private static NamedObject TXCALFAILA_port_name;
    private static NamedObject TXCALFAILB_port_name;
    private static NamedObject TXCRCOUTA_port_name;
    private static NamedObject TXCRCOUTB_port_name;
    private static NamedObject TXCYCLELIMITA_port_name;
    private static NamedObject TXCYCLELIMITB_port_name;
    private static NamedObject TXKERRA_port_name;
    private static NamedObject TXKERRB_port_name;
    private static NamedObject TXLOCKA_port_name;
    private static NamedObject TXLOCKB_port_name;
    private static NamedObject TXOUTCLK1A_port_name;
    private static NamedObject TXOUTCLK1B_port_name;
    private static NamedObject TXOUTCLK2A_port_name;
    private static NamedObject TXOUTCLK2B_port_name;
    private static NamedObject TXPCSHCLKOUTA_port_name;
    private static NamedObject TXPCSHCLKOUTB_port_name;
    private static NamedObject TXRUNDISPA_port_name;
    private static NamedObject TXRUNDISPB_port_name;
    private static NamedObject CHBONDIA_port_name;
    private static NamedObject CHBONDIB_port_name;
    private static NamedObject DADDRA_port_name;
    private static NamedObject DADDRB_port_name;
    private static NamedObject DCLKA_port_name;
    private static NamedObject DCLKB_port_name;
    private static NamedObject DENA_port_name;
    private static NamedObject DENB_port_name;
    private static NamedObject DIA_port_name;
    private static NamedObject DIB_port_name;
    private static NamedObject DWEA_port_name;
    private static NamedObject DWEB_port_name;
    private static NamedObject ENCHANSYNCA_port_name;
    private static NamedObject ENCHANSYNCB_port_name;
    private static NamedObject ENMCOMMAALIGNA_port_name;
    private static NamedObject ENMCOMMAALIGNB_port_name;
    private static NamedObject ENPCOMMAALIGNA_port_name;
    private static NamedObject ENPCOMMAALIGNB_port_name;
    private static NamedObject GREFCLKA_port_name;
    private static NamedObject GREFCLKB_port_name;
    private static NamedObject LOOPBACKA_port_name;
    private static NamedObject LOOPBACKB_port_name;
    private static NamedObject POWERDOWNA_port_name;
    private static NamedObject POWERDOWNB_port_name;
    private static NamedObject REFCLK1A_port_name;
    private static NamedObject REFCLK1B_port_name;
    private static NamedObject REFCLK2A_port_name;
    private static NamedObject REFCLK2B_port_name;
    private static NamedObject RX1NA_port_name;
    private static NamedObject RX1NB_port_name;
    private static NamedObject RX1PA_port_name;
    private static NamedObject RX1PB_port_name;
    private static NamedObject RXBLOCKSYNC64B66BUSEA_port_name;
    private static NamedObject RXBLOCKSYNC64B66BUSEB_port_name;
    private static NamedObject RXCLKSTABLEA_port_name;
    private static NamedObject RXCLKSTABLEB_port_name;
    private static NamedObject RXCOMMADETUSEA_port_name;
    private static NamedObject RXCOMMADETUSEB_port_name;
    private static NamedObject RXCRCCLKA_port_name;
    private static NamedObject RXCRCCLKB_port_name;
    private static NamedObject RXCRCDATAVALIDA_port_name;
    private static NamedObject RXCRCDATAVALIDB_port_name;
    private static NamedObject RXCRCDATAWIDTHA_port_name;
    private static NamedObject RXCRCDATAWIDTHB_port_name;
    private static NamedObject RXCRCINA_port_name;
    private static NamedObject RXCRCINB_port_name;
    private static NamedObject RXCRCINITA_port_name;
    private static NamedObject RXCRCINITB_port_name;
    private static NamedObject RXCRCINTCLKA_port_name;
    private static NamedObject RXCRCINTCLKB_port_name;
    private static NamedObject RXCRCPDA_port_name;
    private static NamedObject RXCRCPDB_port_name;
    private static NamedObject RXCRCRESETA_port_name;
    private static NamedObject RXCRCRESETB_port_name;
    private static NamedObject RXDATAWIDTHA_port_name;
    private static NamedObject RXDATAWIDTHB_port_name;
    private static NamedObject RXDEC64B66BUSEA_port_name;
    private static NamedObject RXDEC64B66BUSEB_port_name;
    private static NamedObject RXDEC8B10BUSEA_port_name;
    private static NamedObject RXDEC8B10BUSEB_port_name;
    private static NamedObject RXDESCRAM64B66BUSEA_port_name;
    private static NamedObject RXDESCRAM64B66BUSEB_port_name;
    private static NamedObject RXIGNOREBTFA_port_name;
    private static NamedObject RXIGNOREBTFB_port_name;
    private static NamedObject RXINTDATAWIDTHA_port_name;
    private static NamedObject RXINTDATAWIDTHB_port_name;
    private static NamedObject RXPMARESETA_port_name;
    private static NamedObject RXPMARESETB_port_name;
    private static NamedObject RXPOLARITYA_port_name;
    private static NamedObject RXPOLARITYB_port_name;
    private static NamedObject RXRESETA_port_name;
    private static NamedObject RXRESETB_port_name;
    private static NamedObject RXSLIDEA_port_name;
    private static NamedObject RXSLIDEB_port_name;
    private static NamedObject RXSYNCA_port_name;
    private static NamedObject RXSYNCB_port_name;
    private static NamedObject RXUSRCLK2A_port_name;
    private static NamedObject RXUSRCLK2B_port_name;
    private static NamedObject RXUSRCLKA_port_name;
    private static NamedObject RXUSRCLKB_port_name;
    private static NamedObject TXBYPASS8B10BA_port_name;
    private static NamedObject TXBYPASS8B10BB_port_name;
    private static NamedObject TXCHARDISPMODEA_port_name;
    private static NamedObject TXCHARDISPMODEB_port_name;
    private static NamedObject TXCHARDISPVALA_port_name;
    private static NamedObject TXCHARDISPVALB_port_name;
    private static NamedObject TXCHARISKA_port_name;
    private static NamedObject TXCHARISKB_port_name;
    private static NamedObject TXCLKSTABLEA_port_name;
    private static NamedObject TXCLKSTABLEB_port_name;
    private static NamedObject TXCRCCLKA_port_name;
    private static NamedObject TXCRCCLKB_port_name;
    private static NamedObject TXCRCDATAVALIDA_port_name;
    private static NamedObject TXCRCDATAVALIDB_port_name;
    private static NamedObject TXCRCDATAWIDTHA_port_name;
    private static NamedObject TXCRCDATAWIDTHB_port_name;
    private static NamedObject TXCRCINA_port_name;
    private static NamedObject TXCRCINB_port_name;
    private static NamedObject TXCRCINITA_port_name;
    private static NamedObject TXCRCINITB_port_name;
    private static NamedObject TXCRCINTCLKA_port_name;
    private static NamedObject TXCRCINTCLKB_port_name;
    private static NamedObject TXCRCPDA_port_name;
    private static NamedObject TXCRCPDB_port_name;
    private static NamedObject TXCRCRESETA_port_name;
    private static NamedObject TXCRCRESETB_port_name;
    private static NamedObject TXDATAA_port_name;
    private static NamedObject TXDATAB_port_name;
    private static NamedObject TXDATAWIDTHA_port_name;
    private static NamedObject TXDATAWIDTHB_port_name;
    private static NamedObject TXENC64B66BUSEA_port_name;
    private static NamedObject TXENC64B66BUSEB_port_name;
    private static NamedObject TXENC8B10BUSEA_port_name;
    private static NamedObject TXENC8B10BUSEB_port_name;
    private static NamedObject TXENOOBA_port_name;
    private static NamedObject TXENOOBB_port_name;
    private static NamedObject TXGEARBOX64B66BUSEA_port_name;
    private static NamedObject TXGEARBOX64B66BUSEB_port_name;
    private static NamedObject TXINHIBITA_port_name;
    private static NamedObject TXINHIBITB_port_name;
    private static NamedObject TXINTDATAWIDTHA_port_name;
    private static NamedObject TXINTDATAWIDTHB_port_name;
    private static NamedObject TXPMARESETA_port_name;
    private static NamedObject TXPMARESETB_port_name;
    private static NamedObject TXPOLARITYA_port_name;
    private static NamedObject TXPOLARITYB_port_name;
    private static NamedObject TXRESETA_port_name;
    private static NamedObject TXRESETB_port_name;
    private static NamedObject TXSCRAM64B66BUSEA_port_name;
    private static NamedObject TXSCRAM64B66BUSEB_port_name;
    private static NamedObject TXSYNCA_port_name;
    private static NamedObject TXSYNCB_port_name;
    private static NamedObject TXUSRCLK2A_port_name;
    private static NamedObject TXUSRCLK2B_port_name;
    private static NamedObject TXUSRCLKA_port_name;
    private static NamedObject TXUSRCLKB_port_name;
    private static NamedObject DRPDO_port_name;
    private static NamedObject GTHINITDONE_port_name;
    private static NamedObject MGMTPCSRDACK_port_name;
    private static NamedObject MGMTPCSRDDATA_port_name;
    private static NamedObject RXCODEERR0_port_name;
    private static NamedObject RXCODEERR1_port_name;
    private static NamedObject RXCODEERR2_port_name;
    private static NamedObject RXCODEERR3_port_name;
    private static NamedObject RXCTRL0_port_name;
    private static NamedObject RXCTRL1_port_name;
    private static NamedObject RXCTRL2_port_name;
    private static NamedObject RXCTRL3_port_name;
    private static NamedObject RXCTRLACK0_port_name;
    private static NamedObject RXCTRLACK1_port_name;
    private static NamedObject RXCTRLACK2_port_name;
    private static NamedObject RXCTRLACK3_port_name;
    private static NamedObject RXDATA0_port_name;
    private static NamedObject RXDATA1_port_name;
    private static NamedObject RXDATA2_port_name;
    private static NamedObject RXDATA3_port_name;
    private static NamedObject RXDATATAP0_port_name;
    private static NamedObject RXDATATAP1_port_name;
    private static NamedObject RXDATATAP2_port_name;
    private static NamedObject RXDATATAP3_port_name;
    private static NamedObject RXDISPERR0_port_name;
    private static NamedObject RXDISPERR1_port_name;
    private static NamedObject RXDISPERR2_port_name;
    private static NamedObject RXDISPERR3_port_name;
    private static NamedObject RXPCSCLKSMPL0_port_name;
    private static NamedObject RXPCSCLKSMPL1_port_name;
    private static NamedObject RXPCSCLKSMPL2_port_name;
    private static NamedObject RXPCSCLKSMPL3_port_name;
    private static NamedObject RXUSERCLKOUT0_port_name;
    private static NamedObject RXUSERCLKOUT1_port_name;
    private static NamedObject RXUSERCLKOUT2_port_name;
    private static NamedObject RXUSERCLKOUT3_port_name;
    private static NamedObject RXVALID0_port_name;
    private static NamedObject RXVALID1_port_name;
    private static NamedObject RXVALID2_port_name;
    private static NamedObject RXVALID3_port_name;
    private static NamedObject TSTPATH_port_name;
    private static NamedObject TSTREFCLKFAB_port_name;
    private static NamedObject TSTREFCLKOUT_port_name;
    private static NamedObject TXCTRLACK0_port_name;
    private static NamedObject TXCTRLACK1_port_name;
    private static NamedObject TXCTRLACK2_port_name;
    private static NamedObject TXCTRLACK3_port_name;
    private static NamedObject TXDATATAP10_port_name;
    private static NamedObject TXDATATAP11_port_name;
    private static NamedObject TXDATATAP12_port_name;
    private static NamedObject TXDATATAP13_port_name;
    private static NamedObject TXDATATAP20_port_name;
    private static NamedObject TXDATATAP21_port_name;
    private static NamedObject TXDATATAP22_port_name;
    private static NamedObject TXDATATAP23_port_name;
    private static NamedObject TXN0_port_name;
    private static NamedObject TXN1_port_name;
    private static NamedObject TXN2_port_name;
    private static NamedObject TXN3_port_name;
    private static NamedObject TXP0_port_name;
    private static NamedObject TXP1_port_name;
    private static NamedObject TXP2_port_name;
    private static NamedObject TXP3_port_name;
    private static NamedObject TXPCSCLKSMPL0_port_name;
    private static NamedObject TXPCSCLKSMPL1_port_name;
    private static NamedObject TXPCSCLKSMPL2_port_name;
    private static NamedObject TXPCSCLKSMPL3_port_name;
    private static NamedObject TXUSERCLKOUT0_port_name;
    private static NamedObject TXUSERCLKOUT1_port_name;
    private static NamedObject TXUSERCLKOUT2_port_name;
    private static NamedObject TXUSERCLKOUT3_port_name;
    private static NamedObject DFETRAINCTRL0_port_name;
    private static NamedObject DFETRAINCTRL1_port_name;
    private static NamedObject DFETRAINCTRL2_port_name;
    private static NamedObject DFETRAINCTRL3_port_name;
    private static NamedObject DISABLEDRP_port_name;
    private static NamedObject GTHINIT_port_name;
    private static NamedObject GTHRESET_port_name;
    private static NamedObject GTHX2LANE01_port_name;
    private static NamedObject GTHX2LANE23_port_name;
    private static NamedObject GTHX4LANE_port_name;
    private static NamedObject MGMTPCSLANESEL_port_name;
    private static NamedObject MGMTPCSMMDADDR_port_name;
    private static NamedObject MGMTPCSREGADDR_port_name;
    private static NamedObject MGMTPCSREGRD_port_name;
    private static NamedObject MGMTPCSREGWR_port_name;
    private static NamedObject MGMTPCSWRDATA_port_name;
    private static NamedObject PLLPCSCLKDIV_port_name;
    private static NamedObject PLLREFCLKSEL_port_name;
    private static NamedObject POWERDOWN0_port_name;
    private static NamedObject POWERDOWN1_port_name;
    private static NamedObject POWERDOWN2_port_name;
    private static NamedObject POWERDOWN3_port_name;
    private static NamedObject RXBUFRESET0_port_name;
    private static NamedObject RXBUFRESET1_port_name;
    private static NamedObject RXBUFRESET2_port_name;
    private static NamedObject RXBUFRESET3_port_name;
    private static NamedObject RXENCOMMADET0_port_name;
    private static NamedObject RXENCOMMADET1_port_name;
    private static NamedObject RXENCOMMADET2_port_name;
    private static NamedObject RXENCOMMADET3_port_name;
    private static NamedObject RXN0_port_name;
    private static NamedObject RXN1_port_name;
    private static NamedObject RXN2_port_name;
    private static NamedObject RXN3_port_name;
    private static NamedObject RXP0_port_name;
    private static NamedObject RXP1_port_name;
    private static NamedObject RXP2_port_name;
    private static NamedObject RXP3_port_name;
    private static NamedObject RXPOLARITY0_port_name;
    private static NamedObject RXPOLARITY1_port_name;
    private static NamedObject RXPOLARITY2_port_name;
    private static NamedObject RXPOLARITY3_port_name;
    private static NamedObject RXPOWERDOWN0_port_name;
    private static NamedObject RXPOWERDOWN1_port_name;
    private static NamedObject RXPOWERDOWN2_port_name;
    private static NamedObject RXPOWERDOWN3_port_name;
    private static NamedObject RXRATE0_port_name;
    private static NamedObject RXRATE1_port_name;
    private static NamedObject RXRATE2_port_name;
    private static NamedObject RXRATE3_port_name;
    private static NamedObject RXSLIP0_port_name;
    private static NamedObject RXSLIP1_port_name;
    private static NamedObject RXSLIP2_port_name;
    private static NamedObject RXSLIP3_port_name;
    private static NamedObject RXUSERCLKIN0_port_name;
    private static NamedObject RXUSERCLKIN1_port_name;
    private static NamedObject RXUSERCLKIN2_port_name;
    private static NamedObject RXUSERCLKIN3_port_name;
    private static NamedObject SAMPLERATE0_port_name;
    private static NamedObject SAMPLERATE1_port_name;
    private static NamedObject SAMPLERATE2_port_name;
    private static NamedObject SAMPLERATE3_port_name;
    private static NamedObject TXBUFRESET0_port_name;
    private static NamedObject TXBUFRESET1_port_name;
    private static NamedObject TXBUFRESET2_port_name;
    private static NamedObject TXBUFRESET3_port_name;
    private static NamedObject TXCTRL0_port_name;
    private static NamedObject TXCTRL1_port_name;
    private static NamedObject TXCTRL2_port_name;
    private static NamedObject TXCTRL3_port_name;
    private static NamedObject TXDATA0_port_name;
    private static NamedObject TXDATA1_port_name;
    private static NamedObject TXDATA2_port_name;
    private static NamedObject TXDATA3_port_name;
    private static NamedObject TXDATAMSB0_port_name;
    private static NamedObject TXDATAMSB1_port_name;
    private static NamedObject TXDATAMSB2_port_name;
    private static NamedObject TXDATAMSB3_port_name;
    private static NamedObject TXDEEMPH0_port_name;
    private static NamedObject TXDEEMPH1_port_name;
    private static NamedObject TXDEEMPH2_port_name;
    private static NamedObject TXDEEMPH3_port_name;
    private static NamedObject TXMARGIN0_port_name;
    private static NamedObject TXMARGIN1_port_name;
    private static NamedObject TXMARGIN2_port_name;
    private static NamedObject TXMARGIN3_port_name;
    private static NamedObject TXPOWERDOWN0_port_name;
    private static NamedObject TXPOWERDOWN1_port_name;
    private static NamedObject TXPOWERDOWN2_port_name;
    private static NamedObject TXPOWERDOWN3_port_name;
    private static NamedObject TXRATE0_port_name;
    private static NamedObject TXRATE1_port_name;
    private static NamedObject TXRATE2_port_name;
    private static NamedObject TXRATE3_port_name;
    private static NamedObject TXUSERCLKIN0_port_name;
    private static NamedObject TXUSERCLKIN1_port_name;
    private static NamedObject TXUSERCLKIN2_port_name;
    private static NamedObject TXUSERCLKIN3_port_name;
    private static NamedObject CPLLFBCLKLOST_port_name;
    private static NamedObject CPLLLOCK_port_name;
    private static NamedObject CPLLREFCLKLOST_port_name;
    private static NamedObject DMONITOROUT_port_name;
    private static NamedObject DRPRDY_port_name;
    private static NamedObject EYESCANDATAERROR_port_name;
    private static NamedObject GTHTXN_port_name;
    private static NamedObject GTHTXP_port_name;
    private static NamedObject GTREFCLKMONITOR_port_name;
    private static NamedObject PCSRSVDOUT_port_name;
    private static NamedObject PHYSTATUS_port_name;
    private static NamedObject RSOSINTDONE_port_name;
    private static NamedObject RXBUFSTATUS_port_name;
    private static NamedObject RXBYTEISALIGNED_port_name;
    private static NamedObject RXBYTEREALIGN_port_name;
    private static NamedObject RXCDRLOCK_port_name;
    private static NamedObject RXCHANBONDSEQ_port_name;
    private static NamedObject RXCHANISALIGNED_port_name;
    private static NamedObject RXCHANREALIGN_port_name;
    private static NamedObject RXCHBONDO_port_name;
    private static NamedObject RXCLKCORCNT_port_name;
    private static NamedObject RXCOMINITDET_port_name;
    private static NamedObject RXCOMSASDET_port_name;
    private static NamedObject RXCOMWAKEDET_port_name;
    private static NamedObject RXDATAVALID_port_name;
    private static NamedObject RXDFESLIDETAPSTARTED_port_name;
    private static NamedObject RXDFESLIDETAPSTROBEDONE_port_name;
    private static NamedObject RXDFESLIDETAPSTROBESTARTED_port_name;
    private static NamedObject RXDFESTADAPTDONE_port_name;
    private static NamedObject RXDLYSRESETDONE_port_name;
    private static NamedObject RXELECIDLE_port_name;
    private static NamedObject RXHEADER_port_name;
    private static NamedObject RXHEADERVALID_port_name;
    private static NamedObject RXMONITOROUT_port_name;
    private static NamedObject RXOSINTSTARTED_port_name;
    private static NamedObject RXOSINTSTROBEDONE_port_name;
    private static NamedObject RXOSINTSTROBESTARTED_port_name;
    private static NamedObject RXOUTCLK_port_name;
    private static NamedObject RXOUTCLKFABRIC_port_name;
    private static NamedObject RXOUTCLKPCS_port_name;
    private static NamedObject RXPHALIGNDONE_port_name;
    private static NamedObject RXPHMONITOR_port_name;
    private static NamedObject RXPHSLIPMONITOR_port_name;
    private static NamedObject RXPMARESETDONE_port_name;
    private static NamedObject RXPRBSERR_port_name;
    private static NamedObject RXQPISENN_port_name;
    private static NamedObject RXQPISENP_port_name;
    private static NamedObject RXRATEDONE_port_name;
    private static NamedObject RXRESETDONE_port_name;
    private static NamedObject RXSTARTOFSEQ_port_name;
    private static NamedObject RXSYNCDONE_port_name;
    private static NamedObject RXSYNCOUT_port_name;
    private static NamedObject RXVALID_port_name;
    private static NamedObject TXBUFSTATUS_port_name;
    private static NamedObject TXCOMFINISH_port_name;
    private static NamedObject TXDLYSRESETDONE_port_name;
    private static NamedObject TXGEARBOXREADY_port_name;
    private static NamedObject TXOUTCLK_port_name;
    private static NamedObject TXOUTCLKFABRIC_port_name;
    private static NamedObject TXOUTCLKPCS_port_name;
    private static NamedObject TXPHALIGNDONE_port_name;
    private static NamedObject TXPHINITDONE_port_name;
    private static NamedObject TXPMARESETDONE_port_name;
    private static NamedObject TXQPISENN_port_name;
    private static NamedObject TXQPISENP_port_name;
    private static NamedObject TXRATEDONE_port_name;
    private static NamedObject TXRESETDONE_port_name;
    private static NamedObject TXSYNCDONE_port_name;
    private static NamedObject TXSYNCOUT_port_name;
    private static NamedObject CFGRESET_port_name;
    private static NamedObject CLKRSVD0_port_name;
    private static NamedObject CLKRSVD1_port_name;
    private static NamedObject CPLLLOCKDETCLK_port_name;
    private static NamedObject CPLLLOCKEN_port_name;
    private static NamedObject CPLLPD_port_name;
    private static NamedObject CPLLREFCLKSEL_port_name;
    private static NamedObject CPLLRESET_port_name;
    private static NamedObject DMONFIFORESET_port_name;
    private static NamedObject DMONITORCLK_port_name;
    private static NamedObject DRPADDR_port_name;
    private static NamedObject DRPCLK_port_name;
    private static NamedObject DRPDI_port_name;
    private static NamedObject DRPEN_port_name;
    private static NamedObject DRPWE_port_name;
    private static NamedObject EYESCANMODE_port_name;
    private static NamedObject EYESCANRESET_port_name;
    private static NamedObject EYESCANTRIGGER_port_name;
    private static NamedObject GTGREFCLK_port_name;
    private static NamedObject GTHRXN_port_name;
    private static NamedObject GTHRXP_port_name;
    private static NamedObject GTNORTHREFCLK0_port_name;
    private static NamedObject GTNORTHREFCLK1_port_name;
    private static NamedObject GTREFCLK0_port_name;
    private static NamedObject GTREFCLK1_port_name;
    private static NamedObject GTRESETSEL_port_name;
    private static NamedObject GTRSVD_port_name;
    private static NamedObject GTRXRESET_port_name;
    private static NamedObject GTSOUTHREFCLK0_port_name;
    private static NamedObject GTSOUTHREFCLK1_port_name;
    private static NamedObject GTTXRESET_port_name;
    private static NamedObject PCSRSVDIN_port_name;
    private static NamedObject PCSRSVDIN2_port_name;
    private static NamedObject PMARSVDIN_port_name;
    private static NamedObject QPLLCLK_port_name;
    private static NamedObject QPLLREFCLK_port_name;
    private static NamedObject RESETOVRD_port_name;
    private static NamedObject RX8B10BEN_port_name;
    private static NamedObject RXADAPTSELTEST_port_name;
    private static NamedObject RXBUFRESET_port_name;
    private static NamedObject RXCDRFREQRESET_port_name;
    private static NamedObject RXCDRHOLD_port_name;
    private static NamedObject RXCDROVRDEN_port_name;
    private static NamedObject RXCDRRESET_port_name;
    private static NamedObject RXCDRRESETRSV_port_name;
    private static NamedObject RXCHBONDEN_port_name;
    private static NamedObject RXCHBONDI_port_name;
    private static NamedObject RXCHBONDLEVEL_port_name;
    private static NamedObject RXCHBONDMASTER_port_name;
    private static NamedObject RXCHBONDSLAVE_port_name;
    private static NamedObject RXCOMMADETEN_port_name;
    private static NamedObject RXDDIEN_port_name;
    private static NamedObject RXDFEAGCHOLD_port_name;
    private static NamedObject RXDFEAGCOVRDEN_port_name;
    private static NamedObject RXDFEAGCTRL_port_name;
    private static NamedObject RXDFECM1EN_port_name;
    private static NamedObject RXDFELFHOLD_port_name;
    private static NamedObject RXDFELFOVRDEN_port_name;
    private static NamedObject RXDFELPMRESET_port_name;
    private static NamedObject RXDFESLIDETAP_port_name;
    private static NamedObject RXDFESLIDETAPADAPTEN_port_name;
    private static NamedObject RXDFESLIDETAPHOLD_port_name;
    private static NamedObject RXDFESLIDETAPID_port_name;
    private static NamedObject RXDFESLIDETAPINITOVRDEN_port_name;
    private static NamedObject RXDFESLIDETAPONLYADAPTEN_port_name;
    private static NamedObject RXDFESLIDETAPOVRDEN_port_name;
    private static NamedObject RXDFESLIDETAPSTROBE_port_name;
    private static NamedObject RXDFETAP2HOLD_port_name;
    private static NamedObject RXDFETAP2OVRDEN_port_name;
    private static NamedObject RXDFETAP3HOLD_port_name;
    private static NamedObject RXDFETAP3OVRDEN_port_name;
    private static NamedObject RXDFETAP4HOLD_port_name;
    private static NamedObject RXDFETAP4OVRDEN_port_name;
    private static NamedObject RXDFETAP5HOLD_port_name;
    private static NamedObject RXDFETAP5OVRDEN_port_name;
    private static NamedObject RXDFETAP6HOLD_port_name;
    private static NamedObject RXDFETAP6OVRDEN_port_name;
    private static NamedObject RXDFETAP7HOLD_port_name;
    private static NamedObject RXDFETAP7OVRDEN_port_name;
    private static NamedObject RXDFEUTHOLD_port_name;
    private static NamedObject RXDFEUTOVRDEN_port_name;
    private static NamedObject RXDFEVPHOLD_port_name;
    private static NamedObject RXDFEVPOVRDEN_port_name;
    private static NamedObject RXDFEVSEN_port_name;
    private static NamedObject RXDFEXYDEN_port_name;
    private static NamedObject RXDLYBYPASS_port_name;
    private static NamedObject RXDLYEN_port_name;
    private static NamedObject RXDLYOVRDEN_port_name;
    private static NamedObject RXDLYSRESET_port_name;
    private static NamedObject RXELECIDLEMODE_port_name;
    private static NamedObject RXGEARBOXSLIP_port_name;
    private static NamedObject RXLPMEN_port_name;
    private static NamedObject RXLPMHFHOLD_port_name;
    private static NamedObject RXLPMHFOVRDEN_port_name;
    private static NamedObject RXLPMLFHOLD_port_name;
    private static NamedObject RXLPMLFKLOVRDEN_port_name;
    private static NamedObject RXMCOMMAALIGNEN_port_name;
    private static NamedObject RXMONITORSEL_port_name;
    private static NamedObject RXOOBRESET_port_name;
    private static NamedObject RXOSCALRESET_port_name;
    private static NamedObject RXOSHOLD_port_name;
    private static NamedObject RXOSINTCFG_port_name;
    private static NamedObject RXOSINTEN_port_name;
    private static NamedObject RXOSINTHOLD_port_name;
    private static NamedObject RXOSINTID0_port_name;
    private static NamedObject RXOSINTNTRLEN_port_name;
    private static NamedObject RXOSINTOVRDEN_port_name;
    private static NamedObject RXOSINTSTROBE_port_name;
    private static NamedObject RXOSINTTESTOVRDEN_port_name;
    private static NamedObject RXOSOVRDEN_port_name;
    private static NamedObject RXOUTCLKSEL_port_name;
    private static NamedObject RXPCOMMAALIGNEN_port_name;
    private static NamedObject RXPCSRESET_port_name;
    private static NamedObject RXPD_port_name;
    private static NamedObject RXPHALIGN_port_name;
    private static NamedObject RXPHALIGNEN_port_name;
    private static NamedObject RXPHDLYPD_port_name;
    private static NamedObject RXPHDLYRESET_port_name;
    private static NamedObject RXPHOVRDEN_port_name;
    private static NamedObject RXPRBSCNTRESET_port_name;
    private static NamedObject RXPRBSSEL_port_name;
    private static NamedObject RXQPIEN_port_name;
    private static NamedObject RXRATE_port_name;
    private static NamedObject RXRATEMODE_port_name;
    private static NamedObject RXSYNCALLIN_port_name;
    private static NamedObject RXSYNCIN_port_name;
    private static NamedObject RXSYNCMODE_port_name;
    private static NamedObject RXSYSCLKSEL_port_name;
    private static NamedObject RXUSERRDY_port_name;
    private static NamedObject SETERRSTATUS_port_name;
    private static NamedObject SIGVALIDCLK_port_name;
    private static NamedObject TSTIN_port_name;
    private static NamedObject TX8B10BBYPASS_port_name;
    private static NamedObject TX8B10BEN_port_name;
    private static NamedObject TXBUFDIFFCTRL_port_name;
    private static NamedObject TXCOMINIT_port_name;
    private static NamedObject TXCOMSAS_port_name;
    private static NamedObject TXCOMWAKE_port_name;
    private static NamedObject TXDEEMPH_port_name;
    private static NamedObject TXDETECTRX_port_name;
    private static NamedObject TXDIFFCTRL_port_name;
    private static NamedObject TXDIFFPD_port_name;
    private static NamedObject TXDLYBYPASS_port_name;
    private static NamedObject TXDLYEN_port_name;
    private static NamedObject TXDLYHOLD_port_name;
    private static NamedObject TXDLYOVRDEN_port_name;
    private static NamedObject TXDLYSRESET_port_name;
    private static NamedObject TXDLYUPDOWN_port_name;
    private static NamedObject TXELECIDLE_port_name;
    private static NamedObject TXHEADER_port_name;
    private static NamedObject TXMAINCURSOR_port_name;
    private static NamedObject TXMARGIN_port_name;
    private static NamedObject TXOUTCLKSEL_port_name;
    private static NamedObject TXPCSRESET_port_name;
    private static NamedObject TXPD_port_name;
    private static NamedObject TXPDELECIDLEMODE_port_name;
    private static NamedObject TXPHALIGN_port_name;
    private static NamedObject TXPHALIGNEN_port_name;
    private static NamedObject TXPHDLYPD_port_name;
    private static NamedObject TXPHDLYRESET_port_name;
    private static NamedObject TXPHDLYTSTCLK_port_name;
    private static NamedObject TXPHINIT_port_name;
    private static NamedObject TXPHOVRDEN_port_name;
    private static NamedObject TXPIPPMEN_port_name;
    private static NamedObject TXPIPPMOVRDEN_port_name;
    private static NamedObject TXPIPPMPD_port_name;
    private static NamedObject TXPIPPMSEL_port_name;
    private static NamedObject TXPIPPMSTEPSIZE_port_name;
    private static NamedObject TXPISOPD_port_name;
    private static NamedObject TXPOSTCURSOR_port_name;
    private static NamedObject TXPOSTCURSORINV_port_name;
    private static NamedObject TXPRBSFORCEERR_port_name;
    private static NamedObject TXPRBSSEL_port_name;
    private static NamedObject TXPRECURSOR_port_name;
    private static NamedObject TXPRECURSORINV_port_name;
    private static NamedObject TXQPIBIASEN_port_name;
    private static NamedObject TXQPISTRONGPDOWN_port_name;
    private static NamedObject TXQPIWEAKPUP_port_name;
    private static NamedObject TXRATE_port_name;
    private static NamedObject TXRATEMODE_port_name;
    private static NamedObject TXSEQUENCE_port_name;
    private static NamedObject TXSTARTSEQ_port_name;
    private static NamedObject TXSWING_port_name;
    private static NamedObject TXSYNCALLIN_port_name;
    private static NamedObject TXSYNCIN_port_name;
    private static NamedObject TXSYNCMODE_port_name;
    private static NamedObject TXSYSCLKSEL_port_name;
    private static NamedObject TXUSERRDY_port_name;
    private static NamedObject PMARSVDOUT_port_name;
    private static NamedObject QPLLDMONITOR_port_name;
    private static NamedObject QPLLFBCLKLOST_port_name;
    private static NamedObject QPLLLOCK_port_name;
    private static NamedObject QPLLOUTCLK_port_name;
    private static NamedObject QPLLOUTREFCLK_port_name;
    private static NamedObject QPLLREFCLKLOST_port_name;
    private static NamedObject REFCLKOUTMONITOR_port_name;
    private static NamedObject BGBYPASSB_port_name;
    private static NamedObject BGMONITORENB_port_name;
    private static NamedObject BGPDB_port_name;
    private static NamedObject BGRCALOVRD_port_name;
    private static NamedObject BGRCALOVRDENB_port_name;
    private static NamedObject PMARSVD_port_name;
    private static NamedObject QPLLLOCKDETCLK_port_name;
    private static NamedObject QPLLLOCKEN_port_name;
    private static NamedObject QPLLOUTRESET_port_name;
    private static NamedObject QPLLPD_port_name;
    private static NamedObject QPLLREFCLKSEL_port_name;
    private static NamedObject QPLLRESET_port_name;
    private static NamedObject QPLLRSVD1_port_name;
    private static NamedObject QPLLRSVD2_port_name;
    private static NamedObject RCALENB_port_name;
    private static NamedObject GTPCLKFBEAST_port_name;
    private static NamedObject GTPCLKFBWEST_port_name;
    private static NamedObject GTPCLKOUT0_port_name;
    private static NamedObject GTPCLKOUT1_port_name;
    private static NamedObject PHYSTATUS0_port_name;
    private static NamedObject PHYSTATUS1_port_name;
    private static NamedObject PLLLKDET0_port_name;
    private static NamedObject PLLLKDET1_port_name;
    private static NamedObject RCALOUTEAST_port_name;
    private static NamedObject RCALOUTWEST_port_name;
    private static NamedObject REFCLKOUT0_port_name;
    private static NamedObject REFCLKOUT1_port_name;
    private static NamedObject REFCLKPLL0_port_name;
    private static NamedObject REFCLKPLL1_port_name;
    private static NamedObject RESETDONE0_port_name;
    private static NamedObject RESETDONE1_port_name;
    private static NamedObject RXBUFSTATUS0_port_name;
    private static NamedObject RXBUFSTATUS1_port_name;
    private static NamedObject RXBYTEISALIGNED0_port_name;
    private static NamedObject RXBYTEISALIGNED1_port_name;
    private static NamedObject RXBYTEREALIGN0_port_name;
    private static NamedObject RXBYTEREALIGN1_port_name;
    private static NamedObject RXCHANBONDSEQ0_port_name;
    private static NamedObject RXCHANBONDSEQ1_port_name;
    private static NamedObject RXCHANISALIGNED0_port_name;
    private static NamedObject RXCHANISALIGNED1_port_name;
    private static NamedObject RXCHANREALIGN0_port_name;
    private static NamedObject RXCHANREALIGN1_port_name;
    private static NamedObject RXCHARISCOMMA0_port_name;
    private static NamedObject RXCHARISCOMMA1_port_name;
    private static NamedObject RXCHARISK0_port_name;
    private static NamedObject RXCHARISK1_port_name;
    private static NamedObject RXCLKCORCNT0_port_name;
    private static NamedObject RXCLKCORCNT1_port_name;
    private static NamedObject RXCOMMADET0_port_name;
    private static NamedObject RXCOMMADET1_port_name;
    private static NamedObject RXELECIDLE0_port_name;
    private static NamedObject RXELECIDLE1_port_name;
    private static NamedObject RXLOSSOFSYNC0_port_name;
    private static NamedObject RXLOSSOFSYNC1_port_name;
    private static NamedObject RXNOTINTABLE0_port_name;
    private static NamedObject RXNOTINTABLE1_port_name;
    private static NamedObject RXPRBSERR0_port_name;
    private static NamedObject RXPRBSERR1_port_name;
    private static NamedObject RXRECCLK0_port_name;
    private static NamedObject RXRUNDISP0_port_name;
    private static NamedObject RXRUNDISP1_port_name;
    private static NamedObject RXSTATUS0_port_name;
    private static NamedObject RXSTATUS1_port_name;
    private static NamedObject TSTOUT0_port_name;
    private static NamedObject TSTOUT1_port_name;
    private static NamedObject TXBUFSTATUS0_port_name;
    private static NamedObject TXBUFSTATUS1_port_name;
    private static NamedObject TXKERR0_port_name;
    private static NamedObject TXKERR1_port_name;
    private static NamedObject TXOUTCLK0_port_name;
    private static NamedObject TXRUNDISP0_port_name;
    private static NamedObject TXRUNDISP1_port_name;
    private static NamedObject CLK00_port_name;
    private static NamedObject CLK01_port_name;
    private static NamedObject CLK10_port_name;
    private static NamedObject CLK11_port_name;
    private static NamedObject CLKINEAST0_port_name;
    private static NamedObject CLKINEAST1_port_name;
    private static NamedObject CLKINWEST0_port_name;
    private static NamedObject CLKINWEST1_port_name;
    private static NamedObject GATERXELECIDLE0_port_name;
    private static NamedObject GATERXELECIDLE1_port_name;
    private static NamedObject GCLK00_port_name;
    private static NamedObject GCLK01_port_name;
    private static NamedObject GCLK10_port_name;
    private static NamedObject GCLK11_port_name;
    private static NamedObject GTPCLKFBSEL0EAST_port_name;
    private static NamedObject GTPCLKFBSEL0WEST_port_name;
    private static NamedObject GTPCLKFBSEL1EAST_port_name;
    private static NamedObject GTPCLKFBSEL1WEST_port_name;
    private static NamedObject GTPRESET0_port_name;
    private static NamedObject GTPRESET1_port_name;
    private static NamedObject GTPTEST0_port_name;
    private static NamedObject GTPTEST1_port_name;
    private static NamedObject IGNORESIGDET0_port_name;
    private static NamedObject IGNORESIGDET1_port_name;
    private static NamedObject INTDATAWIDTH0_port_name;
    private static NamedObject INTDATAWIDTH1_port_name;
    private static NamedObject LOOPBACK0_port_name;
    private static NamedObject LOOPBACK1_port_name;
    private static NamedObject PLLCLK00_port_name;
    private static NamedObject PLLCLK01_port_name;
    private static NamedObject PLLCLK10_port_name;
    private static NamedObject PLLCLK11_port_name;
    private static NamedObject PLLLKDETEN0_port_name;
    private static NamedObject PLLLKDETEN1_port_name;
    private static NamedObject PLLPOWERDOWN0_port_name;
    private static NamedObject PLLPOWERDOWN1_port_name;
    private static NamedObject PRBSCNTRESET0_port_name;
    private static NamedObject PRBSCNTRESET1_port_name;
    private static NamedObject RCALINEAST_port_name;
    private static NamedObject RCALINWEST_port_name;
    private static NamedObject REFCLKPWRDNB0_port_name;
    private static NamedObject REFCLKPWRDNB1_port_name;
    private static NamedObject REFSELDYPLL0_port_name;
    private static NamedObject REFSELDYPLL1_port_name;
    private static NamedObject RXCDRRESET0_port_name;
    private static NamedObject RXCDRRESET1_port_name;
    private static NamedObject RXCHBONDMASTER0_port_name;
    private static NamedObject RXCHBONDMASTER1_port_name;
    private static NamedObject RXCHBONDSLAVE0_port_name;
    private static NamedObject RXCHBONDSLAVE1_port_name;
    private static NamedObject RXCOMMADETUSE0_port_name;
    private static NamedObject RXCOMMADETUSE1_port_name;
    private static NamedObject RXDATAWIDTH0_port_name;
    private static NamedObject RXDATAWIDTH1_port_name;
    private static NamedObject RXDEC8B10BUSE0_port_name;
    private static NamedObject RXDEC8B10BUSE1_port_name;
    private static NamedObject RXENCHANSYNC0_port_name;
    private static NamedObject RXENCHANSYNC1_port_name;
    private static NamedObject RXENMCOMMAALIGN0_port_name;
    private static NamedObject RXENMCOMMAALIGN1_port_name;
    private static NamedObject RXENPCOMMAALIGN0_port_name;
    private static NamedObject RXENPCOMMAALIGN1_port_name;
    private static NamedObject RXENPMAPHASEALIGN0_port_name;
    private static NamedObject RXENPMAPHASEALIGN1_port_name;
    private static NamedObject RXENPRBSTST0_port_name;
    private static NamedObject RXENPRBSTST1_port_name;
    private static NamedObject RXEQMIX0_port_name;
    private static NamedObject RXEQMIX1_port_name;
    private static NamedObject RXPMASETPHASE0_port_name;
    private static NamedObject RXPMASETPHASE1_port_name;
    private static NamedObject RXRESET0_port_name;
    private static NamedObject RXRESET1_port_name;
    private static NamedObject RXSLIDE0_port_name;
    private static NamedObject RXSLIDE1_port_name;
    private static NamedObject RXUSRCLK0_port_name;
    private static NamedObject RXUSRCLK1_port_name;
    private static NamedObject RXUSRCLK20_port_name;
    private static NamedObject RXUSRCLK21_port_name;
    private static NamedObject TSTCLK0_port_name;
    private static NamedObject TSTCLK1_port_name;
    private static NamedObject TSTIN0_port_name;
    private static NamedObject TSTIN1_port_name;
    private static NamedObject TXBUFDIFFCTRL0_port_name;
    private static NamedObject TXBUFDIFFCTRL1_port_name;
    private static NamedObject TXBYPASS8B10B0_port_name;
    private static NamedObject TXBYPASS8B10B1_port_name;
    private static NamedObject TXCHARDISPMODE0_port_name;
    private static NamedObject TXCHARDISPMODE1_port_name;
    private static NamedObject TXCHARDISPVAL0_port_name;
    private static NamedObject TXCHARDISPVAL1_port_name;
    private static NamedObject TXCHARISK0_port_name;
    private static NamedObject TXCHARISK1_port_name;
    private static NamedObject TXCOMSTART0_port_name;
    private static NamedObject TXCOMSTART1_port_name;
    private static NamedObject TXCOMTYPE0_port_name;
    private static NamedObject TXCOMTYPE1_port_name;
    private static NamedObject TXDATAWIDTH0_port_name;
    private static NamedObject TXDATAWIDTH1_port_name;
    private static NamedObject TXDETECTRX0_port_name;
    private static NamedObject TXDETECTRX1_port_name;
    private static NamedObject TXDIFFCTRL0_port_name;
    private static NamedObject TXDIFFCTRL1_port_name;
    private static NamedObject TXELECIDLE0_port_name;
    private static NamedObject TXELECIDLE1_port_name;
    private static NamedObject TXENC8B10BUSE0_port_name;
    private static NamedObject TXENC8B10BUSE1_port_name;
    private static NamedObject TXENPMAPHASEALIGN0_port_name;
    private static NamedObject TXENPMAPHASEALIGN1_port_name;
    private static NamedObject TXENPRBSTST0_port_name;
    private static NamedObject TXENPRBSTST1_port_name;
    private static NamedObject TXINHIBIT0_port_name;
    private static NamedObject TXINHIBIT1_port_name;
    private static NamedObject TXPDOWNASYNCH0_port_name;
    private static NamedObject TXPDOWNASYNCH1_port_name;
    private static NamedObject TXPMASETPHASE0_port_name;
    private static NamedObject TXPMASETPHASE1_port_name;
    private static NamedObject TXPOLARITY0_port_name;
    private static NamedObject TXPOLARITY1_port_name;
    private static NamedObject TXPRBSFORCEERR0_port_name;
    private static NamedObject TXPRBSFORCEERR1_port_name;
    private static NamedObject TXPREEMPHASIS0_port_name;
    private static NamedObject TXPREEMPHASIS1_port_name;
    private static NamedObject TXRESET0_port_name;
    private static NamedObject TXRESET1_port_name;
    private static NamedObject TXUSRCLK0_port_name;
    private static NamedObject TXUSRCLK1_port_name;
    private static NamedObject TXUSRCLK20_port_name;
    private static NamedObject TXUSRCLK21_port_name;
    private static NamedObject USRCODEERR0_port_name;
    private static NamedObject USRCODEERR1_port_name;
    private static NamedObject GTPTXN_port_name;
    private static NamedObject GTPTXP_port_name;
    private static NamedObject PMARSVDOUT0_port_name;
    private static NamedObject PMARSVDOUT1_port_name;
    private static NamedObject RXOSINTDONE_port_name;
    private static NamedObject GTPRXN_port_name;
    private static NamedObject GTPRXP_port_name;
    private static NamedObject PLL0CLK_port_name;
    private static NamedObject PLL0REFCLK_port_name;
    private static NamedObject PLL1CLK_port_name;
    private static NamedObject PLL1REFCLK_port_name;
    private static NamedObject PMARSVDIN0_port_name;
    private static NamedObject PMARSVDIN1_port_name;
    private static NamedObject PMARSVDIN2_port_name;
    private static NamedObject PMARSVDIN3_port_name;
    private static NamedObject PMARSVDIN4_port_name;
    private static NamedObject RXLPMLFOVRDEN_port_name;
    private static NamedObject RXLPMOSINTNTRLEN_port_name;
    private static NamedObject RXLPMRESET_port_name;
    private static NamedObject RXOSINTPD_port_name;
    private static NamedObject PLL0FBCLKLOST_port_name;
    private static NamedObject PLL0LOCK_port_name;
    private static NamedObject PLL0OUTCLK_port_name;
    private static NamedObject PLL0OUTREFCLK_port_name;
    private static NamedObject PLL0REFCLKLOST_port_name;
    private static NamedObject PLL1FBCLKLOST_port_name;
    private static NamedObject PLL1LOCK_port_name;
    private static NamedObject PLL1OUTCLK_port_name;
    private static NamedObject PLL1OUTREFCLK_port_name;
    private static NamedObject PLL1REFCLKLOST_port_name;
    private static NamedObject REFCLKOUTMONITOR0_port_name;
    private static NamedObject REFCLKOUTMONITOR1_port_name;
    private static NamedObject GTEASTREFCLK0_port_name;
    private static NamedObject GTEASTREFCLK1_port_name;
    private static NamedObject GTGREFCLK0_port_name;
    private static NamedObject GTGREFCLK1_port_name;
    private static NamedObject GTWESTREFCLK0_port_name;
    private static NamedObject GTWESTREFCLK1_port_name;
    private static NamedObject PLL0LOCKDETCLK_port_name;
    private static NamedObject PLL0LOCKEN_port_name;
    private static NamedObject PLL0PD_port_name;
    private static NamedObject PLL0REFCLKSEL_port_name;
    private static NamedObject PLL0RESET_port_name;
    private static NamedObject PLL1LOCKDETCLK_port_name;
    private static NamedObject PLL1LOCKEN_port_name;
    private static NamedObject PLL1PD_port_name;
    private static NamedObject PLL1REFCLKSEL_port_name;
    private static NamedObject PLL1RESET_port_name;
    private static NamedObject PLLRSVD1_port_name;
    private static NamedObject PLLRSVD2_port_name;
    private static NamedObject PLLLKDET_port_name;
    private static NamedObject REFCLKOUT_port_name;
    private static NamedObject RXCHBONDO0_port_name;
    private static NamedObject RXCHBONDO1_port_name;
    private static NamedObject RXOVERSAMPLEERR0_port_name;
    private static NamedObject RXOVERSAMPLEERR1_port_name;
    private static NamedObject GTPRESET_port_name;
    private static NamedObject GTPTEST_port_name;
    private static NamedObject INTDATAWIDTH_port_name;
    private static NamedObject PLLLKDETEN_port_name;
    private static NamedObject PLLPOWERDOWN_port_name;
    private static NamedObject REFCLKPWRDNB_port_name;
    private static NamedObject RXCHBONDI0_port_name;
    private static NamedObject RXCHBONDI1_port_name;
    private static NamedObject RXELECIDLERESET0_port_name;
    private static NamedObject RXELECIDLERESET1_port_name;
    private static NamedObject RXENELECIDLERESETB_port_name;
    private static NamedObject RXENEQB0_port_name;
    private static NamedObject RXENEQB1_port_name;
    private static NamedObject RXENSAMPLEALIGN0_port_name;
    private static NamedObject RXENSAMPLEALIGN1_port_name;
    private static NamedObject RXEQPOLE0_port_name;
    private static NamedObject RXEQPOLE1_port_name;
    private static NamedObject TXENPMAPHASEALIGN_port_name;
    private static NamedObject TXPMASETPHASE_port_name;
    private static NamedObject COMFINISH_port_name;
    private static NamedObject COMINITDET_port_name;
    private static NamedObject COMSASDET_port_name;
    private static NamedObject COMWAKEDET_port_name;
    private static NamedObject DFECLKDLYADJMON_port_name;
    private static NamedObject DFEEYEDACMON_port_name;
    private static NamedObject DFESENSCAL_port_name;
    private static NamedObject DFETAP1MONITOR_port_name;
    private static NamedObject DFETAP2MONITOR_port_name;
    private static NamedObject DFETAP3MONITOR_port_name;
    private static NamedObject DFETAP4MONITOR_port_name;
    private static NamedObject MGTREFCLKFAB_port_name;
    private static NamedObject RXDLYALIGNMONITOR_port_name;
    private static NamedObject RXOVERSAMPLEERR_port_name;
    private static NamedObject RXPLLLKDET_port_name;
    private static NamedObject RXRECCLK_port_name;
    private static NamedObject RXRECCLKPCS_port_name;
    private static NamedObject TSTOUT_port_name;
    private static NamedObject TXDLYALIGNMONITOR_port_name;
    private static NamedObject TXN_port_name;
    private static NamedObject TXP_port_name;
    private static NamedObject TXPLLLKDET_port_name;
    private static NamedObject DFECLKDLYADJ_port_name;
    private static NamedObject DFEDLYOVRD_port_name;
    private static NamedObject DFETAP1_port_name;
    private static NamedObject DFETAP2_port_name;
    private static NamedObject DFETAP3_port_name;
    private static NamedObject DFETAP4_port_name;
    private static NamedObject DFETAPOVRD_port_name;
    private static NamedObject GATERXELECIDLE_port_name;
    private static NamedObject GREFCLKRX_port_name;
    private static NamedObject GREFCLKTX_port_name;
    private static NamedObject GTXRXRESET_port_name;
    private static NamedObject GTXTEST_port_name;
    private static NamedObject GTXTXRESET_port_name;
    private static NamedObject IGNORESIGDET_port_name;
    private static NamedObject MGTREFCLKRX_port_name;
    private static NamedObject MGTREFCLKTX_port_name;
    private static NamedObject NORTHREFCLKRX_port_name;
    private static NamedObject NORTHREFCLKTX_port_name;
    private static NamedObject PERFCLKRX_port_name;
    private static NamedObject PERFCLKTX_port_name;
    private static NamedObject PLLRXRESET_port_name;
    private static NamedObject PLLTXRESET_port_name;
    private static NamedObject PRBSCNTRESET_port_name;
    private static NamedObject RXDLYALIGNDISABLE_port_name;
    private static NamedObject RXDLYALIGNMONENB_port_name;
    private static NamedObject RXDLYALIGNOVERRIDE_port_name;
    private static NamedObject RXDLYALIGNRESET_port_name;
    private static NamedObject RXDLYALIGNSWPPRECURB_port_name;
    private static NamedObject RXDLYALIGNUPDSW_port_name;
    private static NamedObject RXENCHANSYNC_port_name;
    private static NamedObject RXENMCOMMAALIGN_port_name;
    private static NamedObject RXENPCOMMAALIGN_port_name;
    private static NamedObject RXENPMAPHASEALIGN_port_name;
    private static NamedObject RXENPRBSTST_port_name;
    private static NamedObject RXENSAMPLEALIGN_port_name;
    private static NamedObject RXEQMIX_port_name;
    private static NamedObject RXN_port_name;
    private static NamedObject RXP_port_name;
    private static NamedObject RXPLLLKDETEN_port_name;
    private static NamedObject RXPLLPOWERDOWN_port_name;
    private static NamedObject RXPLLREFSELDY_port_name;
    private static NamedObject RXPMASETPHASE_port_name;
    private static NamedObject RXPOWERDOWN_port_name;
    private static NamedObject SOUTHREFCLKRX_port_name;
    private static NamedObject SOUTHREFCLKTX_port_name;
    private static NamedObject TXDLYALIGNDISABLE_port_name;
    private static NamedObject TXDLYALIGNMONENB_port_name;
    private static NamedObject TXDLYALIGNOVERRIDE_port_name;
    private static NamedObject TXDLYALIGNRESET_port_name;
    private static NamedObject TXDLYALIGNUPDSW_port_name;
    private static NamedObject TXENPRBSTST_port_name;
    private static NamedObject TXPDOWNASYNCH_port_name;
    private static NamedObject TXPLLLKDETEN_port_name;
    private static NamedObject TXPLLPOWERDOWN_port_name;
    private static NamedObject TXPLLREFSELDY_port_name;
    private static NamedObject TXPOSTEMPHASIS_port_name;
    private static NamedObject TXPOWERDOWN_port_name;
    private static NamedObject TXPREEMPHASIS_port_name;
    private static NamedObject USRCODEERR_port_name;
    private static NamedObject GTXTXN_port_name;
    private static NamedObject GTXTXP_port_name;
    private static NamedObject CLKRSVD_port_name;
    private static NamedObject GTXRXN_port_name;
    private static NamedObject GTXRXP_port_name;
    private static NamedObject RXDFEXYDHOLD_port_name;
    private static NamedObject RXDFEXYDOVRDEN_port_name;
    private static NamedObject DFECLKDLYADJMONITOR0_port_name;
    private static NamedObject DFECLKDLYADJMONITOR1_port_name;
    private static NamedObject DFEEYEDACMONITOR0_port_name;
    private static NamedObject DFEEYEDACMONITOR1_port_name;
    private static NamedObject DFESENSCAL0_port_name;
    private static NamedObject DFESENSCAL1_port_name;
    private static NamedObject DFETAP1MONITOR0_port_name;
    private static NamedObject DFETAP1MONITOR1_port_name;
    private static NamedObject DFETAP2MONITOR0_port_name;
    private static NamedObject DFETAP2MONITOR1_port_name;
    private static NamedObject DFETAP3MONITOR0_port_name;
    private static NamedObject DFETAP3MONITOR1_port_name;
    private static NamedObject DFETAP4MONITOR0_port_name;
    private static NamedObject DFETAP4MONITOR1_port_name;
    private static NamedObject RXDATAVALID0_port_name;
    private static NamedObject RXDATAVALID1_port_name;
    private static NamedObject RXHEADER0_port_name;
    private static NamedObject RXHEADER1_port_name;
    private static NamedObject RXHEADERVALID0_port_name;
    private static NamedObject RXHEADERVALID1_port_name;
    private static NamedObject RXSTARTOFSEQ0_port_name;
    private static NamedObject RXSTARTOFSEQ1_port_name;
    private static NamedObject TXGEARBOXREADY0_port_name;
    private static NamedObject TXGEARBOXREADY1_port_name;
    private static NamedObject DFECLKDLYADJ0_port_name;
    private static NamedObject DFECLKDLYADJ1_port_name;
    private static NamedObject DFETAP10_port_name;
    private static NamedObject DFETAP11_port_name;
    private static NamedObject DFETAP20_port_name;
    private static NamedObject DFETAP21_port_name;
    private static NamedObject DFETAP30_port_name;
    private static NamedObject DFETAP31_port_name;
    private static NamedObject DFETAP40_port_name;
    private static NamedObject DFETAP41_port_name;
    private static NamedObject GTXRESET_port_name;
    private static NamedObject RXGEARBOXSLIP0_port_name;
    private static NamedObject RXGEARBOXSLIP1_port_name;
    private static NamedObject TXHEADER0_port_name;
    private static NamedObject TXHEADER1_port_name;
    private static NamedObject TXSEQUENCE0_port_name;
    private static NamedObject TXSEQUENCE1_port_name;
    private static NamedObject TXSTARTSEQ0_port_name;
    private static NamedObject TXSTARTSEQ1_port_name;
    private static NamedObject OB_port_name;
    private static NamedObject IBUFDISABLE_port_name;
    private static NamedObject INTERMDISABLE_port_name;
    private static NamedObject ODIV2_port_name;
    private static NamedObject CSIB_port_name;
    private static NamedObject RDWRB_port_name;
    private static NamedObject BUSY_port_name;
    private static NamedObject WRITE_port_name;
    private static NamedObject CSB_port_name;
    private static NamedObject Q1_port_name;
    private static NamedObject Q2_port_name;
    private static NamedObject Q0_port_name;
    private static NamedObject CB_port_name;
    private static NamedObject INC_port_name;
    private static NamedObject RDY_port_name;
    private static NamedObject CNTVALUEOUT_port_name;
    private static NamedObject DATAOUT_port_name;
    private static NamedObject CINVCTRL_port_name;
    private static NamedObject CNTVALUEIN_port_name;
    private static NamedObject DATAIN_port_name;
    private static NamedObject IDATAIN_port_name;
    private static NamedObject LD_port_name;
    private static NamedObject LDPIPEEN_port_name;
    private static NamedObject REGRST_port_name;
    private static NamedObject IFDLY_port_name;
    private static NamedObject Q3_port_name;
    private static NamedObject Q4_port_name;
    private static NamedObject Q5_port_name;
    private static NamedObject Q6_port_name;
    private static NamedObject Q7_port_name;
    private static NamedObject Q8_port_name;
    private static NamedObject Q9_port_name;
    private static NamedObject D2_port_name;
    private static NamedObject D3_port_name;
    private static NamedObject D4_port_name;
    private static NamedObject D5_port_name;
    private static NamedObject D6_port_name;
    private static NamedObject D7_port_name;
    private static NamedObject D8_port_name;
    private static NamedObject D9_port_name;
    private static NamedObject IO_port_name;
    private static NamedObject IOB_port_name;
    private static NamedObject DCITERMDISABLE_port_name;
    private static NamedObject TM_port_name;
    private static NamedObject TS_port_name;
    private static NamedObject ODATAIN_port_name;
    private static NamedObject DATAOUT2_port_name;
    private static NamedObject TOUT_port_name;
    private static NamedObject CAL_port_name;
    private static NamedObject SDO_port_name;
    private static NamedObject ADD_port_name;
    private static NamedObject BKST_port_name;
    private static NamedObject CS_port_name;
    private static NamedObject SDI_port_name;
    private static NamedObject AUXSDO_port_name;
    private static NamedObject DQSOUTN_port_name;
    private static NamedObject DQSOUTP_port_name;
    private static NamedObject AUXADDR_port_name;
    private static NamedObject AUXSDOIN_port_name;
    private static NamedObject MEMUPDATE_port_name;
    private static NamedObject SHIFTOUT1_port_name;
    private static NamedObject SHIFTOUT2_port_name;
    private static NamedObject BITSLIP_port_name;
    private static NamedObject CE2_port_name;
    private static NamedObject CLKDIV_port_name;
    private static NamedObject DLYCE_port_name;
    private static NamedObject DLYINC_port_name;
    private static NamedObject DLYRST_port_name;
    private static NamedObject OCLK_port_name;
    private static NamedObject REV_port_name;
    private static NamedObject SHIFTIN1_port_name;
    private static NamedObject SHIFTIN2_port_name;
    private static NamedObject SR_port_name;
    private static NamedObject CFB0_port_name;
    private static NamedObject CFB1_port_name;
    private static NamedObject DFB_port_name;
    private static NamedObject FABRICOUT_port_name;
    private static NamedObject INCDEC_port_name;
    private static NamedObject SHIFTOUT_port_name;
    private static NamedObject VALID_port_name;
    private static NamedObject CLK1_port_name;
    private static NamedObject IOCE_port_name;
    private static NamedObject SHIFTIN_port_name;
    private static NamedObject CLKB_port_name;
    private static NamedObject DDLY_port_name;
    private static NamedObject DYNCLKDIVSEL_port_name;
    private static NamedObject DYNCLKSEL_port_name;
    private static NamedObject OFB_port_name;
    private static NamedObject CLKDIVP_port_name;
    private static NamedObject OCLKB_port_name;
    private static NamedObject TDIPPC_port_name;
    private static NamedObject TDOPPC_port_name;
    private static NamedObject TDOTSPPC_port_name;
    private static NamedObject KEYCLEARB_port_name;
    private static NamedObject GE_port_name;
    private static NamedObject LO_port_name;
    private static NamedObject ADDR_port_name;
    private static NamedObject BA_port_name;
    private static NamedObject CAS_port_name;
    private static NamedObject CKE_port_name;
    private static NamedObject DQIOWEN0_port_name;
    private static NamedObject DQON_port_name;
    private static NamedObject DQOP_port_name;
    private static NamedObject DQSIOWEN90N_port_name;
    private static NamedObject DQSIOWEN90P_port_name;
    private static NamedObject IOIDRPADD_port_name;
    private static NamedObject IOIDRPADDR_port_name;
    private static NamedObject IOIDRPBROADCAST_port_name;
    private static NamedObject IOIDRPCLK_port_name;
    private static NamedObject IOIDRPCS_port_name;
    private static NamedObject IOIDRPSDO_port_name;
    private static NamedObject IOIDRPTRAIN_port_name;
    private static NamedObject IOIDRPUPDATE_port_name;
    private static NamedObject LDMN_port_name;
    private static NamedObject LDMP_port_name;
    private static NamedObject ODT_port_name;
    private static NamedObject P0CMDEMPTY_port_name;
    private static NamedObject P0CMDFULL_port_name;
    private static NamedObject P0RDCOUNT_port_name;
    private static NamedObject P0RDDATA_port_name;
    private static NamedObject P0RDEMPTY_port_name;
    private static NamedObject P0RDERROR_port_name;
    private static NamedObject P0RDFULL_port_name;
    private static NamedObject P0RDOVERFLOW_port_name;
    private static NamedObject P0WRCOUNT_port_name;
    private static NamedObject P0WREMPTY_port_name;
    private static NamedObject P0WRERROR_port_name;
    private static NamedObject P0WRFULL_port_name;
    private static NamedObject P0WRUNDERRUN_port_name;
    private static NamedObject P1CMDEMPTY_port_name;
    private static NamedObject P1CMDFULL_port_name;
    private static NamedObject P1RDCOUNT_port_name;
    private static NamedObject P1RDDATA_port_name;
    private static NamedObject P1RDEMPTY_port_name;
    private static NamedObject P1RDERROR_port_name;
    private static NamedObject P1RDFULL_port_name;
    private static NamedObject P1RDOVERFLOW_port_name;
    private static NamedObject P1WRCOUNT_port_name;
    private static NamedObject P1WREMPTY_port_name;
    private static NamedObject P1WRERROR_port_name;
    private static NamedObject P1WRFULL_port_name;
    private static NamedObject P1WRUNDERRUN_port_name;
    private static NamedObject P2CMDEMPTY_port_name;
    private static NamedObject P2CMDFULL_port_name;
    private static NamedObject P2COUNT_port_name;
    private static NamedObject P2EMPTY_port_name;
    private static NamedObject P2ERROR_port_name;
    private static NamedObject P2FULL_port_name;
    private static NamedObject P2RDDATA_port_name;
    private static NamedObject P2RDOVERFLOW_port_name;
    private static NamedObject P2WRUNDERRUN_port_name;
    private static NamedObject P3CMDEMPTY_port_name;
    private static NamedObject P3CMDFULL_port_name;
    private static NamedObject P3COUNT_port_name;
    private static NamedObject P3EMPTY_port_name;
    private static NamedObject P3ERROR_port_name;
    private static NamedObject P3FULL_port_name;
    private static NamedObject P3RDDATA_port_name;
    private static NamedObject P3RDOVERFLOW_port_name;
    private static NamedObject P3WRUNDERRUN_port_name;
    private static NamedObject P4CMDEMPTY_port_name;
    private static NamedObject P4CMDFULL_port_name;
    private static NamedObject P4COUNT_port_name;
    private static NamedObject P4EMPTY_port_name;
    private static NamedObject P4ERROR_port_name;
    private static NamedObject P4FULL_port_name;
    private static NamedObject P4RDDATA_port_name;
    private static NamedObject P4RDOVERFLOW_port_name;
    private static NamedObject P4WRUNDERRUN_port_name;
    private static NamedObject P5CMDEMPTY_port_name;
    private static NamedObject P5CMDFULL_port_name;
    private static NamedObject P5COUNT_port_name;
    private static NamedObject P5EMPTY_port_name;
    private static NamedObject P5ERROR_port_name;
    private static NamedObject P5FULL_port_name;
    private static NamedObject P5RDDATA_port_name;
    private static NamedObject P5RDOVERFLOW_port_name;
    private static NamedObject P5WRUNDERRUN_port_name;
    private static NamedObject RAS_port_name;
    private static NamedObject SELFREFRESHMODE_port_name;
    private static NamedObject UDMN_port_name;
    private static NamedObject UDMP_port_name;
    private static NamedObject UOCALSTART_port_name;
    private static NamedObject UOCMDREADYIN_port_name;
    private static NamedObject UODATA_port_name;
    private static NamedObject UODATAVALID_port_name;
    private static NamedObject UODONECAL_port_name;
    private static NamedObject UOREFRSHFLAG_port_name;
    private static NamedObject UOSDO_port_name;
    private static NamedObject WE_port_name;
    private static NamedObject DQI_port_name;
    private static NamedObject DQSIOIN_port_name;
    private static NamedObject DQSIOIP_port_name;
    private static NamedObject IOIDRPSDI_port_name;
    private static NamedObject P0ARBEN_port_name;
    private static NamedObject P0CMDBA_port_name;
    private static NamedObject P0CMDBL_port_name;
    private static NamedObject P0CMDCA_port_name;
    private static NamedObject P0CMDCLK_port_name;
    private static NamedObject P0CMDEN_port_name;
    private static NamedObject P0CMDINSTR_port_name;
    private static NamedObject P0CMDRA_port_name;
    private static NamedObject P0RDCLK_port_name;
    private static NamedObject P0RDEN_port_name;
    private static NamedObject P0RWRMASK_port_name;
    private static NamedObject P0WRCLK_port_name;
    private static NamedObject P0WRDATA_port_name;
    private static NamedObject P0WREN_port_name;
    private static NamedObject P1ARBEN_port_name;
    private static NamedObject P1CMDBA_port_name;
    private static NamedObject P1CMDBL_port_name;
    private static NamedObject P1CMDCA_port_name;
    private static NamedObject P1CMDCLK_port_name;
    private static NamedObject P1CMDEN_port_name;
    private static NamedObject P1CMDINSTR_port_name;
    private static NamedObject P1CMDRA_port_name;
    private static NamedObject P1RDCLK_port_name;
    private static NamedObject P1RDEN_port_name;
    private static NamedObject P1RWRMASK_port_name;
    private static NamedObject P1WRCLK_port_name;
    private static NamedObject P1WRDATA_port_name;
    private static NamedObject P1WREN_port_name;
    private static NamedObject P2ARBEN_port_name;
    private static NamedObject P2CLK_port_name;
    private static NamedObject P2CMDBA_port_name;
    private static NamedObject P2CMDBL_port_name;
    private static NamedObject P2CMDCA_port_name;
    private static NamedObject P2CMDCLK_port_name;
    private static NamedObject P2CMDEN_port_name;
    private static NamedObject P2CMDINSTR_port_name;
    private static NamedObject P2CMDRA_port_name;
    private static NamedObject P2EN_port_name;
    private static NamedObject P2WRDATA_port_name;
    private static NamedObject P2WRMASK_port_name;
    private static NamedObject P3ARBEN_port_name;
    private static NamedObject P3CLK_port_name;
    private static NamedObject P3CMDBA_port_name;
    private static NamedObject P3CMDBL_port_name;
    private static NamedObject P3CMDCA_port_name;
    private static NamedObject P3CMDCLK_port_name;
    private static NamedObject P3CMDEN_port_name;
    private static NamedObject P3CMDINSTR_port_name;
    private static NamedObject P3CMDRA_port_name;
    private static NamedObject P3EN_port_name;
    private static NamedObject P3WRDATA_port_name;
    private static NamedObject P3WRMASK_port_name;
    private static NamedObject P4ARBEN_port_name;
    private static NamedObject P4CLK_port_name;
    private static NamedObject P4CMDBA_port_name;
    private static NamedObject P4CMDBL_port_name;
    private static NamedObject P4CMDCA_port_name;
    private static NamedObject P4CMDCLK_port_name;
    private static NamedObject P4CMDEN_port_name;
    private static NamedObject P4CMDINSTR_port_name;
    private static NamedObject P4CMDRA_port_name;
    private static NamedObject P4EN_port_name;
    private static NamedObject P4WRDATA_port_name;
    private static NamedObject P4WRMASK_port_name;
    private static NamedObject P5ARBEN_port_name;
    private static NamedObject P5CLK_port_name;
    private static NamedObject P5CMDBA_port_name;
    private static NamedObject P5CMDBL_port_name;
    private static NamedObject P5CMDCA_port_name;
    private static NamedObject P5CMDCLK_port_name;
    private static NamedObject P5CMDEN_port_name;
    private static NamedObject P5CMDINSTR_port_name;
    private static NamedObject P5CMDRA_port_name;
    private static NamedObject P5EN_port_name;
    private static NamedObject P5WRDATA_port_name;
    private static NamedObject P5WRMASK_port_name;
    private static NamedObject PLLCE_port_name;
    private static NamedObject PLLCLK_port_name;
    private static NamedObject PLLLOCK_port_name;
    private static NamedObject RECAL_port_name;
    private static NamedObject SELFREFRESHENTER_port_name;
    private static NamedObject SYSRST_port_name;
    private static NamedObject UDQSIOIN_port_name;
    private static NamedObject UDQSIOIP_port_name;
    private static NamedObject UIADD_port_name;
    private static NamedObject UIADDR_port_name;
    private static NamedObject UIBROADCAST_port_name;
    private static NamedObject UICLK_port_name;
    private static NamedObject UICMD_port_name;
    private static NamedObject UICMDEN_port_name;
    private static NamedObject UICMDIN_port_name;
    private static NamedObject UICS_port_name;
    private static NamedObject UIDONECAL_port_name;
    private static NamedObject UIDQCOUNT_port_name;
    private static NamedObject UIDQLOWERDEC_port_name;
    private static NamedObject UIDQLOWERINC_port_name;
    private static NamedObject UIDQUPPERDEC_port_name;
    private static NamedObject UIDQUPPERINC_port_name;
    private static NamedObject UIDRPUPDATE_port_name;
    private static NamedObject UILDQSDEC_port_name;
    private static NamedObject UILDQSINC_port_name;
    private static NamedObject UIREAD_port_name;
    private static NamedObject UISDI_port_name;
    private static NamedObject UIUDQSDEC_port_name;
    private static NamedObject UIUDQSINC_port_name;
    private static NamedObject CLKFBOUT_port_name;
    private static NamedObject CLKFBOUTB_port_name;
    private static NamedObject CLKFBSTOPPED_port_name;
    private static NamedObject CLKINSTOPPED_port_name;
    private static NamedObject CLKOUT0_port_name;
    private static NamedObject CLKOUT0B_port_name;
    private static NamedObject CLKOUT1_port_name;
    private static NamedObject CLKOUT1B_port_name;
    private static NamedObject CLKOUT2_port_name;
    private static NamedObject CLKOUT2B_port_name;
    private static NamedObject CLKOUT3_port_name;
    private static NamedObject CLKOUT3B_port_name;
    private static NamedObject CLKOUT4_port_name;
    private static NamedObject CLKOUT5_port_name;
    private static NamedObject CLKOUT6_port_name;
    private static NamedObject CLKFBIN_port_name;
    private static NamedObject CLKIN1_port_name;
    private static NamedObject CLKIN2_port_name;
    private static NamedObject CLKINSEL_port_name;
    private static NamedObject PWRDWN_port_name;
    private static NamedObject OFDLY_port_name;
    private static NamedObject OQ_port_name;
    private static NamedObject TQ_port_name;
    private static NamedObject OCE_port_name;
    private static NamedObject T1_port_name;
    private static NamedObject T2_port_name;
    private static NamedObject T3_port_name;
    private static NamedObject T4_port_name;
    private static NamedObject TCE_port_name;
    private static NamedObject SHIFTOUT3_port_name;
    private static NamedObject SHIFTOUT4_port_name;
    private static NamedObject SHIFTIN3_port_name;
    private static NamedObject SHIFTIN4_port_name;
    private static NamedObject TRAIN_port_name;
    private static NamedObject OCBEXTEND_port_name;
    private static NamedObject TFB_port_name;
    private static NamedObject CLKPERF_port_name;
    private static NamedObject CLKPERFDELAY_port_name;
    private static NamedObject ODV_port_name;
    private static NamedObject WC_port_name;
    private static NamedObject TBYTEOUT_port_name;
    private static NamedObject TBYTEIN_port_name;
    private static NamedObject CFGAERECRCCHECKEN_port_name;
    private static NamedObject CFGAERECRCGENEN_port_name;
    private static NamedObject CFGCOMMANDBUSMASTERENABLE_port_name;
    private static NamedObject CFGCOMMANDINTERRUPTDISABLE_port_name;
    private static NamedObject CFGCOMMANDIOENABLE_port_name;
    private static NamedObject CFGCOMMANDMEMENABLE_port_name;
    private static NamedObject CFGCOMMANDSERREN_port_name;
    private static NamedObject CFGDEVCONTROL2CPLTIMEOUTDIS_port_name;
    private static NamedObject CFGDEVCONTROL2CPLTIMEOUTVAL_port_name;
    private static NamedObject CFGDEVCONTROLAUXPOWEREN_port_name;
    private static NamedObject CFGDEVCONTROLCORRERRREPORTINGEN_port_name;
    private static NamedObject CFGDEVCONTROLENABLERO_port_name;
    private static NamedObject CFGDEVCONTROLEXTTAGEN_port_name;
    private static NamedObject CFGDEVCONTROLFATALERRREPORTINGEN_port_name;
    private static NamedObject CFGDEVCONTROLMAXPAYLOAD_port_name;
    private static NamedObject CFGDEVCONTROLMAXREADREQ_port_name;
    private static NamedObject CFGDEVCONTROLNONFATALREPORTINGEN_port_name;
    private static NamedObject CFGDEVCONTROLNOSNOOPEN_port_name;
    private static NamedObject CFGDEVCONTROLPHANTOMEN_port_name;
    private static NamedObject CFGDEVCONTROLURERRREPORTINGEN_port_name;
    private static NamedObject CFGDEVSTATUSCORRERRDETECTED_port_name;
    private static NamedObject CFGDEVSTATUSFATALERRDETECTED_port_name;
    private static NamedObject CFGDEVSTATUSNONFATALERRDETECTED_port_name;
    private static NamedObject CFGDEVSTATUSURDETECTED_port_name;
    private static NamedObject CFGDO_port_name;
    private static NamedObject CFGERRAERHEADERLOGSETN_port_name;
    private static NamedObject CFGERRCPLRDYN_port_name;
    private static NamedObject CFGINTERRUPTDO_port_name;
    private static NamedObject CFGINTERRUPTMMENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSIENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSIXENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSIXFM_port_name;
    private static NamedObject CFGINTERRUPTRDYN_port_name;
    private static NamedObject CFGLINKCONTROLASPMCONTROL_port_name;
    private static NamedObject CFGLINKCONTROLAUTOBANDWIDTHINTEN_port_name;
    private static NamedObject CFGLINKCONTROLBANDWIDTHINTEN_port_name;
    private static NamedObject CFGLINKCONTROLCLOCKPMEN_port_name;
    private static NamedObject CFGLINKCONTROLCOMMONCLOCK_port_name;
    private static NamedObject CFGLINKCONTROLEXTENDEDSYNC_port_name;
    private static NamedObject CFGLINKCONTROLHWAUTOWIDTHDIS_port_name;
    private static NamedObject CFGLINKCONTROLLINKDISABLE_port_name;
    private static NamedObject CFGLINKCONTROLRCB_port_name;
    private static NamedObject CFGLINKCONTROLRETRAINLINK_port_name;
    private static NamedObject CFGLINKSTATUSAUTOBANDWIDTHSTATUS_port_name;
    private static NamedObject CFGLINKSTATUSBANDWITHSTATUS_port_name;
    private static NamedObject CFGLINKSTATUSCURRENTSPEED_port_name;
    private static NamedObject CFGLINKSTATUSDLLACTIVE_port_name;
    private static NamedObject CFGLINKSTATUSLINKTRAINING_port_name;
    private static NamedObject CFGLINKSTATUSNEGOTIATEDWIDTH_port_name;
    private static NamedObject CFGMSGDATA_port_name;
    private static NamedObject CFGMSGRECEIVED_port_name;
    private static NamedObject CFGMSGRECEIVEDASSERTINTA_port_name;
    private static NamedObject CFGMSGRECEIVEDASSERTINTB_port_name;
    private static NamedObject CFGMSGRECEIVEDASSERTINTC_port_name;
    private static NamedObject CFGMSGRECEIVEDASSERTINTD_port_name;
    private static NamedObject CFGMSGRECEIVEDDEASSERTINTA_port_name;
    private static NamedObject CFGMSGRECEIVEDDEASSERTINTB_port_name;
    private static NamedObject CFGMSGRECEIVEDDEASSERTINTC_port_name;
    private static NamedObject CFGMSGRECEIVEDDEASSERTINTD_port_name;
    private static NamedObject CFGMSGRECEIVEDERRCOR_port_name;
    private static NamedObject CFGMSGRECEIVEDERRFATAL_port_name;
    private static NamedObject CFGMSGRECEIVEDERRNONFATAL_port_name;
    private static NamedObject CFGMSGRECEIVEDPMASNAK_port_name;
    private static NamedObject CFGMSGRECEIVEDPMETO_port_name;
    private static NamedObject CFGMSGRECEIVEDPMETOACK_port_name;
    private static NamedObject CFGMSGRECEIVEDPMPME_port_name;
    private static NamedObject CFGMSGRECEIVEDSETSLOTPOWERLIMIT_port_name;
    private static NamedObject CFGMSGRECEIVEDUNLOCK_port_name;
    private static NamedObject CFGPCIELINKSTATE_port_name;
    private static NamedObject CFGPMCSRPMEEN_port_name;
    private static NamedObject CFGPMCSRPMESTATUS_port_name;
    private static NamedObject CFGPMCSRPOWERSTATE_port_name;
    private static NamedObject CFGPMRCVASREQL1N_port_name;
    private static NamedObject CFGPMRCVENTERL1N_port_name;
    private static NamedObject CFGPMRCVENTERL23N_port_name;
    private static NamedObject CFGPMRCVREQACKN_port_name;
    private static NamedObject CFGRDWRDONEN_port_name;
    private static NamedObject CFGSLOTCONTROLELECTROMECHILCTLPULSE_port_name;
    private static NamedObject CFGTRANSACTION_port_name;
    private static NamedObject CFGTRANSACTIONADDR_port_name;
    private static NamedObject CFGTRANSACTIONTYPE_port_name;
    private static NamedObject CFGVCTCVCMAP_port_name;
    private static NamedObject DBGSCLRA_port_name;
    private static NamedObject DBGSCLRB_port_name;
    private static NamedObject DBGSCLRC_port_name;
    private static NamedObject DBGSCLRD_port_name;
    private static NamedObject DBGSCLRE_port_name;
    private static NamedObject DBGSCLRF_port_name;
    private static NamedObject DBGSCLRG_port_name;
    private static NamedObject DBGSCLRH_port_name;
    private static NamedObject DBGSCLRI_port_name;
    private static NamedObject DBGSCLRJ_port_name;
    private static NamedObject DBGSCLRK_port_name;
    private static NamedObject DBGVECA_port_name;
    private static NamedObject DBGVECB_port_name;
    private static NamedObject DBGVECC_port_name;
    private static NamedObject DRPDRDY_port_name;
    private static NamedObject LL2BADDLLPERRN_port_name;
    private static NamedObject LL2BADTLPERRN_port_name;
    private static NamedObject LL2PROTOCOLERRN_port_name;
    private static NamedObject LL2REPLAYROERRN_port_name;
    private static NamedObject LL2REPLAYTOERRN_port_name;
    private static NamedObject LL2SUSPENDOKN_port_name;
    private static NamedObject LL2TFCINIT1SEQN_port_name;
    private static NamedObject LL2TFCINIT2SEQN_port_name;
    private static NamedObject LNKCLKEN_port_name;
    private static NamedObject MIMRXRADDR_port_name;
    private static NamedObject MIMRXRCE_port_name;
    private static NamedObject MIMRXREN_port_name;
    private static NamedObject MIMRXWADDR_port_name;
    private static NamedObject MIMRXWDATA_port_name;
    private static NamedObject MIMRXWEN_port_name;
    private static NamedObject MIMTXRADDR_port_name;
    private static NamedObject MIMTXRCE_port_name;
    private static NamedObject MIMTXREN_port_name;
    private static NamedObject MIMTXWADDR_port_name;
    private static NamedObject MIMTXWDATA_port_name;
    private static NamedObject MIMTXWEN_port_name;
    private static NamedObject PIPERX0POLARITY_port_name;
    private static NamedObject PIPERX1POLARITY_port_name;
    private static NamedObject PIPERX2POLARITY_port_name;
    private static NamedObject PIPERX3POLARITY_port_name;
    private static NamedObject PIPERX4POLARITY_port_name;
    private static NamedObject PIPERX5POLARITY_port_name;
    private static NamedObject PIPERX6POLARITY_port_name;
    private static NamedObject PIPERX7POLARITY_port_name;
    private static NamedObject PIPETX0CHARISK_port_name;
    private static NamedObject PIPETX0COMPLIANCE_port_name;
    private static NamedObject PIPETX0DATA_port_name;
    private static NamedObject PIPETX0ELECIDLE_port_name;
    private static NamedObject PIPETX0POWERDOWN_port_name;
    private static NamedObject PIPETX1CHARISK_port_name;
    private static NamedObject PIPETX1COMPLIANCE_port_name;
    private static NamedObject PIPETX1DATA_port_name;
    private static NamedObject PIPETX1ELECIDLE_port_name;
    private static NamedObject PIPETX1POWERDOWN_port_name;
    private static NamedObject PIPETX2CHARISK_port_name;
    private static NamedObject PIPETX2COMPLIANCE_port_name;
    private static NamedObject PIPETX2DATA_port_name;
    private static NamedObject PIPETX2ELECIDLE_port_name;
    private static NamedObject PIPETX2POWERDOWN_port_name;
    private static NamedObject PIPETX3CHARISK_port_name;
    private static NamedObject PIPETX3COMPLIANCE_port_name;
    private static NamedObject PIPETX3DATA_port_name;
    private static NamedObject PIPETX3ELECIDLE_port_name;
    private static NamedObject PIPETX3POWERDOWN_port_name;
    private static NamedObject PIPETX4CHARISK_port_name;
    private static NamedObject PIPETX4COMPLIANCE_port_name;
    private static NamedObject PIPETX4DATA_port_name;
    private static NamedObject PIPETX4ELECIDLE_port_name;
    private static NamedObject PIPETX4POWERDOWN_port_name;
    private static NamedObject PIPETX5CHARISK_port_name;
    private static NamedObject PIPETX5COMPLIANCE_port_name;
    private static NamedObject PIPETX5DATA_port_name;
    private static NamedObject PIPETX5ELECIDLE_port_name;
    private static NamedObject PIPETX5POWERDOWN_port_name;
    private static NamedObject PIPETX6CHARISK_port_name;
    private static NamedObject PIPETX6COMPLIANCE_port_name;
    private static NamedObject PIPETX6DATA_port_name;
    private static NamedObject PIPETX6ELECIDLE_port_name;
    private static NamedObject PIPETX6POWERDOWN_port_name;
    private static NamedObject PIPETX7CHARISK_port_name;
    private static NamedObject PIPETX7COMPLIANCE_port_name;
    private static NamedObject PIPETX7DATA_port_name;
    private static NamedObject PIPETX7ELECIDLE_port_name;
    private static NamedObject PIPETX7POWERDOWN_port_name;
    private static NamedObject PIPETXDEEMPH_port_name;
    private static NamedObject PIPETXMARGIN_port_name;
    private static NamedObject PIPETXRATE_port_name;
    private static NamedObject PIPETXRCVRDET_port_name;
    private static NamedObject PIPETXRESET_port_name;
    private static NamedObject PL2LINKUPN_port_name;
    private static NamedObject PL2RECEIVERERRN_port_name;
    private static NamedObject PL2RECOVERYN_port_name;
    private static NamedObject PL2RXELECIDLE_port_name;
    private static NamedObject PL2SUSPENDOK_port_name;
    private static NamedObject PLDBGVEC_port_name;
    private static NamedObject PLINITIALLINKWIDTH_port_name;
    private static NamedObject PLLANEREVERSALMODE_port_name;
    private static NamedObject PLLINKGEN2CAP_port_name;
    private static NamedObject PLLINKPARTNERGEN2SUPPORTED_port_name;
    private static NamedObject PLLINKUPCFGCAP_port_name;
    private static NamedObject PLLTSSMSTATE_port_name;
    private static NamedObject PLPHYLNKUPN_port_name;
    private static NamedObject PLRECEIVEDHOTRST_port_name;
    private static NamedObject PLRXPMSTATE_port_name;
    private static NamedObject PLSELLNKRATE_port_name;
    private static NamedObject PLSELLNKWIDTH_port_name;
    private static NamedObject PLTXPMSTATE_port_name;
    private static NamedObject RECEIVEDFUNCLVLRSTN_port_name;
    private static NamedObject TL2ASPMSUSPENDCREDITCHECKOKN_port_name;
    private static NamedObject TL2ASPMSUSPENDREQN_port_name;
    private static NamedObject TL2PPMSUSPENDOKN_port_name;
    private static NamedObject TRNFCCPLD_port_name;
    private static NamedObject TRNFCCPLH_port_name;
    private static NamedObject TRNFCNPD_port_name;
    private static NamedObject TRNFCNPH_port_name;
    private static NamedObject TRNFCPD_port_name;
    private static NamedObject TRNFCPH_port_name;
    private static NamedObject TRNLNKUPN_port_name;
    private static NamedObject TRNRBARHITN_port_name;
    private static NamedObject TRNRD_port_name;
    private static NamedObject TRNRDLLPDATA_port_name;
    private static NamedObject TRNRDLLPSRCRDYN_port_name;
    private static NamedObject TRNRECRCERRN_port_name;
    private static NamedObject TRNREOFN_port_name;
    private static NamedObject TRNRERRFWDN_port_name;
    private static NamedObject TRNRREMN_port_name;
    private static NamedObject TRNRSOFN_port_name;
    private static NamedObject TRNRSRCDSCN_port_name;
    private static NamedObject TRNRSRCRDYN_port_name;
    private static NamedObject TRNTBUFAV_port_name;
    private static NamedObject TRNTCFGREQN_port_name;
    private static NamedObject TRNTDLLPDSTRDYN_port_name;
    private static NamedObject TRNTDSTRDYN_port_name;
    private static NamedObject TRNTERRDROPN_port_name;
    private static NamedObject USERRSTN_port_name;
    private static NamedObject CFGBYTEENN_port_name;
    private static NamedObject CFGDI_port_name;
    private static NamedObject CFGDSBUSNUMBER_port_name;
    private static NamedObject CFGDSDEVICENUMBER_port_name;
    private static NamedObject CFGDSFUNCTIONNUMBER_port_name;
    private static NamedObject CFGDSN_port_name;
    private static NamedObject CFGDWADDR_port_name;
    private static NamedObject CFGERRACSN_port_name;
    private static NamedObject CFGERRAERHEADERLOG_port_name;
    private static NamedObject CFGERRCORN_port_name;
    private static NamedObject CFGERRCPLABORTN_port_name;
    private static NamedObject CFGERRCPLTIMEOUTN_port_name;
    private static NamedObject CFGERRCPLUNEXPECTN_port_name;
    private static NamedObject CFGERRECRCN_port_name;
    private static NamedObject CFGERRLOCKEDN_port_name;
    private static NamedObject CFGERRPOSTEDN_port_name;
    private static NamedObject CFGERRTLPCPLHEADER_port_name;
    private static NamedObject CFGERRURN_port_name;
    private static NamedObject CFGINTERRUPTASSERTN_port_name;
    private static NamedObject CFGINTERRUPTDI_port_name;
    private static NamedObject CFGINTERRUPTN_port_name;
    private static NamedObject CFGPMDIRECTASPML1N_port_name;
    private static NamedObject CFGPMSENDPMACKN_port_name;
    private static NamedObject CFGPMSENDPMETON_port_name;
    private static NamedObject CFGPMSENDPMNAKN_port_name;
    private static NamedObject CFGPMTURNOFFOKN_port_name;
    private static NamedObject CFGPMWAKEN_port_name;
    private static NamedObject CFGPORTNUMBER_port_name;
    private static NamedObject CFGRDENN_port_name;
    private static NamedObject CFGTRNPENDINGN_port_name;
    private static NamedObject CFGWRENN_port_name;
    private static NamedObject CFGWRREADONLYN_port_name;
    private static NamedObject CFGWRRW1CASRWN_port_name;
    private static NamedObject CMRSTN_port_name;
    private static NamedObject CMSTICKYRSTN_port_name;
    private static NamedObject DBGMODE_port_name;
    private static NamedObject DBGSUBMODE_port_name;
    private static NamedObject DLRSTN_port_name;
    private static NamedObject DRPDADDR_port_name;
    private static NamedObject DRPDEN_port_name;
    private static NamedObject DRPDWE_port_name;
    private static NamedObject FUNCLVLRSTN_port_name;
    private static NamedObject LL2SENDASREQL1N_port_name;
    private static NamedObject LL2SENDENTERL1N_port_name;
    private static NamedObject LL2SENDENTERL23N_port_name;
    private static NamedObject LL2SUSPENDNOWN_port_name;
    private static NamedObject LL2TLPRCVN_port_name;
    private static NamedObject MIMRXRDATA_port_name;
    private static NamedObject MIMTXRDATA_port_name;
    private static NamedObject PIPECLK_port_name;
    private static NamedObject PIPERX0CHANISALIGNED_port_name;
    private static NamedObject PIPERX0CHARISK_port_name;
    private static NamedObject PIPERX0DATA_port_name;
    private static NamedObject PIPERX0ELECIDLE_port_name;
    private static NamedObject PIPERX0PHYSTATUS_port_name;
    private static NamedObject PIPERX0STATUS_port_name;
    private static NamedObject PIPERX0VALID_port_name;
    private static NamedObject PIPERX1CHANISALIGNED_port_name;
    private static NamedObject PIPERX1CHARISK_port_name;
    private static NamedObject PIPERX1DATA_port_name;
    private static NamedObject PIPERX1ELECIDLE_port_name;
    private static NamedObject PIPERX1PHYSTATUS_port_name;
    private static NamedObject PIPERX1STATUS_port_name;
    private static NamedObject PIPERX1VALID_port_name;
    private static NamedObject PIPERX2CHANISALIGNED_port_name;
    private static NamedObject PIPERX2CHARISK_port_name;
    private static NamedObject PIPERX2DATA_port_name;
    private static NamedObject PIPERX2ELECIDLE_port_name;
    private static NamedObject PIPERX2PHYSTATUS_port_name;
    private static NamedObject PIPERX2STATUS_port_name;
    private static NamedObject PIPERX2VALID_port_name;
    private static NamedObject PIPERX3CHANISALIGNED_port_name;
    private static NamedObject PIPERX3CHARISK_port_name;
    private static NamedObject PIPERX3DATA_port_name;
    private static NamedObject PIPERX3ELECIDLE_port_name;
    private static NamedObject PIPERX3PHYSTATUS_port_name;
    private static NamedObject PIPERX3STATUS_port_name;
    private static NamedObject PIPERX3VALID_port_name;
    private static NamedObject PIPERX4CHANISALIGNED_port_name;
    private static NamedObject PIPERX4CHARISK_port_name;
    private static NamedObject PIPERX4DATA_port_name;
    private static NamedObject PIPERX4ELECIDLE_port_name;
    private static NamedObject PIPERX4PHYSTATUS_port_name;
    private static NamedObject PIPERX4STATUS_port_name;
    private static NamedObject PIPERX4VALID_port_name;
    private static NamedObject PIPERX5CHANISALIGNED_port_name;
    private static NamedObject PIPERX5CHARISK_port_name;
    private static NamedObject PIPERX5DATA_port_name;
    private static NamedObject PIPERX5ELECIDLE_port_name;
    private static NamedObject PIPERX5PHYSTATUS_port_name;
    private static NamedObject PIPERX5STATUS_port_name;
    private static NamedObject PIPERX5VALID_port_name;
    private static NamedObject PIPERX6CHANISALIGNED_port_name;
    private static NamedObject PIPERX6CHARISK_port_name;
    private static NamedObject PIPERX6DATA_port_name;
    private static NamedObject PIPERX6ELECIDLE_port_name;
    private static NamedObject PIPERX6PHYSTATUS_port_name;
    private static NamedObject PIPERX6STATUS_port_name;
    private static NamedObject PIPERX6VALID_port_name;
    private static NamedObject PIPERX7CHANISALIGNED_port_name;
    private static NamedObject PIPERX7CHARISK_port_name;
    private static NamedObject PIPERX7DATA_port_name;
    private static NamedObject PIPERX7ELECIDLE_port_name;
    private static NamedObject PIPERX7PHYSTATUS_port_name;
    private static NamedObject PIPERX7STATUS_port_name;
    private static NamedObject PIPERX7VALID_port_name;
    private static NamedObject PL2DIRECTEDLSTATE_port_name;
    private static NamedObject PLDBGMODE_port_name;
    private static NamedObject PLDIRECTEDLINKAUTON_port_name;
    private static NamedObject PLDIRECTEDLINKCHANGE_port_name;
    private static NamedObject PLDIRECTEDLINKSPEED_port_name;
    private static NamedObject PLDIRECTEDLINKWIDTH_port_name;
    private static NamedObject PLDOWNSTREAMDEEMPHSOURCE_port_name;
    private static NamedObject PLRSTN_port_name;
    private static NamedObject PLTRANSMITHOTRST_port_name;
    private static NamedObject PLUPSTREAMPREFERDEEMPH_port_name;
    private static NamedObject SYSRSTN_port_name;
    private static NamedObject TL2ASPMSUSPENDCREDITCHECKN_port_name;
    private static NamedObject TL2PPMSUSPENDREQN_port_name;
    private static NamedObject TLRSTN_port_name;
    private static NamedObject TRNFCSEL_port_name;
    private static NamedObject TRNRDSTRDYN_port_name;
    private static NamedObject TRNRNPOKN_port_name;
    private static NamedObject TRNTCFGGNTN_port_name;
    private static NamedObject TRNTD_port_name;
    private static NamedObject TRNTDLLPDATA_port_name;
    private static NamedObject TRNTDLLPSRCRDYN_port_name;
    private static NamedObject TRNTECRCGENN_port_name;
    private static NamedObject TRNTEOFN_port_name;
    private static NamedObject TRNTERRFWDN_port_name;
    private static NamedObject TRNTREMN_port_name;
    private static NamedObject TRNTSOFN_port_name;
    private static NamedObject TRNTSRCDSCN_port_name;
    private static NamedObject TRNTSRCRDYN_port_name;
    private static NamedObject TRNTSTRN_port_name;
    private static NamedObject USERCLK_port_name;
    private static NamedObject CFGAERROOTERRCORRERRRECEIVED_port_name;
    private static NamedObject CFGAERROOTERRCORRERRREPORTINGEN_port_name;
    private static NamedObject CFGAERROOTERRFATALERRRECEIVED_port_name;
    private static NamedObject CFGAERROOTERRFATALERRREPORTINGEN_port_name;
    private static NamedObject CFGAERROOTERRNONFATALERRRECEIVED_port_name;
    private static NamedObject CFGAERROOTERRNONFATALERRREPORTINGEN_port_name;
    private static NamedObject CFGBRIDGESERREN_port_name;
    private static NamedObject CFGDEVCONTROL2ARIFORWARDEN_port_name;
    private static NamedObject CFGDEVCONTROL2ATOMICEGRESSBLOCK_port_name;
    private static NamedObject CFGDEVCONTROL2ATOMICREQUESTEREN_port_name;
    private static NamedObject CFGDEVCONTROL2IDOCPLEN_port_name;
    private static NamedObject CFGDEVCONTROL2IDOREQEN_port_name;
    private static NamedObject CFGDEVCONTROL2LTREN_port_name;
    private static NamedObject CFGDEVCONTROL2TLPPREFIXBLOCK_port_name;
    private static NamedObject CFGLINKSTATUSBANDWIDTHSTATUS_port_name;
    private static NamedObject CFGMGMTDO_port_name;
    private static NamedObject CFGMGMTRDWRDONEN_port_name;
    private static NamedObject CFGROOTCONTROLPMEINTEN_port_name;
    private static NamedObject CFGROOTCONTROLSYSERRCORRERREN_port_name;
    private static NamedObject CFGROOTCONTROLSYSERRFATALERREN_port_name;
    private static NamedObject CFGROOTCONTROLSYSERRNONFATALERREN_port_name;
    private static NamedObject LL2BADDLLPERR_port_name;
    private static NamedObject LL2BADTLPERR_port_name;
    private static NamedObject LL2LINKSTATUS_port_name;
    private static NamedObject LL2PROTOCOLERR_port_name;
    private static NamedObject LL2RECEIVERERR_port_name;
    private static NamedObject LL2REPLAYROERR_port_name;
    private static NamedObject LL2REPLAYTOERR_port_name;
    private static NamedObject LL2SUSPENDOK_port_name;
    private static NamedObject LL2TFCINIT1SEQ_port_name;
    private static NamedObject LL2TFCINIT2SEQ_port_name;
    private static NamedObject LL2TXIDLE_port_name;
    private static NamedObject PL2L0REQ_port_name;
    private static NamedObject PL2LINKUP_port_name;
    private static NamedObject PL2RECEIVERERR_port_name;
    private static NamedObject PL2RECOVERY_port_name;
    private static NamedObject PL2RXPMSTATE_port_name;
    private static NamedObject PLDIRECTEDCHANGEDONE_port_name;
    private static NamedObject TL2ASPMSUSPENDCREDITCHECKOK_port_name;
    private static NamedObject TL2ASPMSUSPENDREQ_port_name;
    private static NamedObject TL2ERRFCPE_port_name;
    private static NamedObject TL2ERRHDR_port_name;
    private static NamedObject TL2ERRMALFORMED_port_name;
    private static NamedObject TL2ERRRXOVERFLOW_port_name;
    private static NamedObject TL2PPMSUSPENDOK_port_name;
    private static NamedObject TRNLNKUP_port_name;
    private static NamedObject TRNRBARHIT_port_name;
    private static NamedObject TRNRDLLPSRCRDY_port_name;
    private static NamedObject TRNRECRCERR_port_name;
    private static NamedObject TRNREOF_port_name;
    private static NamedObject TRNRERRFWD_port_name;
    private static NamedObject TRNRREM_port_name;
    private static NamedObject TRNRSOF_port_name;
    private static NamedObject TRNRSRCDSC_port_name;
    private static NamedObject TRNRSRCRDY_port_name;
    private static NamedObject TRNTCFGREQ_port_name;
    private static NamedObject TRNTDLLPDSTRDY_port_name;
    private static NamedObject TRNTDSTRDY_port_name;
    private static NamedObject TRNTERRDROP_port_name;
    private static NamedObject CFGAERINTERRUPTMSGNUM_port_name;
    private static NamedObject CFGDEVID_port_name;
    private static NamedObject CFGERRATOMICEGRESSBLOCKEDN_port_name;
    private static NamedObject CFGERRINTERNALCORN_port_name;
    private static NamedObject CFGERRINTERNALUNCORN_port_name;
    private static NamedObject CFGERRMALFORMEDN_port_name;
    private static NamedObject CFGERRMCBLOCKEDN_port_name;
    private static NamedObject CFGERRNORECOVERYN_port_name;
    private static NamedObject CFGERRPOISONEDN_port_name;
    private static NamedObject CFGFORCECOMMONCLOCKOFF_port_name;
    private static NamedObject CFGFORCEEXTENDEDSYNCON_port_name;
    private static NamedObject CFGFORCEMPS_port_name;
    private static NamedObject CFGINTERRUPTSTATN_port_name;
    private static NamedObject CFGMGMTBYTEENN_port_name;
    private static NamedObject CFGMGMTDI_port_name;
    private static NamedObject CFGMGMTDWADDR_port_name;
    private static NamedObject CFGMGMTRDENN_port_name;
    private static NamedObject CFGMGMTWRENN_port_name;
    private static NamedObject CFGMGMTWRREADONLYN_port_name;
    private static NamedObject CFGMGMTWRRW1CASRWN_port_name;
    private static NamedObject CFGPCIECAPINTERRUPTMSGNUM_port_name;
    private static NamedObject CFGPMFORCESTATE_port_name;
    private static NamedObject CFGPMFORCESTATEENN_port_name;
    private static NamedObject CFGPMHALTASPML0SN_port_name;
    private static NamedObject CFGPMHALTASPML1N_port_name;
    private static NamedObject CFGREVID_port_name;
    private static NamedObject CFGSUBSYSID_port_name;
    private static NamedObject CFGSUBSYSVENDID_port_name;
    private static NamedObject CFGVENDID_port_name;
    private static NamedObject LL2SENDASREQL1_port_name;
    private static NamedObject LL2SENDENTERL1_port_name;
    private static NamedObject LL2SENDENTERL23_port_name;
    private static NamedObject LL2SENDPMACK_port_name;
    private static NamedObject LL2SUSPENDNOW_port_name;
    private static NamedObject LL2TLPRCV_port_name;
    private static NamedObject PLDIRECTEDLTSSMNEW_port_name;
    private static NamedObject PLDIRECTEDLTSSMNEWVLD_port_name;
    private static NamedObject PLDIRECTEDLTSSMSTALL_port_name;
    private static NamedObject TL2ASPMSUSPENDCREDITCHECK_port_name;
    private static NamedObject TL2PPMSUSPENDREQ_port_name;
    private static NamedObject TRNRDSTRDY_port_name;
    private static NamedObject TRNRFCPRET_port_name;
    private static NamedObject TRNRNPOK_port_name;
    private static NamedObject TRNRNPREQ_port_name;
    private static NamedObject TRNTCFGGNT_port_name;
    private static NamedObject TRNTDLLPSRCRDY_port_name;
    private static NamedObject TRNTECRCGEN_port_name;
    private static NamedObject TRNTEOF_port_name;
    private static NamedObject TRNTERRFWD_port_name;
    private static NamedObject TRNTREM_port_name;
    private static NamedObject TRNTSOF_port_name;
    private static NamedObject TRNTSRCDSC_port_name;
    private static NamedObject TRNTSRCRDY_port_name;
    private static NamedObject TRNTSTR_port_name;
    private static NamedObject USERCLK2_port_name;
    private static NamedObject CFGCURRENTSPEED_port_name;
    private static NamedObject CFGDPASUBSTATECHANGE_port_name;
    private static NamedObject CFGERRCOROUT_port_name;
    private static NamedObject CFGERRFATALOUT_port_name;
    private static NamedObject CFGERRNONFATALOUT_port_name;
    private static NamedObject CFGEXTFUNCTIONNUMBER_port_name;
    private static NamedObject CFGEXTREADRECEIVED_port_name;
    private static NamedObject CFGEXTREGISTERNUMBER_port_name;
    private static NamedObject CFGEXTWRITEBYTEENABLE_port_name;
    private static NamedObject CFGEXTWRITEDATA_port_name;
    private static NamedObject CFGEXTWRITERECEIVED_port_name;
    private static NamedObject CFGFCCPLD_port_name;
    private static NamedObject CFGFCCPLH_port_name;
    private static NamedObject CFGFCNPD_port_name;
    private static NamedObject CFGFCNPH_port_name;
    private static NamedObject CFGFCPD_port_name;
    private static NamedObject CFGFCPH_port_name;
    private static NamedObject CFGFLRINPROCESS_port_name;
    private static NamedObject CFGFUNCTIONPOWERSTATE_port_name;
    private static NamedObject CFGFUNCTIONSTATUS_port_name;
    private static NamedObject CFGHOTRESETOUT_port_name;
    private static NamedObject CFGINPUTUPDATEDONE_port_name;
    private static NamedObject CFGINTERRUPTAOUTPUT_port_name;
    private static NamedObject CFGINTERRUPTBOUTPUT_port_name;
    private static NamedObject CFGINTERRUPTCOUTPUT_port_name;
    private static NamedObject CFGINTERRUPTDOUTPUT_port_name;
    private static NamedObject CFGINTERRUPTMSIDATA_port_name;
    private static NamedObject CFGINTERRUPTMSIFAIL_port_name;
    private static NamedObject CFGINTERRUPTMSIMASKUPDATE_port_name;
    private static NamedObject CFGINTERRUPTMSIMMENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSISENT_port_name;
    private static NamedObject CFGINTERRUPTMSIVFENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSIXFAIL_port_name;
    private static NamedObject CFGINTERRUPTMSIXMASK_port_name;
    private static NamedObject CFGINTERRUPTMSIXSENT_port_name;
    private static NamedObject CFGINTERRUPTMSIXVFENABLE_port_name;
    private static NamedObject CFGINTERRUPTMSIXVFMASK_port_name;
    private static NamedObject CFGINTERRUPTSENT_port_name;
    private static NamedObject CFGLINKPOWERSTATE_port_name;
    private static NamedObject CFGLOCALERROR_port_name;
    private static NamedObject CFGLTRENABLE_port_name;
    private static NamedObject CFGLTSSMSTATE_port_name;
    private static NamedObject CFGMAXPAYLOAD_port_name;
    private static NamedObject CFGMAXREADREQ_port_name;
    private static NamedObject CFGMCUPDATEDONE_port_name;
    private static NamedObject CFGMGMTREADDATA_port_name;
    private static NamedObject CFGMGMTREADWRITEDONE_port_name;
    private static NamedObject CFGMSGRECEIVEDDATA_port_name;
    private static NamedObject CFGMSGRECEIVEDTYPE_port_name;
    private static NamedObject CFGMSGTRANSMITDONE_port_name;
    private static NamedObject CFGNEGOTIATEDWIDTH_port_name;
    private static NamedObject CFGOBFFENABLE_port_name;
    private static NamedObject CFGPERFUNCSTATUSDATA_port_name;
    private static NamedObject CFGPERFUNCTIONUPDATEDONE_port_name;
    private static NamedObject CFGPHYLINKDOWN_port_name;
    private static NamedObject CFGPHYLINKSTATUS_port_name;
    private static NamedObject CFGPLSTATUSCHANGE_port_name;
    private static NamedObject CFGPOWERSTATECHANGEINTERRUPT_port_name;
    private static NamedObject CFGRCBSTATUS_port_name;
    private static NamedObject CFGTPHFUNCTIONNUM_port_name;
    private static NamedObject CFGTPHREQUESTERENABLE_port_name;
    private static NamedObject CFGTPHSTMODE_port_name;
    private static NamedObject CFGTPHSTTADDRESS_port_name;
    private static NamedObject CFGTPHSTTREADENABLE_port_name;
    private static NamedObject CFGTPHSTTWRITEBYTEVALID_port_name;
    private static NamedObject CFGTPHSTTWRITEDATA_port_name;
    private static NamedObject CFGTPHSTTWRITEENABLE_port_name;
    private static NamedObject CFGVFFLRINPROCESS_port_name;
    private static NamedObject CFGVFPOWERSTATE_port_name;
    private static NamedObject CFGVFSTATUS_port_name;
    private static NamedObject CFGVFTPHREQUESTERENABLE_port_name;
    private static NamedObject CFGVFTPHSTMODE_port_name;
    private static NamedObject DBGDATAOUT_port_name;
    private static NamedObject MAXISCQTDATA_port_name;
    private static NamedObject MAXISCQTKEEP_port_name;
    private static NamedObject MAXISCQTLAST_port_name;
    private static NamedObject MAXISCQTUSER_port_name;
    private static NamedObject MAXISCQTVALID_port_name;
    private static NamedObject MAXISRCTDATA_port_name;
    private static NamedObject MAXISRCTKEEP_port_name;
    private static NamedObject MAXISRCTLAST_port_name;
    private static NamedObject MAXISRCTUSER_port_name;
    private static NamedObject MAXISRCTVALID_port_name;
    private static NamedObject MICOMPLETIONRAMREADADDRESSAL_port_name;
    private static NamedObject MICOMPLETIONRAMREADADDRESSAU_port_name;
    private static NamedObject MICOMPLETIONRAMREADADDRESSBL_port_name;
    private static NamedObject MICOMPLETIONRAMREADADDRESSBU_port_name;
    private static NamedObject MICOMPLETIONRAMREADENABLEL_port_name;
    private static NamedObject MICOMPLETIONRAMREADENABLEU_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEADDRESSAL_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEADDRESSAU_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEADDRESSBL_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEADDRESSBU_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEDATAL_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEDATAU_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEENABLEL_port_name;
    private static NamedObject MICOMPLETIONRAMWRITEENABLEU_port_name;
    private static NamedObject MIREPLAYRAMADDRESS_port_name;
    private static NamedObject MIREPLAYRAMREADENABLE_port_name;
    private static NamedObject MIREPLAYRAMWRITEDATA_port_name;
    private static NamedObject MIREPLAYRAMWRITEENABLE_port_name;
    private static NamedObject MIREQUESTRAMREADADDRESSA_port_name;
    private static NamedObject MIREQUESTRAMREADADDRESSB_port_name;
    private static NamedObject MIREQUESTRAMREADENABLE_port_name;
    private static NamedObject MIREQUESTRAMWRITEADDRESSA_port_name;
    private static NamedObject MIREQUESTRAMWRITEADDRESSB_port_name;
    private static NamedObject MIREQUESTRAMWRITEDATA_port_name;
    private static NamedObject MIREQUESTRAMWRITEENABLE_port_name;
    private static NamedObject PCIECQNPREQCOUNT_port_name;
    private static NamedObject PCIERQSEQNUM_port_name;
    private static NamedObject PCIERQSEQNUMVLD_port_name;
    private static NamedObject PCIERQTAG_port_name;
    private static NamedObject PCIERQTAGAV_port_name;
    private static NamedObject PCIERQTAGVLD_port_name;
    private static NamedObject PCIETFCNPDAV_port_name;
    private static NamedObject PCIETFCNPHAV_port_name;
    private static NamedObject PIPERX0EQCONTROL_port_name;
    private static NamedObject PIPERX0EQLPLFFS_port_name;
    private static NamedObject PIPERX0EQLPTXPRESET_port_name;
    private static NamedObject PIPERX0EQPRESET_port_name;
    private static NamedObject PIPERX1EQCONTROL_port_name;
    private static NamedObject PIPERX1EQLPLFFS_port_name;
    private static NamedObject PIPERX1EQLPTXPRESET_port_name;
    private static NamedObject PIPERX1EQPRESET_port_name;
    private static NamedObject PIPERX2EQCONTROL_port_name;
    private static NamedObject PIPERX2EQLPLFFS_port_name;
    private static NamedObject PIPERX2EQLPTXPRESET_port_name;
    private static NamedObject PIPERX2EQPRESET_port_name;
    private static NamedObject PIPERX3EQCONTROL_port_name;
    private static NamedObject PIPERX3EQLPLFFS_port_name;
    private static NamedObject PIPERX3EQLPTXPRESET_port_name;
    private static NamedObject PIPERX3EQPRESET_port_name;
    private static NamedObject PIPERX4EQCONTROL_port_name;
    private static NamedObject PIPERX4EQLPLFFS_port_name;
    private static NamedObject PIPERX4EQLPTXPRESET_port_name;
    private static NamedObject PIPERX4EQPRESET_port_name;
    private static NamedObject PIPERX5EQCONTROL_port_name;
    private static NamedObject PIPERX5EQLPLFFS_port_name;
    private static NamedObject PIPERX5EQLPTXPRESET_port_name;
    private static NamedObject PIPERX5EQPRESET_port_name;
    private static NamedObject PIPERX6EQCONTROL_port_name;
    private static NamedObject PIPERX6EQLPLFFS_port_name;
    private static NamedObject PIPERX6EQLPTXPRESET_port_name;
    private static NamedObject PIPERX6EQPRESET_port_name;
    private static NamedObject PIPERX7EQCONTROL_port_name;
    private static NamedObject PIPERX7EQLPLFFS_port_name;
    private static NamedObject PIPERX7EQLPTXPRESET_port_name;
    private static NamedObject PIPERX7EQPRESET_port_name;
    private static NamedObject PIPETX0DATAVALID_port_name;
    private static NamedObject PIPETX0EQCONTROL_port_name;
    private static NamedObject PIPETX0EQDEEMPH_port_name;
    private static NamedObject PIPETX0EQPRESET_port_name;
    private static NamedObject PIPETX0STARTBLOCK_port_name;
    private static NamedObject PIPETX0SYNCHEADER_port_name;
    private static NamedObject PIPETX1DATAVALID_port_name;
    private static NamedObject PIPETX1EQCONTROL_port_name;
    private static NamedObject PIPETX1EQDEEMPH_port_name;
    private static NamedObject PIPETX1EQPRESET_port_name;
    private static NamedObject PIPETX1STARTBLOCK_port_name;
    private static NamedObject PIPETX1SYNCHEADER_port_name;
    private static NamedObject PIPETX2DATAVALID_port_name;
    private static NamedObject PIPETX2EQCONTROL_port_name;
    private static NamedObject PIPETX2EQDEEMPH_port_name;
    private static NamedObject PIPETX2EQPRESET_port_name;
    private static NamedObject PIPETX2STARTBLOCK_port_name;
    private static NamedObject PIPETX2SYNCHEADER_port_name;
    private static NamedObject PIPETX3DATAVALID_port_name;
    private static NamedObject PIPETX3EQCONTROL_port_name;
    private static NamedObject PIPETX3EQDEEMPH_port_name;
    private static NamedObject PIPETX3EQPRESET_port_name;
    private static NamedObject PIPETX3STARTBLOCK_port_name;
    private static NamedObject PIPETX3SYNCHEADER_port_name;
    private static NamedObject PIPETX4DATAVALID_port_name;
    private static NamedObject PIPETX4EQCONTROL_port_name;
    private static NamedObject PIPETX4EQDEEMPH_port_name;
    private static NamedObject PIPETX4EQPRESET_port_name;
    private static NamedObject PIPETX4STARTBLOCK_port_name;
    private static NamedObject PIPETX4SYNCHEADER_port_name;
    private static NamedObject PIPETX5DATAVALID_port_name;
    private static NamedObject PIPETX5EQCONTROL_port_name;
    private static NamedObject PIPETX5EQDEEMPH_port_name;
    private static NamedObject PIPETX5EQPRESET_port_name;
    private static NamedObject PIPETX5STARTBLOCK_port_name;
    private static NamedObject PIPETX5SYNCHEADER_port_name;
    private static NamedObject PIPETX6DATAVALID_port_name;
    private static NamedObject PIPETX6EQCONTROL_port_name;
    private static NamedObject PIPETX6EQDEEMPH_port_name;
    private static NamedObject PIPETX6EQPRESET_port_name;
    private static NamedObject PIPETX6STARTBLOCK_port_name;
    private static NamedObject PIPETX6SYNCHEADER_port_name;
    private static NamedObject PIPETX7DATAVALID_port_name;
    private static NamedObject PIPETX7EQCONTROL_port_name;
    private static NamedObject PIPETX7EQDEEMPH_port_name;
    private static NamedObject PIPETX7EQPRESET_port_name;
    private static NamedObject PIPETX7STARTBLOCK_port_name;
    private static NamedObject PIPETX7SYNCHEADER_port_name;
    private static NamedObject PIPETXSWING_port_name;
    private static NamedObject PLEQINPROGRESS_port_name;
    private static NamedObject PLEQPHASE_port_name;
    private static NamedObject PLGEN3PCSRXSLIDE_port_name;
    private static NamedObject SAXISCCTREADY_port_name;
    private static NamedObject SAXISRQTREADY_port_name;
    private static NamedObject CFGCONFIGSPACEENABLE_port_name;
    private static NamedObject CFGDSPORTNUMBER_port_name;
    private static NamedObject CFGERRCORIN_port_name;
    private static NamedObject CFGERRUNCORIN_port_name;
    private static NamedObject CFGEXTREADDATA_port_name;
    private static NamedObject CFGEXTREADDATAVALID_port_name;
    private static NamedObject CFGFCSEL_port_name;
    private static NamedObject CFGFLRDONE_port_name;
    private static NamedObject CFGHOTRESETIN_port_name;
    private static NamedObject CFGINPUTUPDATEREQUEST_port_name;
    private static NamedObject CFGINTERRUPTINT_port_name;
    private static NamedObject CFGINTERRUPTMSIATTR_port_name;
    private static NamedObject CFGINTERRUPTMSIFUNCTIONNUMBER_port_name;
    private static NamedObject CFGINTERRUPTMSIINT_port_name;
    private static NamedObject CFGINTERRUPTMSIPENDINGSTATUS_port_name;
    private static NamedObject CFGINTERRUPTMSISELECT_port_name;
    private static NamedObject CFGINTERRUPTMSITPHPRESENT_port_name;
    private static NamedObject CFGINTERRUPTMSITPHSTTAG_port_name;
    private static NamedObject CFGINTERRUPTMSITPHTYPE_port_name;
    private static NamedObject CFGINTERRUPTMSIXADDRESS_port_name;
    private static NamedObject CFGINTERRUPTMSIXDATA_port_name;
    private static NamedObject CFGINTERRUPTMSIXINT_port_name;
    private static NamedObject CFGINTERRUPTPENDING_port_name;
    private static NamedObject CFGLINKTRAININGENABLE_port_name;
    private static NamedObject CFGMCUPDATEREQUEST_port_name;
    private static NamedObject CFGMGMTADDR_port_name;
    private static NamedObject CFGMGMTBYTEENABLE_port_name;
    private static NamedObject CFGMGMTREAD_port_name;
    private static NamedObject CFGMGMTTYPE1CFGREGACCESS_port_name;
    private static NamedObject CFGMGMTWRITE_port_name;
    private static NamedObject CFGMGMTWRITEDATA_port_name;
    private static NamedObject CFGMSGTRANSMIT_port_name;
    private static NamedObject CFGMSGTRANSMITDATA_port_name;
    private static NamedObject CFGMSGTRANSMITTYPE_port_name;
    private static NamedObject CFGPERFUNCSTATUSCONTROL_port_name;
    private static NamedObject CFGPERFUNCTIONNUMBER_port_name;
    private static NamedObject CFGPERFUNCTIONOUTPUTREQUEST_port_name;
    private static NamedObject CFGPOWERSTATECHANGEACK_port_name;
    private static NamedObject CFGREQPMTRANSITIONL23READY_port_name;
    private static NamedObject CFGTPHSTTREADDATA_port_name;
    private static NamedObject CFGTPHSTTREADDATAVALID_port_name;
    private static NamedObject CFGVFFLRDONE_port_name;
    private static NamedObject CORECLK_port_name;
    private static NamedObject CORECLKMICOMPLETIONRAML_port_name;
    private static NamedObject CORECLKMICOMPLETIONRAMU_port_name;
    private static NamedObject CORECLKMIREPLAYRAM_port_name;
    private static NamedObject CORECLKMIREQUESTRAM_port_name;
    private static NamedObject MAXISCQTREADY_port_name;
    private static NamedObject MAXISRCTREADY_port_name;
    private static NamedObject MGMTRESETN_port_name;
    private static NamedObject MGMTSTICKYRESETN_port_name;
    private static NamedObject MICOMPLETIONRAMREADDATA_port_name;
    private static NamedObject MIREPLAYRAMREADDATA_port_name;
    private static NamedObject MIREQUESTRAMREADDATA_port_name;
    private static NamedObject PCIECQNPREQ_port_name;
    private static NamedObject PIPEEQFS_port_name;
    private static NamedObject PIPEEQLF_port_name;
    private static NamedObject PIPERESETN_port_name;
    private static NamedObject PIPERX0DATAVALID_port_name;
    private static NamedObject PIPERX0EQDONE_port_name;
    private static NamedObject PIPERX0EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX0EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX0EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX0STARTBLOCK_port_name;
    private static NamedObject PIPERX0SYNCHEADER_port_name;
    private static NamedObject PIPERX1DATAVALID_port_name;
    private static NamedObject PIPERX1EQDONE_port_name;
    private static NamedObject PIPERX1EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX1EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX1EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX1STARTBLOCK_port_name;
    private static NamedObject PIPERX1SYNCHEADER_port_name;
    private static NamedObject PIPERX2DATAVALID_port_name;
    private static NamedObject PIPERX2EQDONE_port_name;
    private static NamedObject PIPERX2EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX2EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX2EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX2STARTBLOCK_port_name;
    private static NamedObject PIPERX2SYNCHEADER_port_name;
    private static NamedObject PIPERX3DATAVALID_port_name;
    private static NamedObject PIPERX3EQDONE_port_name;
    private static NamedObject PIPERX3EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX3EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX3EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX3STARTBLOCK_port_name;
    private static NamedObject PIPERX3SYNCHEADER_port_name;
    private static NamedObject PIPERX4DATAVALID_port_name;
    private static NamedObject PIPERX4EQDONE_port_name;
    private static NamedObject PIPERX4EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX4EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX4EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX4STARTBLOCK_port_name;
    private static NamedObject PIPERX4SYNCHEADER_port_name;
    private static NamedObject PIPERX5DATAVALID_port_name;
    private static NamedObject PIPERX5EQDONE_port_name;
    private static NamedObject PIPERX5EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX5EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX5EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX5STARTBLOCK_port_name;
    private static NamedObject PIPERX5SYNCHEADER_port_name;
    private static NamedObject PIPERX6DATAVALID_port_name;
    private static NamedObject PIPERX6EQDONE_port_name;
    private static NamedObject PIPERX6EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX6EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX6EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX6STARTBLOCK_port_name;
    private static NamedObject PIPERX6SYNCHEADER_port_name;
    private static NamedObject PIPERX7DATAVALID_port_name;
    private static NamedObject PIPERX7EQDONE_port_name;
    private static NamedObject PIPERX7EQLPADAPTDONE_port_name;
    private static NamedObject PIPERX7EQLPLFFSSEL_port_name;
    private static NamedObject PIPERX7EQLPNEWTXCOEFFORPRESET_port_name;
    private static NamedObject PIPERX7STARTBLOCK_port_name;
    private static NamedObject PIPERX7SYNCHEADER_port_name;
    private static NamedObject PIPETX0EQCOEFF_port_name;
    private static NamedObject PIPETX0EQDONE_port_name;
    private static NamedObject PIPETX1EQCOEFF_port_name;
    private static NamedObject PIPETX1EQDONE_port_name;
    private static NamedObject PIPETX2EQCOEFF_port_name;
    private static NamedObject PIPETX2EQDONE_port_name;
    private static NamedObject PIPETX3EQCOEFF_port_name;
    private static NamedObject PIPETX3EQDONE_port_name;
    private static NamedObject PIPETX4EQCOEFF_port_name;
    private static NamedObject PIPETX4EQDONE_port_name;
    private static NamedObject PIPETX5EQCOEFF_port_name;
    private static NamedObject PIPETX5EQDONE_port_name;
    private static NamedObject PIPETX6EQCOEFF_port_name;
    private static NamedObject PIPETX6EQDONE_port_name;
    private static NamedObject PIPETX7EQCOEFF_port_name;
    private static NamedObject PIPETX7EQDONE_port_name;
    private static NamedObject PLDISABLESCRAMBLER_port_name;
    private static NamedObject PLEQRESETEIEOSCOUNT_port_name;
    private static NamedObject PLGEN3PCSDISABLE_port_name;
    private static NamedObject PLGEN3PCSRXSYNCDONE_port_name;
    private static NamedObject RECCLK_port_name;
    private static NamedObject RESETN_port_name;
    private static NamedObject SAXISCCTDATA_port_name;
    private static NamedObject SAXISCCTKEEP_port_name;
    private static NamedObject SAXISCCTLAST_port_name;
    private static NamedObject SAXISCCTUSER_port_name;
    private static NamedObject SAXISCCTVALID_port_name;
    private static NamedObject SAXISRQTDATA_port_name;
    private static NamedObject SAXISRQTKEEP_port_name;
    private static NamedObject SAXISRQTLAST_port_name;
    private static NamedObject SAXISRQTUSER_port_name;
    private static NamedObject SAXISRQTVALID_port_name;
    private static NamedObject CFGBUSNUMBER_port_name;
    private static NamedObject CFGDEVICENUMBER_port_name;
    private static NamedObject CFGFUNCTIONNUMBER_port_name;
    private static NamedObject CFGLINKCONTOLRCB_port_name;
    private static NamedObject CFGPCIELINKSTATEN_port_name;
    private static NamedObject CFGTOTURNOFFN_port_name;
    private static NamedObject DBGBADDLLPSTATUS_port_name;
    private static NamedObject DBGBADTLPLCRC_port_name;
    private static NamedObject DBGBADTLPSEQNUM_port_name;
    private static NamedObject DBGBADTLPSTATUS_port_name;
    private static NamedObject DBGDLPROTOCOLSTATUS_port_name;
    private static NamedObject DBGFCPROTOCOLERRSTATUS_port_name;
    private static NamedObject DBGMLFRMDLENGTH_port_name;
    private static NamedObject DBGMLFRMDMPS_port_name;
    private static NamedObject DBGMLFRMDTCVC_port_name;
    private static NamedObject DBGMLFRMDTLPSTATUS_port_name;
    private static NamedObject DBGMLFRMDUNRECTYPE_port_name;
    private static NamedObject DBGPOISTLPSTATUS_port_name;
    private static NamedObject DBGRCVROVERFLOWSTATUS_port_name;
    private static NamedObject DBGREGDETECTEDCORRECTABLE_port_name;
    private static NamedObject DBGREGDETECTEDFATAL_port_name;
    private static NamedObject DBGREGDETECTEDNONFATAL_port_name;
    private static NamedObject DBGREGDETECTEDUNSUPPORTED_port_name;
    private static NamedObject DBGRPLYROLLOVERSTATUS_port_name;
    private static NamedObject DBGRPLYTIMEOUTSTATUS_port_name;
    private static NamedObject DBGURNOBARHIT_port_name;
    private static NamedObject DBGURPOISCFGWR_port_name;
    private static NamedObject DBGURSTATUS_port_name;
    private static NamedObject DBGURUNSUPMSG_port_name;
    private static NamedObject PIPEGTPOWERDOWNA_port_name;
    private static NamedObject PIPEGTPOWERDOWNB_port_name;
    private static NamedObject PIPEGTTXELECIDLEA_port_name;
    private static NamedObject PIPEGTTXELECIDLEB_port_name;
    private static NamedObject PIPERXPOLARITYA_port_name;
    private static NamedObject PIPERXPOLARITYB_port_name;
    private static NamedObject PIPERXRESETA_port_name;
    private static NamedObject PIPERXRESETB_port_name;
    private static NamedObject PIPETXCHARDISPMODEA_port_name;
    private static NamedObject PIPETXCHARDISPMODEB_port_name;
    private static NamedObject PIPETXCHARDISPVALA_port_name;
    private static NamedObject PIPETXCHARDISPVALB_port_name;
    private static NamedObject PIPETXCHARISKA_port_name;
    private static NamedObject PIPETXCHARISKB_port_name;
    private static NamedObject PIPETXDATAA_port_name;
    private static NamedObject PIPETXDATAB_port_name;
    private static NamedObject PIPETXRCVRDETA_port_name;
    private static NamedObject PIPETXRCVRDETB_port_name;
    private static NamedObject RECEIVEDHOTRESET_port_name;
    private static NamedObject CFGSUBSYSVENID_port_name;
    private static NamedObject CFGTURNOFFOKN_port_name;
    private static NamedObject CFGVENID_port_name;
    private static NamedObject CLOCKLOCKED_port_name;
    private static NamedObject MGTCLK_port_name;
    private static NamedObject PIPEGTRESETDONEA_port_name;
    private static NamedObject PIPEGTRESETDONEB_port_name;
    private static NamedObject PIPEPHYSTATUSA_port_name;
    private static NamedObject PIPEPHYSTATUSB_port_name;
    private static NamedObject PIPERXCHARISKA_port_name;
    private static NamedObject PIPERXCHARISKB_port_name;
    private static NamedObject PIPERXDATAA_port_name;
    private static NamedObject PIPERXDATAB_port_name;
    private static NamedObject PIPERXENTERELECIDLEA_port_name;
    private static NamedObject PIPERXENTERELECIDLEB_port_name;
    private static NamedObject PIPERXSTATUSA_port_name;
    private static NamedObject PIPERXSTATUSB_port_name;
    private static NamedObject SYSRESETN_port_name;
    private static NamedObject BUSMASTERENABLE_port_name;
    private static NamedObject CRMDOHOTRESETN_port_name;
    private static NamedObject CRMPWRSOFTRESETN_port_name;
    private static NamedObject DLLTXPMDLLPOUTSTANDING_port_name;
    private static NamedObject INTERRUPTDISABLE_port_name;
    private static NamedObject IOSPACEENABLE_port_name;
    private static NamedObject L0CFGLOOPBACKACK_port_name;
    private static NamedObject L0COMPLETERID_port_name;
    private static NamedObject L0DLLERRORVECTOR_port_name;
    private static NamedObject L0DLLRXACKOUTSTANDING_port_name;
    private static NamedObject L0DLLTXNONFCOUTSTANDING_port_name;
    private static NamedObject L0DLLTXOUTSTANDING_port_name;
    private static NamedObject L0DLLVCSTATUS_port_name;
    private static NamedObject L0DLUPDOWN_port_name;
    private static NamedObject L0FIRSTCFGWRITEOCCURRED_port_name;
    private static NamedObject L0LTSSMSTATE_port_name;
    private static NamedObject L0MACENTEREDL0_port_name;
    private static NamedObject L0MACLINKTRAINING_port_name;
    private static NamedObject L0MACLINKUP_port_name;
    private static NamedObject L0MACNEGOTIATEDLINKWIDTH_port_name;
    private static NamedObject L0MACNEWSTATEACK_port_name;
    private static NamedObject L0MACRXL0SSTATE_port_name;
    private static NamedObject L0MSIENABLE0_port_name;
    private static NamedObject L0MULTIMSGEN0_port_name;
    private static NamedObject L0PMEACK_port_name;
    private static NamedObject L0PMEEN_port_name;
    private static NamedObject L0PMEREQOUT_port_name;
    private static NamedObject L0PWRL1STATE_port_name;
    private static NamedObject L0PWRL23READYSTATE_port_name;
    private static NamedObject L0PWRSTATE0_port_name;
    private static NamedObject L0PWRTURNOFFREQ_port_name;
    private static NamedObject L0PWRTXL0SSTATE_port_name;
    private static NamedObject L0RXDLLPM_port_name;
    private static NamedObject L0RXDLLPMTYPE_port_name;
    private static NamedObject L0RXMACLINKERROR_port_name;
    private static NamedObject L0STATSCFGOTHERRECEIVED_port_name;
    private static NamedObject L0STATSCFGOTHERTRANSMITTED_port_name;
    private static NamedObject L0STATSCFGRECEIVED_port_name;
    private static NamedObject L0STATSCFGTRANSMITTED_port_name;
    private static NamedObject L0STATSDLLPRECEIVED_port_name;
    private static NamedObject L0STATSDLLPTRANSMITTED_port_name;
    private static NamedObject L0STATSOSRECEIVED_port_name;
    private static NamedObject L0STATSOSTRANSMITTED_port_name;
    private static NamedObject L0STATSTLPRECEIVED_port_name;
    private static NamedObject L0STATSTLPTRANSMITTED_port_name;
    private static NamedObject L0UNLOCKRECEIVED_port_name;
    private static NamedObject LLKRXCHCOMPLETIONAVAILABLEN_port_name;
    private static NamedObject LLKRXCHNONPOSTEDAVAILABLEN_port_name;
    private static NamedObject LLKRXCHPOSTEDAVAILABLEN_port_name;
    private static NamedObject LLKRXDATA_port_name;
    private static NamedObject LLKRXEOFN_port_name;
    private static NamedObject LLKRXEOPN_port_name;
    private static NamedObject LLKRXPREFERREDTYPE_port_name;
    private static NamedObject LLKRXSOFN_port_name;
    private static NamedObject LLKRXSOPN_port_name;
    private static NamedObject LLKRXSRCLASTREQN_port_name;
    private static NamedObject LLKRXSRCRDYN_port_name;
    private static NamedObject LLKRXVALIDN_port_name;
    private static NamedObject LLKTCSTATUS_port_name;
    private static NamedObject LLKTXCHANSPACE_port_name;
    private static NamedObject LLKTXCHCOMPLETIONREADYN_port_name;
    private static NamedObject LLKTXCHNONPOSTEDREADYN_port_name;
    private static NamedObject LLKTXCHPOSTEDREADYN_port_name;
    private static NamedObject LLKTXCONFIGREADYN_port_name;
    private static NamedObject LLKTXDSTRDYN_port_name;
    private static NamedObject MAXPAYLOADSIZE_port_name;
    private static NamedObject MAXREADREQUESTSIZE_port_name;
    private static NamedObject MEMSPACEENABLE_port_name;
    private static NamedObject MGMTPSO_port_name;
    private static NamedObject MGMTRDATA_port_name;
    private static NamedObject MGMTSTATSCREDIT_port_name;
    private static NamedObject MIMDLLBRADD_port_name;
    private static NamedObject MIMDLLBREN_port_name;
    private static NamedObject MIMDLLBWADD_port_name;
    private static NamedObject MIMDLLBWDATA_port_name;
    private static NamedObject MIMDLLBWEN_port_name;
    private static NamedObject MIMRXBRADD_port_name;
    private static NamedObject MIMRXBREN_port_name;
    private static NamedObject MIMRXBWADD_port_name;
    private static NamedObject MIMRXBWDATA_port_name;
    private static NamedObject MIMRXBWEN_port_name;
    private static NamedObject MIMTXBRADD_port_name;
    private static NamedObject MIMTXBREN_port_name;
    private static NamedObject MIMTXBWADD_port_name;
    private static NamedObject MIMTXBWDATA_port_name;
    private static NamedObject MIMTXBWEN_port_name;
    private static NamedObject PARITYERRORRESPONSE_port_name;
    private static NamedObject PIPEDESKEWLANESL0_port_name;
    private static NamedObject PIPEDESKEWLANESL1_port_name;
    private static NamedObject PIPEDESKEWLANESL2_port_name;
    private static NamedObject PIPEDESKEWLANESL3_port_name;
    private static NamedObject PIPEDESKEWLANESL4_port_name;
    private static NamedObject PIPEDESKEWLANESL5_port_name;
    private static NamedObject PIPEDESKEWLANESL6_port_name;
    private static NamedObject PIPEDESKEWLANESL7_port_name;
    private static NamedObject PIPEPOWERDOWNL0_port_name;
    private static NamedObject PIPEPOWERDOWNL1_port_name;
    private static NamedObject PIPEPOWERDOWNL2_port_name;
    private static NamedObject PIPEPOWERDOWNL3_port_name;
    private static NamedObject PIPEPOWERDOWNL4_port_name;
    private static NamedObject PIPEPOWERDOWNL5_port_name;
    private static NamedObject PIPEPOWERDOWNL6_port_name;
    private static NamedObject PIPEPOWERDOWNL7_port_name;
    private static NamedObject PIPERESETL0_port_name;
    private static NamedObject PIPERESETL1_port_name;
    private static NamedObject PIPERESETL2_port_name;
    private static NamedObject PIPERESETL3_port_name;
    private static NamedObject PIPERESETL4_port_name;
    private static NamedObject PIPERESETL5_port_name;
    private static NamedObject PIPERESETL6_port_name;
    private static NamedObject PIPERESETL7_port_name;
    private static NamedObject PIPERXPOLARITYL0_port_name;
    private static NamedObject PIPERXPOLARITYL1_port_name;
    private static NamedObject PIPERXPOLARITYL2_port_name;
    private static NamedObject PIPERXPOLARITYL3_port_name;
    private static NamedObject PIPERXPOLARITYL4_port_name;
    private static NamedObject PIPERXPOLARITYL5_port_name;
    private static NamedObject PIPERXPOLARITYL6_port_name;
    private static NamedObject PIPERXPOLARITYL7_port_name;
    private static NamedObject PIPETXCOMPLIANCEL0_port_name;
    private static NamedObject PIPETXCOMPLIANCEL1_port_name;
    private static NamedObject PIPETXCOMPLIANCEL2_port_name;
    private static NamedObject PIPETXCOMPLIANCEL3_port_name;
    private static NamedObject PIPETXCOMPLIANCEL4_port_name;
    private static NamedObject PIPETXCOMPLIANCEL5_port_name;
    private static NamedObject PIPETXCOMPLIANCEL6_port_name;
    private static NamedObject PIPETXCOMPLIANCEL7_port_name;
    private static NamedObject PIPETXDATAKL0_port_name;
    private static NamedObject PIPETXDATAKL1_port_name;
    private static NamedObject PIPETXDATAKL2_port_name;
    private static NamedObject PIPETXDATAKL3_port_name;
    private static NamedObject PIPETXDATAKL4_port_name;
    private static NamedObject PIPETXDATAKL5_port_name;
    private static NamedObject PIPETXDATAKL6_port_name;
    private static NamedObject PIPETXDATAKL7_port_name;
    private static NamedObject PIPETXDATAL0_port_name;
    private static NamedObject PIPETXDATAL1_port_name;
    private static NamedObject PIPETXDATAL2_port_name;
    private static NamedObject PIPETXDATAL3_port_name;
    private static NamedObject PIPETXDATAL4_port_name;
    private static NamedObject PIPETXDATAL5_port_name;
    private static NamedObject PIPETXDATAL6_port_name;
    private static NamedObject PIPETXDATAL7_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL0_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL1_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL2_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL3_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL4_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL5_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL6_port_name;
    private static NamedObject PIPETXDETECTRXLOOPBACKL7_port_name;
    private static NamedObject PIPETXELECIDLEL0_port_name;
    private static NamedObject PIPETXELECIDLEL1_port_name;
    private static NamedObject PIPETXELECIDLEL2_port_name;
    private static NamedObject PIPETXELECIDLEL3_port_name;
    private static NamedObject PIPETXELECIDLEL4_port_name;
    private static NamedObject PIPETXELECIDLEL5_port_name;
    private static NamedObject PIPETXELECIDLEL6_port_name;
    private static NamedObject PIPETXELECIDLEL7_port_name;
    private static NamedObject SERRENABLE_port_name;
    private static NamedObject URREPORTINGENABLE_port_name;
    private static NamedObject AUXPOWER_port_name;
    private static NamedObject COMPLIANCEAVOID_port_name;
    private static NamedObject CRMCORECLK_port_name;
    private static NamedObject CRMCORECLKDLO_port_name;
    private static NamedObject CRMCORECLKRXO_port_name;
    private static NamedObject CRMCORECLKTXO_port_name;
    private static NamedObject CRMLINKRSTN_port_name;
    private static NamedObject CRMMACRSTN_port_name;
    private static NamedObject CRMMGMTRSTN_port_name;
    private static NamedObject CRMNVRSTN_port_name;
    private static NamedObject CRMURSTN_port_name;
    private static NamedObject CRMUSERCFGRSTN_port_name;
    private static NamedObject CRMUSERCLK_port_name;
    private static NamedObject CRMUSERCLKRXO_port_name;
    private static NamedObject CRMUSERCLKTXO_port_name;
    private static NamedObject L0CFGDISABLESCRAMBLE_port_name;
    private static NamedObject L0CFGLOOPBACKMASTER_port_name;
    private static NamedObject L0LEGACYINTFUNCT0_port_name;
    private static NamedObject L0MSIREQUEST0_port_name;
    private static NamedObject L0PACKETHEADERFROMUSER_port_name;
    private static NamedObject L0PMEREQIN_port_name;
    private static NamedObject L0SETCOMPLETERABORTERROR_port_name;
    private static NamedObject L0SETCOMPLETIONTIMEOUTCORRERROR_port_name;
    private static NamedObject L0SETCOMPLETIONTIMEOUTUNCORRERROR_port_name;
    private static NamedObject L0SETDETECTEDCORRERROR_port_name;
    private static NamedObject L0SETDETECTEDFATALERROR_port_name;
    private static NamedObject L0SETDETECTEDNONFATALERROR_port_name;
    private static NamedObject L0SETUNEXPECTEDCOMPLETIONCORRERROR_port_name;
    private static NamedObject L0SETUNEXPECTEDCOMPLETIONUNCORRERROR_port_name;
    private static NamedObject L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR_port_name;
    private static NamedObject L0SETUNSUPPORTEDREQUESTOTHERERROR_port_name;
    private static NamedObject L0SETUSERDETECTEDPARITYERROR_port_name;
    private static NamedObject L0SETUSERMASTERDATAPARITY_port_name;
    private static NamedObject L0SETUSERRECEIVEDMASTERABORT_port_name;
    private static NamedObject L0SETUSERRECEIVEDTARGETABORT_port_name;
    private static NamedObject L0SETUSERSIGNALLEDTARGETABORT_port_name;
    private static NamedObject L0SETUSERSYSTEMERROR_port_name;
    private static NamedObject L0TRANSACTIONSPENDING_port_name;
    private static NamedObject LLKRXCHFIFO_port_name;
    private static NamedObject LLKRXCHTC_port_name;
    private static NamedObject LLKRXDSTCONTREQN_port_name;
    private static NamedObject LLKRXDSTREQN_port_name;
    private static NamedObject LLKTXCHFIFO_port_name;
    private static NamedObject LLKTXCHTC_port_name;
    private static NamedObject LLKTXDATA_port_name;
    private static NamedObject LLKTXENABLEN_port_name;
    private static NamedObject LLKTXEOFN_port_name;
    private static NamedObject LLKTXEOPN_port_name;
    private static NamedObject LLKTXSOFN_port_name;
    private static NamedObject LLKTXSOPN_port_name;
    private static NamedObject LLKTXSRCDSCN_port_name;
    private static NamedObject LLKTXSRCRDYN_port_name;
    private static NamedObject MGMTADDR_port_name;
    private static NamedObject MGMTBWREN_port_name;
    private static NamedObject MGMTRDEN_port_name;
    private static NamedObject MGMTSTATSCREDITSEL_port_name;
    private static NamedObject MGMTWDATA_port_name;
    private static NamedObject MGMTWREN_port_name;
    private static NamedObject MIMDLLBRDATA_port_name;
    private static NamedObject MIMRXBRDATA_port_name;
    private static NamedObject MIMTXBRDATA_port_name;
    private static NamedObject PIPEPHYSTATUSL0_port_name;
    private static NamedObject PIPEPHYSTATUSL1_port_name;
    private static NamedObject PIPEPHYSTATUSL2_port_name;
    private static NamedObject PIPEPHYSTATUSL3_port_name;
    private static NamedObject PIPEPHYSTATUSL4_port_name;
    private static NamedObject PIPEPHYSTATUSL5_port_name;
    private static NamedObject PIPEPHYSTATUSL6_port_name;
    private static NamedObject PIPEPHYSTATUSL7_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL0_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL1_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL2_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL3_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL4_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL5_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL6_port_name;
    private static NamedObject PIPERXCHANISALIGNEDL7_port_name;
    private static NamedObject PIPERXDATAKL0_port_name;
    private static NamedObject PIPERXDATAKL1_port_name;
    private static NamedObject PIPERXDATAKL2_port_name;
    private static NamedObject PIPERXDATAKL3_port_name;
    private static NamedObject PIPERXDATAKL4_port_name;
    private static NamedObject PIPERXDATAKL5_port_name;
    private static NamedObject PIPERXDATAKL6_port_name;
    private static NamedObject PIPERXDATAKL7_port_name;
    private static NamedObject PIPERXDATAL0_port_name;
    private static NamedObject PIPERXDATAL1_port_name;
    private static NamedObject PIPERXDATAL2_port_name;
    private static NamedObject PIPERXDATAL3_port_name;
    private static NamedObject PIPERXDATAL4_port_name;
    private static NamedObject PIPERXDATAL5_port_name;
    private static NamedObject PIPERXDATAL6_port_name;
    private static NamedObject PIPERXDATAL7_port_name;
    private static NamedObject PIPERXELECIDLEL0_port_name;
    private static NamedObject PIPERXELECIDLEL1_port_name;
    private static NamedObject PIPERXELECIDLEL2_port_name;
    private static NamedObject PIPERXELECIDLEL3_port_name;
    private static NamedObject PIPERXELECIDLEL4_port_name;
    private static NamedObject PIPERXELECIDLEL5_port_name;
    private static NamedObject PIPERXELECIDLEL6_port_name;
    private static NamedObject PIPERXELECIDLEL7_port_name;
    private static NamedObject PIPERXSTATUSL0_port_name;
    private static NamedObject PIPERXSTATUSL1_port_name;
    private static NamedObject PIPERXSTATUSL2_port_name;
    private static NamedObject PIPERXSTATUSL3_port_name;
    private static NamedObject PIPERXSTATUSL4_port_name;
    private static NamedObject PIPERXSTATUSL5_port_name;
    private static NamedObject PIPERXSTATUSL6_port_name;
    private static NamedObject PIPERXSTATUSL7_port_name;
    private static NamedObject PIPERXVALIDL0_port_name;
    private static NamedObject PIPERXVALIDL1_port_name;
    private static NamedObject PIPERXVALIDL2_port_name;
    private static NamedObject PIPERXVALIDL3_port_name;
    private static NamedObject PIPERXVALIDL4_port_name;
    private static NamedObject PIPERXVALIDL5_port_name;
    private static NamedObject PIPERXVALIDL6_port_name;
    private static NamedObject PIPERXVALIDL7_port_name;
    private static NamedObject CRMRXHOTRESETN_port_name;
    private static NamedObject L0ASAUTONOMOUSINITCOMPLETED_port_name;
    private static NamedObject L0ATTENTIONINDICATORCONTROL_port_name;
    private static NamedObject L0CORRERRMSGRCVD_port_name;
    private static NamedObject L0DLLASRXSTATE_port_name;
    private static NamedObject L0DLLASTXSTATE_port_name;
    private static NamedObject L0ERRMSGREQID_port_name;
    private static NamedObject L0FATALERRMSGRCVD_port_name;
    private static NamedObject L0FWDCORRERROUT_port_name;
    private static NamedObject L0FWDFATALERROUT_port_name;
    private static NamedObject L0FWDNONFATALERROUT_port_name;
    private static NamedObject L0MACUPSTREAMDOWNSTREAM_port_name;
    private static NamedObject L0MCFOUND_port_name;
    private static NamedObject L0NONFATALERRMSGRCVD_port_name;
    private static NamedObject L0POWERCONTROLLERCONTROL_port_name;
    private static NamedObject L0POWERINDICATORCONTROL_port_name;
    private static NamedObject L0PWRINHIBITTRANSFERS_port_name;
    private static NamedObject L0PWRL23READYDEVICE_port_name;
    private static NamedObject L0RECEIVEDASSERTINTALEGACYINT_port_name;
    private static NamedObject L0RECEIVEDASSERTINTBLEGACYINT_port_name;
    private static NamedObject L0RECEIVEDASSERTINTCLEGACYINT_port_name;
    private static NamedObject L0RECEIVEDASSERTINTDLEGACYINT_port_name;
    private static NamedObject L0RECEIVEDDEASSERTINTALEGACYINT_port_name;
    private static NamedObject L0RECEIVEDDEASSERTINTBLEGACYINT_port_name;
    private static NamedObject L0RECEIVEDDEASSERTINTCLEGACYINT_port_name;
    private static NamedObject L0RECEIVEDDEASSERTINTDLEGACYINT_port_name;
    private static NamedObject L0RXBEACON_port_name;
    private static NamedObject L0RXDLLFCCMPLMCCRED_port_name;
    private static NamedObject L0RXDLLFCCMPLMCUPDATE_port_name;
    private static NamedObject L0RXDLLFCNPOSTBYPCRED_port_name;
    private static NamedObject L0RXDLLFCNPOSTBYPUPDATE_port_name;
    private static NamedObject L0RXDLLFCPOSTORDCRED_port_name;
    private static NamedObject L0RXDLLFCPOSTORDUPDATE_port_name;
    private static NamedObject L0RXDLLSBFCDATA_port_name;
    private static NamedObject L0RXDLLSBFCUPDATE_port_name;
    private static NamedObject L0RXDLLTLPECRCOK_port_name;
    private static NamedObject L0RXDLLTLPEND_port_name;
    private static NamedObject L0TOGGLEELECTROMECHANICALINTERLOCK_port_name;
    private static NamedObject L0TRANSFORMEDVC_port_name;
    private static NamedObject L0TXDLLFCCMPLMCUPDATED_port_name;
    private static NamedObject L0TXDLLFCNPOSTBYPUPDATED_port_name;
    private static NamedObject L0TXDLLFCPOSTORDUPDATED_port_name;
    private static NamedObject L0TXDLLPMUPDATED_port_name;
    private static NamedObject L0TXDLLSBFCUPDATED_port_name;
    private static NamedObject L0UCBYPFOUND_port_name;
    private static NamedObject L0UCORDFOUND_port_name;
    private static NamedObject LLKRX4DWHEADERN_port_name;
    private static NamedObject LLKRXCHCOMPLETIONPARTIALN_port_name;
    private static NamedObject LLKRXCHCONFIGAVAILABLEN_port_name;
    private static NamedObject LLKRXCHCONFIGPARTIALN_port_name;
    private static NamedObject LLKRXCHNONPOSTEDPARTIALN_port_name;
    private static NamedObject LLKRXCHPOSTEDPARTIALN_port_name;
    private static NamedObject LLKRXECRCBADN_port_name;
    private static NamedObject LLKRXSRCDSCN_port_name;
    private static NamedObject CFGNEGOTIATEDLINKWIDTH_port_name;
    private static NamedObject CRMCFGBRIDGEHOTRESET_port_name;
    private static NamedObject CRMTXHOTRESETN_port_name;
    private static NamedObject CROSSLINKSEED_port_name;
    private static NamedObject L0ACKNAKTIMERADJUSTMENT_port_name;
    private static NamedObject L0ALLDOWNPORTSINL1_port_name;
    private static NamedObject L0ALLDOWNRXPORTSINL0S_port_name;
    private static NamedObject L0ASE_port_name;
    private static NamedObject L0ASPORTCOUNT_port_name;
    private static NamedObject L0ASTURNPOOLBITSCONSUMED_port_name;
    private static NamedObject L0ATTENTIONBUTTONPRESSED_port_name;
    private static NamedObject L0CFGASSPANTREEOWNEDSTATE_port_name;
    private static NamedObject L0CFGASSTATECHANGECMD_port_name;
    private static NamedObject L0CFGEXTENDEDSYNC_port_name;
    private static NamedObject L0CFGL0SENTRYENABLE_port_name;
    private static NamedObject L0CFGL0SENTRYSUP_port_name;
    private static NamedObject L0CFGL0SEXITLAT_port_name;
    private static NamedObject L0CFGLINKDISABLE_port_name;
    private static NamedObject L0CFGNEGOTIATEDMAXP_port_name;
    private static NamedObject L0CFGVCENABLE_port_name;
    private static NamedObject L0CFGVCID_port_name;
    private static NamedObject L0DLLHOLDLINKUP_port_name;
    private static NamedObject L0ELECTROMECHANICALINTERLOCKENGAGED_port_name;
    private static NamedObject L0FWDASSERTINTALEGACYINT_port_name;
    private static NamedObject L0FWDASSERTINTBLEGACYINT_port_name;
    private static NamedObject L0FWDASSERTINTCLEGACYINT_port_name;
    private static NamedObject L0FWDASSERTINTDLEGACYINT_port_name;
    private static NamedObject L0FWDCORRERRIN_port_name;
    private static NamedObject L0FWDDEASSERTINTALEGACYINT_port_name;
    private static NamedObject L0FWDDEASSERTINTBLEGACYINT_port_name;
    private static NamedObject L0FWDDEASSERTINTCLEGACYINT_port_name;
    private static NamedObject L0FWDDEASSERTINTDLEGACYINT_port_name;
    private static NamedObject L0FWDFATALERRIN_port_name;
    private static NamedObject L0FWDNONFATALERRIN_port_name;
    private static NamedObject L0MRLSENSORCLOSEDN_port_name;
    private static NamedObject L0PORTNUMBER_port_name;
    private static NamedObject L0POWERFAULTDETECTED_port_name;
    private static NamedObject L0PRESENCEDETECTSLOTEMPTYN_port_name;
    private static NamedObject L0PWRNEWSTATEREQ_port_name;
    private static NamedObject L0PWRNEXTLINKSTATE_port_name;
    private static NamedObject L0REPLAYTIMERADJUSTMENT_port_name;
    private static NamedObject L0ROOTTURNOFFREQ_port_name;
    private static NamedObject L0RXTLTLPNONINITIALIZEDVC_port_name;
    private static NamedObject L0SENDUNLOCKMESSAGE_port_name;
    private static NamedObject L0SETLINKDETECTEDPARITYERROR_port_name;
    private static NamedObject L0SETLINKMASTERDATAPARITY_port_name;
    private static NamedObject L0SETLINKRECEIVEDMASTERABORT_port_name;
    private static NamedObject L0SETLINKRECEIVEDTARGETABORT_port_name;
    private static NamedObject L0SETLINKSIGNALLEDTARGETABORT_port_name;
    private static NamedObject L0SETLINKSYSTEMERROR_port_name;
    private static NamedObject L0TLASFCCREDSTARVATION_port_name;
    private static NamedObject L0TLLINKRETRAIN_port_name;
    private static NamedObject L0TXBEACON_port_name;
    private static NamedObject L0TXCFGPM_port_name;
    private static NamedObject L0TXCFGPMTYPE_port_name;
    private static NamedObject L0TXTLFCCMPLMCCRED_port_name;
    private static NamedObject L0TXTLFCCMPLMCUPDATE_port_name;
    private static NamedObject L0TXTLFCNPOSTBYPCRED_port_name;
    private static NamedObject L0TXTLFCNPOSTBYPUPDATE_port_name;
    private static NamedObject L0TXTLFCPOSTORDCRED_port_name;
    private static NamedObject L0TXTLFCPOSTORDUPDATE_port_name;
    private static NamedObject L0TXTLSBFCDATA_port_name;
    private static NamedObject L0TXTLSBFCUPDATE_port_name;
    private static NamedObject L0TXTLTLPDATA_port_name;
    private static NamedObject L0TXTLTLPEDB_port_name;
    private static NamedObject L0TXTLTLPENABLE_port_name;
    private static NamedObject L0TXTLTLPEND_port_name;
    private static NamedObject L0TXTLTLPLATENCY_port_name;
    private static NamedObject L0TXTLTLPREQ_port_name;
    private static NamedObject L0TXTLTLPREQEND_port_name;
    private static NamedObject L0TXTLTLPWIDTH_port_name;
    private static NamedObject L0UPSTREAMRXPORTINL0S_port_name;
    private static NamedObject L0VC0PREVIEWEXPAND_port_name;
    private static NamedObject L0WAKEN_port_name;
    private static NamedObject LLKTX4DWHEADERN_port_name;
    private static NamedObject LLKTXCOMPLETEN_port_name;
    private static NamedObject LLKTXCREATEECRCN_port_name;
    private static NamedObject MAINPOWER_port_name;
    private static NamedObject COUNTERREADVAL_port_name;
    private static NamedObject FINEOVERFLOW_port_name;
    private static NamedObject ICLK_port_name;
    private static NamedObject ICLKDIV_port_name;
    private static NamedObject ISERDESRST_port_name;
    private static NamedObject RCLK_port_name;
    private static NamedObject COUNTERLOADEN_port_name;
    private static NamedObject COUNTERLOADVAL_port_name;
    private static NamedObject COUNTERREADEN_port_name;
    private static NamedObject DIVIDERST_port_name;
    private static NamedObject EDGEADV_port_name;
    private static NamedObject FINEENABLE_port_name;
    private static NamedObject FINEINC_port_name;
    private static NamedObject FREQREFCLK_port_name;
    private static NamedObject MEMREFCLK_port_name;
    private static NamedObject PHASEREFCLK_port_name;
    private static NamedObject RANKSEL_port_name;
    private static NamedObject SYNCIN_port_name;
    private static NamedObject SYSCLK_port_name;
    private static NamedObject DQSFOUND_port_name;
    private static NamedObject DQSOUTOFRANGE_port_name;
    private static NamedObject PHASELOCKED_port_name;
    private static NamedObject WRENABLE_port_name;
    private static NamedObject BURSTPENDINGPHY_port_name;
    private static NamedObject ENCALIBPHY_port_name;
    private static NamedObject RANKSELPHY_port_name;
    private static NamedObject RSTDQSFIND_port_name;
    private static NamedObject COARSEOVERFLOW_port_name;
    private static NamedObject OCLKDELAYED_port_name;
    private static NamedObject OCLKDIV_port_name;
    private static NamedObject OSERDESRST_port_name;
    private static NamedObject COARSEENABLE_port_name;
    private static NamedObject COARSEINC_port_name;
    private static NamedObject SELFINEOCLKDELAY_port_name;
    private static NamedObject CTSBUS_port_name;
    private static NamedObject DQSBUS_port_name;
    private static NamedObject DTSBUS_port_name;
    private static NamedObject RDENABLE_port_name;
    private static NamedObject AUXOUTPUT_port_name;
    private static NamedObject INBURSTPENDING_port_name;
    private static NamedObject INRANKA_port_name;
    private static NamedObject INRANKB_port_name;
    private static NamedObject INRANKC_port_name;
    private static NamedObject INRANKD_port_name;
    private static NamedObject OUTBURSTPENDING_port_name;
    private static NamedObject PCENABLECALIB_port_name;
    private static NamedObject PHYCTLALMOSTFULL_port_name;
    private static NamedObject PHYCTLEMPTY_port_name;
    private static NamedObject PHYCTLFULL_port_name;
    private static NamedObject PHYCTLREADY_port_name;
    private static NamedObject PHYCLK_port_name;
    private static NamedObject PHYCTLMSTREMPTY_port_name;
    private static NamedObject PHYCTLWD_port_name;
    private static NamedObject PHYCTLWRENABLE_port_name;
    private static NamedObject READCALIBENABLE_port_name;
    private static NamedObject REFDLLLOCK_port_name;
    private static NamedObject WRITECALIBENABLE_port_name;
    private static NamedObject CLKFBDCM_port_name;
    private static NamedObject CLKOUTDCM0_port_name;
    private static NamedObject CLKOUTDCM1_port_name;
    private static NamedObject CLKOUTDCM2_port_name;
    private static NamedObject CLKOUTDCM3_port_name;
    private static NamedObject CLKOUTDCM4_port_name;
    private static NamedObject CLKOUTDCM5_port_name;
    private static NamedObject REL_port_name;
    private static NamedObject CLKA1_port_name;
    private static NamedObject CLKA1D2_port_name;
    private static NamedObject CLKA1D4_port_name;
    private static NamedObject CLKA1D8_port_name;
    private static NamedObject CLKB1_port_name;
    private static NamedObject CLKC1_port_name;
    private static NamedObject CLKD1_port_name;
    private static NamedObject CLKA_port_name;
    private static NamedObject CLKC_port_name;
    private static NamedObject CLKD_port_name;
    private static NamedObject APUFCMDECODED_port_name;
    private static NamedObject APUFCMDECUDI_port_name;
    private static NamedObject APUFCMDECUDIVALID_port_name;
    private static NamedObject APUFCMENDIAN_port_name;
    private static NamedObject APUFCMFLUSH_port_name;
    private static NamedObject APUFCMINSTRUCTION_port_name;
    private static NamedObject APUFCMINSTRVALID_port_name;
    private static NamedObject APUFCMLOADBYTEEN_port_name;
    private static NamedObject APUFCMLOADDATA_port_name;
    private static NamedObject APUFCMLOADDVALID_port_name;
    private static NamedObject APUFCMOPERANDVALID_port_name;
    private static NamedObject APUFCMRADATA_port_name;
    private static NamedObject APUFCMRBDATA_port_name;
    private static NamedObject APUFCMWRITEBACKOK_port_name;
    private static NamedObject APUFCMXERCA_port_name;
    private static NamedObject C405CPMCORESLEEPREQ_port_name;
    private static NamedObject C405CPMMSRCE_port_name;
    private static NamedObject C405CPMMSREE_port_name;
    private static NamedObject C405CPMTIMERIRQ_port_name;
    private static NamedObject C405CPMTIMERRESETREQ_port_name;
    private static NamedObject C405DBGLOADDATAONAPUDBUS_port_name;
    private static NamedObject C405DBGMSRWE_port_name;
    private static NamedObject C405DBGSTOPACK_port_name;
    private static NamedObject C405DBGWBCOMPLETE_port_name;
    private static NamedObject C405DBGWBFULL_port_name;
    private static NamedObject C405DBGWBIAR_port_name;
    private static NamedObject C405JTGCAPTUREDR_port_name;
    private static NamedObject C405JTGEXTEST_port_name;
    private static NamedObject C405JTGPGMOUT_port_name;
    private static NamedObject C405JTGSHIFTDR_port_name;
    private static NamedObject C405JTGTDO_port_name;
    private static NamedObject C405JTGTDOEN_port_name;
    private static NamedObject C405JTGUPDATEDR_port_name;
    private static NamedObject C405PLBDCUABORT_port_name;
    private static NamedObject C405PLBDCUABUS_port_name;
    private static NamedObject C405PLBDCUBE_port_name;
    private static NamedObject C405PLBDCUCACHEABLE_port_name;
    private static NamedObject C405PLBDCUGUARDED_port_name;
    private static NamedObject C405PLBDCUPRIORITY_port_name;
    private static NamedObject C405PLBDCUREQUEST_port_name;
    private static NamedObject C405PLBDCURNW_port_name;
    private static NamedObject C405PLBDCUSIZE2_port_name;
    private static NamedObject C405PLBDCUU0ATTR_port_name;
    private static NamedObject C405PLBDCUWRDBUS_port_name;
    private static NamedObject C405PLBDCUWRITETHRU_port_name;
    private static NamedObject C405PLBICUABORT_port_name;
    private static NamedObject C405PLBICUABUS_port_name;
    private static NamedObject C405PLBICUCACHEABLE_port_name;
    private static NamedObject C405PLBICUPRIORITY_port_name;
    private static NamedObject C405PLBICUREQUEST_port_name;
    private static NamedObject C405PLBICUSIZE_port_name;
    private static NamedObject C405PLBICUU0ATTR_port_name;
    private static NamedObject C405RSTCHIPRESETREQ_port_name;
    private static NamedObject C405RSTCORERESETREQ_port_name;
    private static NamedObject C405RSTSYSRESETREQ_port_name;
    private static NamedObject C405TRCCYCLE_port_name;
    private static NamedObject C405TRCEVENEXECUTIONSTATUS_port_name;
    private static NamedObject C405TRCODDEXECUTIONSTATUS_port_name;
    private static NamedObject C405TRCTRACESTATUS_port_name;
    private static NamedObject C405TRCTRIGGEREVENTOUT_port_name;
    private static NamedObject C405TRCTRIGGEREVENTTYPE_port_name;
    private static NamedObject C405XXXMACHINECHECK_port_name;
    private static NamedObject DCREMACENABLER_port_name;
    private static NamedObject DSOCMBRAMABUS_port_name;
    private static NamedObject DSOCMBRAMBYTEWRITE_port_name;
    private static NamedObject DSOCMBRAMEN_port_name;
    private static NamedObject DSOCMBRAMWRDBUS_port_name;
    private static NamedObject DSOCMBUSY_port_name;
    private static NamedObject DSOCMRDADDRVALID_port_name;
    private static NamedObject DSOCMWRADDRVALID_port_name;
    private static NamedObject EXTDCRABUS_port_name;
    private static NamedObject EXTDCRDBUSOUT_port_name;
    private static NamedObject EXTDCRREAD_port_name;
    private static NamedObject EXTDCRWRITE_port_name;
    private static NamedObject ISOCMBRAMEN_port_name;
    private static NamedObject ISOCMBRAMEVENWRITEEN_port_name;
    private static NamedObject ISOCMBRAMODDWRITEEN_port_name;
    private static NamedObject ISOCMBRAMRDABUS_port_name;
    private static NamedObject ISOCMBRAMWRABUS_port_name;
    private static NamedObject ISOCMBRAMWRDBUS_port_name;
    private static NamedObject ISOCMDCRBRAMEVENEN_port_name;
    private static NamedObject ISOCMDCRBRAMODDEN_port_name;
    private static NamedObject ISOCMDCRBRAMRDSELECT_port_name;
    private static NamedObject BRAMDSOCMCLK_port_name;
    private static NamedObject BRAMDSOCMRDDBUS_port_name;
    private static NamedObject BRAMISOCMCLK_port_name;
    private static NamedObject BRAMISOCMDCRRDDBUS_port_name;
    private static NamedObject BRAMISOCMRDDBUS_port_name;
    private static NamedObject CPMC405CLOCK_port_name;
    private static NamedObject CPMC405CORECLKINACTIVE_port_name;
    private static NamedObject CPMC405CPUCLKEN_port_name;
    private static NamedObject CPMC405JTAGCLKEN_port_name;
    private static NamedObject CPMC405SYNCBYPASS_port_name;
    private static NamedObject CPMC405TIMERCLKEN_port_name;
    private static NamedObject CPMC405TIMERTICK_port_name;
    private static NamedObject CPMDCRCLK_port_name;
    private static NamedObject CPMFCMCLK_port_name;
    private static NamedObject DBGC405DEBUGHALT_port_name;
    private static NamedObject DBGC405EXTBUSHOLDACK_port_name;
    private static NamedObject DBGC405UNCONDDEBUGEVENT_port_name;
    private static NamedObject DSARCVALUE_port_name;
    private static NamedObject DSCNTLVALUE_port_name;
    private static NamedObject DSOCMRWCOMPLETE_port_name;
    private static NamedObject EICC405CRITINPUTIRQ_port_name;
    private static NamedObject EICC405EXTINPUTIRQ_port_name;
    private static NamedObject EXTDCRACK_port_name;
    private static NamedObject EXTDCRDBUSIN_port_name;
    private static NamedObject FCMAPUCR_port_name;
    private static NamedObject FCMAPUDCDCREN_port_name;
    private static NamedObject FCMAPUDCDFORCEALIGN_port_name;
    private static NamedObject FCMAPUDCDFORCEBESTEERING_port_name;
    private static NamedObject FCMAPUDCDFPUOP_port_name;
    private static NamedObject FCMAPUDCDGPRWRITE_port_name;
    private static NamedObject FCMAPUDCDLDSTBYTE_port_name;
    private static NamedObject FCMAPUDCDLDSTDW_port_name;
    private static NamedObject FCMAPUDCDLDSTHW_port_name;
    private static NamedObject FCMAPUDCDLDSTQW_port_name;
    private static NamedObject FCMAPUDCDLDSTWD_port_name;
    private static NamedObject FCMAPUDCDLOAD_port_name;
    private static NamedObject FCMAPUDCDPRIVOP_port_name;
    private static NamedObject FCMAPUDCDRAEN_port_name;
    private static NamedObject FCMAPUDCDRBEN_port_name;
    private static NamedObject FCMAPUDCDSTORE_port_name;
    private static NamedObject FCMAPUDCDTRAPBE_port_name;
    private static NamedObject FCMAPUDCDTRAPLE_port_name;
    private static NamedObject FCMAPUDCDUPDATE_port_name;
    private static NamedObject FCMAPUDCDXERCAEN_port_name;
    private static NamedObject FCMAPUDCDXEROVEN_port_name;
    private static NamedObject FCMAPUDECODEBUSY_port_name;
    private static NamedObject FCMAPUDONE_port_name;
    private static NamedObject FCMAPUEXCEPTION_port_name;
    private static NamedObject FCMAPUEXEBLOCKINGMCO_port_name;
    private static NamedObject FCMAPUEXECRFIELD_port_name;
    private static NamedObject FCMAPUEXENONBLOCKINGMCO_port_name;
    private static NamedObject FCMAPUINSTRACK_port_name;
    private static NamedObject FCMAPULOADWAIT_port_name;
    private static NamedObject FCMAPURESULT_port_name;
    private static NamedObject FCMAPURESULTVALID_port_name;
    private static NamedObject FCMAPUSLEEPNOTREADY_port_name;
    private static NamedObject FCMAPUXERCA_port_name;
    private static NamedObject FCMAPUXEROV_port_name;
    private static NamedObject ISARCVALUE_port_name;
    private static NamedObject ISCNTLVALUE_port_name;
    private static NamedObject JTGC405BNDSCANTDO_port_name;
    private static NamedObject JTGC405TCK_port_name;
    private static NamedObject JTGC405TDI_port_name;
    private static NamedObject JTGC405TMS_port_name;
    private static NamedObject JTGC405TRSTNEG_port_name;
    private static NamedObject MCBCPUCLKEN_port_name;
    private static NamedObject MCBJTAGEN_port_name;
    private static NamedObject MCBTIMEREN_port_name;
    private static NamedObject MCPPCRST_port_name;
    private static NamedObject PLBC405DCUADDRACK_port_name;
    private static NamedObject PLBC405DCUBUSY_port_name;
    private static NamedObject PLBC405DCUERR_port_name;
    private static NamedObject PLBC405DCURDDACK_port_name;
    private static NamedObject PLBC405DCURDDBUS_port_name;
    private static NamedObject PLBC405DCURDWDADDR_port_name;
    private static NamedObject PLBC405DCUSSIZE1_port_name;
    private static NamedObject PLBC405DCUWRDACK_port_name;
    private static NamedObject PLBC405ICUADDRACK_port_name;
    private static NamedObject PLBC405ICUBUSY_port_name;
    private static NamedObject PLBC405ICUERR_port_name;
    private static NamedObject PLBC405ICURDDACK_port_name;
    private static NamedObject PLBC405ICURDDBUS_port_name;
    private static NamedObject PLBC405ICURDWDADDR_port_name;
    private static NamedObject PLBC405ICUSSIZE1_port_name;
    private static NamedObject PLBCLK_port_name;
    private static NamedObject RSTC405RESETCHIP_port_name;
    private static NamedObject RSTC405RESETCORE_port_name;
    private static NamedObject RSTC405RESETSYS_port_name;
    private static NamedObject TIEAPUCONTROL_port_name;
    private static NamedObject TIEAPUUDI1_port_name;
    private static NamedObject TIEAPUUDI2_port_name;
    private static NamedObject TIEAPUUDI3_port_name;
    private static NamedObject TIEAPUUDI4_port_name;
    private static NamedObject TIEAPUUDI5_port_name;
    private static NamedObject TIEAPUUDI6_port_name;
    private static NamedObject TIEAPUUDI7_port_name;
    private static NamedObject TIEAPUUDI8_port_name;
    private static NamedObject TIEC405DETERMINISTICMULT_port_name;
    private static NamedObject TIEC405DISOPERANDFWD_port_name;
    private static NamedObject TIEC405MMUEN_port_name;
    private static NamedObject TIEDCRADDR_port_name;
    private static NamedObject TIEPVRBIT10_port_name;
    private static NamedObject TIEPVRBIT11_port_name;
    private static NamedObject TIEPVRBIT28_port_name;
    private static NamedObject TIEPVRBIT29_port_name;
    private static NamedObject TIEPVRBIT30_port_name;
    private static NamedObject TIEPVRBIT31_port_name;
    private static NamedObject TIEPVRBIT8_port_name;
    private static NamedObject TIEPVRBIT9_port_name;
    private static NamedObject TRCC405TRACEDISABLE_port_name;
    private static NamedObject TRCC405TRIGGEREVENTIN_port_name;
    private static NamedObject APUFCMDECFPUOP_port_name;
    private static NamedObject APUFCMDECLDSTXFERSIZE_port_name;
    private static NamedObject APUFCMDECLOAD_port_name;
    private static NamedObject APUFCMDECNONAUTON_port_name;
    private static NamedObject APUFCMDECSTORE_port_name;
    private static NamedObject APUFCMLOADBYTEADDR_port_name;
    private static NamedObject APUFCMMSRFE0_port_name;
    private static NamedObject APUFCMMSRFE1_port_name;
    private static NamedObject APUFCMNEXTINSTRREADY_port_name;
    private static NamedObject C440CPMCORESLEEPREQ_port_name;
    private static NamedObject C440CPMDECIRPTREQ_port_name;
    private static NamedObject C440CPMFITIRPTREQ_port_name;
    private static NamedObject C440CPMMSRCE_port_name;
    private static NamedObject C440CPMMSREE_port_name;
    private static NamedObject C440CPMTIMERRESETREQ_port_name;
    private static NamedObject C440CPMWDIRPTREQ_port_name;
    private static NamedObject C440DBGSYSTEMCONTROL_port_name;
    private static NamedObject C440JTGTDO_port_name;
    private static NamedObject C440JTGTDOEN_port_name;
    private static NamedObject C440MACHINECHECK_port_name;
    private static NamedObject C440RSTCHIPRESETREQ_port_name;
    private static NamedObject C440RSTCORERESETREQ_port_name;
    private static NamedObject C440RSTSYSTEMRESETREQ_port_name;
    private static NamedObject C440TRCBRANCHSTATUS_port_name;
    private static NamedObject C440TRCCYCLE_port_name;
    private static NamedObject C440TRCEXECUTIONSTATUS_port_name;
    private static NamedObject C440TRCTRACESTATUS_port_name;
    private static NamedObject C440TRCTRIGGEREVENTOUT_port_name;
    private static NamedObject C440TRCTRIGGEREVENTTYPE_port_name;
    private static NamedObject DMA0LLRSTENGINEACK_port_name;
    private static NamedObject DMA0LLRXDSTRDYN_port_name;
    private static NamedObject DMA0LLTXD_port_name;
    private static NamedObject DMA0LLTXEOFN_port_name;
    private static NamedObject DMA0LLTXEOPN_port_name;
    private static NamedObject DMA0LLTXREM_port_name;
    private static NamedObject DMA0LLTXSOFN_port_name;
    private static NamedObject DMA0LLTXSOPN_port_name;
    private static NamedObject DMA0LLTXSRCRDYN_port_name;
    private static NamedObject DMA0RXIRQ_port_name;
    private static NamedObject DMA0TXIRQ_port_name;
    private static NamedObject DMA1LLRSTENGINEACK_port_name;
    private static NamedObject DMA1LLRXDSTRDYN_port_name;
    private static NamedObject DMA1LLTXD_port_name;
    private static NamedObject DMA1LLTXEOFN_port_name;
    private static NamedObject DMA1LLTXEOPN_port_name;
    private static NamedObject DMA1LLTXREM_port_name;
    private static NamedObject DMA1LLTXSOFN_port_name;
    private static NamedObject DMA1LLTXSOPN_port_name;
    private static NamedObject DMA1LLTXSRCRDYN_port_name;
    private static NamedObject DMA1RXIRQ_port_name;
    private static NamedObject DMA1TXIRQ_port_name;
    private static NamedObject DMA2LLRSTENGINEACK_port_name;
    private static NamedObject DMA2LLRXDSTRDYN_port_name;
    private static NamedObject DMA2LLTXD_port_name;
    private static NamedObject DMA2LLTXEOFN_port_name;
    private static NamedObject DMA2LLTXEOPN_port_name;
    private static NamedObject DMA2LLTXREM_port_name;
    private static NamedObject DMA2LLTXSOFN_port_name;
    private static NamedObject DMA2LLTXSOPN_port_name;
    private static NamedObject DMA2LLTXSRCRDYN_port_name;
    private static NamedObject DMA2RXIRQ_port_name;
    private static NamedObject DMA2TXIRQ_port_name;
    private static NamedObject DMA3LLRSTENGINEACK_port_name;
    private static NamedObject DMA3LLRXDSTRDYN_port_name;
    private static NamedObject DMA3LLTXD_port_name;
    private static NamedObject DMA3LLTXEOFN_port_name;
    private static NamedObject DMA3LLTXEOPN_port_name;
    private static NamedObject DMA3LLTXREM_port_name;
    private static NamedObject DMA3LLTXSOFN_port_name;
    private static NamedObject DMA3LLTXSOPN_port_name;
    private static NamedObject DMA3LLTXSRCRDYN_port_name;
    private static NamedObject DMA3RXIRQ_port_name;
    private static NamedObject DMA3TXIRQ_port_name;
    private static NamedObject MIMCADDRESS_port_name;
    private static NamedObject MIMCADDRESSVALID_port_name;
    private static NamedObject MIMCBANKCONFLICT_port_name;
    private static NamedObject MIMCBYTEENABLE_port_name;
    private static NamedObject MIMCREADNOTWRITE_port_name;
    private static NamedObject MIMCROWCONFLICT_port_name;
    private static NamedObject MIMCWRITEDATA_port_name;
    private static NamedObject MIMCWRITEDATAVALID_port_name;
    private static NamedObject PPCCPMINTERCONNECTBUSY_port_name;
    private static NamedObject PPCDMDCRABUS_port_name;
    private static NamedObject PPCDMDCRDBUSOUT_port_name;
    private static NamedObject PPCDMDCRREAD_port_name;
    private static NamedObject PPCDMDCRUABUS_port_name;
    private static NamedObject PPCDMDCRWRITE_port_name;
    private static NamedObject PPCDSDCRACK_port_name;
    private static NamedObject PPCDSDCRDBUSIN_port_name;
    private static NamedObject PPCDSDCRTIMEOUTWAIT_port_name;
    private static NamedObject PPCEICINTERCONNECTIRQ_port_name;
    private static NamedObject PPCMPLBABORT_port_name;
    private static NamedObject PPCMPLBABUS_port_name;
    private static NamedObject PPCMPLBBE_port_name;
    private static NamedObject PPCMPLBBUSLOCK_port_name;
    private static NamedObject PPCMPLBLOCKERR_port_name;
    private static NamedObject PPCMPLBPRIORITY_port_name;
    private static NamedObject PPCMPLBRDBURST_port_name;
    private static NamedObject PPCMPLBREQUEST_port_name;
    private static NamedObject PPCMPLBRNW_port_name;
    private static NamedObject PPCMPLBSIZE_port_name;
    private static NamedObject PPCMPLBTATTRIBUTE_port_name;
    private static NamedObject PPCMPLBTYPE_port_name;
    private static NamedObject PPCMPLBUABUS_port_name;
    private static NamedObject PPCMPLBWRBURST_port_name;
    private static NamedObject PPCMPLBWRDBUS_port_name;
    private static NamedObject PPCS0PLBADDRACK_port_name;
    private static NamedObject PPCS0PLBMBUSY_port_name;
    private static NamedObject PPCS0PLBMIRQ_port_name;
    private static NamedObject PPCS0PLBMRDERR_port_name;
    private static NamedObject PPCS0PLBMWRERR_port_name;
    private static NamedObject PPCS0PLBRDBTERM_port_name;
    private static NamedObject PPCS0PLBRDCOMP_port_name;
    private static NamedObject PPCS0PLBRDDACK_port_name;
    private static NamedObject PPCS0PLBRDDBUS_port_name;
    private static NamedObject PPCS0PLBRDWDADDR_port_name;
    private static NamedObject PPCS0PLBREARBITRATE_port_name;
    private static NamedObject PPCS0PLBSSIZE_port_name;
    private static NamedObject PPCS0PLBWAIT_port_name;
    private static NamedObject PPCS0PLBWRBTERM_port_name;
    private static NamedObject PPCS0PLBWRCOMP_port_name;
    private static NamedObject PPCS0PLBWRDACK_port_name;
    private static NamedObject PPCS1PLBADDRACK_port_name;
    private static NamedObject PPCS1PLBMBUSY_port_name;
    private static NamedObject PPCS1PLBMIRQ_port_name;
    private static NamedObject PPCS1PLBMRDERR_port_name;
    private static NamedObject PPCS1PLBMWRERR_port_name;
    private static NamedObject PPCS1PLBRDBTERM_port_name;
    private static NamedObject PPCS1PLBRDCOMP_port_name;
    private static NamedObject PPCS1PLBRDDACK_port_name;
    private static NamedObject PPCS1PLBRDDBUS_port_name;
    private static NamedObject PPCS1PLBRDWDADDR_port_name;
    private static NamedObject PPCS1PLBREARBITRATE_port_name;
    private static NamedObject PPCS1PLBSSIZE_port_name;
    private static NamedObject PPCS1PLBWAIT_port_name;
    private static NamedObject PPCS1PLBWRBTERM_port_name;
    private static NamedObject PPCS1PLBWRCOMP_port_name;
    private static NamedObject PPCS1PLBWRDACK_port_name;
    private static NamedObject CPMC440CLK_port_name;
    private static NamedObject CPMC440CLKEN_port_name;
    private static NamedObject CPMC440CORECLOCKINACTIVE_port_name;
    private static NamedObject CPMC440TIMERCLOCK_port_name;
    private static NamedObject CPMDMA0LLCLK_port_name;
    private static NamedObject CPMDMA1LLCLK_port_name;
    private static NamedObject CPMDMA2LLCLK_port_name;
    private static NamedObject CPMDMA3LLCLK_port_name;
    private static NamedObject CPMINTERCONNECTCLK_port_name;
    private static NamedObject CPMINTERCONNECTCLKEN_port_name;
    private static NamedObject CPMINTERCONNECTCLKNTO1_port_name;
    private static NamedObject CPMMCCLK_port_name;
    private static NamedObject CPMPPCMPLBCLK_port_name;
    private static NamedObject CPMPPCS0PLBCLK_port_name;
    private static NamedObject CPMPPCS1PLBCLK_port_name;
    private static NamedObject DBGC440DEBUGHALT_port_name;
    private static NamedObject DBGC440SYSTEMSTATUS_port_name;
    private static NamedObject DBGC440UNCONDDEBUGEVENT_port_name;
    private static NamedObject DCRPPCDMACK_port_name;
    private static NamedObject DCRPPCDMDBUSIN_port_name;
    private static NamedObject DCRPPCDMTIMEOUTWAIT_port_name;
    private static NamedObject DCRPPCDSABUS_port_name;
    private static NamedObject DCRPPCDSDBUSOUT_port_name;
    private static NamedObject DCRPPCDSREAD_port_name;
    private static NamedObject DCRPPCDSWRITE_port_name;
    private static NamedObject EICC440CRITIRQ_port_name;
    private static NamedObject EICC440EXTIRQ_port_name;
    private static NamedObject FCMAPUCONFIRMINSTR_port_name;
    private static NamedObject FCMAPUFPSCRFEX_port_name;
    private static NamedObject FCMAPUSTOREDATA_port_name;
    private static NamedObject JTGC440TCK_port_name;
    private static NamedObject JTGC440TDI_port_name;
    private static NamedObject JTGC440TMS_port_name;
    private static NamedObject JTGC440TRSTNEG_port_name;
    private static NamedObject LLDMA0RSTENGINEREQ_port_name;
    private static NamedObject LLDMA0RXD_port_name;
    private static NamedObject LLDMA0RXEOFN_port_name;
    private static NamedObject LLDMA0RXEOPN_port_name;
    private static NamedObject LLDMA0RXREM_port_name;
    private static NamedObject LLDMA0RXSOFN_port_name;
    private static NamedObject LLDMA0RXSOPN_port_name;
    private static NamedObject LLDMA0RXSRCRDYN_port_name;
    private static NamedObject LLDMA0TXDSTRDYN_port_name;
    private static NamedObject LLDMA1RSTENGINEREQ_port_name;
    private static NamedObject LLDMA1RXD_port_name;
    private static NamedObject LLDMA1RXEOFN_port_name;
    private static NamedObject LLDMA1RXEOPN_port_name;
    private static NamedObject LLDMA1RXREM_port_name;
    private static NamedObject LLDMA1RXSOFN_port_name;
    private static NamedObject LLDMA1RXSOPN_port_name;
    private static NamedObject LLDMA1RXSRCRDYN_port_name;
    private static NamedObject LLDMA1TXDSTRDYN_port_name;
    private static NamedObject LLDMA2RSTENGINEREQ_port_name;
    private static NamedObject LLDMA2RXD_port_name;
    private static NamedObject LLDMA2RXEOFN_port_name;
    private static NamedObject LLDMA2RXEOPN_port_name;
    private static NamedObject LLDMA2RXREM_port_name;
    private static NamedObject LLDMA2RXSOFN_port_name;
    private static NamedObject LLDMA2RXSOPN_port_name;
    private static NamedObject LLDMA2RXSRCRDYN_port_name;
    private static NamedObject LLDMA2TXDSTRDYN_port_name;
    private static NamedObject LLDMA3RSTENGINEREQ_port_name;
    private static NamedObject LLDMA3RXD_port_name;
    private static NamedObject LLDMA3RXEOFN_port_name;
    private static NamedObject LLDMA3RXEOPN_port_name;
    private static NamedObject LLDMA3RXREM_port_name;
    private static NamedObject LLDMA3RXSOFN_port_name;
    private static NamedObject LLDMA3RXSOPN_port_name;
    private static NamedObject LLDMA3RXSRCRDYN_port_name;
    private static NamedObject LLDMA3TXDSTRDYN_port_name;
    private static NamedObject MCMIADDRREADYTOACCEPT_port_name;
    private static NamedObject MCMIREADDATA_port_name;
    private static NamedObject MCMIREADDATAERR_port_name;
    private static NamedObject MCMIREADDATAVALID_port_name;
    private static NamedObject PLBPPCMADDRACK_port_name;
    private static NamedObject PLBPPCMMBUSY_port_name;
    private static NamedObject PLBPPCMMIRQ_port_name;
    private static NamedObject PLBPPCMMRDERR_port_name;
    private static NamedObject PLBPPCMMWRERR_port_name;
    private static NamedObject PLBPPCMRDBTERM_port_name;
    private static NamedObject PLBPPCMRDDACK_port_name;
    private static NamedObject PLBPPCMRDDBUS_port_name;
    private static NamedObject PLBPPCMRDPENDPRI_port_name;
    private static NamedObject PLBPPCMRDPENDREQ_port_name;
    private static NamedObject PLBPPCMRDWDADDR_port_name;
    private static NamedObject PLBPPCMREARBITRATE_port_name;
    private static NamedObject PLBPPCMREQPRI_port_name;
    private static NamedObject PLBPPCMSSIZE_port_name;
    private static NamedObject PLBPPCMTIMEOUT_port_name;
    private static NamedObject PLBPPCMWRBTERM_port_name;
    private static NamedObject PLBPPCMWRDACK_port_name;
    private static NamedObject PLBPPCMWRPENDPRI_port_name;
    private static NamedObject PLBPPCMWRPENDREQ_port_name;
    private static NamedObject PLBPPCS0ABORT_port_name;
    private static NamedObject PLBPPCS0ABUS_port_name;
    private static NamedObject PLBPPCS0BE_port_name;
    private static NamedObject PLBPPCS0BUSLOCK_port_name;
    private static NamedObject PLBPPCS0LOCKERR_port_name;
    private static NamedObject PLBPPCS0MASTERID_port_name;
    private static NamedObject PLBPPCS0MSIZE_port_name;
    private static NamedObject PLBPPCS0PAVALID_port_name;
    private static NamedObject PLBPPCS0RDBURST_port_name;
    private static NamedObject PLBPPCS0RDPENDPRI_port_name;
    private static NamedObject PLBPPCS0RDPENDREQ_port_name;
    private static NamedObject PLBPPCS0RDPRIM_port_name;
    private static NamedObject PLBPPCS0REQPRI_port_name;
    private static NamedObject PLBPPCS0RNW_port_name;
    private static NamedObject PLBPPCS0SAVALID_port_name;
    private static NamedObject PLBPPCS0SIZE_port_name;
    private static NamedObject PLBPPCS0TATTRIBUTE_port_name;
    private static NamedObject PLBPPCS0TYPE_port_name;
    private static NamedObject PLBPPCS0UABUS_port_name;
    private static NamedObject PLBPPCS0WRBURST_port_name;
    private static NamedObject PLBPPCS0WRDBUS_port_name;
    private static NamedObject PLBPPCS0WRPENDPRI_port_name;
    private static NamedObject PLBPPCS0WRPENDREQ_port_name;
    private static NamedObject PLBPPCS0WRPRIM_port_name;
    private static NamedObject PLBPPCS1ABORT_port_name;
    private static NamedObject PLBPPCS1ABUS_port_name;
    private static NamedObject PLBPPCS1BE_port_name;
    private static NamedObject PLBPPCS1BUSLOCK_port_name;
    private static NamedObject PLBPPCS1LOCKERR_port_name;
    private static NamedObject PLBPPCS1MASTERID_port_name;
    private static NamedObject PLBPPCS1MSIZE_port_name;
    private static NamedObject PLBPPCS1PAVALID_port_name;
    private static NamedObject PLBPPCS1RDBURST_port_name;
    private static NamedObject PLBPPCS1RDPENDPRI_port_name;
    private static NamedObject PLBPPCS1RDPENDREQ_port_name;
    private static NamedObject PLBPPCS1RDPRIM_port_name;
    private static NamedObject PLBPPCS1REQPRI_port_name;
    private static NamedObject PLBPPCS1RNW_port_name;
    private static NamedObject PLBPPCS1SAVALID_port_name;
    private static NamedObject PLBPPCS1SIZE_port_name;
    private static NamedObject PLBPPCS1TATTRIBUTE_port_name;
    private static NamedObject PLBPPCS1TYPE_port_name;
    private static NamedObject PLBPPCS1UABUS_port_name;
    private static NamedObject PLBPPCS1WRBURST_port_name;
    private static NamedObject PLBPPCS1WRDBUS_port_name;
    private static NamedObject PLBPPCS1WRPENDPRI_port_name;
    private static NamedObject PLBPPCS1WRPENDREQ_port_name;
    private static NamedObject PLBPPCS1WRPRIM_port_name;
    private static NamedObject RSTC440RESETCHIP_port_name;
    private static NamedObject RSTC440RESETCORE_port_name;
    private static NamedObject RSTC440RESETSYSTEM_port_name;
    private static NamedObject TIEC440DCURDLDCACHEPLBPRIO_port_name;
    private static NamedObject TIEC440DCURDNONCACHEPLBPRIO_port_name;
    private static NamedObject TIEC440DCURDTOUCHPLBPRIO_port_name;
    private static NamedObject TIEC440DCURDURGENTPLBPRIO_port_name;
    private static NamedObject TIEC440DCUWRFLUSHPLBPRIO_port_name;
    private static NamedObject TIEC440DCUWRSTOREPLBPRIO_port_name;
    private static NamedObject TIEC440DCUWRURGENTPLBPRIO_port_name;
    private static NamedObject TIEC440ENDIANRESET_port_name;
    private static NamedObject TIEC440ERPNRESET_port_name;
    private static NamedObject TIEC440ICURDFETCHPLBPRIO_port_name;
    private static NamedObject TIEC440ICURDSPECPLBPRIO_port_name;
    private static NamedObject TIEC440ICURDTOUCHPLBPRIO_port_name;
    private static NamedObject TIEC440PIR_port_name;
    private static NamedObject TIEC440PVR_port_name;
    private static NamedObject TIEC440USERRESET_port_name;
    private static NamedObject TIEDCRBASEADDR_port_name;
    private static NamedObject TRCC440TRACEDISABLE_port_name;
    private static NamedObject TRCC440TRIGGEREVENTIN_port_name;
    private static NamedObject DMA0DATYPE_port_name;
    private static NamedObject DMA0DAVALID_port_name;
    private static NamedObject DMA0DRREADY_port_name;
    private static NamedObject DMA0RSTN_port_name;
    private static NamedObject DMA1DATYPE_port_name;
    private static NamedObject DMA1DAVALID_port_name;
    private static NamedObject DMA1DRREADY_port_name;
    private static NamedObject DMA1RSTN_port_name;
    private static NamedObject DMA2DATYPE_port_name;
    private static NamedObject DMA2DAVALID_port_name;
    private static NamedObject DMA2DRREADY_port_name;
    private static NamedObject DMA2RSTN_port_name;
    private static NamedObject DMA3DATYPE_port_name;
    private static NamedObject DMA3DAVALID_port_name;
    private static NamedObject DMA3DRREADY_port_name;
    private static NamedObject DMA3RSTN_port_name;
    private static NamedObject EMIOCAN0PHYTX_port_name;
    private static NamedObject EMIOCAN1PHYTX_port_name;
    private static NamedObject EMIOENET0GMIITXD_port_name;
    private static NamedObject EMIOENET0GMIITXEN_port_name;
    private static NamedObject EMIOENET0GMIITXER_port_name;
    private static NamedObject EMIOENET0MDIOMDC_port_name;
    private static NamedObject EMIOENET0MDIOO_port_name;
    private static NamedObject EMIOENET0MDIOTN_port_name;
    private static NamedObject EMIOENET0PTPDELAYREQRX_port_name;
    private static NamedObject EMIOENET0PTPDELAYREQTX_port_name;
    private static NamedObject EMIOENET0PTPPDELAYREQRX_port_name;
    private static NamedObject EMIOENET0PTPPDELAYREQTX_port_name;
    private static NamedObject EMIOENET0PTPPDELAYRESPRX_port_name;
    private static NamedObject EMIOENET0PTPPDELAYRESPTX_port_name;
    private static NamedObject EMIOENET0PTPSYNCFRAMERX_port_name;
    private static NamedObject EMIOENET0PTPSYNCFRAMETX_port_name;
    private static NamedObject EMIOENET0SOFRX_port_name;
    private static NamedObject EMIOENET0SOFTX_port_name;
    private static NamedObject EMIOENET1GMIITXD_port_name;
    private static NamedObject EMIOENET1GMIITXEN_port_name;
    private static NamedObject EMIOENET1GMIITXER_port_name;
    private static NamedObject EMIOENET1MDIOMDC_port_name;
    private static NamedObject EMIOENET1MDIOO_port_name;
    private static NamedObject EMIOENET1MDIOTN_port_name;
    private static NamedObject EMIOENET1PTPDELAYREQRX_port_name;
    private static NamedObject EMIOENET1PTPDELAYREQTX_port_name;
    private static NamedObject EMIOENET1PTPPDELAYREQRX_port_name;
    private static NamedObject EMIOENET1PTPPDELAYREQTX_port_name;
    private static NamedObject EMIOENET1PTPPDELAYRESPRX_port_name;
    private static NamedObject EMIOENET1PTPPDELAYRESPTX_port_name;
    private static NamedObject EMIOENET1PTPSYNCFRAMERX_port_name;
    private static NamedObject EMIOENET1PTPSYNCFRAMETX_port_name;
    private static NamedObject EMIOENET1SOFRX_port_name;
    private static NamedObject EMIOENET1SOFTX_port_name;
    private static NamedObject EMIOGPIOO_port_name;
    private static NamedObject EMIOGPIOTN_port_name;
    private static NamedObject EMIOI2C0SCLO_port_name;
    private static NamedObject EMIOI2C0SCLTN_port_name;
    private static NamedObject EMIOI2C0SDAO_port_name;
    private static NamedObject EMIOI2C0SDATN_port_name;
    private static NamedObject EMIOI2C1SCLO_port_name;
    private static NamedObject EMIOI2C1SCLTN_port_name;
    private static NamedObject EMIOI2C1SDAO_port_name;
    private static NamedObject EMIOI2C1SDATN_port_name;
    private static NamedObject EMIOPJTAGTDO_port_name;
    private static NamedObject EMIOPJTAGTDTN_port_name;
    private static NamedObject EMIOSDIO0BUSPOW_port_name;
    private static NamedObject EMIOSDIO0BUSVOLT_port_name;
    private static NamedObject EMIOSDIO0CLK_port_name;
    private static NamedObject EMIOSDIO0CMDO_port_name;
    private static NamedObject EMIOSDIO0CMDTN_port_name;
    private static NamedObject EMIOSDIO0DATAO_port_name;
    private static NamedObject EMIOSDIO0DATATN_port_name;
    private static NamedObject EMIOSDIO0LED_port_name;
    private static NamedObject EMIOSDIO1BUSPOW_port_name;
    private static NamedObject EMIOSDIO1BUSVOLT_port_name;
    private static NamedObject EMIOSDIO1CLK_port_name;
    private static NamedObject EMIOSDIO1CMDO_port_name;
    private static NamedObject EMIOSDIO1CMDTN_port_name;
    private static NamedObject EMIOSDIO1DATAO_port_name;
    private static NamedObject EMIOSDIO1DATATN_port_name;
    private static NamedObject EMIOSDIO1LED_port_name;
    private static NamedObject EMIOSPI0MO_port_name;
    private static NamedObject EMIOSPI0MOTN_port_name;
    private static NamedObject EMIOSPI0SCLKO_port_name;
    private static NamedObject EMIOSPI0SCLKTN_port_name;
    private static NamedObject EMIOSPI0SO_port_name;
    private static NamedObject EMIOSPI0SSNTN_port_name;
    private static NamedObject EMIOSPI0SSON_port_name;
    private static NamedObject EMIOSPI0STN_port_name;
    private static NamedObject EMIOSPI1MO_port_name;
    private static NamedObject EMIOSPI1MOTN_port_name;
    private static NamedObject EMIOSPI1SCLKO_port_name;
    private static NamedObject EMIOSPI1SCLKTN_port_name;
    private static NamedObject EMIOSPI1SO_port_name;
    private static NamedObject EMIOSPI1SSNTN_port_name;
    private static NamedObject EMIOSPI1SSON_port_name;
    private static NamedObject EMIOSPI1STN_port_name;
    private static NamedObject EMIOTRACECTL_port_name;
    private static NamedObject EMIOTRACEDATA_port_name;
    private static NamedObject EMIOTTC0WAVEO_port_name;
    private static NamedObject EMIOTTC1WAVEO_port_name;
    private static NamedObject EMIOUART0DTRN_port_name;
    private static NamedObject EMIOUART0RTSN_port_name;
    private static NamedObject EMIOUART0TX_port_name;
    private static NamedObject EMIOUART1DTRN_port_name;
    private static NamedObject EMIOUART1RTSN_port_name;
    private static NamedObject EMIOUART1TX_port_name;
    private static NamedObject EMIOUSB0PORTINDCTL_port_name;
    private static NamedObject EMIOUSB0VBUSPWRSELECT_port_name;
    private static NamedObject EMIOUSB1PORTINDCTL_port_name;
    private static NamedObject EMIOUSB1VBUSPWRSELECT_port_name;
    private static NamedObject EMIOWDTRSTO_port_name;
    private static NamedObject EVENTEVENTO_port_name;
    private static NamedObject EVENTSTANDBYWFE_port_name;
    private static NamedObject EVENTSTANDBYWFI_port_name;
    private static NamedObject FCLKCLK_port_name;
    private static NamedObject FCLKRESETN_port_name;
    private static NamedObject FTMTF2PTRIGACK_port_name;
    private static NamedObject FTMTP2FDEBUG_port_name;
    private static NamedObject FTMTP2FTRIG_port_name;
    private static NamedObject IRQP2F_port_name;
    private static NamedObject MAXIGP0ARADDR_port_name;
    private static NamedObject MAXIGP0ARBURST_port_name;
    private static NamedObject MAXIGP0ARCACHE_port_name;
    private static NamedObject MAXIGP0ARESETN_port_name;
    private static NamedObject MAXIGP0ARID_port_name;
    private static NamedObject MAXIGP0ARLEN_port_name;
    private static NamedObject MAXIGP0ARLOCK_port_name;
    private static NamedObject MAXIGP0ARPROT_port_name;
    private static NamedObject MAXIGP0ARQOS_port_name;
    private static NamedObject MAXIGP0ARSIZE_port_name;
    private static NamedObject MAXIGP0ARVALID_port_name;
    private static NamedObject MAXIGP0AWADDR_port_name;
    private static NamedObject MAXIGP0AWBURST_port_name;
    private static NamedObject MAXIGP0AWCACHE_port_name;
    private static NamedObject MAXIGP0AWID_port_name;
    private static NamedObject MAXIGP0AWLEN_port_name;
    private static NamedObject MAXIGP0AWLOCK_port_name;
    private static NamedObject MAXIGP0AWPROT_port_name;
    private static NamedObject MAXIGP0AWQOS_port_name;
    private static NamedObject MAXIGP0AWSIZE_port_name;
    private static NamedObject MAXIGP0AWVALID_port_name;
    private static NamedObject MAXIGP0BREADY_port_name;
    private static NamedObject MAXIGP0RREADY_port_name;
    private static NamedObject MAXIGP0WDATA_port_name;
    private static NamedObject MAXIGP0WID_port_name;
    private static NamedObject MAXIGP0WLAST_port_name;
    private static NamedObject MAXIGP0WSTRB_port_name;
    private static NamedObject MAXIGP0WVALID_port_name;
    private static NamedObject MAXIGP1ARADDR_port_name;
    private static NamedObject MAXIGP1ARBURST_port_name;
    private static NamedObject MAXIGP1ARCACHE_port_name;
    private static NamedObject MAXIGP1ARESETN_port_name;
    private static NamedObject MAXIGP1ARID_port_name;
    private static NamedObject MAXIGP1ARLEN_port_name;
    private static NamedObject MAXIGP1ARLOCK_port_name;
    private static NamedObject MAXIGP1ARPROT_port_name;
    private static NamedObject MAXIGP1ARQOS_port_name;
    private static NamedObject MAXIGP1ARSIZE_port_name;
    private static NamedObject MAXIGP1ARVALID_port_name;
    private static NamedObject MAXIGP1AWADDR_port_name;
    private static NamedObject MAXIGP1AWBURST_port_name;
    private static NamedObject MAXIGP1AWCACHE_port_name;
    private static NamedObject MAXIGP1AWID_port_name;
    private static NamedObject MAXIGP1AWLEN_port_name;
    private static NamedObject MAXIGP1AWLOCK_port_name;
    private static NamedObject MAXIGP1AWPROT_port_name;
    private static NamedObject MAXIGP1AWQOS_port_name;
    private static NamedObject MAXIGP1AWSIZE_port_name;
    private static NamedObject MAXIGP1AWVALID_port_name;
    private static NamedObject MAXIGP1BREADY_port_name;
    private static NamedObject MAXIGP1RREADY_port_name;
    private static NamedObject MAXIGP1WDATA_port_name;
    private static NamedObject MAXIGP1WID_port_name;
    private static NamedObject MAXIGP1WLAST_port_name;
    private static NamedObject MAXIGP1WSTRB_port_name;
    private static NamedObject MAXIGP1WVALID_port_name;
    private static NamedObject SAXIACPARESETN_port_name;
    private static NamedObject SAXIACPARREADY_port_name;
    private static NamedObject SAXIACPAWREADY_port_name;
    private static NamedObject SAXIACPBID_port_name;
    private static NamedObject SAXIACPBRESP_port_name;
    private static NamedObject SAXIACPBVALID_port_name;
    private static NamedObject SAXIACPRDATA_port_name;
    private static NamedObject SAXIACPRID_port_name;
    private static NamedObject SAXIACPRLAST_port_name;
    private static NamedObject SAXIACPRRESP_port_name;
    private static NamedObject SAXIACPRVALID_port_name;
    private static NamedObject SAXIACPWREADY_port_name;
    private static NamedObject SAXIGP0ARESETN_port_name;
    private static NamedObject SAXIGP0ARREADY_port_name;
    private static NamedObject SAXIGP0AWREADY_port_name;
    private static NamedObject SAXIGP0BID_port_name;
    private static NamedObject SAXIGP0BRESP_port_name;
    private static NamedObject SAXIGP0BVALID_port_name;
    private static NamedObject SAXIGP0RDATA_port_name;
    private static NamedObject SAXIGP0RID_port_name;
    private static NamedObject SAXIGP0RLAST_port_name;
    private static NamedObject SAXIGP0RRESP_port_name;
    private static NamedObject SAXIGP0RVALID_port_name;
    private static NamedObject SAXIGP0WREADY_port_name;
    private static NamedObject SAXIGP1ARESETN_port_name;
    private static NamedObject SAXIGP1ARREADY_port_name;
    private static NamedObject SAXIGP1AWREADY_port_name;
    private static NamedObject SAXIGP1BID_port_name;
    private static NamedObject SAXIGP1BRESP_port_name;
    private static NamedObject SAXIGP1BVALID_port_name;
    private static NamedObject SAXIGP1RDATA_port_name;
    private static NamedObject SAXIGP1RID_port_name;
    private static NamedObject SAXIGP1RLAST_port_name;
    private static NamedObject SAXIGP1RRESP_port_name;
    private static NamedObject SAXIGP1RVALID_port_name;
    private static NamedObject SAXIGP1WREADY_port_name;
    private static NamedObject SAXIHP0ARESETN_port_name;
    private static NamedObject SAXIHP0ARREADY_port_name;
    private static NamedObject SAXIHP0AWREADY_port_name;
    private static NamedObject SAXIHP0BID_port_name;
    private static NamedObject SAXIHP0BRESP_port_name;
    private static NamedObject SAXIHP0BVALID_port_name;
    private static NamedObject SAXIHP0RACOUNT_port_name;
    private static NamedObject SAXIHP0RCOUNT_port_name;
    private static NamedObject SAXIHP0RDATA_port_name;
    private static NamedObject SAXIHP0RID_port_name;
    private static NamedObject SAXIHP0RLAST_port_name;
    private static NamedObject SAXIHP0RRESP_port_name;
    private static NamedObject SAXIHP0RVALID_port_name;
    private static NamedObject SAXIHP0WACOUNT_port_name;
    private static NamedObject SAXIHP0WCOUNT_port_name;
    private static NamedObject SAXIHP0WREADY_port_name;
    private static NamedObject SAXIHP1ARESETN_port_name;
    private static NamedObject SAXIHP1ARREADY_port_name;
    private static NamedObject SAXIHP1AWREADY_port_name;
    private static NamedObject SAXIHP1BID_port_name;
    private static NamedObject SAXIHP1BRESP_port_name;
    private static NamedObject SAXIHP1BVALID_port_name;
    private static NamedObject SAXIHP1RACOUNT_port_name;
    private static NamedObject SAXIHP1RCOUNT_port_name;
    private static NamedObject SAXIHP1RDATA_port_name;
    private static NamedObject SAXIHP1RID_port_name;
    private static NamedObject SAXIHP1RLAST_port_name;
    private static NamedObject SAXIHP1RRESP_port_name;
    private static NamedObject SAXIHP1RVALID_port_name;
    private static NamedObject SAXIHP1WACOUNT_port_name;
    private static NamedObject SAXIHP1WCOUNT_port_name;
    private static NamedObject SAXIHP1WREADY_port_name;
    private static NamedObject SAXIHP2ARESETN_port_name;
    private static NamedObject SAXIHP2ARREADY_port_name;
    private static NamedObject SAXIHP2AWREADY_port_name;
    private static NamedObject SAXIHP2BID_port_name;
    private static NamedObject SAXIHP2BRESP_port_name;
    private static NamedObject SAXIHP2BVALID_port_name;
    private static NamedObject SAXIHP2RACOUNT_port_name;
    private static NamedObject SAXIHP2RCOUNT_port_name;
    private static NamedObject SAXIHP2RDATA_port_name;
    private static NamedObject SAXIHP2RID_port_name;
    private static NamedObject SAXIHP2RLAST_port_name;
    private static NamedObject SAXIHP2RRESP_port_name;
    private static NamedObject SAXIHP2RVALID_port_name;
    private static NamedObject SAXIHP2WACOUNT_port_name;
    private static NamedObject SAXIHP2WCOUNT_port_name;
    private static NamedObject SAXIHP2WREADY_port_name;
    private static NamedObject SAXIHP3ARESETN_port_name;
    private static NamedObject SAXIHP3ARREADY_port_name;
    private static NamedObject SAXIHP3AWREADY_port_name;
    private static NamedObject SAXIHP3BID_port_name;
    private static NamedObject SAXIHP3BRESP_port_name;
    private static NamedObject SAXIHP3BVALID_port_name;
    private static NamedObject SAXIHP3RACOUNT_port_name;
    private static NamedObject SAXIHP3RCOUNT_port_name;
    private static NamedObject SAXIHP3RDATA_port_name;
    private static NamedObject SAXIHP3RID_port_name;
    private static NamedObject SAXIHP3RLAST_port_name;
    private static NamedObject SAXIHP3RRESP_port_name;
    private static NamedObject SAXIHP3RVALID_port_name;
    private static NamedObject SAXIHP3WACOUNT_port_name;
    private static NamedObject SAXIHP3WCOUNT_port_name;
    private static NamedObject SAXIHP3WREADY_port_name;
    private static NamedObject DDRA_port_name;
    private static NamedObject DDRBA_port_name;
    private static NamedObject DDRCASB_port_name;
    private static NamedObject DDRCKE_port_name;
    private static NamedObject DDRCKN_port_name;
    private static NamedObject DDRCKP_port_name;
    private static NamedObject DDRCSB_port_name;
    private static NamedObject DDRDM_port_name;
    private static NamedObject DDRDQ_port_name;
    private static NamedObject DDRDQSN_port_name;
    private static NamedObject DDRDQSP_port_name;
    private static NamedObject DDRDRSTB_port_name;
    private static NamedObject DDRODT_port_name;
    private static NamedObject DDRRASB_port_name;
    private static NamedObject DDRVRN_port_name;
    private static NamedObject DDRVRP_port_name;
    private static NamedObject DDRWEB_port_name;
    private static NamedObject MIO_port_name;
    private static NamedObject PSPORB_port_name;
    private static NamedObject PSSRSTB_port_name;
    private static NamedObject DDRARB_port_name;
    private static NamedObject DMA0ACLK_port_name;
    private static NamedObject DMA0DAREADY_port_name;
    private static NamedObject DMA0DRLAST_port_name;
    private static NamedObject DMA0DRTYPE_port_name;
    private static NamedObject DMA0DRVALID_port_name;
    private static NamedObject DMA1ACLK_port_name;
    private static NamedObject DMA1DAREADY_port_name;
    private static NamedObject DMA1DRLAST_port_name;
    private static NamedObject DMA1DRTYPE_port_name;
    private static NamedObject DMA1DRVALID_port_name;
    private static NamedObject DMA2ACLK_port_name;
    private static NamedObject DMA2DAREADY_port_name;
    private static NamedObject DMA2DRLAST_port_name;
    private static NamedObject DMA2DRTYPE_port_name;
    private static NamedObject DMA2DRVALID_port_name;
    private static NamedObject DMA3ACLK_port_name;
    private static NamedObject DMA3DAREADY_port_name;
    private static NamedObject DMA3DRLAST_port_name;
    private static NamedObject DMA3DRTYPE_port_name;
    private static NamedObject DMA3DRVALID_port_name;
    private static NamedObject EMIOCAN0PHYRX_port_name;
    private static NamedObject EMIOCAN1PHYRX_port_name;
    private static NamedObject EMIOENET0EXTINTIN_port_name;
    private static NamedObject EMIOENET0GMIICOL_port_name;
    private static NamedObject EMIOENET0GMIICRS_port_name;
    private static NamedObject EMIOENET0GMIIRXCLK_port_name;
    private static NamedObject EMIOENET0GMIIRXD_port_name;
    private static NamedObject EMIOENET0GMIIRXDV_port_name;
    private static NamedObject EMIOENET0GMIIRXER_port_name;
    private static NamedObject EMIOENET0GMIITXCLK_port_name;
    private static NamedObject EMIOENET0MDIOI_port_name;
    private static NamedObject EMIOENET1EXTINTIN_port_name;
    private static NamedObject EMIOENET1GMIICOL_port_name;
    private static NamedObject EMIOENET1GMIICRS_port_name;
    private static NamedObject EMIOENET1GMIIRXCLK_port_name;
    private static NamedObject EMIOENET1GMIIRXD_port_name;
    private static NamedObject EMIOENET1GMIIRXDV_port_name;
    private static NamedObject EMIOENET1GMIIRXER_port_name;
    private static NamedObject EMIOENET1GMIITXCLK_port_name;
    private static NamedObject EMIOENET1MDIOI_port_name;
    private static NamedObject EMIOGPIOI_port_name;
    private static NamedObject EMIOI2C0SCLI_port_name;
    private static NamedObject EMIOI2C0SDAI_port_name;
    private static NamedObject EMIOI2C1SCLI_port_name;
    private static NamedObject EMIOI2C1SDAI_port_name;
    private static NamedObject EMIOPJTAGTCK_port_name;
    private static NamedObject EMIOPJTAGTDI_port_name;
    private static NamedObject EMIOPJTAGTMS_port_name;
    private static NamedObject EMIOSDIO0CDN_port_name;
    private static NamedObject EMIOSDIO0CLKFB_port_name;
    private static NamedObject EMIOSDIO0CMDI_port_name;
    private static NamedObject EMIOSDIO0DATAI_port_name;
    private static NamedObject EMIOSDIO0WP_port_name;
    private static NamedObject EMIOSDIO1CDN_port_name;
    private static NamedObject EMIOSDIO1CLKFB_port_name;
    private static NamedObject EMIOSDIO1CMDI_port_name;
    private static NamedObject EMIOSDIO1DATAI_port_name;
    private static NamedObject EMIOSDIO1WP_port_name;
    private static NamedObject EMIOSPI0MI_port_name;
    private static NamedObject EMIOSPI0SCLKI_port_name;
    private static NamedObject EMIOSPI0SI_port_name;
    private static NamedObject EMIOSPI0SSIN_port_name;
    private static NamedObject EMIOSPI1MI_port_name;
    private static NamedObject EMIOSPI1SCLKI_port_name;
    private static NamedObject EMIOSPI1SI_port_name;
    private static NamedObject EMIOSPI1SSIN_port_name;
    private static NamedObject EMIOSRAMINTIN_port_name;
    private static NamedObject EMIOTRACECLK_port_name;
    private static NamedObject EMIOTTC0CLKI_port_name;
    private static NamedObject EMIOTTC1CLKI_port_name;
    private static NamedObject EMIOUART0CTSN_port_name;
    private static NamedObject EMIOUART0DCDN_port_name;
    private static NamedObject EMIOUART0DSRN_port_name;
    private static NamedObject EMIOUART0RIN_port_name;
    private static NamedObject EMIOUART0RX_port_name;
    private static NamedObject EMIOUART1CTSN_port_name;
    private static NamedObject EMIOUART1DCDN_port_name;
    private static NamedObject EMIOUART1DSRN_port_name;
    private static NamedObject EMIOUART1RIN_port_name;
    private static NamedObject EMIOUART1RX_port_name;
    private static NamedObject EMIOUSB0VBUSPWRFAULT_port_name;
    private static NamedObject EMIOUSB1VBUSPWRFAULT_port_name;
    private static NamedObject EMIOWDTCLKI_port_name;
    private static NamedObject EVENTEVENTI_port_name;
    private static NamedObject FCLKCLKTRIGN_port_name;
    private static NamedObject FPGAIDLEN_port_name;
    private static NamedObject FTMDTRACEINATID_port_name;
    private static NamedObject FTMDTRACEINCLOCK_port_name;
    private static NamedObject FTMDTRACEINDATA_port_name;
    private static NamedObject FTMDTRACEINVALID_port_name;
    private static NamedObject FTMTF2PDEBUG_port_name;
    private static NamedObject FTMTF2PTRIG_port_name;
    private static NamedObject FTMTP2FTRIGACK_port_name;
    private static NamedObject IRQF2P_port_name;
    private static NamedObject MAXIGP0ACLK_port_name;
    private static NamedObject MAXIGP0ARREADY_port_name;
    private static NamedObject MAXIGP0AWREADY_port_name;
    private static NamedObject MAXIGP0BID_port_name;
    private static NamedObject MAXIGP0BRESP_port_name;
    private static NamedObject MAXIGP0BVALID_port_name;
    private static NamedObject MAXIGP0RDATA_port_name;
    private static NamedObject MAXIGP0RID_port_name;
    private static NamedObject MAXIGP0RLAST_port_name;
    private static NamedObject MAXIGP0RRESP_port_name;
    private static NamedObject MAXIGP0RVALID_port_name;
    private static NamedObject MAXIGP0WREADY_port_name;
    private static NamedObject MAXIGP1ACLK_port_name;
    private static NamedObject MAXIGP1ARREADY_port_name;
    private static NamedObject MAXIGP1AWREADY_port_name;
    private static NamedObject MAXIGP1BID_port_name;
    private static NamedObject MAXIGP1BRESP_port_name;
    private static NamedObject MAXIGP1BVALID_port_name;
    private static NamedObject MAXIGP1RDATA_port_name;
    private static NamedObject MAXIGP1RID_port_name;
    private static NamedObject MAXIGP1RLAST_port_name;
    private static NamedObject MAXIGP1RRESP_port_name;
    private static NamedObject MAXIGP1RVALID_port_name;
    private static NamedObject MAXIGP1WREADY_port_name;
    private static NamedObject SAXIACPACLK_port_name;
    private static NamedObject SAXIACPARADDR_port_name;
    private static NamedObject SAXIACPARBURST_port_name;
    private static NamedObject SAXIACPARCACHE_port_name;
    private static NamedObject SAXIACPARID_port_name;
    private static NamedObject SAXIACPARLEN_port_name;
    private static NamedObject SAXIACPARLOCK_port_name;
    private static NamedObject SAXIACPARPROT_port_name;
    private static NamedObject SAXIACPARQOS_port_name;
    private static NamedObject SAXIACPARSIZE_port_name;
    private static NamedObject SAXIACPARUSER_port_name;
    private static NamedObject SAXIACPARVALID_port_name;
    private static NamedObject SAXIACPAWADDR_port_name;
    private static NamedObject SAXIACPAWBURST_port_name;
    private static NamedObject SAXIACPAWCACHE_port_name;
    private static NamedObject SAXIACPAWID_port_name;
    private static NamedObject SAXIACPAWLEN_port_name;
    private static NamedObject SAXIACPAWLOCK_port_name;
    private static NamedObject SAXIACPAWPROT_port_name;
    private static NamedObject SAXIACPAWQOS_port_name;
    private static NamedObject SAXIACPAWSIZE_port_name;
    private static NamedObject SAXIACPAWUSER_port_name;
    private static NamedObject SAXIACPAWVALID_port_name;
    private static NamedObject SAXIACPBREADY_port_name;
    private static NamedObject SAXIACPRREADY_port_name;
    private static NamedObject SAXIACPWDATA_port_name;
    private static NamedObject SAXIACPWID_port_name;
    private static NamedObject SAXIACPWLAST_port_name;
    private static NamedObject SAXIACPWSTRB_port_name;
    private static NamedObject SAXIACPWVALID_port_name;
    private static NamedObject SAXIGP0ACLK_port_name;
    private static NamedObject SAXIGP0ARADDR_port_name;
    private static NamedObject SAXIGP0ARBURST_port_name;
    private static NamedObject SAXIGP0ARCACHE_port_name;
    private static NamedObject SAXIGP0ARID_port_name;
    private static NamedObject SAXIGP0ARLEN_port_name;
    private static NamedObject SAXIGP0ARLOCK_port_name;
    private static NamedObject SAXIGP0ARPROT_port_name;
    private static NamedObject SAXIGP0ARQOS_port_name;
    private static NamedObject SAXIGP0ARSIZE_port_name;
    private static NamedObject SAXIGP0ARVALID_port_name;
    private static NamedObject SAXIGP0AWADDR_port_name;
    private static NamedObject SAXIGP0AWBURST_port_name;
    private static NamedObject SAXIGP0AWCACHE_port_name;
    private static NamedObject SAXIGP0AWID_port_name;
    private static NamedObject SAXIGP0AWLEN_port_name;
    private static NamedObject SAXIGP0AWLOCK_port_name;
    private static NamedObject SAXIGP0AWPROT_port_name;
    private static NamedObject SAXIGP0AWQOS_port_name;
    private static NamedObject SAXIGP0AWSIZE_port_name;
    private static NamedObject SAXIGP0AWVALID_port_name;
    private static NamedObject SAXIGP0BREADY_port_name;
    private static NamedObject SAXIGP0RREADY_port_name;
    private static NamedObject SAXIGP0WDATA_port_name;
    private static NamedObject SAXIGP0WID_port_name;
    private static NamedObject SAXIGP0WLAST_port_name;
    private static NamedObject SAXIGP0WSTRB_port_name;
    private static NamedObject SAXIGP0WVALID_port_name;
    private static NamedObject SAXIGP1ACLK_port_name;
    private static NamedObject SAXIGP1ARADDR_port_name;
    private static NamedObject SAXIGP1ARBURST_port_name;
    private static NamedObject SAXIGP1ARCACHE_port_name;
    private static NamedObject SAXIGP1ARID_port_name;
    private static NamedObject SAXIGP1ARLEN_port_name;
    private static NamedObject SAXIGP1ARLOCK_port_name;
    private static NamedObject SAXIGP1ARPROT_port_name;
    private static NamedObject SAXIGP1ARQOS_port_name;
    private static NamedObject SAXIGP1ARSIZE_port_name;
    private static NamedObject SAXIGP1ARVALID_port_name;
    private static NamedObject SAXIGP1AWADDR_port_name;
    private static NamedObject SAXIGP1AWBURST_port_name;
    private static NamedObject SAXIGP1AWCACHE_port_name;
    private static NamedObject SAXIGP1AWID_port_name;
    private static NamedObject SAXIGP1AWLEN_port_name;
    private static NamedObject SAXIGP1AWLOCK_port_name;
    private static NamedObject SAXIGP1AWPROT_port_name;
    private static NamedObject SAXIGP1AWQOS_port_name;
    private static NamedObject SAXIGP1AWSIZE_port_name;
    private static NamedObject SAXIGP1AWVALID_port_name;
    private static NamedObject SAXIGP1BREADY_port_name;
    private static NamedObject SAXIGP1RREADY_port_name;
    private static NamedObject SAXIGP1WDATA_port_name;
    private static NamedObject SAXIGP1WID_port_name;
    private static NamedObject SAXIGP1WLAST_port_name;
    private static NamedObject SAXIGP1WSTRB_port_name;
    private static NamedObject SAXIGP1WVALID_port_name;
    private static NamedObject SAXIHP0ACLK_port_name;
    private static NamedObject SAXIHP0ARADDR_port_name;
    private static NamedObject SAXIHP0ARBURST_port_name;
    private static NamedObject SAXIHP0ARCACHE_port_name;
    private static NamedObject SAXIHP0ARID_port_name;
    private static NamedObject SAXIHP0ARLEN_port_name;
    private static NamedObject SAXIHP0ARLOCK_port_name;
    private static NamedObject SAXIHP0ARPROT_port_name;
    private static NamedObject SAXIHP0ARQOS_port_name;
    private static NamedObject SAXIHP0ARSIZE_port_name;
    private static NamedObject SAXIHP0ARVALID_port_name;
    private static NamedObject SAXIHP0AWADDR_port_name;
    private static NamedObject SAXIHP0AWBURST_port_name;
    private static NamedObject SAXIHP0AWCACHE_port_name;
    private static NamedObject SAXIHP0AWID_port_name;
    private static NamedObject SAXIHP0AWLEN_port_name;
    private static NamedObject SAXIHP0AWLOCK_port_name;
    private static NamedObject SAXIHP0AWPROT_port_name;
    private static NamedObject SAXIHP0AWQOS_port_name;
    private static NamedObject SAXIHP0AWSIZE_port_name;
    private static NamedObject SAXIHP0AWVALID_port_name;
    private static NamedObject SAXIHP0BREADY_port_name;
    private static NamedObject SAXIHP0RDISSUECAP1EN_port_name;
    private static NamedObject SAXIHP0RREADY_port_name;
    private static NamedObject SAXIHP0WDATA_port_name;
    private static NamedObject SAXIHP0WID_port_name;
    private static NamedObject SAXIHP0WLAST_port_name;
    private static NamedObject SAXIHP0WRISSUECAP1EN_port_name;
    private static NamedObject SAXIHP0WSTRB_port_name;
    private static NamedObject SAXIHP0WVALID_port_name;
    private static NamedObject SAXIHP1ACLK_port_name;
    private static NamedObject SAXIHP1ARADDR_port_name;
    private static NamedObject SAXIHP1ARBURST_port_name;
    private static NamedObject SAXIHP1ARCACHE_port_name;
    private static NamedObject SAXIHP1ARID_port_name;
    private static NamedObject SAXIHP1ARLEN_port_name;
    private static NamedObject SAXIHP1ARLOCK_port_name;
    private static NamedObject SAXIHP1ARPROT_port_name;
    private static NamedObject SAXIHP1ARQOS_port_name;
    private static NamedObject SAXIHP1ARSIZE_port_name;
    private static NamedObject SAXIHP1ARVALID_port_name;
    private static NamedObject SAXIHP1AWADDR_port_name;
    private static NamedObject SAXIHP1AWBURST_port_name;
    private static NamedObject SAXIHP1AWCACHE_port_name;
    private static NamedObject SAXIHP1AWID_port_name;
    private static NamedObject SAXIHP1AWLEN_port_name;
    private static NamedObject SAXIHP1AWLOCK_port_name;
    private static NamedObject SAXIHP1AWPROT_port_name;
    private static NamedObject SAXIHP1AWQOS_port_name;
    private static NamedObject SAXIHP1AWSIZE_port_name;
    private static NamedObject SAXIHP1AWVALID_port_name;
    private static NamedObject SAXIHP1BREADY_port_name;
    private static NamedObject SAXIHP1RDISSUECAP1EN_port_name;
    private static NamedObject SAXIHP1RREADY_port_name;
    private static NamedObject SAXIHP1WDATA_port_name;
    private static NamedObject SAXIHP1WID_port_name;
    private static NamedObject SAXIHP1WLAST_port_name;
    private static NamedObject SAXIHP1WRISSUECAP1EN_port_name;
    private static NamedObject SAXIHP1WSTRB_port_name;
    private static NamedObject SAXIHP1WVALID_port_name;
    private static NamedObject SAXIHP2ACLK_port_name;
    private static NamedObject SAXIHP2ARADDR_port_name;
    private static NamedObject SAXIHP2ARBURST_port_name;
    private static NamedObject SAXIHP2ARCACHE_port_name;
    private static NamedObject SAXIHP2ARID_port_name;
    private static NamedObject SAXIHP2ARLEN_port_name;
    private static NamedObject SAXIHP2ARLOCK_port_name;
    private static NamedObject SAXIHP2ARPROT_port_name;
    private static NamedObject SAXIHP2ARQOS_port_name;
    private static NamedObject SAXIHP2ARSIZE_port_name;
    private static NamedObject SAXIHP2ARVALID_port_name;
    private static NamedObject SAXIHP2AWADDR_port_name;
    private static NamedObject SAXIHP2AWBURST_port_name;
    private static NamedObject SAXIHP2AWCACHE_port_name;
    private static NamedObject SAXIHP2AWID_port_name;
    private static NamedObject SAXIHP2AWLEN_port_name;
    private static NamedObject SAXIHP2AWLOCK_port_name;
    private static NamedObject SAXIHP2AWPROT_port_name;
    private static NamedObject SAXIHP2AWQOS_port_name;
    private static NamedObject SAXIHP2AWSIZE_port_name;
    private static NamedObject SAXIHP2AWVALID_port_name;
    private static NamedObject SAXIHP2BREADY_port_name;
    private static NamedObject SAXIHP2RDISSUECAP1EN_port_name;
    private static NamedObject SAXIHP2RREADY_port_name;
    private static NamedObject SAXIHP2WDATA_port_name;
    private static NamedObject SAXIHP2WID_port_name;
    private static NamedObject SAXIHP2WLAST_port_name;
    private static NamedObject SAXIHP2WRISSUECAP1EN_port_name;
    private static NamedObject SAXIHP2WSTRB_port_name;
    private static NamedObject SAXIHP2WVALID_port_name;
    private static NamedObject SAXIHP3ACLK_port_name;
    private static NamedObject SAXIHP3ARADDR_port_name;
    private static NamedObject SAXIHP3ARBURST_port_name;
    private static NamedObject SAXIHP3ARCACHE_port_name;
    private static NamedObject SAXIHP3ARID_port_name;
    private static NamedObject SAXIHP3ARLEN_port_name;
    private static NamedObject SAXIHP3ARLOCK_port_name;
    private static NamedObject SAXIHP3ARPROT_port_name;
    private static NamedObject SAXIHP3ARQOS_port_name;
    private static NamedObject SAXIHP3ARSIZE_port_name;
    private static NamedObject SAXIHP3ARVALID_port_name;
    private static NamedObject SAXIHP3AWADDR_port_name;
    private static NamedObject SAXIHP3AWBURST_port_name;
    private static NamedObject SAXIHP3AWCACHE_port_name;
    private static NamedObject SAXIHP3AWID_port_name;
    private static NamedObject SAXIHP3AWLEN_port_name;
    private static NamedObject SAXIHP3AWLOCK_port_name;
    private static NamedObject SAXIHP3AWPROT_port_name;
    private static NamedObject SAXIHP3AWQOS_port_name;
    private static NamedObject SAXIHP3AWSIZE_port_name;
    private static NamedObject SAXIHP3AWVALID_port_name;
    private static NamedObject SAXIHP3BREADY_port_name;
    private static NamedObject SAXIHP3RDISSUECAP1EN_port_name;
    private static NamedObject SAXIHP3RREADY_port_name;
    private static NamedObject SAXIHP3WDATA_port_name;
    private static NamedObject SAXIHP3WID_port_name;
    private static NamedObject SAXIHP3WLAST_port_name;
    private static NamedObject SAXIHP3WRISSUECAP1EN_port_name;
    private static NamedObject SAXIHP3WSTRB_port_name;
    private static NamedObject SAXIHP3WVALID_port_name;
    private static NamedObject DPO_port_name;
    private static NamedObject SPO_port_name;
    private static NamedObject DPRA_port_name;
    private static NamedObject WCLK_port_name;
    private static NamedObject A0_port_name;
    private static NamedObject A1_port_name;
    private static NamedObject A2_port_name;
    private static NamedObject A3_port_name;
    private static NamedObject A4_port_name;
    private static NamedObject A5_port_name;
    private static NamedObject A6_port_name;
    private static NamedObject DPRA0_port_name;
    private static NamedObject DPRA1_port_name;
    private static NamedObject DPRA2_port_name;
    private static NamedObject DPRA3_port_name;
    private static NamedObject O0_port_name;
    private static NamedObject O1_port_name;
    private static NamedObject O2_port_name;
    private static NamedObject O3_port_name;
    private static NamedObject DOC_port_name;
    private static NamedObject DOD_port_name;
    private static NamedObject ADDRA_port_name;
    private static NamedObject ADDRB_port_name;
    private static NamedObject ADDRC_port_name;
    private static NamedObject ADDRD_port_name;
    private static NamedObject DIC_port_name;
    private static NamedObject DID_port_name;
    private static NamedObject DPRA4_port_name;
    private static NamedObject DPRA5_port_name;
    private static NamedObject CASCADEOUTA_port_name;
    private static NamedObject CASCADEOUTB_port_name;
    private static NamedObject DOPA_port_name;
    private static NamedObject DOPB_port_name;
    private static NamedObject CASCADEINA_port_name;
    private static NamedObject CASCADEINB_port_name;
    private static NamedObject DIPA_port_name;
    private static NamedObject DIPB_port_name;
    private static NamedObject ENA_port_name;
    private static NamedObject ENB_port_name;
    private static NamedObject REGCEA_port_name;
    private static NamedObject REGCEB_port_name;
    private static NamedObject SSRA_port_name;
    private static NamedObject SSRB_port_name;
    private static NamedObject WEA_port_name;
    private static NamedObject WEB_port_name;
    private static NamedObject EN_port_name;
    private static NamedObject SSR_port_name;
    private static NamedObject DOADO_port_name;
    private static NamedObject DOBDO_port_name;
    private static NamedObject DOPADOP_port_name;
    private static NamedObject DOPBDOP_port_name;
    private static NamedObject ADDRARDADDR_port_name;
    private static NamedObject ADDRBWRADDR_port_name;
    private static NamedObject CLKARDCLK_port_name;
    private static NamedObject CLKBWRCLK_port_name;
    private static NamedObject DIADI_port_name;
    private static NamedObject DIBDI_port_name;
    private static NamedObject DIPADIP_port_name;
    private static NamedObject DIPBDIP_port_name;
    private static NamedObject ENARDEN_port_name;
    private static NamedObject ENBWREN_port_name;
    private static NamedObject REGCEAREGCE_port_name;
    private static NamedObject RSTRAMARSTRAM_port_name;
    private static NamedObject RSTRAMB_port_name;
    private static NamedObject RSTREGARSTREG_port_name;
    private static NamedObject RSTREGB_port_name;
    private static NamedObject WEBWE_port_name;
    private static NamedObject RDADDR_port_name;
    private static NamedObject WRADDR_port_name;
    private static NamedObject CASCADEOUTLATA_port_name;
    private static NamedObject CASCADEOUTLATB_port_name;
    private static NamedObject CASCADEOUTREGA_port_name;
    private static NamedObject CASCADEOUTREGB_port_name;
    private static NamedObject CASCADEINLATA_port_name;
    private static NamedObject CASCADEINLATB_port_name;
    private static NamedObject CASCADEINREGA_port_name;
    private static NamedObject CASCADEINREGB_port_name;
    private static NamedObject RDADDRECC_port_name;
    private static NamedObject RDADDRL_port_name;
    private static NamedObject RDADDRU_port_name;
    private static NamedObject RDENL_port_name;
    private static NamedObject RDENU_port_name;
    private static NamedObject REGCEL_port_name;
    private static NamedObject REGCEU_port_name;
    private static NamedObject SSRL_port_name;
    private static NamedObject SSRU_port_name;
    private static NamedObject WEL_port_name;
    private static NamedObject WEU_port_name;
    private static NamedObject WRADDRL_port_name;
    private static NamedObject WRADDRU_port_name;
    private static NamedObject WRENL_port_name;
    private static NamedObject WRENU_port_name;
    private static NamedObject ADDRAL_port_name;
    private static NamedObject ADDRAU_port_name;
    private static NamedObject ADDRBL_port_name;
    private static NamedObject ADDRBU_port_name;
    private static NamedObject CLKAL_port_name;
    private static NamedObject CLKAU_port_name;
    private static NamedObject CLKBL_port_name;
    private static NamedObject CLKBU_port_name;
    private static NamedObject ENAL_port_name;
    private static NamedObject ENAU_port_name;
    private static NamedObject ENBL_port_name;
    private static NamedObject ENBU_port_name;
    private static NamedObject REGCEAL_port_name;
    private static NamedObject REGCEAU_port_name;
    private static NamedObject REGCEBL_port_name;
    private static NamedObject REGCEBU_port_name;
    private static NamedObject REGCLKAL_port_name;
    private static NamedObject REGCLKAU_port_name;
    private static NamedObject REGCLKBL_port_name;
    private static NamedObject REGCLKBU_port_name;
    private static NamedObject SSRAL_port_name;
    private static NamedObject SSRAU_port_name;
    private static NamedObject SSRBL_port_name;
    private static NamedObject SSRBU_port_name;
    private static NamedObject WEAL_port_name;
    private static NamedObject WEAU_port_name;
    private static NamedObject WEBL_port_name;
    private static NamedObject WEBU_port_name;
    private static NamedObject ADDRAWRADDR_port_name;
    private static NamedObject ADDRBRDADDR_port_name;
    private static NamedObject CLKAWRCLK_port_name;
    private static NamedObject CLKBRDCLK_port_name;
    private static NamedObject ENAWREN_port_name;
    private static NamedObject ENBRDEN_port_name;
    private static NamedObject REGCEBREGCE_port_name;
    private static NamedObject RSTBRST_port_name;
    private static NamedObject WEAWEL_port_name;
    private static NamedObject WEBWEU_port_name;
    private static NamedObject A7_port_name;
    private static NamedObject CSOB_port_name;
    private static NamedObject DONE_port_name;
    private static NamedObject INITB_port_name;
    private static NamedObject CCLK_port_name;
    private static NamedObject PROGB_port_name;
    private static NamedObject DCMLOCK_port_name;
    private static NamedObject MISO_port_name;
    private static NamedObject MOSI_port_name;
    private static NamedObject Q15_port_name;
    private static NamedObject Q31_port_name;
    private static NamedObject GSROUT_port_name;
    private static NamedObject GSRIN_port_name;
    private static NamedObject GTSOUT_port_name;
    private static NamedObject GTSIN_port_name;
    private static NamedObject EOSOUT_port_name;
    private static NamedObject USRCCLKOIN_port_name;
    private static NamedObject USRCCLKTSIN_port_name;
    private static NamedObject USRDONEOIN_port_name;
    private static NamedObject USRDONETSIN_port_name;
    private static NamedObject CFGCLK_port_name;
    private static NamedObject CFGMCLK_port_name;
    private static NamedObject EOS_port_name;
    private static NamedObject PREQ_port_name;
    private static NamedObject GSR_port_name;
    private static NamedObject GTS_port_name;
    private static NamedObject PACK_port_name;
    private static NamedObject USRCCLKO_port_name;
    private static NamedObject USRCCLKTS_port_name;
    private static NamedObject USRDONEO_port_name;
    private static NamedObject USRDONETS_port_name;
    private static NamedObject MBT_port_name;
    private static NamedObject DINSPI_port_name;
    private static NamedObject TCKSPI_port_name;
    private static NamedObject SREQ_port_name;
    private static NamedObject SACK_port_name;
    private static NamedObject ALM_port_name;
    private static NamedObject CHANNEL_port_name;
    private static NamedObject EOC_port_name;
    private static NamedObject JTAGBUSY_port_name;
    private static NamedObject JTAGLOCKED_port_name;
    private static NamedObject JTAGMODIFIED_port_name;
    private static NamedObject OT_port_name;
    private static NamedObject CONVST_port_name;
    private static NamedObject CONVSTCLK_port_name;
    private static NamedObject VAUXN_port_name;
    private static NamedObject VAUXP_port_name;
    private static NamedObject VN_port_name;
    private static NamedObject VP_port_name;
    private static NamedObject EMAC0PHYTXGMIIMIICLKOUT_port_name;
    private static NamedObject EMAC0SPEEDIS10100_port_name;
    private static NamedObject EMAC1PHYTXGMIIMIICLKOUT_port_name;
    private static NamedObject EMAC1SPEEDIS10100_port_name;
    private static NamedObject PHYEMAC0TXGMIIMIICLKIN_port_name;
    private static NamedObject PHYEMAC1TXGMIIMIICLKIN_port_name;
    private static NamedObject EMACCLIENTANINTERRUPT_port_name;
    private static NamedObject EMACCLIENTRXBADFRAME_port_name;
    private static NamedObject EMACCLIENTRXCLIENTCLKOUT_port_name;
    private static NamedObject EMACCLIENTRXD_port_name;
    private static NamedObject EMACCLIENTRXDVLD_port_name;
    private static NamedObject EMACCLIENTRXDVLDMSW_port_name;
    private static NamedObject EMACCLIENTRXFRAMEDROP_port_name;
    private static NamedObject EMACCLIENTRXGOODFRAME_port_name;
    private static NamedObject EMACCLIENTRXSTATS_port_name;
    private static NamedObject EMACCLIENTRXSTATSBYTEVLD_port_name;
    private static NamedObject EMACCLIENTRXSTATSVLD_port_name;
    private static NamedObject EMACCLIENTTXACK_port_name;
    private static NamedObject EMACCLIENTTXCLIENTCLKOUT_port_name;
    private static NamedObject EMACCLIENTTXCOLLISION_port_name;
    private static NamedObject EMACCLIENTTXRETRANSMIT_port_name;
    private static NamedObject EMACCLIENTTXSTATS_port_name;
    private static NamedObject EMACCLIENTTXSTATSBYTEVLD_port_name;
    private static NamedObject EMACCLIENTTXSTATSVLD_port_name;
    private static NamedObject EMACPHYENCOMMAALIGN_port_name;
    private static NamedObject EMACPHYLOOPBACKMSB_port_name;
    private static NamedObject EMACPHYMCLKOUT_port_name;
    private static NamedObject EMACPHYMDOUT_port_name;
    private static NamedObject EMACPHYMDTRI_port_name;
    private static NamedObject EMACPHYMGTRXRESET_port_name;
    private static NamedObject EMACPHYMGTTXRESET_port_name;
    private static NamedObject EMACPHYPOWERDOWN_port_name;
    private static NamedObject EMACPHYSYNCACQSTATUS_port_name;
    private static NamedObject EMACPHYTXCHARDISPMODE_port_name;
    private static NamedObject EMACPHYTXCHARDISPVAL_port_name;
    private static NamedObject EMACPHYTXCHARISK_port_name;
    private static NamedObject EMACPHYTXCLK_port_name;
    private static NamedObject EMACPHYTXD_port_name;
    private static NamedObject EMACPHYTXEN_port_name;
    private static NamedObject EMACPHYTXER_port_name;
    private static NamedObject EMACPHYTXGMIIMIICLKOUT_port_name;
    private static NamedObject EMACSPEEDIS10100_port_name;
    private static NamedObject CLIENTEMACDCMLOCKED_port_name;
    private static NamedObject CLIENTEMACPAUSEREQ_port_name;
    private static NamedObject CLIENTEMACPAUSEVAL_port_name;
    private static NamedObject CLIENTEMACRXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMACTXCLIENTCLKIN_port_name;
    private static NamedObject CLIENTEMACTXD_port_name;
    private static NamedObject CLIENTEMACTXDVLD_port_name;
    private static NamedObject CLIENTEMACTXDVLDMSW_port_name;
    private static NamedObject CLIENTEMACTXFIRSTBYTE_port_name;
    private static NamedObject CLIENTEMACTXIFGDELAY_port_name;
    private static NamedObject CLIENTEMACTXUNDERRUN_port_name;
    private static NamedObject PHYEMACCOL_port_name;
    private static NamedObject PHYEMACCRS_port_name;
    private static NamedObject PHYEMACGTXCLK_port_name;
    private static NamedObject PHYEMACMCLKIN_port_name;
    private static NamedObject PHYEMACMDIN_port_name;
    private static NamedObject PHYEMACMIITXCLK_port_name;
    private static NamedObject PHYEMACPHYAD_port_name;
    private static NamedObject PHYEMACRXBUFSTATUS_port_name;
    private static NamedObject PHYEMACRXCHARISCOMMA_port_name;
    private static NamedObject PHYEMACRXCHARISK_port_name;
    private static NamedObject PHYEMACRXCLK_port_name;
    private static NamedObject PHYEMACRXCLKCORCNT_port_name;
    private static NamedObject PHYEMACRXD_port_name;
    private static NamedObject PHYEMACRXDISPERR_port_name;
    private static NamedObject PHYEMACRXDV_port_name;
    private static NamedObject PHYEMACRXER_port_name;
    private static NamedObject PHYEMACRXNOTINTABLE_port_name;
    private static NamedObject PHYEMACRXRUNDISP_port_name;
    private static NamedObject PHYEMACSIGNALDET_port_name;
    private static NamedObject PHYEMACTXBUFERR_port_name;
    private static NamedObject PHYEMACTXGMIIMIICLKIN_port_name;
    private static NamedObject DATA_port_name;
    private static NamedObject DATAVALID_port_name;
    private static NamedObject MUXADDR_port_name;
    private static NamedObject LI_port_name;
    private static NamedObject DLYFABRIC_port_name;
    private static NamedObject DLYIFF_port_name;
    private static NamedObject DLYIN_port_name;
    private static NamedObject DDR_CLK_OUT_port_name;
    private static NamedObject DIV2_CLK_OUT_port_name;
    private static NamedObject DIV4_CLK_OUT_port_name;
    private static NamedObject DIVCLK_OUT_port_name;
    private static NamedObject DQSSN_port_name;
    private static NamedObject DQSSP_port_name;
    private static NamedObject PDOUT_port_name;
    private static NamedObject RIU2CLB_RD_DATA_port_name;
    private static NamedObject RIU2CLB_RD_VALID_port_name;
    private static NamedObject CFG_RESET_port_name;
    private static NamedObject CLB2RIU_ADDR_port_name;
    private static NamedObject CLB2RIU_BYTESLICE_SEL_port_name;
    private static NamedObject CLB2RIU_WR_DATA_port_name;
    private static NamedObject CLB2RIU_WR_EN_port_name;
    private static NamedObject CNTVALUEINM_port_name;
    private static NamedObject CNTVALUEINSP_port_name;
    private static NamedObject DQS_port_name;
    private static NamedObject PLL_CLK_IN_port_name;
    private static NamedObject XOROUT_port_name;
    private static NamedObject DOUTP_port_name;
    private static NamedObject PROGEMPTY_port_name;
    private static NamedObject PROGFULL_port_name;
    private static NamedObject RDRSTBUSY_port_name;
    private static NamedObject WRRSTBUSY_port_name;
    private static NamedObject DINP_port_name;
    private static NamedObject CASDOUT_port_name;
    private static NamedObject CASDOUTP_port_name;
    private static NamedObject CASNXTEMPTY_port_name;
    private static NamedObject CASPRVRDEN_port_name;
    private static NamedObject CASDBITERR_port_name;
    private static NamedObject CASDIN_port_name;
    private static NamedObject CASDINP_port_name;
    private static NamedObject CASNXTRDEN_port_name;
    private static NamedObject CASPRVEMPTY_port_name;
    private static NamedObject CASSBITERR_port_name;
    private static NamedObject RXDFEAGCCTRL_port_name;
    private static NamedObject CASC_OUT_port_name;
    private static NamedObject CASC_IN_port_name;
    private static NamedObject CASC_RETURN_port_name;
    private static NamedObject LOAD_port_name;
    private static NamedObject CLK_B_port_name;
    private static NamedObject CDDCDONE_port_name;
    private static NamedObject CDDCREQ_port_name;
    private static NamedObject DOE_port_name;
    private static NamedObject DOF_port_name;
    private static NamedObject DOG_port_name;
    private static NamedObject DOH_port_name;
    private static NamedObject ADDRE_port_name;
    private static NamedObject ADDRF_port_name;
    private static NamedObject ADDRG_port_name;
    private static NamedObject ADDRH_port_name;
    private static NamedObject DIE_port_name;
    private static NamedObject DIF_port_name;
    private static NamedObject DIG_port_name;
    private static NamedObject DIH_port_name;
    private static NamedObject CASDOUTA_port_name;
    private static NamedObject CASDOUTB_port_name;
    private static NamedObject CASDOUTPA_port_name;
    private static NamedObject CASDOUTPB_port_name;
    private static NamedObject DOUTADOUT_port_name;
    private static NamedObject DOUTBDOUT_port_name;
    private static NamedObject DOUTPADOUTP_port_name;
    private static NamedObject DOUTPBDOUTP_port_name;
    private static NamedObject ADDRENA_port_name;
    private static NamedObject ADDRENB_port_name;
    private static NamedObject CASDINA_port_name;
    private static NamedObject CASDINB_port_name;
    private static NamedObject CASDINPA_port_name;
    private static NamedObject CASDINPB_port_name;
    private static NamedObject CASSELDA_port_name;
    private static NamedObject CASSELDB_port_name;
    private static NamedObject CASSELPIPEDA_port_name;
    private static NamedObject CASSELPIPEDB_port_name;
    private static NamedObject DINADIN_port_name;
    private static NamedObject DINBDIN_port_name;
    private static NamedObject DINPADINP_port_name;
    private static NamedObject DINPBDINP_port_name;
    private static NamedObject SLEEP_port_name;
    private static NamedObject CLK_OUT_port_name;
    private static NamedObject CLK_C_port_name;
    private static NamedObject CLK_C_B_port_name;
    private static NamedObject DATAIN1_port_name;
    private static NamedObject NCLK_port_name;
    private static NamedObject PCLK_port_name;
    private static NamedObject SET_port_name;
    private static NamedObject DTS_port_name;
    private static NamedObject FCSBO_port_name;
    private static NamedObject FCSBTS_port_name;
    private static NamedObject CLKOUTXIPHY_port_name;
    private static NamedObject CLKOUTXIPHYEN_port_name;
    private static NamedObject T_OUT_port_name;
    private static NamedObject DDR_CLK_port_name;
    private static NamedObject DIV2_CLK_port_name;
    private static NamedObject DIV4_CLK_port_name;
    private static NamedObject TBYTE_IN_port_name;

    static {
        try {
            EdifEnvironment env = new EdifEnvironment("Xilinx");
            library = new EdifLibrary(env.getLibraryManager(), "Xilinx", false);
        } catch (EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate Xilinx primitive library");
        } catch (InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name");
        }
        _initNamedObjects();
        _initAND2();
        _initAND2B1();
        _initAND2B1L();
        _initAND2B2();
        _initAND3();
        _initAND3B1();
        _initAND3B2();
        _initAND3B3();
        _initAND4();
        _initAND4B1();
        _initAND4B2();
        _initAND4B3();
        _initAND4B4();
        _initAND5();
        _initAND5B1();
        _initAND5B2();
        _initAND5B3();
        _initAND5B4();
        _initAND5B5();
        _initAND6();
        _initAND7();
        _initAND8();
        _initAUTOBUF();
        _initBSCANE2();
        _initBSCAN_FPGACORE();
        _initBSCAN_SPARTAN3();
        _initBSCAN_SPARTAN3A();
        _initBSCAN_SPARTAN6();
        _initBSCAN_VIRTEX4();
        _initBSCAN_VIRTEX5();
        _initBSCAN_VIRTEX6();
        _initBUF();
        _initBUFCF();
        _initBUFE();
        _initBUFFOE();
        _initBUFG();
        _initBUFGCE();
        _initBUFGCE_1();
        _initBUFGCTRL();
        _initBUFGDLL();
        _initBUFGMUX();
        _initBUFGMUX_1();
        _initBUFGMUX_CTRL();
        _initBUFGMUX_VIRTEX4();
        _initBUFGP();
        _initBUFGSR();
        _initBUFGTS();
        _initBUFG_LB();
        _initBUFH();
        _initBUFHCE();
        _initBUFIO();
        _initBUFIO2();
        _initBUFIO2FB();
        _initBUFIO2_2CLK();
        _initBUFIODQS();
        _initBUFMR();
        _initBUFMRCE();
        _initBUFPLL();
        _initBUFPLL_MCB();
        _initBUFR();
        _initBUFT();
        _initCAPTUREE2();
        _initCAPTURE_FPGACORE();
        _initCAPTURE_SPARTAN3();
        _initCAPTURE_SPARTAN3A();
        _initCAPTURE_VIRTEX4();
        _initCAPTURE_VIRTEX5();
        _initCAPTURE_VIRTEX6();
        _initCARRY4();
        _initCFGLUT5();
        _initCLKDLL();
        _initCLKDLLE();
        _initCLKDLLHF();
        _initCLK_DIV10();
        _initCLK_DIV10R();
        _initCLK_DIV10RSD();
        _initCLK_DIV10SD();
        _initCLK_DIV12();
        _initCLK_DIV12R();
        _initCLK_DIV12RSD();
        _initCLK_DIV12SD();
        _initCLK_DIV14();
        _initCLK_DIV14R();
        _initCLK_DIV14RSD();
        _initCLK_DIV14SD();
        _initCLK_DIV16();
        _initCLK_DIV16R();
        _initCLK_DIV16RSD();
        _initCLK_DIV16SD();
        _initCLK_DIV2();
        _initCLK_DIV2R();
        _initCLK_DIV2RSD();
        _initCLK_DIV2SD();
        _initCLK_DIV4();
        _initCLK_DIV4R();
        _initCLK_DIV4RSD();
        _initCLK_DIV4SD();
        _initCLK_DIV6();
        _initCLK_DIV6R();
        _initCLK_DIV6RSD();
        _initCLK_DIV6SD();
        _initCLK_DIV8();
        _initCLK_DIV8R();
        _initCLK_DIV8RSD();
        _initCLK_DIV8SD();
        _initCONFIG();
        _initCRC32();
        _initCRC64();
        _initDCIRESET();
        _initDCM();
        _initDCM_ADV();
        _initDCM_BASE();
        _initDCM_CLKGEN();
        _initDCM_PS();
        _initDCM_SP();
        _initDNA_PORT();
        _initDSP48();
        _initDSP48A();
        _initDSP48A1();
        _initDSP48E();
        _initDSP48E1();
        _initEFUSE_USR();
        _initEMAC();
        _initFD();
        _initFDC();
        _initFDCE();
        _initFDCE_1();
        _initFDCP();
        _initFDCPE();
        _initFDCPE_1();
        _initFDCP_1();
        _initFDC_1();
        _initFDD();
        _initFDDC();
        _initFDDCE();
        _initFDDCP();
        _initFDDCPE();
        _initFDDP();
        _initFDDPE();
        _initFDDRCPE();
        _initFDDRRSE();
        _initFDE();
        _initFDE_1();
        _initFDP();
        _initFDPE();
        _initFDPE_1();
        _initFDP_1();
        _initFDR();
        _initFDRE();
        _initFDRE_1();
        _initFDRS();
        _initFDRSE();
        _initFDRSE_1();
        _initFDRS_1();
        _initFDR_1();
        _initFDS();
        _initFDSE();
        _initFDSE_1();
        _initFDS_1();
        _initFD_1();
        _initFIFO16();
        _initFIFO18();
        _initFIFO18E1();
        _initFIFO18_36();
        _initFIFO36();
        _initFIFO36E1();
        _initFIFO36_72();
        _initFIFO36_72_EXP();
        _initFIFO36_EXP();
        _initFMAP();
        _initFRAME_ECCE2();
        _initFRAME_ECC_VIRTEX4();
        _initFRAME_ECC_VIRTEX5();
        _initFRAME_ECC_VIRTEX6();
        _initFTC();
        _initFTCP();
        _initFTP();
        _initGND();
        _initGT11();
        _initGT11CLK();
        _initGT11CLK_MGT();
        _initGT11_CUSTOM();
        _initGT11_DUAL();
        _initGTHE1_QUAD();
        _initGTHE2_CHANNEL();
        _initGTHE2_COMMON();
        _initGTPA1_DUAL();
        _initGTPE2_CHANNEL();
        _initGTPE2_COMMON();
        _initGTP_DUAL();
        _initGTXE1();
        _initGTXE2_CHANNEL();
        _initGTXE2_COMMON();
        _initGTX_DUAL();
        _initIBUF();
        _initIBUFDS();
        _initIBUFDS_BLVDS_25();
        _initIBUFDS_DIFF_OUT();
        _initIBUFDS_DIFF_OUT_IBUFDISABLE();
        _initIBUFDS_DIFF_OUT_INTERMDISABLE();
        _initIBUFDS_DLY_ADJ();
        _initIBUFDS_GTE2();
        _initIBUFDS_GTHE1();
        _initIBUFDS_GTXE1();
        _initIBUFDS_IBUFDISABLE();
        _initIBUFDS_INTERMDISABLE();
        _initIBUFDS_LDT_25();
        _initIBUFDS_LVDSEXT_25();
        _initIBUFDS_LVDSEXT_25_DCI();
        _initIBUFDS_LVDSEXT_33();
        _initIBUFDS_LVDSEXT_33_DCI();
        _initIBUFDS_LVDS_25();
        _initIBUFDS_LVDS_25_DCI();
        _initIBUFDS_LVDS_33();
        _initIBUFDS_LVDS_33_DCI();
        _initIBUFDS_LVPECL_25();
        _initIBUFDS_LVPECL_33();
        _initIBUFDS_ULVDS_25();
        _initIBUFG();
        _initIBUFGDS();
        _initIBUFGDS_BLVDS_25();
        _initIBUFGDS_DIFF_OUT();
        _initIBUFGDS_LDT_25();
        _initIBUFGDS_LVDSEXT_25();
        _initIBUFGDS_LVDSEXT_25_DCI();
        _initIBUFGDS_LVDSEXT_33();
        _initIBUFGDS_LVDSEXT_33_DCI();
        _initIBUFGDS_LVDS_25();
        _initIBUFGDS_LVDS_25_DCI();
        _initIBUFGDS_LVDS_33();
        _initIBUFGDS_LVDS_33_DCI();
        _initIBUFGDS_LVPECL_25();
        _initIBUFGDS_LVPECL_33();
        _initIBUFGDS_ULVDS_25();
        _initIBUFG_AGP();
        _initIBUFG_CTT();
        _initIBUFG_GTL();
        _initIBUFG_GTLP();
        _initIBUFG_GTLP_DCI();
        _initIBUFG_GTL_DCI();
        _initIBUFG_HSTL_I();
        _initIBUFG_HSTL_II();
        _initIBUFG_HSTL_III();
        _initIBUFG_HSTL_III_18();
        _initIBUFG_HSTL_III_DCI();
        _initIBUFG_HSTL_III_DCI_18();
        _initIBUFG_HSTL_II_18();
        _initIBUFG_HSTL_II_DCI();
        _initIBUFG_HSTL_II_DCI_18();
        _initIBUFG_HSTL_IV();
        _initIBUFG_HSTL_IV_18();
        _initIBUFG_HSTL_IV_DCI();
        _initIBUFG_HSTL_IV_DCI_18();
        _initIBUFG_HSTL_I_18();
        _initIBUFG_HSTL_I_DCI();
        _initIBUFG_HSTL_I_DCI_18();
        _initIBUFG_LVCMOS12();
        _initIBUFG_LVCMOS15();
        _initIBUFG_LVCMOS18();
        _initIBUFG_LVCMOS2();
        _initIBUFG_LVCMOS25();
        _initIBUFG_LVCMOS33();
        _initIBUFG_LVDCI_15();
        _initIBUFG_LVDCI_18();
        _initIBUFG_LVDCI_25();
        _initIBUFG_LVDCI_33();
        _initIBUFG_LVDCI_DV2_15();
        _initIBUFG_LVDCI_DV2_18();
        _initIBUFG_LVDCI_DV2_25();
        _initIBUFG_LVDCI_DV2_33();
        _initIBUFG_LVDS();
        _initIBUFG_LVPECL();
        _initIBUFG_LVTTL();
        _initIBUFG_PCI33_3();
        _initIBUFG_PCI33_5();
        _initIBUFG_PCI66_3();
        _initIBUFG_PCIX();
        _initIBUFG_PCIX66_3();
        _initIBUFG_SSTL18_I();
        _initIBUFG_SSTL18_II();
        _initIBUFG_SSTL18_II_DCI();
        _initIBUFG_SSTL18_I_DCI();
        _initIBUFG_SSTL2_I();
        _initIBUFG_SSTL2_II();
        _initIBUFG_SSTL2_II_DCI();
        _initIBUFG_SSTL2_I_DCI();
        _initIBUFG_SSTL3_I();
        _initIBUFG_SSTL3_II();
        _initIBUFG_SSTL3_II_DCI();
        _initIBUFG_SSTL3_I_DCI();
        _initIBUF_AGP();
        _initIBUF_CTT();
        _initIBUF_DLY_ADJ();
        _initIBUF_GTL();
        _initIBUF_GTLP();
        _initIBUF_GTLP_DCI();
        _initIBUF_GTL_DCI();
        _initIBUF_HSTL_I();
        _initIBUF_HSTL_II();
        _initIBUF_HSTL_III();
        _initIBUF_HSTL_III_18();
        _initIBUF_HSTL_III_DCI();
        _initIBUF_HSTL_III_DCI_18();
        _initIBUF_HSTL_II_18();
        _initIBUF_HSTL_II_DCI();
        _initIBUF_HSTL_II_DCI_18();
        _initIBUF_HSTL_IV();
        _initIBUF_HSTL_IV_18();
        _initIBUF_HSTL_IV_DCI();
        _initIBUF_HSTL_IV_DCI_18();
        _initIBUF_HSTL_I_18();
        _initIBUF_HSTL_I_DCI();
        _initIBUF_HSTL_I_DCI_18();
        _initIBUF_IBUFDISABLE();
        _initIBUF_INTERMDISABLE();
        _initIBUF_LVCMOS12();
        _initIBUF_LVCMOS15();
        _initIBUF_LVCMOS18();
        _initIBUF_LVCMOS2();
        _initIBUF_LVCMOS25();
        _initIBUF_LVCMOS33();
        _initIBUF_LVDCI_15();
        _initIBUF_LVDCI_18();
        _initIBUF_LVDCI_25();
        _initIBUF_LVDCI_33();
        _initIBUF_LVDCI_DV2_15();
        _initIBUF_LVDCI_DV2_18();
        _initIBUF_LVDCI_DV2_25();
        _initIBUF_LVDCI_DV2_33();
        _initIBUF_LVDS();
        _initIBUF_LVPECL();
        _initIBUF_LVTTL();
        _initIBUF_PCI33_3();
        _initIBUF_PCI33_5();
        _initIBUF_PCI66_3();
        _initIBUF_PCIX();
        _initIBUF_PCIX66_3();
        _initIBUF_SSTL18_I();
        _initIBUF_SSTL18_II();
        _initIBUF_SSTL18_II_DCI();
        _initIBUF_SSTL18_I_DCI();
        _initIBUF_SSTL2_I();
        _initIBUF_SSTL2_II();
        _initIBUF_SSTL2_II_DCI();
        _initIBUF_SSTL2_I_DCI();
        _initIBUF_SSTL3_I();
        _initIBUF_SSTL3_II();
        _initIBUF_SSTL3_II_DCI();
        _initIBUF_SSTL3_I_DCI();
        _initICAPE2();
        _initICAP_SPARTAN3A();
        _initICAP_SPARTAN6();
        _initICAP_VIRTEX4();
        _initICAP_VIRTEX5();
        _initICAP_VIRTEX6();
        _initIDDR();
        _initIDDR2();
        _initIDDR_2CLK();
        _initIDELAY();
        _initIDELAYCTRL();
        _initIDELAYE2();
        _initIDELAYE2_FINEDELAY();
        _initIFDDRCPE();
        _initIFDDRRSE();
        _initILD();
        _initINV();
        _initIN_FIFO();
        _initIOBUF();
        _initIOBUFDS();
        _initIOBUFDS_BLVDS_25();
        _initIOBUFDS_DCIEN();
        _initIOBUFDS_DIFF_OUT();
        _initIOBUFDS_DIFF_OUT_DCIEN();
        _initIOBUFDS_DIFF_OUT_INTERMDISABLE();
        _initIOBUFDS_INTERMDISABLE();
        _initIOBUFE();
        _initIOBUF_AGP();
        _initIOBUF_CTT();
        _initIOBUF_DCIEN();
        _initIOBUF_F_12();
        _initIOBUF_F_16();
        _initIOBUF_F_2();
        _initIOBUF_F_24();
        _initIOBUF_F_4();
        _initIOBUF_F_6();
        _initIOBUF_F_8();
        _initIOBUF_GTL();
        _initIOBUF_GTLP();
        _initIOBUF_GTLP_DCI();
        _initIOBUF_GTL_DCI();
        _initIOBUF_HSTL_I();
        _initIOBUF_HSTL_II();
        _initIOBUF_HSTL_III();
        _initIOBUF_HSTL_III_18();
        _initIOBUF_HSTL_II_18();
        _initIOBUF_HSTL_II_DCI();
        _initIOBUF_HSTL_II_DCI_18();
        _initIOBUF_HSTL_IV();
        _initIOBUF_HSTL_IV_18();
        _initIOBUF_HSTL_IV_DCI();
        _initIOBUF_HSTL_IV_DCI_18();
        _initIOBUF_HSTL_I_18();
        _initIOBUF_INTERMDISABLE();
        _initIOBUF_LVCMOS12();
        _initIOBUF_LVCMOS12_F_2();
        _initIOBUF_LVCMOS12_F_4();
        _initIOBUF_LVCMOS12_F_6();
        _initIOBUF_LVCMOS12_F_8();
        _initIOBUF_LVCMOS12_S_2();
        _initIOBUF_LVCMOS12_S_4();
        _initIOBUF_LVCMOS12_S_6();
        _initIOBUF_LVCMOS12_S_8();
        _initIOBUF_LVCMOS15();
        _initIOBUF_LVCMOS15_F_12();
        _initIOBUF_LVCMOS15_F_16();
        _initIOBUF_LVCMOS15_F_2();
        _initIOBUF_LVCMOS15_F_4();
        _initIOBUF_LVCMOS15_F_6();
        _initIOBUF_LVCMOS15_F_8();
        _initIOBUF_LVCMOS15_S_12();
        _initIOBUF_LVCMOS15_S_16();
        _initIOBUF_LVCMOS15_S_2();
        _initIOBUF_LVCMOS15_S_4();
        _initIOBUF_LVCMOS15_S_6();
        _initIOBUF_LVCMOS15_S_8();
        _initIOBUF_LVCMOS18();
        _initIOBUF_LVCMOS18_F_12();
        _initIOBUF_LVCMOS18_F_16();
        _initIOBUF_LVCMOS18_F_2();
        _initIOBUF_LVCMOS18_F_4();
        _initIOBUF_LVCMOS18_F_6();
        _initIOBUF_LVCMOS18_F_8();
        _initIOBUF_LVCMOS18_S_12();
        _initIOBUF_LVCMOS18_S_16();
        _initIOBUF_LVCMOS18_S_2();
        _initIOBUF_LVCMOS18_S_4();
        _initIOBUF_LVCMOS18_S_6();
        _initIOBUF_LVCMOS18_S_8();
        _initIOBUF_LVCMOS2();
        _initIOBUF_LVCMOS25();
        _initIOBUF_LVCMOS25_F_12();
        _initIOBUF_LVCMOS25_F_16();
        _initIOBUF_LVCMOS25_F_2();
        _initIOBUF_LVCMOS25_F_24();
        _initIOBUF_LVCMOS25_F_4();
        _initIOBUF_LVCMOS25_F_6();
        _initIOBUF_LVCMOS25_F_8();
        _initIOBUF_LVCMOS25_S_12();
        _initIOBUF_LVCMOS25_S_16();
        _initIOBUF_LVCMOS25_S_2();
        _initIOBUF_LVCMOS25_S_24();
        _initIOBUF_LVCMOS25_S_4();
        _initIOBUF_LVCMOS25_S_6();
        _initIOBUF_LVCMOS25_S_8();
        _initIOBUF_LVCMOS33();
        _initIOBUF_LVCMOS33_F_12();
        _initIOBUF_LVCMOS33_F_16();
        _initIOBUF_LVCMOS33_F_2();
        _initIOBUF_LVCMOS33_F_24();
        _initIOBUF_LVCMOS33_F_4();
        _initIOBUF_LVCMOS33_F_6();
        _initIOBUF_LVCMOS33_F_8();
        _initIOBUF_LVCMOS33_S_12();
        _initIOBUF_LVCMOS33_S_16();
        _initIOBUF_LVCMOS33_S_2();
        _initIOBUF_LVCMOS33_S_24();
        _initIOBUF_LVCMOS33_S_4();
        _initIOBUF_LVCMOS33_S_6();
        _initIOBUF_LVCMOS33_S_8();
        _initIOBUF_LVDCI_15();
        _initIOBUF_LVDCI_18();
        _initIOBUF_LVDCI_25();
        _initIOBUF_LVDCI_33();
        _initIOBUF_LVDCI_DV2_15();
        _initIOBUF_LVDCI_DV2_18();
        _initIOBUF_LVDCI_DV2_25();
        _initIOBUF_LVDCI_DV2_33();
        _initIOBUF_LVDS();
        _initIOBUF_LVPECL();
        _initIOBUF_LVTTL();
        _initIOBUF_LVTTL_F_12();
        _initIOBUF_LVTTL_F_16();
        _initIOBUF_LVTTL_F_2();
        _initIOBUF_LVTTL_F_24();
        _initIOBUF_LVTTL_F_4();
        _initIOBUF_LVTTL_F_6();
        _initIOBUF_LVTTL_F_8();
        _initIOBUF_LVTTL_S_12();
        _initIOBUF_LVTTL_S_16();
        _initIOBUF_LVTTL_S_2();
        _initIOBUF_LVTTL_S_24();
        _initIOBUF_LVTTL_S_4();
        _initIOBUF_LVTTL_S_6();
        _initIOBUF_LVTTL_S_8();
        _initIOBUF_PCI33_3();
        _initIOBUF_PCI33_5();
        _initIOBUF_PCI66_3();
        _initIOBUF_PCIX();
        _initIOBUF_PCIX66_3();
        _initIOBUF_SSTL18_I();
        _initIOBUF_SSTL18_II();
        _initIOBUF_SSTL18_II_DCI();
        _initIOBUF_SSTL2_I();
        _initIOBUF_SSTL2_II();
        _initIOBUF_SSTL2_II_DCI();
        _initIOBUF_SSTL3_I();
        _initIOBUF_SSTL3_II();
        _initIOBUF_SSTL3_II_DCI();
        _initIOBUF_S_12();
        _initIOBUF_S_16();
        _initIOBUF_S_2();
        _initIOBUF_S_24();
        _initIOBUF_S_4();
        _initIOBUF_S_6();
        _initIOBUF_S_8();
        _initIODELAY();
        _initIODELAY2();
        _initIODELAYE1();
        _initIODRP2();
        _initIODRP2_MCB();
        _initISERDES();
        _initISERDES2();
        _initISERDESE1();
        _initISERDESE2();
        _initISERDES_NODELAY();
        _initJTAGPPC();
        _initJTAGPPC440();
        _initJTAG_SIME2();
        _initJTAG_SIM_SPARTAN3A();
        _initJTAG_SIM_SPARTAN6();
        _initJTAG_SIM_VIRTEX4();
        _initJTAG_SIM_VIRTEX5();
        _initJTAG_SIM_VIRTEX6();
        _initKEEP();
        _initKEEPER();
        _initKEY_CLEAR();
        _initLD();
        _initLDC();
        _initLDCE();
        _initLDCE_1();
        _initLDCP();
        _initLDCPE();
        _initLDCPE_1();
        _initLDCP_1();
        _initLDC_1();
        _initLDE();
        _initLDE_1();
        _initLDG();
        _initLDP();
        _initLDPE();
        _initLDPE_1();
        _initLDP_1();
        _initLD_1();
        _initLUT1();
        _initLUT1_D();
        _initLUT1_L();
        _initLUT2();
        _initLUT2_D();
        _initLUT2_L();
        _initLUT3();
        _initLUT3_D();
        _initLUT3_L();
        _initLUT4();
        _initLUT4_D();
        _initLUT4_L();
        _initLUT5();
        _initLUT5_D();
        _initLUT5_L();
        _initLUT6();
        _initLUT6_2();
        _initLUT6_D();
        _initLUT6_L();
        _initMCB();
        _initMERGE();
        _initMIN_OFF();
        _initMMCME2_ADV();
        _initMMCME2_BASE();
        _initMMCM_ADV();
        _initMMCM_BASE();
        _initMULT18X18();
        _initMULT18X18S();
        _initMULT18X18SIO();
        _initMULT_AND();
        _initMUXCY();
        _initMUXCY_D();
        _initMUXCY_L();
        _initMUXF5();
        _initMUXF5_D();
        _initMUXF5_L();
        _initMUXF6();
        _initMUXF6_D();
        _initMUXF6_L();
        _initMUXF7();
        _initMUXF7_D();
        _initMUXF7_L();
        _initMUXF8();
        _initMUXF8_D();
        _initMUXF8_L();
        _initNAND2();
        _initNAND2B1();
        _initNAND2B2();
        _initNAND3();
        _initNAND3B1();
        _initNAND3B2();
        _initNAND3B3();
        _initNAND4();
        _initNAND4B1();
        _initNAND4B2();
        _initNAND4B3();
        _initNAND4B4();
        _initNAND5();
        _initNAND5B1();
        _initNAND5B2();
        _initNAND5B3();
        _initNAND5B4();
        _initNAND5B5();
        _initNOR2();
        _initNOR2B1();
        _initNOR2B2();
        _initNOR3();
        _initNOR3B1();
        _initNOR3B2();
        _initNOR3B3();
        _initNOR4();
        _initNOR4B1();
        _initNOR4B2();
        _initNOR4B3();
        _initNOR4B4();
        _initNOR5();
        _initNOR5B1();
        _initNOR5B2();
        _initNOR5B3();
        _initNOR5B4();
        _initNOR5B5();
        _initOBUF();
        _initOBUFDS();
        _initOBUFDS_BLVDS_25();
        _initOBUFDS_LDT_25();
        _initOBUFDS_LVDSEXT_25();
        _initOBUFDS_LVDSEXT_33();
        _initOBUFDS_LVDS_25();
        _initOBUFDS_LVDS_33();
        _initOBUFDS_LVPECL_25();
        _initOBUFDS_LVPECL_33();
        _initOBUFDS_ULVDS_25();
        _initOBUFE();
        _initOBUFT();
        _initOBUFTDS();
        _initOBUFTDS_BLVDS_25();
        _initOBUFTDS_LDT_25();
        _initOBUFTDS_LVDSEXT_25();
        _initOBUFTDS_LVDSEXT_33();
        _initOBUFTDS_LVDS_25();
        _initOBUFTDS_LVDS_33();
        _initOBUFTDS_LVPECL_25();
        _initOBUFTDS_LVPECL_33();
        _initOBUFTDS_ULVDS_25();
        _initOBUFT_AGP();
        _initOBUFT_CTT();
        _initOBUFT_F_12();
        _initOBUFT_F_16();
        _initOBUFT_F_2();
        _initOBUFT_F_24();
        _initOBUFT_F_4();
        _initOBUFT_F_6();
        _initOBUFT_F_8();
        _initOBUFT_GTL();
        _initOBUFT_GTLP();
        _initOBUFT_GTLP_DCI();
        _initOBUFT_GTL_DCI();
        _initOBUFT_HSTL_I();
        _initOBUFT_HSTL_II();
        _initOBUFT_HSTL_III();
        _initOBUFT_HSTL_III_18();
        _initOBUFT_HSTL_III_DCI();
        _initOBUFT_HSTL_III_DCI_18();
        _initOBUFT_HSTL_II_18();
        _initOBUFT_HSTL_II_DCI();
        _initOBUFT_HSTL_II_DCI_18();
        _initOBUFT_HSTL_IV();
        _initOBUFT_HSTL_IV_18();
        _initOBUFT_HSTL_IV_DCI();
        _initOBUFT_HSTL_IV_DCI_18();
        _initOBUFT_HSTL_I_18();
        _initOBUFT_HSTL_I_DCI();
        _initOBUFT_HSTL_I_DCI_18();
        _initOBUFT_LVCMOS12();
        _initOBUFT_LVCMOS12_F_2();
        _initOBUFT_LVCMOS12_F_4();
        _initOBUFT_LVCMOS12_F_6();
        _initOBUFT_LVCMOS12_F_8();
        _initOBUFT_LVCMOS12_S_2();
        _initOBUFT_LVCMOS12_S_4();
        _initOBUFT_LVCMOS12_S_6();
        _initOBUFT_LVCMOS12_S_8();
        _initOBUFT_LVCMOS15();
        _initOBUFT_LVCMOS15_F_12();
        _initOBUFT_LVCMOS15_F_16();
        _initOBUFT_LVCMOS15_F_2();
        _initOBUFT_LVCMOS15_F_4();
        _initOBUFT_LVCMOS15_F_6();
        _initOBUFT_LVCMOS15_F_8();
        _initOBUFT_LVCMOS15_S_12();
        _initOBUFT_LVCMOS15_S_16();
        _initOBUFT_LVCMOS15_S_2();
        _initOBUFT_LVCMOS15_S_4();
        _initOBUFT_LVCMOS15_S_6();
        _initOBUFT_LVCMOS15_S_8();
        _initOBUFT_LVCMOS18();
        _initOBUFT_LVCMOS18_F_12();
        _initOBUFT_LVCMOS18_F_16();
        _initOBUFT_LVCMOS18_F_2();
        _initOBUFT_LVCMOS18_F_4();
        _initOBUFT_LVCMOS18_F_6();
        _initOBUFT_LVCMOS18_F_8();
        _initOBUFT_LVCMOS18_S_12();
        _initOBUFT_LVCMOS18_S_16();
        _initOBUFT_LVCMOS18_S_2();
        _initOBUFT_LVCMOS18_S_4();
        _initOBUFT_LVCMOS18_S_6();
        _initOBUFT_LVCMOS18_S_8();
        _initOBUFT_LVCMOS2();
        _initOBUFT_LVCMOS25();
        _initOBUFT_LVCMOS25_F_12();
        _initOBUFT_LVCMOS25_F_16();
        _initOBUFT_LVCMOS25_F_2();
        _initOBUFT_LVCMOS25_F_24();
        _initOBUFT_LVCMOS25_F_4();
        _initOBUFT_LVCMOS25_F_6();
        _initOBUFT_LVCMOS25_F_8();
        _initOBUFT_LVCMOS25_S_12();
        _initOBUFT_LVCMOS25_S_16();
        _initOBUFT_LVCMOS25_S_2();
        _initOBUFT_LVCMOS25_S_24();
        _initOBUFT_LVCMOS25_S_4();
        _initOBUFT_LVCMOS25_S_6();
        _initOBUFT_LVCMOS25_S_8();
        _initOBUFT_LVCMOS33();
        _initOBUFT_LVCMOS33_F_12();
        _initOBUFT_LVCMOS33_F_16();
        _initOBUFT_LVCMOS33_F_2();
        _initOBUFT_LVCMOS33_F_24();
        _initOBUFT_LVCMOS33_F_4();
        _initOBUFT_LVCMOS33_F_6();
        _initOBUFT_LVCMOS33_F_8();
        _initOBUFT_LVCMOS33_S_12();
        _initOBUFT_LVCMOS33_S_16();
        _initOBUFT_LVCMOS33_S_2();
        _initOBUFT_LVCMOS33_S_24();
        _initOBUFT_LVCMOS33_S_4();
        _initOBUFT_LVCMOS33_S_6();
        _initOBUFT_LVCMOS33_S_8();
        _initOBUFT_LVDCI_15();
        _initOBUFT_LVDCI_18();
        _initOBUFT_LVDCI_25();
        _initOBUFT_LVDCI_33();
        _initOBUFT_LVDCI_DV2_15();
        _initOBUFT_LVDCI_DV2_18();
        _initOBUFT_LVDCI_DV2_25();
        _initOBUFT_LVDCI_DV2_33();
        _initOBUFT_LVDS();
        _initOBUFT_LVPECL();
        _initOBUFT_LVTTL();
        _initOBUFT_LVTTL_F_12();
        _initOBUFT_LVTTL_F_16();
        _initOBUFT_LVTTL_F_2();
        _initOBUFT_LVTTL_F_24();
        _initOBUFT_LVTTL_F_4();
        _initOBUFT_LVTTL_F_6();
        _initOBUFT_LVTTL_F_8();
        _initOBUFT_LVTTL_S_12();
        _initOBUFT_LVTTL_S_16();
        _initOBUFT_LVTTL_S_2();
        _initOBUFT_LVTTL_S_24();
        _initOBUFT_LVTTL_S_4();
        _initOBUFT_LVTTL_S_6();
        _initOBUFT_LVTTL_S_8();
        _initOBUFT_PCI33_3();
        _initOBUFT_PCI33_5();
        _initOBUFT_PCI66_3();
        _initOBUFT_PCIX();
        _initOBUFT_PCIX66_3();
        _initOBUFT_SSTL18_I();
        _initOBUFT_SSTL18_II();
        _initOBUFT_SSTL18_II_DCI();
        _initOBUFT_SSTL18_I_DCI();
        _initOBUFT_SSTL2_I();
        _initOBUFT_SSTL2_II();
        _initOBUFT_SSTL2_II_DCI();
        _initOBUFT_SSTL2_I_DCI();
        _initOBUFT_SSTL3_I();
        _initOBUFT_SSTL3_II();
        _initOBUFT_SSTL3_II_DCI();
        _initOBUFT_SSTL3_I_DCI();
        _initOBUFT_S_12();
        _initOBUFT_S_16();
        _initOBUFT_S_2();
        _initOBUFT_S_24();
        _initOBUFT_S_4();
        _initOBUFT_S_6();
        _initOBUFT_S_8();
        _initOBUF_AGP();
        _initOBUF_CTT();
        _initOBUF_F_12();
        _initOBUF_F_16();
        _initOBUF_F_2();
        _initOBUF_F_24();
        _initOBUF_F_4();
        _initOBUF_F_6();
        _initOBUF_F_8();
        _initOBUF_GTL();
        _initOBUF_GTLP();
        _initOBUF_GTLP_DCI();
        _initOBUF_GTL_DCI();
        _initOBUF_HSTL_I();
        _initOBUF_HSTL_II();
        _initOBUF_HSTL_III();
        _initOBUF_HSTL_III_18();
        _initOBUF_HSTL_III_DCI();
        _initOBUF_HSTL_III_DCI_18();
        _initOBUF_HSTL_II_18();
        _initOBUF_HSTL_II_DCI();
        _initOBUF_HSTL_II_DCI_18();
        _initOBUF_HSTL_IV();
        _initOBUF_HSTL_IV_18();
        _initOBUF_HSTL_IV_DCI();
        _initOBUF_HSTL_IV_DCI_18();
        _initOBUF_HSTL_I_18();
        _initOBUF_HSTL_I_DCI();
        _initOBUF_HSTL_I_DCI_18();
        _initOBUF_LVCMOS12();
        _initOBUF_LVCMOS12_F_2();
        _initOBUF_LVCMOS12_F_4();
        _initOBUF_LVCMOS12_F_6();
        _initOBUF_LVCMOS12_F_8();
        _initOBUF_LVCMOS12_S_2();
        _initOBUF_LVCMOS12_S_4();
        _initOBUF_LVCMOS12_S_6();
        _initOBUF_LVCMOS12_S_8();
        _initOBUF_LVCMOS15();
        _initOBUF_LVCMOS15_F_12();
        _initOBUF_LVCMOS15_F_16();
        _initOBUF_LVCMOS15_F_2();
        _initOBUF_LVCMOS15_F_4();
        _initOBUF_LVCMOS15_F_6();
        _initOBUF_LVCMOS15_F_8();
        _initOBUF_LVCMOS15_S_12();
        _initOBUF_LVCMOS15_S_16();
        _initOBUF_LVCMOS15_S_2();
        _initOBUF_LVCMOS15_S_4();
        _initOBUF_LVCMOS15_S_6();
        _initOBUF_LVCMOS15_S_8();
        _initOBUF_LVCMOS18();
        _initOBUF_LVCMOS18_F_12();
        _initOBUF_LVCMOS18_F_16();
        _initOBUF_LVCMOS18_F_2();
        _initOBUF_LVCMOS18_F_4();
        _initOBUF_LVCMOS18_F_6();
        _initOBUF_LVCMOS18_F_8();
        _initOBUF_LVCMOS18_S_12();
        _initOBUF_LVCMOS18_S_16();
        _initOBUF_LVCMOS18_S_2();
        _initOBUF_LVCMOS18_S_4();
        _initOBUF_LVCMOS18_S_6();
        _initOBUF_LVCMOS18_S_8();
        _initOBUF_LVCMOS2();
        _initOBUF_LVCMOS25();
        _initOBUF_LVCMOS25_F_12();
        _initOBUF_LVCMOS25_F_16();
        _initOBUF_LVCMOS25_F_2();
        _initOBUF_LVCMOS25_F_24();
        _initOBUF_LVCMOS25_F_4();
        _initOBUF_LVCMOS25_F_6();
        _initOBUF_LVCMOS25_F_8();
        _initOBUF_LVCMOS25_S_12();
        _initOBUF_LVCMOS25_S_16();
        _initOBUF_LVCMOS25_S_2();
        _initOBUF_LVCMOS25_S_24();
        _initOBUF_LVCMOS25_S_4();
        _initOBUF_LVCMOS25_S_6();
        _initOBUF_LVCMOS25_S_8();
        _initOBUF_LVCMOS33();
        _initOBUF_LVCMOS33_F_12();
        _initOBUF_LVCMOS33_F_16();
        _initOBUF_LVCMOS33_F_2();
        _initOBUF_LVCMOS33_F_24();
        _initOBUF_LVCMOS33_F_4();
        _initOBUF_LVCMOS33_F_6();
        _initOBUF_LVCMOS33_F_8();
        _initOBUF_LVCMOS33_S_12();
        _initOBUF_LVCMOS33_S_16();
        _initOBUF_LVCMOS33_S_2();
        _initOBUF_LVCMOS33_S_24();
        _initOBUF_LVCMOS33_S_4();
        _initOBUF_LVCMOS33_S_6();
        _initOBUF_LVCMOS33_S_8();
        _initOBUF_LVDCI_15();
        _initOBUF_LVDCI_18();
        _initOBUF_LVDCI_25();
        _initOBUF_LVDCI_33();
        _initOBUF_LVDCI_DV2_15();
        _initOBUF_LVDCI_DV2_18();
        _initOBUF_LVDCI_DV2_25();
        _initOBUF_LVDCI_DV2_33();
        _initOBUF_LVDS();
        _initOBUF_LVPECL();
        _initOBUF_LVTTL();
        _initOBUF_LVTTL_F_12();
        _initOBUF_LVTTL_F_16();
        _initOBUF_LVTTL_F_2();
        _initOBUF_LVTTL_F_24();
        _initOBUF_LVTTL_F_4();
        _initOBUF_LVTTL_F_6();
        _initOBUF_LVTTL_F_8();
        _initOBUF_LVTTL_S_12();
        _initOBUF_LVTTL_S_16();
        _initOBUF_LVTTL_S_2();
        _initOBUF_LVTTL_S_24();
        _initOBUF_LVTTL_S_4();
        _initOBUF_LVTTL_S_6();
        _initOBUF_LVTTL_S_8();
        _initOBUF_PCI33_3();
        _initOBUF_PCI33_5();
        _initOBUF_PCI66_3();
        _initOBUF_PCIX();
        _initOBUF_PCIX66_3();
        _initOBUF_SSTL18_I();
        _initOBUF_SSTL18_II();
        _initOBUF_SSTL18_II_DCI();
        _initOBUF_SSTL18_I_DCI();
        _initOBUF_SSTL2_I();
        _initOBUF_SSTL2_II();
        _initOBUF_SSTL2_II_DCI();
        _initOBUF_SSTL2_I_DCI();
        _initOBUF_SSTL3_I();
        _initOBUF_SSTL3_II();
        _initOBUF_SSTL3_II_DCI();
        _initOBUF_SSTL3_I_DCI();
        _initOBUF_S_12();
        _initOBUF_S_16();
        _initOBUF_S_2();
        _initOBUF_S_24();
        _initOBUF_S_4();
        _initOBUF_S_6();
        _initOBUF_S_8();
        _initODDR();
        _initODDR2();
        _initODELAYE2();
        _initODELAYE2_FINEDELAY();
        _initOFDDRCPE();
        _initOFDDRRSE();
        _initOFDDRTCPE();
        _initOFDDRTRSE();
        _initOPT_OFF();
        _initOPT_UIM();
        _initOR2();
        _initOR2B1();
        _initOR2B2();
        _initOR2L();
        _initOR3();
        _initOR3B1();
        _initOR3B2();
        _initOR3B3();
        _initOR4();
        _initOR4B1();
        _initOR4B2();
        _initOR4B3();
        _initOR4B4();
        _initOR5();
        _initOR5B1();
        _initOR5B2();
        _initOR5B3();
        _initOR5B4();
        _initOR5B5();
        _initOR6();
        _initOR7();
        _initOR8();
        _initORCY();
        _initOSERDES();
        _initOSERDES2();
        _initOSERDESE1();
        _initOSERDESE2();
        _initOUT_FIFO();
        _initPCIE_2_0();
        _initPCIE_2_1();
        _initPCIE_3_0();
        _initPCIE_A1();
        _initPCIE_EP();
        _initPCIE_INTERNAL_1_1();
        _initPHASER_IN();
        _initPHASER_IN_PHY();
        _initPHASER_OUT();
        _initPHASER_OUT_PHY();
        _initPHASER_REF();
        _initPHY_CONTROL();
        _initPLLE2_ADV();
        _initPLLE2_BASE();
        _initPLL_ADV();
        _initPLL_BASE();
        _initPMCD();
        _initPOST_CRC_INTERNAL();
        _initPPC405_ADV();
        _initPPC440();
        _initPS7();
        _initPULLDOWN();
        _initPULLUP();
        _initRAM128X1D();
        _initRAM128X1S();
        _initRAM128X1S_1();
        _initRAM16X1D();
        _initRAM16X1D_1();
        _initRAM16X1S();
        _initRAM16X1S_1();
        _initRAM16X2S();
        _initRAM16X4S();
        _initRAM16X8S();
        _initRAM256X1S();
        _initRAM32M();
        _initRAM32X1D();
        _initRAM32X1D_1();
        _initRAM32X1S();
        _initRAM32X1S_1();
        _initRAM32X2S();
        _initRAM32X4S();
        _initRAM32X8S();
        _initRAM64M();
        _initRAM64X1D();
        _initRAM64X1D_1();
        _initRAM64X1S();
        _initRAM64X1S_1();
        _initRAM64X2S();
        _initRAMB16();
        _initRAMB16BWE();
        _initRAMB16BWER();
        _initRAMB16BWE_S18();
        _initRAMB16BWE_S18_S18();
        _initRAMB16BWE_S18_S9();
        _initRAMB16BWE_S36();
        _initRAMB16BWE_S36_S18();
        _initRAMB16BWE_S36_S36();
        _initRAMB16BWE_S36_S9();
        _initRAMB16_S1();
        _initRAMB16_S18();
        _initRAMB16_S18_S18();
        _initRAMB16_S18_S36();
        _initRAMB16_S1_S1();
        _initRAMB16_S1_S18();
        _initRAMB16_S1_S2();
        _initRAMB16_S1_S36();
        _initRAMB16_S1_S4();
        _initRAMB16_S1_S9();
        _initRAMB16_S2();
        _initRAMB16_S2_S18();
        _initRAMB16_S2_S2();
        _initRAMB16_S2_S36();
        _initRAMB16_S2_S4();
        _initRAMB16_S2_S9();
        _initRAMB16_S36();
        _initRAMB16_S36_S36();
        _initRAMB16_S4();
        _initRAMB16_S4_S18();
        _initRAMB16_S4_S36();
        _initRAMB16_S4_S4();
        _initRAMB16_S4_S9();
        _initRAMB16_S9();
        _initRAMB16_S9_S18();
        _initRAMB16_S9_S36();
        _initRAMB16_S9_S9();
        _initRAMB18();
        _initRAMB18E1();
        _initRAMB18SDP();
        _initRAMB32_S64_ECC();
        _initRAMB36();
        _initRAMB36E1();
        _initRAMB36SDP();
        _initRAMB36SDP_EXP();
        _initRAMB36_EXP();
        _initRAMB4_S1();
        _initRAMB4_S16();
        _initRAMB4_S16_S16();
        _initRAMB4_S1_S1();
        _initRAMB4_S1_S16();
        _initRAMB4_S1_S2();
        _initRAMB4_S1_S4();
        _initRAMB4_S1_S8();
        _initRAMB4_S2();
        _initRAMB4_S2_S16();
        _initRAMB4_S2_S2();
        _initRAMB4_S2_S4();
        _initRAMB4_S2_S8();
        _initRAMB4_S4();
        _initRAMB4_S4_S16();
        _initRAMB4_S4_S4();
        _initRAMB4_S4_S8();
        _initRAMB4_S8();
        _initRAMB4_S8_S16();
        _initRAMB4_S8_S8();
        _initRAMB8BWER();
        _initROC();
        _initROCBUF();
        _initROM128X1();
        _initROM16X1();
        _initROM256X1();
        _initROM32X1();
        _initROM64X1();
        _initSIM_CONFIGE2();
        _initSIM_CONFIG_S3A();
        _initSIM_CONFIG_S3A_SERIAL();
        _initSIM_CONFIG_S6();
        _initSIM_CONFIG_S6_SERIAL();
        _initSIM_CONFIG_V5();
        _initSIM_CONFIG_V5_SERIAL();
        _initSIM_CONFIG_V6();
        _initSIM_CONFIG_V6_SERIAL();
        _initSPI_ACCESS();
        _initSRL16();
        _initSRL16E();
        _initSRL16E_1();
        _initSRL16_1();
        _initSRLC16();
        _initSRLC16E();
        _initSRLC16E_1();
        _initSRLC16_1();
        _initSRLC32E();
        _initSTARTBUF_FPGACORE();
        _initSTARTBUF_SPARTAN2();
        _initSTARTBUF_SPARTAN3();
        _initSTARTBUF_VIRTEX();
        _initSTARTBUF_VIRTEX2();
        _initSTARTBUF_VIRTEX4();
        _initSTARTUPE2();
        _initSTARTUP_FPGACORE();
        _initSTARTUP_SPARTAN3();
        _initSTARTUP_SPARTAN3A();
        _initSTARTUP_SPARTAN3E();
        _initSTARTUP_SPARTAN6();
        _initSTARTUP_VIRTEX4();
        _initSTARTUP_VIRTEX5();
        _initSTARTUP_VIRTEX6();
        _initSUSPEND_SYNC();
        _initSYSMON();
        _initTBLOCK();
        _initTEMAC();
        _initTEMAC_SINGLE();
        _initTIMEGRP();
        _initTIMESPEC();
        _initTOC();
        _initTOCBUF();
        _initUSR_ACCESSE2();
        _initUSR_ACCESS_VIRTEX4();
        _initUSR_ACCESS_VIRTEX5();
        _initUSR_ACCESS_VIRTEX6();
        _initVCC();
        _initWIREAND();
        _initXADC();
        _initXNOR2();
        _initXNOR3();
        _initXNOR4();
        _initXNOR5();
        _initXOR2();
        _initXOR3();
        _initXOR4();
        _initXOR5();
        _initXORCY();
        _initXORCY_D();
        _initXORCY_L();
        _initZHOLD_DELAY();
        _initBITSLICE_CONTROL();
        _initBUFCE_LEAF();
        _initBUFCE_ROW();
        _initBUFGCE_DIV();
        _initCARRY8();
        _initDNA_PORTE3();
        _initDSP48E2();
        _initFIFO18E2();
        _initFIFO36E2();
        _initGTHE3_CHANNEL();
        _initGTHE3_COMMON();
        _initIBUFDS_GTE3();
        _initICAPE3();
        _initIDELAYE3();
        _initIN_FIFOE3();
        _initISERDESE3();
        _initMMCME3_ADV();
        _initMMCME3_BASE();
        _initMUXF9();
        _initODELAYE3();
        _initOSERDESE3();
        _initRAM256X1D();
        _initRAM32M16();
        _initRAM512X1S();
        _initRAM64M8();
        _initRAMB18E2();
        _initRAMB36E2();
        _initRX_BITSLICE();
        _initSTARTUPE3();
        _initSYSMON_AMS();
        _initTXPLL_ADV();
        _initTXPLL_BASE();
        _initTX_BITSLICE();
    }

    private static void _initNamedObjects() {
        try {
            O_port_name = new NamedObject("O");
            I0_port_name = new NamedObject("I0");
            I1_port_name = new NamedObject("I1");
            DI_port_name = new NamedObject("DI");
            SRI_port_name = new NamedObject("SRI");
            I2_port_name = new NamedObject("I2");
            I3_port_name = new NamedObject("I3");
            I4_port_name = new NamedObject("I4");
            I5_port_name = new NamedObject("I5");
            I6_port_name = new NamedObject("I6");
            I7_port_name = new NamedObject("I7");
            I_port_name = new NamedObject("I");
            CAPTURE_port_name = new NamedObject("CAPTURE");
            DRCK_port_name = new NamedObject("DRCK");
            RESET_port_name = new NamedObject("RESET");
            RUNTEST_port_name = new NamedObject("RUNTEST");
            SEL_port_name = new NamedObject("SEL");
            SHIFT_port_name = new NamedObject("SHIFT");
            TCK_port_name = new NamedObject("TCK");
            TDI_port_name = new NamedObject("TDI");
            TMS_port_name = new NamedObject("TMS");
            UPDATE_port_name = new NamedObject("UPDATE");
            TDO_port_name = new NamedObject("TDO");
            DRCK1_port_name = new NamedObject("DRCK1");
            DRCK2_port_name = new NamedObject("DRCK2");
            SEL1_port_name = new NamedObject("SEL1");
            SEL2_port_name = new NamedObject("SEL2");
            TDO1_port_name = new NamedObject("TDO1");
            TDO2_port_name = new NamedObject("TDO2");
            E_port_name = new NamedObject("E");
            CE_port_name = new NamedObject("CE");
            CE0_port_name = new NamedObject("CE0");
            CE1_port_name = new NamedObject("CE1");
            IGNORE0_port_name = new NamedObject("IGNORE0");
            IGNORE1_port_name = new NamedObject("IGNORE1");
            S0_port_name = new NamedObject("S0");
            S1_port_name = new NamedObject("S1");
            S_port_name = new NamedObject("S");
            CLKOUT_port_name = new NamedObject("CLKOUT");
            CLKIN_port_name = new NamedObject("CLKIN");
            DIVCLK_port_name = new NamedObject("DIVCLK");
            IOCLK_port_name = new NamedObject("IOCLK");
            SERDESSTROBE_port_name = new NamedObject("SERDESSTROBE");
            IB_port_name = new NamedObject("IB");
            DQSMASK_port_name = new NamedObject("DQSMASK");
            LOCK_port_name = new NamedObject("LOCK");
            GCLK_port_name = new NamedObject("GCLK");
            LOCKED_port_name = new NamedObject("LOCKED");
            PLLIN_port_name = new NamedObject("PLLIN");
            IOCLK0_port_name = new NamedObject("IOCLK0");
            IOCLK1_port_name = new NamedObject("IOCLK1");
            SERDESSTROBE0_port_name = new NamedObject("SERDESSTROBE0");
            SERDESSTROBE1_port_name = new NamedObject("SERDESSTROBE1");
            PLLIN0_port_name = new NamedObject("PLLIN0");
            PLLIN1_port_name = new NamedObject("PLLIN1");
            CLR_port_name = new NamedObject("CLR");
            T_port_name = new NamedObject("T");
            CAP_port_name = new NamedObject("CAP");
            CLK_port_name = new NamedObject("CLK");
            CO_port_name = new NamedObject("CO");
            CI_port_name = new NamedObject("CI");
            CYINIT_port_name = new NamedObject("CYINIT");
            CDO_port_name = new NamedObject("CDO");
            O5_port_name = new NamedObject("O5");
            O6_port_name = new NamedObject("O6");
            CDI_port_name = new NamedObject("CDI");
            CLK0_port_name = new NamedObject("CLK0");
            CLK180_port_name = new NamedObject("CLK180");
            CLK270_port_name = new NamedObject("CLK270");
            CLK2X_port_name = new NamedObject("CLK2X");
            CLK90_port_name = new NamedObject("CLK90");
            CLKDV_port_name = new NamedObject("CLKDV");
            CLKFB_port_name = new NamedObject("CLKFB");
            RST_port_name = new NamedObject("RST");
            CLK2X180_port_name = new NamedObject("CLK2X180");
            CDRST_port_name = new NamedObject("CDRST");
            CRCOUT_port_name = new NamedObject("CRCOUT");
            CRCCLK_port_name = new NamedObject("CRCCLK");
            CRCDATAVALID_port_name = new NamedObject("CRCDATAVALID");
            CRCDATAWIDTH_port_name = new NamedObject("CRCDATAWIDTH");
            CRCIN_port_name = new NamedObject("CRCIN");
            CRCRESET_port_name = new NamedObject("CRCRESET");
            CLKFX_port_name = new NamedObject("CLKFX");
            CLKFX180_port_name = new NamedObject("CLKFX180");
            PSDONE_port_name = new NamedObject("PSDONE");
            STATUS_port_name = new NamedObject("STATUS");
            DSSEN_port_name = new NamedObject("DSSEN");
            PSCLK_port_name = new NamedObject("PSCLK");
            PSEN_port_name = new NamedObject("PSEN");
            PSINCDEC_port_name = new NamedObject("PSINCDEC");
            DO_port_name = new NamedObject("DO");
            DRDY_port_name = new NamedObject("DRDY");
            DADDR_port_name = new NamedObject("DADDR");
            DCLK_port_name = new NamedObject("DCLK");
            DEN_port_name = new NamedObject("DEN");
            DWE_port_name = new NamedObject("DWE");
            CLKFXDV_port_name = new NamedObject("CLKFXDV");
            PROGDONE_port_name = new NamedObject("PROGDONE");
            FREEZEDCM_port_name = new NamedObject("FREEZEDCM");
            PROGCLK_port_name = new NamedObject("PROGCLK");
            PROGDATA_port_name = new NamedObject("PROGDATA");
            PROGEN_port_name = new NamedObject("PROGEN");
            DOUT_port_name = new NamedObject("DOUT");
            DIN_port_name = new NamedObject("DIN");
            READ_port_name = new NamedObject("READ");
            BCOUT_port_name = new NamedObject("BCOUT");
            P_port_name = new NamedObject("P");
            PCOUT_port_name = new NamedObject("PCOUT");
            A_port_name = new NamedObject("A");
            B_port_name = new NamedObject("B");
            BCIN_port_name = new NamedObject("BCIN");
            C_port_name = new NamedObject("C");
            CARRYIN_port_name = new NamedObject("CARRYIN");
            CARRYINSEL_port_name = new NamedObject("CARRYINSEL");
            CEA_port_name = new NamedObject("CEA");
            CEB_port_name = new NamedObject("CEB");
            CEC_port_name = new NamedObject("CEC");
            CECARRYIN_port_name = new NamedObject("CECARRYIN");
            CECINSUB_port_name = new NamedObject("CECINSUB");
            CECTRL_port_name = new NamedObject("CECTRL");
            CEM_port_name = new NamedObject("CEM");
            CEP_port_name = new NamedObject("CEP");
            OPMODE_port_name = new NamedObject("OPMODE");
            PCIN_port_name = new NamedObject("PCIN");
            RSTA_port_name = new NamedObject("RSTA");
            RSTB_port_name = new NamedObject("RSTB");
            RSTC_port_name = new NamedObject("RSTC");
            RSTCARRYIN_port_name = new NamedObject("RSTCARRYIN");
            RSTCTRL_port_name = new NamedObject("RSTCTRL");
            RSTM_port_name = new NamedObject("RSTM");
            RSTP_port_name = new NamedObject("RSTP");
            SUBTRACT_port_name = new NamedObject("SUBTRACT");
            CARRYOUT_port_name = new NamedObject("CARRYOUT");
            CED_port_name = new NamedObject("CED");
            CEOPMODE_port_name = new NamedObject("CEOPMODE");
            D_port_name = new NamedObject("D");
            RSTD_port_name = new NamedObject("RSTD");
            RSTOPMODE_port_name = new NamedObject("RSTOPMODE");
            CARRYOUTF_port_name = new NamedObject("CARRYOUTF");
            M_port_name = new NamedObject("M");
            ACOUT_port_name = new NamedObject("ACOUT");
            CARRYCASCOUT_port_name = new NamedObject("CARRYCASCOUT");
            MULTSIGNOUT_port_name = new NamedObject("MULTSIGNOUT");
            OVERFLOW_port_name = new NamedObject("OVERFLOW");
            PATTERNBDETECT_port_name = new NamedObject("PATTERNBDETECT");
            PATTERNDETECT_port_name = new NamedObject("PATTERNDETECT");
            UNDERFLOW_port_name = new NamedObject("UNDERFLOW");
            ACIN_port_name = new NamedObject("ACIN");
            ALUMODE_port_name = new NamedObject("ALUMODE");
            CARRYCASCIN_port_name = new NamedObject("CARRYCASCIN");
            CEA1_port_name = new NamedObject("CEA1");
            CEA2_port_name = new NamedObject("CEA2");
            CEALUMODE_port_name = new NamedObject("CEALUMODE");
            CEB1_port_name = new NamedObject("CEB1");
            CEB2_port_name = new NamedObject("CEB2");
            CEMULTCARRYIN_port_name = new NamedObject("CEMULTCARRYIN");
            MULTSIGNIN_port_name = new NamedObject("MULTSIGNIN");
            RSTALLCARRYIN_port_name = new NamedObject("RSTALLCARRYIN");
            RSTALUMODE_port_name = new NamedObject("RSTALUMODE");
            CEAD_port_name = new NamedObject("CEAD");
            CEINMODE_port_name = new NamedObject("CEINMODE");
            INMODE_port_name = new NamedObject("INMODE");
            RSTINMODE_port_name = new NamedObject("RSTINMODE");
            EFUSEUSR_port_name = new NamedObject("EFUSEUSR");
            DCRHOSTDONEIR_port_name = new NamedObject("DCRHOSTDONEIR");
            EMAC0CLIENTANINTERRUPT_port_name = new NamedObject("EMAC0CLIENTANINTERRUPT");
            EMAC0CLIENTRXBADFRAME_port_name = new NamedObject("EMAC0CLIENTRXBADFRAME");
            EMAC0CLIENTRXCLIENTCLKOUT_port_name = new NamedObject("EMAC0CLIENTRXCLIENTCLKOUT");
            EMAC0CLIENTRXD_port_name = new NamedObject("EMAC0CLIENTRXD");
            EMAC0CLIENTRXDVLD_port_name = new NamedObject("EMAC0CLIENTRXDVLD");
            EMAC0CLIENTRXDVLDMSW_port_name = new NamedObject("EMAC0CLIENTRXDVLDMSW");
            EMAC0CLIENTRXDVREG6_port_name = new NamedObject("EMAC0CLIENTRXDVREG6");
            EMAC0CLIENTRXFRAMEDROP_port_name = new NamedObject("EMAC0CLIENTRXFRAMEDROP");
            EMAC0CLIENTRXGOODFRAME_port_name = new NamedObject("EMAC0CLIENTRXGOODFRAME");
            EMAC0CLIENTRXSTATS_port_name = new NamedObject("EMAC0CLIENTRXSTATS");
            EMAC0CLIENTRXSTATSBYTEVLD_port_name = new NamedObject("EMAC0CLIENTRXSTATSBYTEVLD");
            EMAC0CLIENTRXSTATSVLD_port_name = new NamedObject("EMAC0CLIENTRXSTATSVLD");
            EMAC0CLIENTTXACK_port_name = new NamedObject("EMAC0CLIENTTXACK");
            EMAC0CLIENTTXCLIENTCLKOUT_port_name = new NamedObject("EMAC0CLIENTTXCLIENTCLKOUT");
            EMAC0CLIENTTXCOLLISION_port_name = new NamedObject("EMAC0CLIENTTXCOLLISION");
            EMAC0CLIENTTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC0CLIENTTXGMIIMIICLKOUT");
            EMAC0CLIENTTXRETRANSMIT_port_name = new NamedObject("EMAC0CLIENTTXRETRANSMIT");
            EMAC0CLIENTTXSTATS_port_name = new NamedObject("EMAC0CLIENTTXSTATS");
            EMAC0CLIENTTXSTATSBYTEVLD_port_name = new NamedObject("EMAC0CLIENTTXSTATSBYTEVLD");
            EMAC0CLIENTTXSTATSVLD_port_name = new NamedObject("EMAC0CLIENTTXSTATSVLD");
            EMAC0PHYENCOMMAALIGN_port_name = new NamedObject("EMAC0PHYENCOMMAALIGN");
            EMAC0PHYLOOPBACKMSB_port_name = new NamedObject("EMAC0PHYLOOPBACKMSB");
            EMAC0PHYMCLKOUT_port_name = new NamedObject("EMAC0PHYMCLKOUT");
            EMAC0PHYMDOUT_port_name = new NamedObject("EMAC0PHYMDOUT");
            EMAC0PHYMDTRI_port_name = new NamedObject("EMAC0PHYMDTRI");
            EMAC0PHYMGTRXRESET_port_name = new NamedObject("EMAC0PHYMGTRXRESET");
            EMAC0PHYMGTTXRESET_port_name = new NamedObject("EMAC0PHYMGTTXRESET");
            EMAC0PHYPOWERDOWN_port_name = new NamedObject("EMAC0PHYPOWERDOWN");
            EMAC0PHYSYNCACQSTATUS_port_name = new NamedObject("EMAC0PHYSYNCACQSTATUS");
            EMAC0PHYTXCHARDISPMODE_port_name = new NamedObject("EMAC0PHYTXCHARDISPMODE");
            EMAC0PHYTXCHARDISPVAL_port_name = new NamedObject("EMAC0PHYTXCHARDISPVAL");
            EMAC0PHYTXCHARISK_port_name = new NamedObject("EMAC0PHYTXCHARISK");
            EMAC0PHYTXCLK_port_name = new NamedObject("EMAC0PHYTXCLK");
            EMAC0PHYTXD_port_name = new NamedObject("EMAC0PHYTXD");
            EMAC0PHYTXEN_port_name = new NamedObject("EMAC0PHYTXEN");
            EMAC0PHYTXER_port_name = new NamedObject("EMAC0PHYTXER");
            EMAC1CLIENTANINTERRUPT_port_name = new NamedObject("EMAC1CLIENTANINTERRUPT");
            EMAC1CLIENTRXBADFRAME_port_name = new NamedObject("EMAC1CLIENTRXBADFRAME");
            EMAC1CLIENTRXCLIENTCLKOUT_port_name = new NamedObject("EMAC1CLIENTRXCLIENTCLKOUT");
            EMAC1CLIENTRXD_port_name = new NamedObject("EMAC1CLIENTRXD");
            EMAC1CLIENTRXDVLD_port_name = new NamedObject("EMAC1CLIENTRXDVLD");
            EMAC1CLIENTRXDVLDMSW_port_name = new NamedObject("EMAC1CLIENTRXDVLDMSW");
            EMAC1CLIENTRXDVREG6_port_name = new NamedObject("EMAC1CLIENTRXDVREG6");
            EMAC1CLIENTRXFRAMEDROP_port_name = new NamedObject("EMAC1CLIENTRXFRAMEDROP");
            EMAC1CLIENTRXGOODFRAME_port_name = new NamedObject("EMAC1CLIENTRXGOODFRAME");
            EMAC1CLIENTRXSTATS_port_name = new NamedObject("EMAC1CLIENTRXSTATS");
            EMAC1CLIENTRXSTATSBYTEVLD_port_name = new NamedObject("EMAC1CLIENTRXSTATSBYTEVLD");
            EMAC1CLIENTRXSTATSVLD_port_name = new NamedObject("EMAC1CLIENTRXSTATSVLD");
            EMAC1CLIENTTXACK_port_name = new NamedObject("EMAC1CLIENTTXACK");
            EMAC1CLIENTTXCLIENTCLKOUT_port_name = new NamedObject("EMAC1CLIENTTXCLIENTCLKOUT");
            EMAC1CLIENTTXCOLLISION_port_name = new NamedObject("EMAC1CLIENTTXCOLLISION");
            EMAC1CLIENTTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC1CLIENTTXGMIIMIICLKOUT");
            EMAC1CLIENTTXRETRANSMIT_port_name = new NamedObject("EMAC1CLIENTTXRETRANSMIT");
            EMAC1CLIENTTXSTATS_port_name = new NamedObject("EMAC1CLIENTTXSTATS");
            EMAC1CLIENTTXSTATSBYTEVLD_port_name = new NamedObject("EMAC1CLIENTTXSTATSBYTEVLD");
            EMAC1CLIENTTXSTATSVLD_port_name = new NamedObject("EMAC1CLIENTTXSTATSVLD");
            EMAC1PHYENCOMMAALIGN_port_name = new NamedObject("EMAC1PHYENCOMMAALIGN");
            EMAC1PHYLOOPBACKMSB_port_name = new NamedObject("EMAC1PHYLOOPBACKMSB");
            EMAC1PHYMCLKOUT_port_name = new NamedObject("EMAC1PHYMCLKOUT");
            EMAC1PHYMDOUT_port_name = new NamedObject("EMAC1PHYMDOUT");
            EMAC1PHYMDTRI_port_name = new NamedObject("EMAC1PHYMDTRI");
            EMAC1PHYMGTRXRESET_port_name = new NamedObject("EMAC1PHYMGTRXRESET");
            EMAC1PHYMGTTXRESET_port_name = new NamedObject("EMAC1PHYMGTTXRESET");
            EMAC1PHYPOWERDOWN_port_name = new NamedObject("EMAC1PHYPOWERDOWN");
            EMAC1PHYSYNCACQSTATUS_port_name = new NamedObject("EMAC1PHYSYNCACQSTATUS");
            EMAC1PHYTXCHARDISPMODE_port_name = new NamedObject("EMAC1PHYTXCHARDISPMODE");
            EMAC1PHYTXCHARDISPVAL_port_name = new NamedObject("EMAC1PHYTXCHARDISPVAL");
            EMAC1PHYTXCHARISK_port_name = new NamedObject("EMAC1PHYTXCHARISK");
            EMAC1PHYTXCLK_port_name = new NamedObject("EMAC1PHYTXCLK");
            EMAC1PHYTXD_port_name = new NamedObject("EMAC1PHYTXD");
            EMAC1PHYTXEN_port_name = new NamedObject("EMAC1PHYTXEN");
            EMAC1PHYTXER_port_name = new NamedObject("EMAC1PHYTXER");
            EMACDCRACK_port_name = new NamedObject("EMACDCRACK");
            EMACDCRDBUS_port_name = new NamedObject("EMACDCRDBUS");
            HOSTMIIMRDY_port_name = new NamedObject("HOSTMIIMRDY");
            HOSTRDDATA_port_name = new NamedObject("HOSTRDDATA");
            CLIENTEMAC0DCMLOCKED_port_name = new NamedObject("CLIENTEMAC0DCMLOCKED");
            CLIENTEMAC0PAUSEREQ_port_name = new NamedObject("CLIENTEMAC0PAUSEREQ");
            CLIENTEMAC0PAUSEVAL_port_name = new NamedObject("CLIENTEMAC0PAUSEVAL");
            CLIENTEMAC0RXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC0RXCLIENTCLKIN");
            CLIENTEMAC0TXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC0TXCLIENTCLKIN");
            CLIENTEMAC0TXD_port_name = new NamedObject("CLIENTEMAC0TXD");
            CLIENTEMAC0TXDVLD_port_name = new NamedObject("CLIENTEMAC0TXDVLD");
            CLIENTEMAC0TXDVLDMSW_port_name = new NamedObject("CLIENTEMAC0TXDVLDMSW");
            CLIENTEMAC0TXFIRSTBYTE_port_name = new NamedObject("CLIENTEMAC0TXFIRSTBYTE");
            CLIENTEMAC0TXGMIIMIICLKIN_port_name = new NamedObject("CLIENTEMAC0TXGMIIMIICLKIN");
            CLIENTEMAC0TXIFGDELAY_port_name = new NamedObject("CLIENTEMAC0TXIFGDELAY");
            CLIENTEMAC0TXUNDERRUN_port_name = new NamedObject("CLIENTEMAC0TXUNDERRUN");
            CLIENTEMAC1DCMLOCKED_port_name = new NamedObject("CLIENTEMAC1DCMLOCKED");
            CLIENTEMAC1PAUSEREQ_port_name = new NamedObject("CLIENTEMAC1PAUSEREQ");
            CLIENTEMAC1PAUSEVAL_port_name = new NamedObject("CLIENTEMAC1PAUSEVAL");
            CLIENTEMAC1RXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC1RXCLIENTCLKIN");
            CLIENTEMAC1TXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMAC1TXCLIENTCLKIN");
            CLIENTEMAC1TXD_port_name = new NamedObject("CLIENTEMAC1TXD");
            CLIENTEMAC1TXDVLD_port_name = new NamedObject("CLIENTEMAC1TXDVLD");
            CLIENTEMAC1TXDVLDMSW_port_name = new NamedObject("CLIENTEMAC1TXDVLDMSW");
            CLIENTEMAC1TXFIRSTBYTE_port_name = new NamedObject("CLIENTEMAC1TXFIRSTBYTE");
            CLIENTEMAC1TXGMIIMIICLKIN_port_name = new NamedObject("CLIENTEMAC1TXGMIIMIICLKIN");
            CLIENTEMAC1TXIFGDELAY_port_name = new NamedObject("CLIENTEMAC1TXIFGDELAY");
            CLIENTEMAC1TXUNDERRUN_port_name = new NamedObject("CLIENTEMAC1TXUNDERRUN");
            DCREMACABUS_port_name = new NamedObject("DCREMACABUS");
            DCREMACCLK_port_name = new NamedObject("DCREMACCLK");
            DCREMACDBUS_port_name = new NamedObject("DCREMACDBUS");
            DCREMACENABLE_port_name = new NamedObject("DCREMACENABLE");
            DCREMACREAD_port_name = new NamedObject("DCREMACREAD");
            DCREMACWRITE_port_name = new NamedObject("DCREMACWRITE");
            HOSTADDR_port_name = new NamedObject("HOSTADDR");
            HOSTCLK_port_name = new NamedObject("HOSTCLK");
            HOSTEMAC1SEL_port_name = new NamedObject("HOSTEMAC1SEL");
            HOSTMIIMSEL_port_name = new NamedObject("HOSTMIIMSEL");
            HOSTOPCODE_port_name = new NamedObject("HOSTOPCODE");
            HOSTREQ_port_name = new NamedObject("HOSTREQ");
            HOSTWRDATA_port_name = new NamedObject("HOSTWRDATA");
            PHYEMAC0COL_port_name = new NamedObject("PHYEMAC0COL");
            PHYEMAC0CRS_port_name = new NamedObject("PHYEMAC0CRS");
            PHYEMAC0GTXCLK_port_name = new NamedObject("PHYEMAC0GTXCLK");
            PHYEMAC0MCLKIN_port_name = new NamedObject("PHYEMAC0MCLKIN");
            PHYEMAC0MDIN_port_name = new NamedObject("PHYEMAC0MDIN");
            PHYEMAC0MIITXCLK_port_name = new NamedObject("PHYEMAC0MIITXCLK");
            PHYEMAC0PHYAD_port_name = new NamedObject("PHYEMAC0PHYAD");
            PHYEMAC0RXBUFERR_port_name = new NamedObject("PHYEMAC0RXBUFERR");
            PHYEMAC0RXBUFSTATUS_port_name = new NamedObject("PHYEMAC0RXBUFSTATUS");
            PHYEMAC0RXCHARISCOMMA_port_name = new NamedObject("PHYEMAC0RXCHARISCOMMA");
            PHYEMAC0RXCHARISK_port_name = new NamedObject("PHYEMAC0RXCHARISK");
            PHYEMAC0RXCHECKINGCRC_port_name = new NamedObject("PHYEMAC0RXCHECKINGCRC");
            PHYEMAC0RXCLK_port_name = new NamedObject("PHYEMAC0RXCLK");
            PHYEMAC0RXCLKCORCNT_port_name = new NamedObject("PHYEMAC0RXCLKCORCNT");
            PHYEMAC0RXCOMMADET_port_name = new NamedObject("PHYEMAC0RXCOMMADET");
            PHYEMAC0RXD_port_name = new NamedObject("PHYEMAC0RXD");
            PHYEMAC0RXDISPERR_port_name = new NamedObject("PHYEMAC0RXDISPERR");
            PHYEMAC0RXDV_port_name = new NamedObject("PHYEMAC0RXDV");
            PHYEMAC0RXER_port_name = new NamedObject("PHYEMAC0RXER");
            PHYEMAC0RXLOSSOFSYNC_port_name = new NamedObject("PHYEMAC0RXLOSSOFSYNC");
            PHYEMAC0RXNOTINTABLE_port_name = new NamedObject("PHYEMAC0RXNOTINTABLE");
            PHYEMAC0RXRUNDISP_port_name = new NamedObject("PHYEMAC0RXRUNDISP");
            PHYEMAC0SIGNALDET_port_name = new NamedObject("PHYEMAC0SIGNALDET");
            PHYEMAC0TXBUFERR_port_name = new NamedObject("PHYEMAC0TXBUFERR");
            PHYEMAC1COL_port_name = new NamedObject("PHYEMAC1COL");
            PHYEMAC1CRS_port_name = new NamedObject("PHYEMAC1CRS");
            PHYEMAC1GTXCLK_port_name = new NamedObject("PHYEMAC1GTXCLK");
            PHYEMAC1MCLKIN_port_name = new NamedObject("PHYEMAC1MCLKIN");
            PHYEMAC1MDIN_port_name = new NamedObject("PHYEMAC1MDIN");
            PHYEMAC1MIITXCLK_port_name = new NamedObject("PHYEMAC1MIITXCLK");
            PHYEMAC1PHYAD_port_name = new NamedObject("PHYEMAC1PHYAD");
            PHYEMAC1RXBUFERR_port_name = new NamedObject("PHYEMAC1RXBUFERR");
            PHYEMAC1RXBUFSTATUS_port_name = new NamedObject("PHYEMAC1RXBUFSTATUS");
            PHYEMAC1RXCHARISCOMMA_port_name = new NamedObject("PHYEMAC1RXCHARISCOMMA");
            PHYEMAC1RXCHARISK_port_name = new NamedObject("PHYEMAC1RXCHARISK");
            PHYEMAC1RXCHECKINGCRC_port_name = new NamedObject("PHYEMAC1RXCHECKINGCRC");
            PHYEMAC1RXCLK_port_name = new NamedObject("PHYEMAC1RXCLK");
            PHYEMAC1RXCLKCORCNT_port_name = new NamedObject("PHYEMAC1RXCLKCORCNT");
            PHYEMAC1RXCOMMADET_port_name = new NamedObject("PHYEMAC1RXCOMMADET");
            PHYEMAC1RXD_port_name = new NamedObject("PHYEMAC1RXD");
            PHYEMAC1RXDISPERR_port_name = new NamedObject("PHYEMAC1RXDISPERR");
            PHYEMAC1RXDV_port_name = new NamedObject("PHYEMAC1RXDV");
            PHYEMAC1RXER_port_name = new NamedObject("PHYEMAC1RXER");
            PHYEMAC1RXLOSSOFSYNC_port_name = new NamedObject("PHYEMAC1RXLOSSOFSYNC");
            PHYEMAC1RXNOTINTABLE_port_name = new NamedObject("PHYEMAC1RXNOTINTABLE");
            PHYEMAC1RXRUNDISP_port_name = new NamedObject("PHYEMAC1RXRUNDISP");
            PHYEMAC1SIGNALDET_port_name = new NamedObject("PHYEMAC1SIGNALDET");
            PHYEMAC1TXBUFERR_port_name = new NamedObject("PHYEMAC1TXBUFERR");
            TIEEMAC0CONFIGVEC_port_name = new NamedObject("TIEEMAC0CONFIGVEC");
            TIEEMAC0UNICASTADDR_port_name = new NamedObject("TIEEMAC0UNICASTADDR");
            TIEEMAC1CONFIGVEC_port_name = new NamedObject("TIEEMAC1CONFIGVEC");
            TIEEMAC1UNICASTADDR_port_name = new NamedObject("TIEEMAC1UNICASTADDR");
            Q_port_name = new NamedObject("Q");
            PRE_port_name = new NamedObject("PRE");
            C0_port_name = new NamedObject("C0");
            C1_port_name = new NamedObject("C1");
            D0_port_name = new NamedObject("D0");
            D1_port_name = new NamedObject("D1");
            R_port_name = new NamedObject("R");
            ALMOSTEMPTY_port_name = new NamedObject("ALMOSTEMPTY");
            ALMOSTFULL_port_name = new NamedObject("ALMOSTFULL");
            DOP_port_name = new NamedObject("DOP");
            EMPTY_port_name = new NamedObject("EMPTY");
            FULL_port_name = new NamedObject("FULL");
            RDCOUNT_port_name = new NamedObject("RDCOUNT");
            RDERR_port_name = new NamedObject("RDERR");
            WRCOUNT_port_name = new NamedObject("WRCOUNT");
            WRERR_port_name = new NamedObject("WRERR");
            DIP_port_name = new NamedObject("DIP");
            RDCLK_port_name = new NamedObject("RDCLK");
            RDEN_port_name = new NamedObject("RDEN");
            WRCLK_port_name = new NamedObject("WRCLK");
            WREN_port_name = new NamedObject("WREN");
            REGCE_port_name = new NamedObject("REGCE");
            RSTREG_port_name = new NamedObject("RSTREG");
            DBITERR_port_name = new NamedObject("DBITERR");
            ECCPARITY_port_name = new NamedObject("ECCPARITY");
            SBITERR_port_name = new NamedObject("SBITERR");
            INJECTDBITERR_port_name = new NamedObject("INJECTDBITERR");
            INJECTSBITERR_port_name = new NamedObject("INJECTSBITERR");
            RDCLKL_port_name = new NamedObject("RDCLKL");
            RDCLKU_port_name = new NamedObject("RDCLKU");
            RDRCLKL_port_name = new NamedObject("RDRCLKL");
            RDRCLKU_port_name = new NamedObject("RDRCLKU");
            WRCLKL_port_name = new NamedObject("WRCLKL");
            WRCLKU_port_name = new NamedObject("WRCLKU");
            CRCERROR_port_name = new NamedObject("CRCERROR");
            ECCERROR_port_name = new NamedObject("ECCERROR");
            ECCERRORSINGLE_port_name = new NamedObject("ECCERRORSINGLE");
            FAR_port_name = new NamedObject("FAR");
            SYNBIT_port_name = new NamedObject("SYNBIT");
            SYNDROME_port_name = new NamedObject("SYNDROME");
            SYNDROMEVALID_port_name = new NamedObject("SYNDROMEVALID");
            SYNWORD_port_name = new NamedObject("SYNWORD");
            ERROR_port_name = new NamedObject("ERROR");
            G_port_name = new NamedObject("G");
            CHBONDO_port_name = new NamedObject("CHBONDO");
            COMBUSOUT_port_name = new NamedObject("COMBUSOUT");
            RXBUFERR_port_name = new NamedObject("RXBUFERR");
            RXCALFAIL_port_name = new NamedObject("RXCALFAIL");
            RXCHARISCOMMA_port_name = new NamedObject("RXCHARISCOMMA");
            RXCHARISK_port_name = new NamedObject("RXCHARISK");
            RXCOMMADET_port_name = new NamedObject("RXCOMMADET");
            RXCRCOUT_port_name = new NamedObject("RXCRCOUT");
            RXCYCLELIMIT_port_name = new NamedObject("RXCYCLELIMIT");
            RXDATA_port_name = new NamedObject("RXDATA");
            RXDISPERR_port_name = new NamedObject("RXDISPERR");
            RXLOCK_port_name = new NamedObject("RXLOCK");
            RXLOSSOFSYNC_port_name = new NamedObject("RXLOSSOFSYNC");
            RXMCLK_port_name = new NamedObject("RXMCLK");
            RXNOTINTABLE_port_name = new NamedObject("RXNOTINTABLE");
            RXPCSHCLKOUT_port_name = new NamedObject("RXPCSHCLKOUT");
            RXREALIGN_port_name = new NamedObject("RXREALIGN");
            RXRECCLK1_port_name = new NamedObject("RXRECCLK1");
            RXRECCLK2_port_name = new NamedObject("RXRECCLK2");
            RXRUNDISP_port_name = new NamedObject("RXRUNDISP");
            RXSIGDET_port_name = new NamedObject("RXSIGDET");
            RXSTATUS_port_name = new NamedObject("RXSTATUS");
            TX1N_port_name = new NamedObject("TX1N");
            TX1P_port_name = new NamedObject("TX1P");
            TXBUFERR_port_name = new NamedObject("TXBUFERR");
            TXCALFAIL_port_name = new NamedObject("TXCALFAIL");
            TXCRCOUT_port_name = new NamedObject("TXCRCOUT");
            TXCYCLELIMIT_port_name = new NamedObject("TXCYCLELIMIT");
            TXKERR_port_name = new NamedObject("TXKERR");
            TXLOCK_port_name = new NamedObject("TXLOCK");
            TXOUTCLK1_port_name = new NamedObject("TXOUTCLK1");
            TXOUTCLK2_port_name = new NamedObject("TXOUTCLK2");
            TXPCSHCLKOUT_port_name = new NamedObject("TXPCSHCLKOUT");
            TXRUNDISP_port_name = new NamedObject("TXRUNDISP");
            CHBONDI_port_name = new NamedObject("CHBONDI");
            COMBUSIN_port_name = new NamedObject("COMBUSIN");
            ENCHANSYNC_port_name = new NamedObject("ENCHANSYNC");
            ENMCOMMAALIGN_port_name = new NamedObject("ENMCOMMAALIGN");
            ENPCOMMAALIGN_port_name = new NamedObject("ENPCOMMAALIGN");
            GREFCLK_port_name = new NamedObject("GREFCLK");
            LOOPBACK_port_name = new NamedObject("LOOPBACK");
            POWERDOWN_port_name = new NamedObject("POWERDOWN");
            REFCLK1_port_name = new NamedObject("REFCLK1");
            REFCLK2_port_name = new NamedObject("REFCLK2");
            RX1N_port_name = new NamedObject("RX1N");
            RX1P_port_name = new NamedObject("RX1P");
            RXBLOCKSYNC64B66BUSE_port_name = new NamedObject("RXBLOCKSYNC64B66BUSE");
            RXCLKSTABLE_port_name = new NamedObject("RXCLKSTABLE");
            RXCOMMADETUSE_port_name = new NamedObject("RXCOMMADETUSE");
            RXCRCCLK_port_name = new NamedObject("RXCRCCLK");
            RXCRCDATAVALID_port_name = new NamedObject("RXCRCDATAVALID");
            RXCRCDATAWIDTH_port_name = new NamedObject("RXCRCDATAWIDTH");
            RXCRCIN_port_name = new NamedObject("RXCRCIN");
            RXCRCINIT_port_name = new NamedObject("RXCRCINIT");
            RXCRCINTCLK_port_name = new NamedObject("RXCRCINTCLK");
            RXCRCPD_port_name = new NamedObject("RXCRCPD");
            RXCRCRESET_port_name = new NamedObject("RXCRCRESET");
            RXDATAWIDTH_port_name = new NamedObject("RXDATAWIDTH");
            RXDEC64B66BUSE_port_name = new NamedObject("RXDEC64B66BUSE");
            RXDEC8B10BUSE_port_name = new NamedObject("RXDEC8B10BUSE");
            RXDESCRAM64B66BUSE_port_name = new NamedObject("RXDESCRAM64B66BUSE");
            RXIGNOREBTF_port_name = new NamedObject("RXIGNOREBTF");
            RXINTDATAWIDTH_port_name = new NamedObject("RXINTDATAWIDTH");
            RXPMARESET_port_name = new NamedObject("RXPMARESET");
            RXPOLARITY_port_name = new NamedObject("RXPOLARITY");
            RXRESET_port_name = new NamedObject("RXRESET");
            RXSLIDE_port_name = new NamedObject("RXSLIDE");
            RXSYNC_port_name = new NamedObject("RXSYNC");
            RXUSRCLK_port_name = new NamedObject("RXUSRCLK");
            RXUSRCLK2_port_name = new NamedObject("RXUSRCLK2");
            TXBYPASS8B10B_port_name = new NamedObject("TXBYPASS8B10B");
            TXCHARDISPMODE_port_name = new NamedObject("TXCHARDISPMODE");
            TXCHARDISPVAL_port_name = new NamedObject("TXCHARDISPVAL");
            TXCHARISK_port_name = new NamedObject("TXCHARISK");
            TXCLKSTABLE_port_name = new NamedObject("TXCLKSTABLE");
            TXCRCCLK_port_name = new NamedObject("TXCRCCLK");
            TXCRCDATAVALID_port_name = new NamedObject("TXCRCDATAVALID");
            TXCRCDATAWIDTH_port_name = new NamedObject("TXCRCDATAWIDTH");
            TXCRCIN_port_name = new NamedObject("TXCRCIN");
            TXCRCINIT_port_name = new NamedObject("TXCRCINIT");
            TXCRCINTCLK_port_name = new NamedObject("TXCRCINTCLK");
            TXCRCPD_port_name = new NamedObject("TXCRCPD");
            TXCRCRESET_port_name = new NamedObject("TXCRCRESET");
            TXDATA_port_name = new NamedObject("TXDATA");
            TXDATAWIDTH_port_name = new NamedObject("TXDATAWIDTH");
            TXENC64B66BUSE_port_name = new NamedObject("TXENC64B66BUSE");
            TXENC8B10BUSE_port_name = new NamedObject("TXENC8B10BUSE");
            TXENOOB_port_name = new NamedObject("TXENOOB");
            TXGEARBOX64B66BUSE_port_name = new NamedObject("TXGEARBOX64B66BUSE");
            TXINHIBIT_port_name = new NamedObject("TXINHIBIT");
            TXINTDATAWIDTH_port_name = new NamedObject("TXINTDATAWIDTH");
            TXPMARESET_port_name = new NamedObject("TXPMARESET");
            TXPOLARITY_port_name = new NamedObject("TXPOLARITY");
            TXRESET_port_name = new NamedObject("TXRESET");
            TXSCRAM64B66BUSE_port_name = new NamedObject("TXSCRAM64B66BUSE");
            TXSYNC_port_name = new NamedObject("TXSYNC");
            TXUSRCLK_port_name = new NamedObject("TXUSRCLK");
            TXUSRCLK2_port_name = new NamedObject("TXUSRCLK2");
            SYNCLK1OUT_port_name = new NamedObject("SYNCLK1OUT");
            SYNCLK2OUT_port_name = new NamedObject("SYNCLK2OUT");
            MGTCLKN_port_name = new NamedObject("MGTCLKN");
            MGTCLKP_port_name = new NamedObject("MGTCLKP");
            REFCLK_port_name = new NamedObject("REFCLK");
            RXBCLK_port_name = new NamedObject("RXBCLK");
            SYNCLK1IN_port_name = new NamedObject("SYNCLK1IN");
            SYNCLK2IN_port_name = new NamedObject("SYNCLK2IN");
            CHBONDOA_port_name = new NamedObject("CHBONDOA");
            CHBONDOB_port_name = new NamedObject("CHBONDOB");
            DOA_port_name = new NamedObject("DOA");
            DOB_port_name = new NamedObject("DOB");
            DRDYA_port_name = new NamedObject("DRDYA");
            DRDYB_port_name = new NamedObject("DRDYB");
            RXBUFERRA_port_name = new NamedObject("RXBUFERRA");
            RXBUFERRB_port_name = new NamedObject("RXBUFERRB");
            RXCALFAILA_port_name = new NamedObject("RXCALFAILA");
            RXCALFAILB_port_name = new NamedObject("RXCALFAILB");
            RXCHARISCOMMAA_port_name = new NamedObject("RXCHARISCOMMAA");
            RXCHARISCOMMAB_port_name = new NamedObject("RXCHARISCOMMAB");
            RXCHARISKA_port_name = new NamedObject("RXCHARISKA");
            RXCHARISKB_port_name = new NamedObject("RXCHARISKB");
            RXCOMMADETA_port_name = new NamedObject("RXCOMMADETA");
            RXCOMMADETB_port_name = new NamedObject("RXCOMMADETB");
            RXCRCOUTA_port_name = new NamedObject("RXCRCOUTA");
            RXCRCOUTB_port_name = new NamedObject("RXCRCOUTB");
            RXCYCLELIMITA_port_name = new NamedObject("RXCYCLELIMITA");
            RXCYCLELIMITB_port_name = new NamedObject("RXCYCLELIMITB");
            RXDATAA_port_name = new NamedObject("RXDATAA");
            RXDATAB_port_name = new NamedObject("RXDATAB");
            RXDISPERRA_port_name = new NamedObject("RXDISPERRA");
            RXDISPERRB_port_name = new NamedObject("RXDISPERRB");
            RXLOCKA_port_name = new NamedObject("RXLOCKA");
            RXLOCKB_port_name = new NamedObject("RXLOCKB");
            RXLOSSOFSYNCA_port_name = new NamedObject("RXLOSSOFSYNCA");
            RXLOSSOFSYNCB_port_name = new NamedObject("RXLOSSOFSYNCB");
            RXMCLKA_port_name = new NamedObject("RXMCLKA");
            RXMCLKB_port_name = new NamedObject("RXMCLKB");
            RXNOTINTABLEA_port_name = new NamedObject("RXNOTINTABLEA");
            RXNOTINTABLEB_port_name = new NamedObject("RXNOTINTABLEB");
            RXPCSHCLKOUTA_port_name = new NamedObject("RXPCSHCLKOUTA");
            RXPCSHCLKOUTB_port_name = new NamedObject("RXPCSHCLKOUTB");
            RXREALIGNA_port_name = new NamedObject("RXREALIGNA");
            RXREALIGNB_port_name = new NamedObject("RXREALIGNB");
            RXRECCLK1A_port_name = new NamedObject("RXRECCLK1A");
            RXRECCLK1B_port_name = new NamedObject("RXRECCLK1B");
            RXRECCLK2A_port_name = new NamedObject("RXRECCLK2A");
            RXRECCLK2B_port_name = new NamedObject("RXRECCLK2B");
            RXRUNDISPA_port_name = new NamedObject("RXRUNDISPA");
            RXRUNDISPB_port_name = new NamedObject("RXRUNDISPB");
            RXSIGDETA_port_name = new NamedObject("RXSIGDETA");
            RXSIGDETB_port_name = new NamedObject("RXSIGDETB");
            RXSTATUSA_port_name = new NamedObject("RXSTATUSA");
            RXSTATUSB_port_name = new NamedObject("RXSTATUSB");
            TX1NA_port_name = new NamedObject("TX1NA");
            TX1NB_port_name = new NamedObject("TX1NB");
            TX1PA_port_name = new NamedObject("TX1PA");
            TX1PB_port_name = new NamedObject("TX1PB");
            TXBUFERRA_port_name = new NamedObject("TXBUFERRA");
            TXBUFERRB_port_name = new NamedObject("TXBUFERRB");
            TXCALFAILA_port_name = new NamedObject("TXCALFAILA");
            TXCALFAILB_port_name = new NamedObject("TXCALFAILB");
            TXCRCOUTA_port_name = new NamedObject("TXCRCOUTA");
            TXCRCOUTB_port_name = new NamedObject("TXCRCOUTB");
            TXCYCLELIMITA_port_name = new NamedObject("TXCYCLELIMITA");
            TXCYCLELIMITB_port_name = new NamedObject("TXCYCLELIMITB");
            TXKERRA_port_name = new NamedObject("TXKERRA");
            TXKERRB_port_name = new NamedObject("TXKERRB");
            TXLOCKA_port_name = new NamedObject("TXLOCKA");
            TXLOCKB_port_name = new NamedObject("TXLOCKB");
            TXOUTCLK1A_port_name = new NamedObject("TXOUTCLK1A");
            TXOUTCLK1B_port_name = new NamedObject("TXOUTCLK1B");
            TXOUTCLK2A_port_name = new NamedObject("TXOUTCLK2A");
            TXOUTCLK2B_port_name = new NamedObject("TXOUTCLK2B");
            TXPCSHCLKOUTA_port_name = new NamedObject("TXPCSHCLKOUTA");
            TXPCSHCLKOUTB_port_name = new NamedObject("TXPCSHCLKOUTB");
            TXRUNDISPA_port_name = new NamedObject("TXRUNDISPA");
            TXRUNDISPB_port_name = new NamedObject("TXRUNDISPB");
            CHBONDIA_port_name = new NamedObject("CHBONDIA");
            CHBONDIB_port_name = new NamedObject("CHBONDIB");
            DADDRA_port_name = new NamedObject("DADDRA");
            DADDRB_port_name = new NamedObject("DADDRB");
            DCLKA_port_name = new NamedObject("DCLKA");
            DCLKB_port_name = new NamedObject("DCLKB");
            DENA_port_name = new NamedObject("DENA");
            DENB_port_name = new NamedObject("DENB");
            DIA_port_name = new NamedObject("DIA");
            DIB_port_name = new NamedObject("DIB");
            DWEA_port_name = new NamedObject("DWEA");
            DWEB_port_name = new NamedObject("DWEB");
            ENCHANSYNCA_port_name = new NamedObject("ENCHANSYNCA");
            ENCHANSYNCB_port_name = new NamedObject("ENCHANSYNCB");
            ENMCOMMAALIGNA_port_name = new NamedObject("ENMCOMMAALIGNA");
            ENMCOMMAALIGNB_port_name = new NamedObject("ENMCOMMAALIGNB");
            ENPCOMMAALIGNA_port_name = new NamedObject("ENPCOMMAALIGNA");
            ENPCOMMAALIGNB_port_name = new NamedObject("ENPCOMMAALIGNB");
            GREFCLKA_port_name = new NamedObject("GREFCLKA");
            GREFCLKB_port_name = new NamedObject("GREFCLKB");
            LOOPBACKA_port_name = new NamedObject("LOOPBACKA");
            LOOPBACKB_port_name = new NamedObject("LOOPBACKB");
            POWERDOWNA_port_name = new NamedObject("POWERDOWNA");
            POWERDOWNB_port_name = new NamedObject("POWERDOWNB");
            REFCLK1A_port_name = new NamedObject("REFCLK1A");
            REFCLK1B_port_name = new NamedObject("REFCLK1B");
            REFCLK2A_port_name = new NamedObject("REFCLK2A");
            REFCLK2B_port_name = new NamedObject("REFCLK2B");
            RX1NA_port_name = new NamedObject("RX1NA");
            RX1NB_port_name = new NamedObject("RX1NB");
            RX1PA_port_name = new NamedObject("RX1PA");
            RX1PB_port_name = new NamedObject("RX1PB");
            RXBLOCKSYNC64B66BUSEA_port_name = new NamedObject("RXBLOCKSYNC64B66BUSEA");
            RXBLOCKSYNC64B66BUSEB_port_name = new NamedObject("RXBLOCKSYNC64B66BUSEB");
            RXCLKSTABLEA_port_name = new NamedObject("RXCLKSTABLEA");
            RXCLKSTABLEB_port_name = new NamedObject("RXCLKSTABLEB");
            RXCOMMADETUSEA_port_name = new NamedObject("RXCOMMADETUSEA");
            RXCOMMADETUSEB_port_name = new NamedObject("RXCOMMADETUSEB");
            RXCRCCLKA_port_name = new NamedObject("RXCRCCLKA");
            RXCRCCLKB_port_name = new NamedObject("RXCRCCLKB");
            RXCRCDATAVALIDA_port_name = new NamedObject("RXCRCDATAVALIDA");
            RXCRCDATAVALIDB_port_name = new NamedObject("RXCRCDATAVALIDB");
            RXCRCDATAWIDTHA_port_name = new NamedObject("RXCRCDATAWIDTHA");
            RXCRCDATAWIDTHB_port_name = new NamedObject("RXCRCDATAWIDTHB");
            RXCRCINA_port_name = new NamedObject("RXCRCINA");
            RXCRCINB_port_name = new NamedObject("RXCRCINB");
            RXCRCINITA_port_name = new NamedObject("RXCRCINITA");
            RXCRCINITB_port_name = new NamedObject("RXCRCINITB");
            RXCRCINTCLKA_port_name = new NamedObject("RXCRCINTCLKA");
            RXCRCINTCLKB_port_name = new NamedObject("RXCRCINTCLKB");
            RXCRCPDA_port_name = new NamedObject("RXCRCPDA");
            RXCRCPDB_port_name = new NamedObject("RXCRCPDB");
            RXCRCRESETA_port_name = new NamedObject("RXCRCRESETA");
            RXCRCRESETB_port_name = new NamedObject("RXCRCRESETB");
            RXDATAWIDTHA_port_name = new NamedObject("RXDATAWIDTHA");
            RXDATAWIDTHB_port_name = new NamedObject("RXDATAWIDTHB");
            RXDEC64B66BUSEA_port_name = new NamedObject("RXDEC64B66BUSEA");
            RXDEC64B66BUSEB_port_name = new NamedObject("RXDEC64B66BUSEB");
            RXDEC8B10BUSEA_port_name = new NamedObject("RXDEC8B10BUSEA");
            RXDEC8B10BUSEB_port_name = new NamedObject("RXDEC8B10BUSEB");
            RXDESCRAM64B66BUSEA_port_name = new NamedObject("RXDESCRAM64B66BUSEA");
            RXDESCRAM64B66BUSEB_port_name = new NamedObject("RXDESCRAM64B66BUSEB");
            RXIGNOREBTFA_port_name = new NamedObject("RXIGNOREBTFA");
            RXIGNOREBTFB_port_name = new NamedObject("RXIGNOREBTFB");
            RXINTDATAWIDTHA_port_name = new NamedObject("RXINTDATAWIDTHA");
            RXINTDATAWIDTHB_port_name = new NamedObject("RXINTDATAWIDTHB");
            RXPMARESETA_port_name = new NamedObject("RXPMARESETA");
            RXPMARESETB_port_name = new NamedObject("RXPMARESETB");
            RXPOLARITYA_port_name = new NamedObject("RXPOLARITYA");
            RXPOLARITYB_port_name = new NamedObject("RXPOLARITYB");
            RXRESETA_port_name = new NamedObject("RXRESETA");
            RXRESETB_port_name = new NamedObject("RXRESETB");
            RXSLIDEA_port_name = new NamedObject("RXSLIDEA");
            RXSLIDEB_port_name = new NamedObject("RXSLIDEB");
            RXSYNCA_port_name = new NamedObject("RXSYNCA");
            RXSYNCB_port_name = new NamedObject("RXSYNCB");
            RXUSRCLK2A_port_name = new NamedObject("RXUSRCLK2A");
            RXUSRCLK2B_port_name = new NamedObject("RXUSRCLK2B");
            RXUSRCLKA_port_name = new NamedObject("RXUSRCLKA");
            RXUSRCLKB_port_name = new NamedObject("RXUSRCLKB");
            TXBYPASS8B10BA_port_name = new NamedObject("TXBYPASS8B10BA");
            TXBYPASS8B10BB_port_name = new NamedObject("TXBYPASS8B10BB");
            TXCHARDISPMODEA_port_name = new NamedObject("TXCHARDISPMODEA");
            TXCHARDISPMODEB_port_name = new NamedObject("TXCHARDISPMODEB");
            TXCHARDISPVALA_port_name = new NamedObject("TXCHARDISPVALA");
            TXCHARDISPVALB_port_name = new NamedObject("TXCHARDISPVALB");
            TXCHARISKA_port_name = new NamedObject("TXCHARISKA");
            TXCHARISKB_port_name = new NamedObject("TXCHARISKB");
            TXCLKSTABLEA_port_name = new NamedObject("TXCLKSTABLEA");
            TXCLKSTABLEB_port_name = new NamedObject("TXCLKSTABLEB");
            TXCRCCLKA_port_name = new NamedObject("TXCRCCLKA");
            TXCRCCLKB_port_name = new NamedObject("TXCRCCLKB");
            TXCRCDATAVALIDA_port_name = new NamedObject("TXCRCDATAVALIDA");
            TXCRCDATAVALIDB_port_name = new NamedObject("TXCRCDATAVALIDB");
            TXCRCDATAWIDTHA_port_name = new NamedObject("TXCRCDATAWIDTHA");
            TXCRCDATAWIDTHB_port_name = new NamedObject("TXCRCDATAWIDTHB");
            TXCRCINA_port_name = new NamedObject("TXCRCINA");
            TXCRCINB_port_name = new NamedObject("TXCRCINB");
            TXCRCINITA_port_name = new NamedObject("TXCRCINITA");
            TXCRCINITB_port_name = new NamedObject("TXCRCINITB");
            TXCRCINTCLKA_port_name = new NamedObject("TXCRCINTCLKA");
            TXCRCINTCLKB_port_name = new NamedObject("TXCRCINTCLKB");
            TXCRCPDA_port_name = new NamedObject("TXCRCPDA");
            TXCRCPDB_port_name = new NamedObject("TXCRCPDB");
            TXCRCRESETA_port_name = new NamedObject("TXCRCRESETA");
            TXCRCRESETB_port_name = new NamedObject("TXCRCRESETB");
            TXDATAA_port_name = new NamedObject("TXDATAA");
            TXDATAB_port_name = new NamedObject("TXDATAB");
            TXDATAWIDTHA_port_name = new NamedObject("TXDATAWIDTHA");
            TXDATAWIDTHB_port_name = new NamedObject("TXDATAWIDTHB");
            TXENC64B66BUSEA_port_name = new NamedObject("TXENC64B66BUSEA");
            TXENC64B66BUSEB_port_name = new NamedObject("TXENC64B66BUSEB");
            TXENC8B10BUSEA_port_name = new NamedObject("TXENC8B10BUSEA");
            TXENC8B10BUSEB_port_name = new NamedObject("TXENC8B10BUSEB");
            TXENOOBA_port_name = new NamedObject("TXENOOBA");
            TXENOOBB_port_name = new NamedObject("TXENOOBB");
            TXGEARBOX64B66BUSEA_port_name = new NamedObject("TXGEARBOX64B66BUSEA");
            TXGEARBOX64B66BUSEB_port_name = new NamedObject("TXGEARBOX64B66BUSEB");
            TXINHIBITA_port_name = new NamedObject("TXINHIBITA");
            TXINHIBITB_port_name = new NamedObject("TXINHIBITB");
            TXINTDATAWIDTHA_port_name = new NamedObject("TXINTDATAWIDTHA");
            TXINTDATAWIDTHB_port_name = new NamedObject("TXINTDATAWIDTHB");
            TXPMARESETA_port_name = new NamedObject("TXPMARESETA");
            TXPMARESETB_port_name = new NamedObject("TXPMARESETB");
            TXPOLARITYA_port_name = new NamedObject("TXPOLARITYA");
            TXPOLARITYB_port_name = new NamedObject("TXPOLARITYB");
            TXRESETA_port_name = new NamedObject("TXRESETA");
            TXRESETB_port_name = new NamedObject("TXRESETB");
            TXSCRAM64B66BUSEA_port_name = new NamedObject("TXSCRAM64B66BUSEA");
            TXSCRAM64B66BUSEB_port_name = new NamedObject("TXSCRAM64B66BUSEB");
            TXSYNCA_port_name = new NamedObject("TXSYNCA");
            TXSYNCB_port_name = new NamedObject("TXSYNCB");
            TXUSRCLK2A_port_name = new NamedObject("TXUSRCLK2A");
            TXUSRCLK2B_port_name = new NamedObject("TXUSRCLK2B");
            TXUSRCLKA_port_name = new NamedObject("TXUSRCLKA");
            TXUSRCLKB_port_name = new NamedObject("TXUSRCLKB");
            DRPDO_port_name = new NamedObject("DRPDO");
            GTHINITDONE_port_name = new NamedObject("GTHINITDONE");
            MGMTPCSRDACK_port_name = new NamedObject("MGMTPCSRDACK");
            MGMTPCSRDDATA_port_name = new NamedObject("MGMTPCSRDDATA");
            RXCODEERR0_port_name = new NamedObject("RXCODEERR0");
            RXCODEERR1_port_name = new NamedObject("RXCODEERR1");
            RXCODEERR2_port_name = new NamedObject("RXCODEERR2");
            RXCODEERR3_port_name = new NamedObject("RXCODEERR3");
            RXCTRL0_port_name = new NamedObject("RXCTRL0");
            RXCTRL1_port_name = new NamedObject("RXCTRL1");
            RXCTRL2_port_name = new NamedObject("RXCTRL2");
            RXCTRL3_port_name = new NamedObject("RXCTRL3");
            RXCTRLACK0_port_name = new NamedObject("RXCTRLACK0");
            RXCTRLACK1_port_name = new NamedObject("RXCTRLACK1");
            RXCTRLACK2_port_name = new NamedObject("RXCTRLACK2");
            RXCTRLACK3_port_name = new NamedObject("RXCTRLACK3");
            RXDATA0_port_name = new NamedObject("RXDATA0");
            RXDATA1_port_name = new NamedObject("RXDATA1");
            RXDATA2_port_name = new NamedObject("RXDATA2");
            RXDATA3_port_name = new NamedObject("RXDATA3");
            RXDATATAP0_port_name = new NamedObject("RXDATATAP0");
            RXDATATAP1_port_name = new NamedObject("RXDATATAP1");
            RXDATATAP2_port_name = new NamedObject("RXDATATAP2");
            RXDATATAP3_port_name = new NamedObject("RXDATATAP3");
            RXDISPERR0_port_name = new NamedObject("RXDISPERR0");
            RXDISPERR1_port_name = new NamedObject("RXDISPERR1");
            RXDISPERR2_port_name = new NamedObject("RXDISPERR2");
            RXDISPERR3_port_name = new NamedObject("RXDISPERR3");
            RXPCSCLKSMPL0_port_name = new NamedObject("RXPCSCLKSMPL0");
            RXPCSCLKSMPL1_port_name = new NamedObject("RXPCSCLKSMPL1");
            RXPCSCLKSMPL2_port_name = new NamedObject("RXPCSCLKSMPL2");
            RXPCSCLKSMPL3_port_name = new NamedObject("RXPCSCLKSMPL3");
            RXUSERCLKOUT0_port_name = new NamedObject("RXUSERCLKOUT0");
            RXUSERCLKOUT1_port_name = new NamedObject("RXUSERCLKOUT1");
            RXUSERCLKOUT2_port_name = new NamedObject("RXUSERCLKOUT2");
            RXUSERCLKOUT3_port_name = new NamedObject("RXUSERCLKOUT3");
            RXVALID0_port_name = new NamedObject("RXVALID0");
            RXVALID1_port_name = new NamedObject("RXVALID1");
            RXVALID2_port_name = new NamedObject("RXVALID2");
            RXVALID3_port_name = new NamedObject("RXVALID3");
            TSTPATH_port_name = new NamedObject("TSTPATH");
            TSTREFCLKFAB_port_name = new NamedObject("TSTREFCLKFAB");
            TSTREFCLKOUT_port_name = new NamedObject("TSTREFCLKOUT");
            TXCTRLACK0_port_name = new NamedObject("TXCTRLACK0");
            TXCTRLACK1_port_name = new NamedObject("TXCTRLACK1");
            TXCTRLACK2_port_name = new NamedObject("TXCTRLACK2");
            TXCTRLACK3_port_name = new NamedObject("TXCTRLACK3");
            TXDATATAP10_port_name = new NamedObject("TXDATATAP10");
            TXDATATAP11_port_name = new NamedObject("TXDATATAP11");
            TXDATATAP12_port_name = new NamedObject("TXDATATAP12");
            TXDATATAP13_port_name = new NamedObject("TXDATATAP13");
            TXDATATAP20_port_name = new NamedObject("TXDATATAP20");
            TXDATATAP21_port_name = new NamedObject("TXDATATAP21");
            TXDATATAP22_port_name = new NamedObject("TXDATATAP22");
            TXDATATAP23_port_name = new NamedObject("TXDATATAP23");
            TXN0_port_name = new NamedObject("TXN0");
            TXN1_port_name = new NamedObject("TXN1");
            TXN2_port_name = new NamedObject("TXN2");
            TXN3_port_name = new NamedObject("TXN3");
            TXP0_port_name = new NamedObject("TXP0");
            TXP1_port_name = new NamedObject("TXP1");
            TXP2_port_name = new NamedObject("TXP2");
            TXP3_port_name = new NamedObject("TXP3");
            TXPCSCLKSMPL0_port_name = new NamedObject("TXPCSCLKSMPL0");
            TXPCSCLKSMPL1_port_name = new NamedObject("TXPCSCLKSMPL1");
            TXPCSCLKSMPL2_port_name = new NamedObject("TXPCSCLKSMPL2");
            TXPCSCLKSMPL3_port_name = new NamedObject("TXPCSCLKSMPL3");
            TXUSERCLKOUT0_port_name = new NamedObject("TXUSERCLKOUT0");
            TXUSERCLKOUT1_port_name = new NamedObject("TXUSERCLKOUT1");
            TXUSERCLKOUT2_port_name = new NamedObject("TXUSERCLKOUT2");
            TXUSERCLKOUT3_port_name = new NamedObject("TXUSERCLKOUT3");
            DFETRAINCTRL0_port_name = new NamedObject("DFETRAINCTRL0");
            DFETRAINCTRL1_port_name = new NamedObject("DFETRAINCTRL1");
            DFETRAINCTRL2_port_name = new NamedObject("DFETRAINCTRL2");
            DFETRAINCTRL3_port_name = new NamedObject("DFETRAINCTRL3");
            DISABLEDRP_port_name = new NamedObject("DISABLEDRP");
            GTHINIT_port_name = new NamedObject("GTHINIT");
            GTHRESET_port_name = new NamedObject("GTHRESET");
            GTHX2LANE01_port_name = new NamedObject("GTHX2LANE01");
            GTHX2LANE23_port_name = new NamedObject("GTHX2LANE23");
            GTHX4LANE_port_name = new NamedObject("GTHX4LANE");
            MGMTPCSLANESEL_port_name = new NamedObject("MGMTPCSLANESEL");
            MGMTPCSMMDADDR_port_name = new NamedObject("MGMTPCSMMDADDR");
            MGMTPCSREGADDR_port_name = new NamedObject("MGMTPCSREGADDR");
            MGMTPCSREGRD_port_name = new NamedObject("MGMTPCSREGRD");
            MGMTPCSREGWR_port_name = new NamedObject("MGMTPCSREGWR");
            MGMTPCSWRDATA_port_name = new NamedObject("MGMTPCSWRDATA");
            PLLPCSCLKDIV_port_name = new NamedObject("PLLPCSCLKDIV");
            PLLREFCLKSEL_port_name = new NamedObject("PLLREFCLKSEL");
            POWERDOWN0_port_name = new NamedObject("POWERDOWN0");
            POWERDOWN1_port_name = new NamedObject("POWERDOWN1");
            POWERDOWN2_port_name = new NamedObject("POWERDOWN2");
            POWERDOWN3_port_name = new NamedObject("POWERDOWN3");
            RXBUFRESET0_port_name = new NamedObject("RXBUFRESET0");
            RXBUFRESET1_port_name = new NamedObject("RXBUFRESET1");
            RXBUFRESET2_port_name = new NamedObject("RXBUFRESET2");
            RXBUFRESET3_port_name = new NamedObject("RXBUFRESET3");
            RXENCOMMADET0_port_name = new NamedObject("RXENCOMMADET0");
            RXENCOMMADET1_port_name = new NamedObject("RXENCOMMADET1");
            RXENCOMMADET2_port_name = new NamedObject("RXENCOMMADET2");
            RXENCOMMADET3_port_name = new NamedObject("RXENCOMMADET3");
            RXN0_port_name = new NamedObject("RXN0");
            RXN1_port_name = new NamedObject("RXN1");
            RXN2_port_name = new NamedObject("RXN2");
            RXN3_port_name = new NamedObject("RXN3");
            RXP0_port_name = new NamedObject("RXP0");
            RXP1_port_name = new NamedObject("RXP1");
            RXP2_port_name = new NamedObject("RXP2");
            RXP3_port_name = new NamedObject("RXP3");
            RXPOLARITY0_port_name = new NamedObject("RXPOLARITY0");
            RXPOLARITY1_port_name = new NamedObject("RXPOLARITY1");
            RXPOLARITY2_port_name = new NamedObject("RXPOLARITY2");
            RXPOLARITY3_port_name = new NamedObject("RXPOLARITY3");
            RXPOWERDOWN0_port_name = new NamedObject("RXPOWERDOWN0");
            RXPOWERDOWN1_port_name = new NamedObject("RXPOWERDOWN1");
            RXPOWERDOWN2_port_name = new NamedObject("RXPOWERDOWN2");
            RXPOWERDOWN3_port_name = new NamedObject("RXPOWERDOWN3");
            RXRATE0_port_name = new NamedObject("RXRATE0");
            RXRATE1_port_name = new NamedObject("RXRATE1");
            RXRATE2_port_name = new NamedObject("RXRATE2");
            RXRATE3_port_name = new NamedObject("RXRATE3");
            RXSLIP0_port_name = new NamedObject("RXSLIP0");
            RXSLIP1_port_name = new NamedObject("RXSLIP1");
            RXSLIP2_port_name = new NamedObject("RXSLIP2");
            RXSLIP3_port_name = new NamedObject("RXSLIP3");
            RXUSERCLKIN0_port_name = new NamedObject("RXUSERCLKIN0");
            RXUSERCLKIN1_port_name = new NamedObject("RXUSERCLKIN1");
            RXUSERCLKIN2_port_name = new NamedObject("RXUSERCLKIN2");
            RXUSERCLKIN3_port_name = new NamedObject("RXUSERCLKIN3");
            SAMPLERATE0_port_name = new NamedObject("SAMPLERATE0");
            SAMPLERATE1_port_name = new NamedObject("SAMPLERATE1");
            SAMPLERATE2_port_name = new NamedObject("SAMPLERATE2");
            SAMPLERATE3_port_name = new NamedObject("SAMPLERATE3");
            TXBUFRESET0_port_name = new NamedObject("TXBUFRESET0");
            TXBUFRESET1_port_name = new NamedObject("TXBUFRESET1");
            TXBUFRESET2_port_name = new NamedObject("TXBUFRESET2");
            TXBUFRESET3_port_name = new NamedObject("TXBUFRESET3");
            TXCTRL0_port_name = new NamedObject("TXCTRL0");
            TXCTRL1_port_name = new NamedObject("TXCTRL1");
            TXCTRL2_port_name = new NamedObject("TXCTRL2");
            TXCTRL3_port_name = new NamedObject("TXCTRL3");
            TXDATA0_port_name = new NamedObject("TXDATA0");
            TXDATA1_port_name = new NamedObject("TXDATA1");
            TXDATA2_port_name = new NamedObject("TXDATA2");
            TXDATA3_port_name = new NamedObject("TXDATA3");
            TXDATAMSB0_port_name = new NamedObject("TXDATAMSB0");
            TXDATAMSB1_port_name = new NamedObject("TXDATAMSB1");
            TXDATAMSB2_port_name = new NamedObject("TXDATAMSB2");
            TXDATAMSB3_port_name = new NamedObject("TXDATAMSB3");
            TXDEEMPH0_port_name = new NamedObject("TXDEEMPH0");
            TXDEEMPH1_port_name = new NamedObject("TXDEEMPH1");
            TXDEEMPH2_port_name = new NamedObject("TXDEEMPH2");
            TXDEEMPH3_port_name = new NamedObject("TXDEEMPH3");
            TXMARGIN0_port_name = new NamedObject("TXMARGIN0");
            TXMARGIN1_port_name = new NamedObject("TXMARGIN1");
            TXMARGIN2_port_name = new NamedObject("TXMARGIN2");
            TXMARGIN3_port_name = new NamedObject("TXMARGIN3");
            TXPOWERDOWN0_port_name = new NamedObject("TXPOWERDOWN0");
            TXPOWERDOWN1_port_name = new NamedObject("TXPOWERDOWN1");
            TXPOWERDOWN2_port_name = new NamedObject("TXPOWERDOWN2");
            TXPOWERDOWN3_port_name = new NamedObject("TXPOWERDOWN3");
            TXRATE0_port_name = new NamedObject("TXRATE0");
            TXRATE1_port_name = new NamedObject("TXRATE1");
            TXRATE2_port_name = new NamedObject("TXRATE2");
            TXRATE3_port_name = new NamedObject("TXRATE3");
            TXUSERCLKIN0_port_name = new NamedObject("TXUSERCLKIN0");
            TXUSERCLKIN1_port_name = new NamedObject("TXUSERCLKIN1");
            TXUSERCLKIN2_port_name = new NamedObject("TXUSERCLKIN2");
            TXUSERCLKIN3_port_name = new NamedObject("TXUSERCLKIN3");
            CPLLFBCLKLOST_port_name = new NamedObject("CPLLFBCLKLOST");
            CPLLLOCK_port_name = new NamedObject("CPLLLOCK");
            CPLLREFCLKLOST_port_name = new NamedObject("CPLLREFCLKLOST");
            DMONITOROUT_port_name = new NamedObject("DMONITOROUT");
            DRPRDY_port_name = new NamedObject("DRPRDY");
            EYESCANDATAERROR_port_name = new NamedObject("EYESCANDATAERROR");
            GTHTXN_port_name = new NamedObject("GTHTXN");
            GTHTXP_port_name = new NamedObject("GTHTXP");
            GTREFCLKMONITOR_port_name = new NamedObject("GTREFCLKMONITOR");
            PCSRSVDOUT_port_name = new NamedObject("PCSRSVDOUT");
            PHYSTATUS_port_name = new NamedObject("PHYSTATUS");
            RSOSINTDONE_port_name = new NamedObject("RSOSINTDONE");
            RXBUFSTATUS_port_name = new NamedObject("RXBUFSTATUS");
            RXBYTEISALIGNED_port_name = new NamedObject("RXBYTEISALIGNED");
            RXBYTEREALIGN_port_name = new NamedObject("RXBYTEREALIGN");
            RXCDRLOCK_port_name = new NamedObject("RXCDRLOCK");
            RXCHANBONDSEQ_port_name = new NamedObject("RXCHANBONDSEQ");
            RXCHANISALIGNED_port_name = new NamedObject("RXCHANISALIGNED");
            RXCHANREALIGN_port_name = new NamedObject("RXCHANREALIGN");
            RXCHBONDO_port_name = new NamedObject("RXCHBONDO");
            RXCLKCORCNT_port_name = new NamedObject("RXCLKCORCNT");
            RXCOMINITDET_port_name = new NamedObject("RXCOMINITDET");
            RXCOMSASDET_port_name = new NamedObject("RXCOMSASDET");
            RXCOMWAKEDET_port_name = new NamedObject("RXCOMWAKEDET");
            RXDATAVALID_port_name = new NamedObject("RXDATAVALID");
            RXDFESLIDETAPSTARTED_port_name = new NamedObject("RXDFESLIDETAPSTARTED");
            RXDFESLIDETAPSTROBEDONE_port_name = new NamedObject("RXDFESLIDETAPSTROBEDONE");
            RXDFESLIDETAPSTROBESTARTED_port_name = new NamedObject("RXDFESLIDETAPSTROBESTARTED");
            RXDFESTADAPTDONE_port_name = new NamedObject("RXDFESTADAPTDONE");
            RXDLYSRESETDONE_port_name = new NamedObject("RXDLYSRESETDONE");
            RXELECIDLE_port_name = new NamedObject("RXELECIDLE");
            RXHEADER_port_name = new NamedObject("RXHEADER");
            RXHEADERVALID_port_name = new NamedObject("RXHEADERVALID");
            RXMONITOROUT_port_name = new NamedObject("RXMONITOROUT");
            RXOSINTSTARTED_port_name = new NamedObject("RXOSINTSTARTED");
            RXOSINTSTROBEDONE_port_name = new NamedObject("RXOSINTSTROBEDONE");
            RXOSINTSTROBESTARTED_port_name = new NamedObject("RXOSINTSTROBESTARTED");
            RXOUTCLK_port_name = new NamedObject("RXOUTCLK");
            RXOUTCLKFABRIC_port_name = new NamedObject("RXOUTCLKFABRIC");
            RXOUTCLKPCS_port_name = new NamedObject("RXOUTCLKPCS");
            RXPHALIGNDONE_port_name = new NamedObject("RXPHALIGNDONE");
            RXPHMONITOR_port_name = new NamedObject("RXPHMONITOR");
            RXPHSLIPMONITOR_port_name = new NamedObject("RXPHSLIPMONITOR");
            RXPMARESETDONE_port_name = new NamedObject("RXPMARESETDONE");
            RXPRBSERR_port_name = new NamedObject("RXPRBSERR");
            RXQPISENN_port_name = new NamedObject("RXQPISENN");
            RXQPISENP_port_name = new NamedObject("RXQPISENP");
            RXRATEDONE_port_name = new NamedObject("RXRATEDONE");
            RXRESETDONE_port_name = new NamedObject("RXRESETDONE");
            RXSTARTOFSEQ_port_name = new NamedObject("RXSTARTOFSEQ");
            RXSYNCDONE_port_name = new NamedObject("RXSYNCDONE");
            RXSYNCOUT_port_name = new NamedObject("RXSYNCOUT");
            RXVALID_port_name = new NamedObject("RXVALID");
            TXBUFSTATUS_port_name = new NamedObject("TXBUFSTATUS");
            TXCOMFINISH_port_name = new NamedObject("TXCOMFINISH");
            TXDLYSRESETDONE_port_name = new NamedObject("TXDLYSRESETDONE");
            TXGEARBOXREADY_port_name = new NamedObject("TXGEARBOXREADY");
            TXOUTCLK_port_name = new NamedObject("TXOUTCLK");
            TXOUTCLKFABRIC_port_name = new NamedObject("TXOUTCLKFABRIC");
            TXOUTCLKPCS_port_name = new NamedObject("TXOUTCLKPCS");
            TXPHALIGNDONE_port_name = new NamedObject("TXPHALIGNDONE");
            TXPHINITDONE_port_name = new NamedObject("TXPHINITDONE");
            TXPMARESETDONE_port_name = new NamedObject("TXPMARESETDONE");
            TXQPISENN_port_name = new NamedObject("TXQPISENN");
            TXQPISENP_port_name = new NamedObject("TXQPISENP");
            TXRATEDONE_port_name = new NamedObject("TXRATEDONE");
            TXRESETDONE_port_name = new NamedObject("TXRESETDONE");
            TXSYNCDONE_port_name = new NamedObject("TXSYNCDONE");
            TXSYNCOUT_port_name = new NamedObject("TXSYNCOUT");
            CFGRESET_port_name = new NamedObject("CFGRESET");
            CLKRSVD0_port_name = new NamedObject("CLKRSVD0");
            CLKRSVD1_port_name = new NamedObject("CLKRSVD1");
            CPLLLOCKDETCLK_port_name = new NamedObject("CPLLLOCKDETCLK");
            CPLLLOCKEN_port_name = new NamedObject("CPLLLOCKEN");
            CPLLPD_port_name = new NamedObject("CPLLPD");
            CPLLREFCLKSEL_port_name = new NamedObject("CPLLREFCLKSEL");
            CPLLRESET_port_name = new NamedObject("CPLLRESET");
            DMONFIFORESET_port_name = new NamedObject("DMONFIFORESET");
            DMONITORCLK_port_name = new NamedObject("DMONITORCLK");
            DRPADDR_port_name = new NamedObject("DRPADDR");
            DRPCLK_port_name = new NamedObject("DRPCLK");
            DRPDI_port_name = new NamedObject("DRPDI");
            DRPEN_port_name = new NamedObject("DRPEN");
            DRPWE_port_name = new NamedObject("DRPWE");
            EYESCANMODE_port_name = new NamedObject("EYESCANMODE");
            EYESCANRESET_port_name = new NamedObject("EYESCANRESET");
            EYESCANTRIGGER_port_name = new NamedObject("EYESCANTRIGGER");
            GTGREFCLK_port_name = new NamedObject("GTGREFCLK");
            GTHRXN_port_name = new NamedObject("GTHRXN");
            GTHRXP_port_name = new NamedObject("GTHRXP");
            GTNORTHREFCLK0_port_name = new NamedObject("GTNORTHREFCLK0");
            GTNORTHREFCLK1_port_name = new NamedObject("GTNORTHREFCLK1");
            GTREFCLK0_port_name = new NamedObject("GTREFCLK0");
            GTREFCLK1_port_name = new NamedObject("GTREFCLK1");
            GTRESETSEL_port_name = new NamedObject("GTRESETSEL");
            GTRSVD_port_name = new NamedObject("GTRSVD");
            GTRXRESET_port_name = new NamedObject("GTRXRESET");
            GTSOUTHREFCLK0_port_name = new NamedObject("GTSOUTHREFCLK0");
            GTSOUTHREFCLK1_port_name = new NamedObject("GTSOUTHREFCLK1");
            GTTXRESET_port_name = new NamedObject("GTTXRESET");
            PCSRSVDIN_port_name = new NamedObject("PCSRSVDIN");
            PCSRSVDIN2_port_name = new NamedObject("PCSRSVDIN2");
            PMARSVDIN_port_name = new NamedObject("PMARSVDIN");
            QPLLCLK_port_name = new NamedObject("QPLLCLK");
            QPLLREFCLK_port_name = new NamedObject("QPLLREFCLK");
            RESETOVRD_port_name = new NamedObject("RESETOVRD");
            RX8B10BEN_port_name = new NamedObject("RX8B10BEN");
            RXADAPTSELTEST_port_name = new NamedObject("RXADAPTSELTEST");
            RXBUFRESET_port_name = new NamedObject("RXBUFRESET");
            RXCDRFREQRESET_port_name = new NamedObject("RXCDRFREQRESET");
            RXCDRHOLD_port_name = new NamedObject("RXCDRHOLD");
            RXCDROVRDEN_port_name = new NamedObject("RXCDROVRDEN");
            RXCDRRESET_port_name = new NamedObject("RXCDRRESET");
            RXCDRRESETRSV_port_name = new NamedObject("RXCDRRESETRSV");
            RXCHBONDEN_port_name = new NamedObject("RXCHBONDEN");
            RXCHBONDI_port_name = new NamedObject("RXCHBONDI");
            RXCHBONDLEVEL_port_name = new NamedObject("RXCHBONDLEVEL");
            RXCHBONDMASTER_port_name = new NamedObject("RXCHBONDMASTER");
            RXCHBONDSLAVE_port_name = new NamedObject("RXCHBONDSLAVE");
            RXCOMMADETEN_port_name = new NamedObject("RXCOMMADETEN");
            RXDDIEN_port_name = new NamedObject("RXDDIEN");
            RXDFEAGCHOLD_port_name = new NamedObject("RXDFEAGCHOLD");
            RXDFEAGCOVRDEN_port_name = new NamedObject("RXDFEAGCOVRDEN");
            RXDFEAGCTRL_port_name = new NamedObject("RXDFEAGCTRL");
            RXDFECM1EN_port_name = new NamedObject("RXDFECM1EN");
            RXDFELFHOLD_port_name = new NamedObject("RXDFELFHOLD");
            RXDFELFOVRDEN_port_name = new NamedObject("RXDFELFOVRDEN");
            RXDFELPMRESET_port_name = new NamedObject("RXDFELPMRESET");
            RXDFESLIDETAP_port_name = new NamedObject("RXDFESLIDETAP");
            RXDFESLIDETAPADAPTEN_port_name = new NamedObject("RXDFESLIDETAPADAPTEN");
            RXDFESLIDETAPHOLD_port_name = new NamedObject("RXDFESLIDETAPHOLD");
            RXDFESLIDETAPID_port_name = new NamedObject("RXDFESLIDETAPID");
            RXDFESLIDETAPINITOVRDEN_port_name = new NamedObject("RXDFESLIDETAPINITOVRDEN");
            RXDFESLIDETAPONLYADAPTEN_port_name = new NamedObject("RXDFESLIDETAPONLYADAPTEN");
            RXDFESLIDETAPOVRDEN_port_name = new NamedObject("RXDFESLIDETAPOVRDEN");
            RXDFESLIDETAPSTROBE_port_name = new NamedObject("RXDFESLIDETAPSTROBE");
            RXDFETAP2HOLD_port_name = new NamedObject("RXDFETAP2HOLD");
            RXDFETAP2OVRDEN_port_name = new NamedObject("RXDFETAP2OVRDEN");
            RXDFETAP3HOLD_port_name = new NamedObject("RXDFETAP3HOLD");
            RXDFETAP3OVRDEN_port_name = new NamedObject("RXDFETAP3OVRDEN");
            RXDFETAP4HOLD_port_name = new NamedObject("RXDFETAP4HOLD");
            RXDFETAP4OVRDEN_port_name = new NamedObject("RXDFETAP4OVRDEN");
            RXDFETAP5HOLD_port_name = new NamedObject("RXDFETAP5HOLD");
            RXDFETAP5OVRDEN_port_name = new NamedObject("RXDFETAP5OVRDEN");
            RXDFETAP6HOLD_port_name = new NamedObject("RXDFETAP6HOLD");
            RXDFETAP6OVRDEN_port_name = new NamedObject("RXDFETAP6OVRDEN");
            RXDFETAP7HOLD_port_name = new NamedObject("RXDFETAP7HOLD");
            RXDFETAP7OVRDEN_port_name = new NamedObject("RXDFETAP7OVRDEN");
            RXDFEUTHOLD_port_name = new NamedObject("RXDFEUTHOLD");
            RXDFEUTOVRDEN_port_name = new NamedObject("RXDFEUTOVRDEN");
            RXDFEVPHOLD_port_name = new NamedObject("RXDFEVPHOLD");
            RXDFEVPOVRDEN_port_name = new NamedObject("RXDFEVPOVRDEN");
            RXDFEVSEN_port_name = new NamedObject("RXDFEVSEN");
            RXDFEXYDEN_port_name = new NamedObject("RXDFEXYDEN");
            RXDLYBYPASS_port_name = new NamedObject("RXDLYBYPASS");
            RXDLYEN_port_name = new NamedObject("RXDLYEN");
            RXDLYOVRDEN_port_name = new NamedObject("RXDLYOVRDEN");
            RXDLYSRESET_port_name = new NamedObject("RXDLYSRESET");
            RXELECIDLEMODE_port_name = new NamedObject("RXELECIDLEMODE");
            RXGEARBOXSLIP_port_name = new NamedObject("RXGEARBOXSLIP");
            RXLPMEN_port_name = new NamedObject("RXLPMEN");
            RXLPMHFHOLD_port_name = new NamedObject("RXLPMHFHOLD");
            RXLPMHFOVRDEN_port_name = new NamedObject("RXLPMHFOVRDEN");
            RXLPMLFHOLD_port_name = new NamedObject("RXLPMLFHOLD");
            RXLPMLFKLOVRDEN_port_name = new NamedObject("RXLPMLFKLOVRDEN");
            RXMCOMMAALIGNEN_port_name = new NamedObject("RXMCOMMAALIGNEN");
            RXMONITORSEL_port_name = new NamedObject("RXMONITORSEL");
            RXOOBRESET_port_name = new NamedObject("RXOOBRESET");
            RXOSCALRESET_port_name = new NamedObject("RXOSCALRESET");
            RXOSHOLD_port_name = new NamedObject("RXOSHOLD");
            RXOSINTCFG_port_name = new NamedObject("RXOSINTCFG");
            RXOSINTEN_port_name = new NamedObject("RXOSINTEN");
            RXOSINTHOLD_port_name = new NamedObject("RXOSINTHOLD");
            RXOSINTID0_port_name = new NamedObject("RXOSINTID0");
            RXOSINTNTRLEN_port_name = new NamedObject("RXOSINTNTRLEN");
            RXOSINTOVRDEN_port_name = new NamedObject("RXOSINTOVRDEN");
            RXOSINTSTROBE_port_name = new NamedObject("RXOSINTSTROBE");
            RXOSINTTESTOVRDEN_port_name = new NamedObject("RXOSINTTESTOVRDEN");
            RXOSOVRDEN_port_name = new NamedObject("RXOSOVRDEN");
            RXOUTCLKSEL_port_name = new NamedObject("RXOUTCLKSEL");
            RXPCOMMAALIGNEN_port_name = new NamedObject("RXPCOMMAALIGNEN");
            RXPCSRESET_port_name = new NamedObject("RXPCSRESET");
            RXPD_port_name = new NamedObject("RXPD");
            RXPHALIGN_port_name = new NamedObject("RXPHALIGN");
            RXPHALIGNEN_port_name = new NamedObject("RXPHALIGNEN");
            RXPHDLYPD_port_name = new NamedObject("RXPHDLYPD");
            RXPHDLYRESET_port_name = new NamedObject("RXPHDLYRESET");
            RXPHOVRDEN_port_name = new NamedObject("RXPHOVRDEN");
            RXPRBSCNTRESET_port_name = new NamedObject("RXPRBSCNTRESET");
            RXPRBSSEL_port_name = new NamedObject("RXPRBSSEL");
            RXQPIEN_port_name = new NamedObject("RXQPIEN");
            RXRATE_port_name = new NamedObject("RXRATE");
            RXRATEMODE_port_name = new NamedObject("RXRATEMODE");
            RXSYNCALLIN_port_name = new NamedObject("RXSYNCALLIN");
            RXSYNCIN_port_name = new NamedObject("RXSYNCIN");
            RXSYNCMODE_port_name = new NamedObject("RXSYNCMODE");
            RXSYSCLKSEL_port_name = new NamedObject("RXSYSCLKSEL");
            RXUSERRDY_port_name = new NamedObject("RXUSERRDY");
            SETERRSTATUS_port_name = new NamedObject("SETERRSTATUS");
            SIGVALIDCLK_port_name = new NamedObject("SIGVALIDCLK");
            TSTIN_port_name = new NamedObject("TSTIN");
            TX8B10BBYPASS_port_name = new NamedObject("TX8B10BBYPASS");
            TX8B10BEN_port_name = new NamedObject("TX8B10BEN");
            TXBUFDIFFCTRL_port_name = new NamedObject("TXBUFDIFFCTRL");
            TXCOMINIT_port_name = new NamedObject("TXCOMINIT");
            TXCOMSAS_port_name = new NamedObject("TXCOMSAS");
            TXCOMWAKE_port_name = new NamedObject("TXCOMWAKE");
            TXDEEMPH_port_name = new NamedObject("TXDEEMPH");
            TXDETECTRX_port_name = new NamedObject("TXDETECTRX");
            TXDIFFCTRL_port_name = new NamedObject("TXDIFFCTRL");
            TXDIFFPD_port_name = new NamedObject("TXDIFFPD");
            TXDLYBYPASS_port_name = new NamedObject("TXDLYBYPASS");
            TXDLYEN_port_name = new NamedObject("TXDLYEN");
            TXDLYHOLD_port_name = new NamedObject("TXDLYHOLD");
            TXDLYOVRDEN_port_name = new NamedObject("TXDLYOVRDEN");
            TXDLYSRESET_port_name = new NamedObject("TXDLYSRESET");
            TXDLYUPDOWN_port_name = new NamedObject("TXDLYUPDOWN");
            TXELECIDLE_port_name = new NamedObject("TXELECIDLE");
            TXHEADER_port_name = new NamedObject("TXHEADER");
            TXMAINCURSOR_port_name = new NamedObject("TXMAINCURSOR");
            TXMARGIN_port_name = new NamedObject("TXMARGIN");
            TXOUTCLKSEL_port_name = new NamedObject("TXOUTCLKSEL");
            TXPCSRESET_port_name = new NamedObject("TXPCSRESET");
            TXPD_port_name = new NamedObject("TXPD");
            TXPDELECIDLEMODE_port_name = new NamedObject("TXPDELECIDLEMODE");
            TXPHALIGN_port_name = new NamedObject("TXPHALIGN");
            TXPHALIGNEN_port_name = new NamedObject("TXPHALIGNEN");
            TXPHDLYPD_port_name = new NamedObject("TXPHDLYPD");
            TXPHDLYRESET_port_name = new NamedObject("TXPHDLYRESET");
            TXPHDLYTSTCLK_port_name = new NamedObject("TXPHDLYTSTCLK");
            TXPHINIT_port_name = new NamedObject("TXPHINIT");
            TXPHOVRDEN_port_name = new NamedObject("TXPHOVRDEN");
            TXPIPPMEN_port_name = new NamedObject("TXPIPPMEN");
            TXPIPPMOVRDEN_port_name = new NamedObject("TXPIPPMOVRDEN");
            TXPIPPMPD_port_name = new NamedObject("TXPIPPMPD");
            TXPIPPMSEL_port_name = new NamedObject("TXPIPPMSEL");
            TXPIPPMSTEPSIZE_port_name = new NamedObject("TXPIPPMSTEPSIZE");
            TXPISOPD_port_name = new NamedObject("TXPISOPD");
            TXPOSTCURSOR_port_name = new NamedObject("TXPOSTCURSOR");
            TXPOSTCURSORINV_port_name = new NamedObject("TXPOSTCURSORINV");
            TXPRBSFORCEERR_port_name = new NamedObject("TXPRBSFORCEERR");
            TXPRBSSEL_port_name = new NamedObject("TXPRBSSEL");
            TXPRECURSOR_port_name = new NamedObject("TXPRECURSOR");
            TXPRECURSORINV_port_name = new NamedObject("TXPRECURSORINV");
            TXQPIBIASEN_port_name = new NamedObject("TXQPIBIASEN");
            TXQPISTRONGPDOWN_port_name = new NamedObject("TXQPISTRONGPDOWN");
            TXQPIWEAKPUP_port_name = new NamedObject("TXQPIWEAKPUP");
            TXRATE_port_name = new NamedObject("TXRATE");
            TXRATEMODE_port_name = new NamedObject("TXRATEMODE");
            TXSEQUENCE_port_name = new NamedObject("TXSEQUENCE");
            TXSTARTSEQ_port_name = new NamedObject("TXSTARTSEQ");
            TXSWING_port_name = new NamedObject("TXSWING");
            TXSYNCALLIN_port_name = new NamedObject("TXSYNCALLIN");
            TXSYNCIN_port_name = new NamedObject("TXSYNCIN");
            TXSYNCMODE_port_name = new NamedObject("TXSYNCMODE");
            TXSYSCLKSEL_port_name = new NamedObject("TXSYSCLKSEL");
            TXUSERRDY_port_name = new NamedObject("TXUSERRDY");
            PMARSVDOUT_port_name = new NamedObject("PMARSVDOUT");
            QPLLDMONITOR_port_name = new NamedObject("QPLLDMONITOR");
            QPLLFBCLKLOST_port_name = new NamedObject("QPLLFBCLKLOST");
            QPLLLOCK_port_name = new NamedObject("QPLLLOCK");
            QPLLOUTCLK_port_name = new NamedObject("QPLLOUTCLK");
            QPLLOUTREFCLK_port_name = new NamedObject("QPLLOUTREFCLK");
            QPLLREFCLKLOST_port_name = new NamedObject("QPLLREFCLKLOST");
            REFCLKOUTMONITOR_port_name = new NamedObject("REFCLKOUTMONITOR");
            BGBYPASSB_port_name = new NamedObject("BGBYPASSB");
            BGMONITORENB_port_name = new NamedObject("BGMONITORENB");
            BGPDB_port_name = new NamedObject("BGPDB");
            BGRCALOVRD_port_name = new NamedObject("BGRCALOVRD");
            BGRCALOVRDENB_port_name = new NamedObject("BGRCALOVRDENB");
            PMARSVD_port_name = new NamedObject("PMARSVD");
            QPLLLOCKDETCLK_port_name = new NamedObject("QPLLLOCKDETCLK");
            QPLLLOCKEN_port_name = new NamedObject("QPLLLOCKEN");
            QPLLOUTRESET_port_name = new NamedObject("QPLLOUTRESET");
            QPLLPD_port_name = new NamedObject("QPLLPD");
            QPLLREFCLKSEL_port_name = new NamedObject("QPLLREFCLKSEL");
            QPLLRESET_port_name = new NamedObject("QPLLRESET");
            QPLLRSVD1_port_name = new NamedObject("QPLLRSVD1");
            QPLLRSVD2_port_name = new NamedObject("QPLLRSVD2");
            RCALENB_port_name = new NamedObject("RCALENB");
            GTPCLKFBEAST_port_name = new NamedObject("GTPCLKFBEAST");
            GTPCLKFBWEST_port_name = new NamedObject("GTPCLKFBWEST");
            GTPCLKOUT0_port_name = new NamedObject("GTPCLKOUT0");
            GTPCLKOUT1_port_name = new NamedObject("GTPCLKOUT1");
            PHYSTATUS0_port_name = new NamedObject("PHYSTATUS0");
            PHYSTATUS1_port_name = new NamedObject("PHYSTATUS1");
            PLLLKDET0_port_name = new NamedObject("PLLLKDET0");
            PLLLKDET1_port_name = new NamedObject("PLLLKDET1");
            RCALOUTEAST_port_name = new NamedObject("RCALOUTEAST");
            RCALOUTWEST_port_name = new NamedObject("RCALOUTWEST");
            REFCLKOUT0_port_name = new NamedObject("REFCLKOUT0");
            REFCLKOUT1_port_name = new NamedObject("REFCLKOUT1");
            REFCLKPLL0_port_name = new NamedObject("REFCLKPLL0");
            REFCLKPLL1_port_name = new NamedObject("REFCLKPLL1");
            RESETDONE0_port_name = new NamedObject("RESETDONE0");
            RESETDONE1_port_name = new NamedObject("RESETDONE1");
            RXBUFSTATUS0_port_name = new NamedObject("RXBUFSTATUS0");
            RXBUFSTATUS1_port_name = new NamedObject("RXBUFSTATUS1");
            RXBYTEISALIGNED0_port_name = new NamedObject("RXBYTEISALIGNED0");
            RXBYTEISALIGNED1_port_name = new NamedObject("RXBYTEISALIGNED1");
            RXBYTEREALIGN0_port_name = new NamedObject("RXBYTEREALIGN0");
            RXBYTEREALIGN1_port_name = new NamedObject("RXBYTEREALIGN1");
            RXCHANBONDSEQ0_port_name = new NamedObject("RXCHANBONDSEQ0");
            RXCHANBONDSEQ1_port_name = new NamedObject("RXCHANBONDSEQ1");
            RXCHANISALIGNED0_port_name = new NamedObject("RXCHANISALIGNED0");
            RXCHANISALIGNED1_port_name = new NamedObject("RXCHANISALIGNED1");
            RXCHANREALIGN0_port_name = new NamedObject("RXCHANREALIGN0");
            RXCHANREALIGN1_port_name = new NamedObject("RXCHANREALIGN1");
            RXCHARISCOMMA0_port_name = new NamedObject("RXCHARISCOMMA0");
            RXCHARISCOMMA1_port_name = new NamedObject("RXCHARISCOMMA1");
            RXCHARISK0_port_name = new NamedObject("RXCHARISK0");
            RXCHARISK1_port_name = new NamedObject("RXCHARISK1");
            RXCLKCORCNT0_port_name = new NamedObject("RXCLKCORCNT0");
            RXCLKCORCNT1_port_name = new NamedObject("RXCLKCORCNT1");
            RXCOMMADET0_port_name = new NamedObject("RXCOMMADET0");
            RXCOMMADET1_port_name = new NamedObject("RXCOMMADET1");
            RXELECIDLE0_port_name = new NamedObject("RXELECIDLE0");
            RXELECIDLE1_port_name = new NamedObject("RXELECIDLE1");
            RXLOSSOFSYNC0_port_name = new NamedObject("RXLOSSOFSYNC0");
            RXLOSSOFSYNC1_port_name = new NamedObject("RXLOSSOFSYNC1");
            RXNOTINTABLE0_port_name = new NamedObject("RXNOTINTABLE0");
            RXNOTINTABLE1_port_name = new NamedObject("RXNOTINTABLE1");
            RXPRBSERR0_port_name = new NamedObject("RXPRBSERR0");
            RXPRBSERR1_port_name = new NamedObject("RXPRBSERR1");
            RXRECCLK0_port_name = new NamedObject("RXRECCLK0");
            RXRUNDISP0_port_name = new NamedObject("RXRUNDISP0");
            RXRUNDISP1_port_name = new NamedObject("RXRUNDISP1");
            RXSTATUS0_port_name = new NamedObject("RXSTATUS0");
            RXSTATUS1_port_name = new NamedObject("RXSTATUS1");
            TSTOUT0_port_name = new NamedObject("TSTOUT0");
            TSTOUT1_port_name = new NamedObject("TSTOUT1");
            TXBUFSTATUS0_port_name = new NamedObject("TXBUFSTATUS0");
            TXBUFSTATUS1_port_name = new NamedObject("TXBUFSTATUS1");
            TXKERR0_port_name = new NamedObject("TXKERR0");
            TXKERR1_port_name = new NamedObject("TXKERR1");
            TXOUTCLK0_port_name = new NamedObject("TXOUTCLK0");
            TXRUNDISP0_port_name = new NamedObject("TXRUNDISP0");
            TXRUNDISP1_port_name = new NamedObject("TXRUNDISP1");
            CLK00_port_name = new NamedObject("CLK00");
            CLK01_port_name = new NamedObject("CLK01");
            CLK10_port_name = new NamedObject("CLK10");
            CLK11_port_name = new NamedObject("CLK11");
            CLKINEAST0_port_name = new NamedObject("CLKINEAST0");
            CLKINEAST1_port_name = new NamedObject("CLKINEAST1");
            CLKINWEST0_port_name = new NamedObject("CLKINWEST0");
            CLKINWEST1_port_name = new NamedObject("CLKINWEST1");
            GATERXELECIDLE0_port_name = new NamedObject("GATERXELECIDLE0");
            GATERXELECIDLE1_port_name = new NamedObject("GATERXELECIDLE1");
            GCLK00_port_name = new NamedObject("GCLK00");
            GCLK01_port_name = new NamedObject("GCLK01");
            GCLK10_port_name = new NamedObject("GCLK10");
            GCLK11_port_name = new NamedObject("GCLK11");
            GTPCLKFBSEL0EAST_port_name = new NamedObject("GTPCLKFBSEL0EAST");
            GTPCLKFBSEL0WEST_port_name = new NamedObject("GTPCLKFBSEL0WEST");
            GTPCLKFBSEL1EAST_port_name = new NamedObject("GTPCLKFBSEL1EAST");
            GTPCLKFBSEL1WEST_port_name = new NamedObject("GTPCLKFBSEL1WEST");
            GTPRESET0_port_name = new NamedObject("GTPRESET0");
            GTPRESET1_port_name = new NamedObject("GTPRESET1");
            GTPTEST0_port_name = new NamedObject("GTPTEST0");
            GTPTEST1_port_name = new NamedObject("GTPTEST1");
            IGNORESIGDET0_port_name = new NamedObject("IGNORESIGDET0");
            IGNORESIGDET1_port_name = new NamedObject("IGNORESIGDET1");
            INTDATAWIDTH0_port_name = new NamedObject("INTDATAWIDTH0");
            INTDATAWIDTH1_port_name = new NamedObject("INTDATAWIDTH1");
            LOOPBACK0_port_name = new NamedObject("LOOPBACK0");
            LOOPBACK1_port_name = new NamedObject("LOOPBACK1");
            PLLCLK00_port_name = new NamedObject("PLLCLK00");
            PLLCLK01_port_name = new NamedObject("PLLCLK01");
            PLLCLK10_port_name = new NamedObject("PLLCLK10");
            PLLCLK11_port_name = new NamedObject("PLLCLK11");
            PLLLKDETEN0_port_name = new NamedObject("PLLLKDETEN0");
            PLLLKDETEN1_port_name = new NamedObject("PLLLKDETEN1");
            PLLPOWERDOWN0_port_name = new NamedObject("PLLPOWERDOWN0");
            PLLPOWERDOWN1_port_name = new NamedObject("PLLPOWERDOWN1");
            PRBSCNTRESET0_port_name = new NamedObject("PRBSCNTRESET0");
            PRBSCNTRESET1_port_name = new NamedObject("PRBSCNTRESET1");
            RCALINEAST_port_name = new NamedObject("RCALINEAST");
            RCALINWEST_port_name = new NamedObject("RCALINWEST");
            REFCLKPWRDNB0_port_name = new NamedObject("REFCLKPWRDNB0");
            REFCLKPWRDNB1_port_name = new NamedObject("REFCLKPWRDNB1");
            REFSELDYPLL0_port_name = new NamedObject("REFSELDYPLL0");
            REFSELDYPLL1_port_name = new NamedObject("REFSELDYPLL1");
            RXCDRRESET0_port_name = new NamedObject("RXCDRRESET0");
            RXCDRRESET1_port_name = new NamedObject("RXCDRRESET1");
            RXCHBONDMASTER0_port_name = new NamedObject("RXCHBONDMASTER0");
            RXCHBONDMASTER1_port_name = new NamedObject("RXCHBONDMASTER1");
            RXCHBONDSLAVE0_port_name = new NamedObject("RXCHBONDSLAVE0");
            RXCHBONDSLAVE1_port_name = new NamedObject("RXCHBONDSLAVE1");
            RXCOMMADETUSE0_port_name = new NamedObject("RXCOMMADETUSE0");
            RXCOMMADETUSE1_port_name = new NamedObject("RXCOMMADETUSE1");
            RXDATAWIDTH0_port_name = new NamedObject("RXDATAWIDTH0");
            RXDATAWIDTH1_port_name = new NamedObject("RXDATAWIDTH1");
            RXDEC8B10BUSE0_port_name = new NamedObject("RXDEC8B10BUSE0");
            RXDEC8B10BUSE1_port_name = new NamedObject("RXDEC8B10BUSE1");
            RXENCHANSYNC0_port_name = new NamedObject("RXENCHANSYNC0");
            RXENCHANSYNC1_port_name = new NamedObject("RXENCHANSYNC1");
            RXENMCOMMAALIGN0_port_name = new NamedObject("RXENMCOMMAALIGN0");
            RXENMCOMMAALIGN1_port_name = new NamedObject("RXENMCOMMAALIGN1");
            RXENPCOMMAALIGN0_port_name = new NamedObject("RXENPCOMMAALIGN0");
            RXENPCOMMAALIGN1_port_name = new NamedObject("RXENPCOMMAALIGN1");
            RXENPMAPHASEALIGN0_port_name = new NamedObject("RXENPMAPHASEALIGN0");
            RXENPMAPHASEALIGN1_port_name = new NamedObject("RXENPMAPHASEALIGN1");
            RXENPRBSTST0_port_name = new NamedObject("RXENPRBSTST0");
            RXENPRBSTST1_port_name = new NamedObject("RXENPRBSTST1");
            RXEQMIX0_port_name = new NamedObject("RXEQMIX0");
            RXEQMIX1_port_name = new NamedObject("RXEQMIX1");
            RXPMASETPHASE0_port_name = new NamedObject("RXPMASETPHASE0");
            RXPMASETPHASE1_port_name = new NamedObject("RXPMASETPHASE1");
            RXRESET0_port_name = new NamedObject("RXRESET0");
            RXRESET1_port_name = new NamedObject("RXRESET1");
            RXSLIDE0_port_name = new NamedObject("RXSLIDE0");
            RXSLIDE1_port_name = new NamedObject("RXSLIDE1");
            RXUSRCLK0_port_name = new NamedObject("RXUSRCLK0");
            RXUSRCLK1_port_name = new NamedObject("RXUSRCLK1");
            RXUSRCLK20_port_name = new NamedObject("RXUSRCLK20");
            RXUSRCLK21_port_name = new NamedObject("RXUSRCLK21");
            TSTCLK0_port_name = new NamedObject("TSTCLK0");
            TSTCLK1_port_name = new NamedObject("TSTCLK1");
            TSTIN0_port_name = new NamedObject("TSTIN0");
            TSTIN1_port_name = new NamedObject("TSTIN1");
            TXBUFDIFFCTRL0_port_name = new NamedObject("TXBUFDIFFCTRL0");
            TXBUFDIFFCTRL1_port_name = new NamedObject("TXBUFDIFFCTRL1");
            TXBYPASS8B10B0_port_name = new NamedObject("TXBYPASS8B10B0");
            TXBYPASS8B10B1_port_name = new NamedObject("TXBYPASS8B10B1");
            TXCHARDISPMODE0_port_name = new NamedObject("TXCHARDISPMODE0");
            TXCHARDISPMODE1_port_name = new NamedObject("TXCHARDISPMODE1");
            TXCHARDISPVAL0_port_name = new NamedObject("TXCHARDISPVAL0");
            TXCHARDISPVAL1_port_name = new NamedObject("TXCHARDISPVAL1");
            TXCHARISK0_port_name = new NamedObject("TXCHARISK0");
            TXCHARISK1_port_name = new NamedObject("TXCHARISK1");
            TXCOMSTART0_port_name = new NamedObject("TXCOMSTART0");
            TXCOMSTART1_port_name = new NamedObject("TXCOMSTART1");
            TXCOMTYPE0_port_name = new NamedObject("TXCOMTYPE0");
            TXCOMTYPE1_port_name = new NamedObject("TXCOMTYPE1");
            TXDATAWIDTH0_port_name = new NamedObject("TXDATAWIDTH0");
            TXDATAWIDTH1_port_name = new NamedObject("TXDATAWIDTH1");
            TXDETECTRX0_port_name = new NamedObject("TXDETECTRX0");
            TXDETECTRX1_port_name = new NamedObject("TXDETECTRX1");
            TXDIFFCTRL0_port_name = new NamedObject("TXDIFFCTRL0");
            TXDIFFCTRL1_port_name = new NamedObject("TXDIFFCTRL1");
            TXELECIDLE0_port_name = new NamedObject("TXELECIDLE0");
            TXELECIDLE1_port_name = new NamedObject("TXELECIDLE1");
            TXENC8B10BUSE0_port_name = new NamedObject("TXENC8B10BUSE0");
            TXENC8B10BUSE1_port_name = new NamedObject("TXENC8B10BUSE1");
            TXENPMAPHASEALIGN0_port_name = new NamedObject("TXENPMAPHASEALIGN0");
            TXENPMAPHASEALIGN1_port_name = new NamedObject("TXENPMAPHASEALIGN1");
            TXENPRBSTST0_port_name = new NamedObject("TXENPRBSTST0");
            TXENPRBSTST1_port_name = new NamedObject("TXENPRBSTST1");
            TXINHIBIT0_port_name = new NamedObject("TXINHIBIT0");
            TXINHIBIT1_port_name = new NamedObject("TXINHIBIT1");
            TXPDOWNASYNCH0_port_name = new NamedObject("TXPDOWNASYNCH0");
            TXPDOWNASYNCH1_port_name = new NamedObject("TXPDOWNASYNCH1");
            TXPMASETPHASE0_port_name = new NamedObject("TXPMASETPHASE0");
            TXPMASETPHASE1_port_name = new NamedObject("TXPMASETPHASE1");
            TXPOLARITY0_port_name = new NamedObject("TXPOLARITY0");
            TXPOLARITY1_port_name = new NamedObject("TXPOLARITY1");
            TXPRBSFORCEERR0_port_name = new NamedObject("TXPRBSFORCEERR0");
            TXPRBSFORCEERR1_port_name = new NamedObject("TXPRBSFORCEERR1");
            TXPREEMPHASIS0_port_name = new NamedObject("TXPREEMPHASIS0");
            TXPREEMPHASIS1_port_name = new NamedObject("TXPREEMPHASIS1");
            TXRESET0_port_name = new NamedObject("TXRESET0");
            TXRESET1_port_name = new NamedObject("TXRESET1");
            TXUSRCLK0_port_name = new NamedObject("TXUSRCLK0");
            TXUSRCLK1_port_name = new NamedObject("TXUSRCLK1");
            TXUSRCLK20_port_name = new NamedObject("TXUSRCLK20");
            TXUSRCLK21_port_name = new NamedObject("TXUSRCLK21");
            USRCODEERR0_port_name = new NamedObject("USRCODEERR0");
            USRCODEERR1_port_name = new NamedObject("USRCODEERR1");
            GTPTXN_port_name = new NamedObject("GTPTXN");
            GTPTXP_port_name = new NamedObject("GTPTXP");
            PMARSVDOUT0_port_name = new NamedObject("PMARSVDOUT0");
            PMARSVDOUT1_port_name = new NamedObject("PMARSVDOUT1");
            RXOSINTDONE_port_name = new NamedObject("RXOSINTDONE");
            GTPRXN_port_name = new NamedObject("GTPRXN");
            GTPRXP_port_name = new NamedObject("GTPRXP");
            PLL0CLK_port_name = new NamedObject("PLL0CLK");
            PLL0REFCLK_port_name = new NamedObject("PLL0REFCLK");
            PLL1CLK_port_name = new NamedObject("PLL1CLK");
            PLL1REFCLK_port_name = new NamedObject("PLL1REFCLK");
            PMARSVDIN0_port_name = new NamedObject("PMARSVDIN0");
            PMARSVDIN1_port_name = new NamedObject("PMARSVDIN1");
            PMARSVDIN2_port_name = new NamedObject("PMARSVDIN2");
            PMARSVDIN3_port_name = new NamedObject("PMARSVDIN3");
            PMARSVDIN4_port_name = new NamedObject("PMARSVDIN4");
            RXLPMLFOVRDEN_port_name = new NamedObject("RXLPMLFOVRDEN");
            RXLPMOSINTNTRLEN_port_name = new NamedObject("RXLPMOSINTNTRLEN");
            RXLPMRESET_port_name = new NamedObject("RXLPMRESET");
            RXOSINTPD_port_name = new NamedObject("RXOSINTPD");
            PLL0FBCLKLOST_port_name = new NamedObject("PLL0FBCLKLOST");
            PLL0LOCK_port_name = new NamedObject("PLL0LOCK");
            PLL0OUTCLK_port_name = new NamedObject("PLL0OUTCLK");
            PLL0OUTREFCLK_port_name = new NamedObject("PLL0OUTREFCLK");
            PLL0REFCLKLOST_port_name = new NamedObject("PLL0REFCLKLOST");
            PLL1FBCLKLOST_port_name = new NamedObject("PLL1FBCLKLOST");
            PLL1LOCK_port_name = new NamedObject("PLL1LOCK");
            PLL1OUTCLK_port_name = new NamedObject("PLL1OUTCLK");
            PLL1OUTREFCLK_port_name = new NamedObject("PLL1OUTREFCLK");
            PLL1REFCLKLOST_port_name = new NamedObject("PLL1REFCLKLOST");
            REFCLKOUTMONITOR0_port_name = new NamedObject("REFCLKOUTMONITOR0");
            REFCLKOUTMONITOR1_port_name = new NamedObject("REFCLKOUTMONITOR1");
            GTEASTREFCLK0_port_name = new NamedObject("GTEASTREFCLK0");
            GTEASTREFCLK1_port_name = new NamedObject("GTEASTREFCLK1");
            GTGREFCLK0_port_name = new NamedObject("GTGREFCLK0");
            GTGREFCLK1_port_name = new NamedObject("GTGREFCLK1");
            GTWESTREFCLK0_port_name = new NamedObject("GTWESTREFCLK0");
            GTWESTREFCLK1_port_name = new NamedObject("GTWESTREFCLK1");
            PLL0LOCKDETCLK_port_name = new NamedObject("PLL0LOCKDETCLK");
            PLL0LOCKEN_port_name = new NamedObject("PLL0LOCKEN");
            PLL0PD_port_name = new NamedObject("PLL0PD");
            PLL0REFCLKSEL_port_name = new NamedObject("PLL0REFCLKSEL");
            PLL0RESET_port_name = new NamedObject("PLL0RESET");
            PLL1LOCKDETCLK_port_name = new NamedObject("PLL1LOCKDETCLK");
            PLL1LOCKEN_port_name = new NamedObject("PLL1LOCKEN");
            PLL1PD_port_name = new NamedObject("PLL1PD");
            PLL1REFCLKSEL_port_name = new NamedObject("PLL1REFCLKSEL");
            PLL1RESET_port_name = new NamedObject("PLL1RESET");
            PLLRSVD1_port_name = new NamedObject("PLLRSVD1");
            PLLRSVD2_port_name = new NamedObject("PLLRSVD2");
            PLLLKDET_port_name = new NamedObject("PLLLKDET");
            REFCLKOUT_port_name = new NamedObject("REFCLKOUT");
            RXCHBONDO0_port_name = new NamedObject("RXCHBONDO0");
            RXCHBONDO1_port_name = new NamedObject("RXCHBONDO1");
            RXOVERSAMPLEERR0_port_name = new NamedObject("RXOVERSAMPLEERR0");
            RXOVERSAMPLEERR1_port_name = new NamedObject("RXOVERSAMPLEERR1");
            GTPRESET_port_name = new NamedObject("GTPRESET");
            GTPTEST_port_name = new NamedObject("GTPTEST");
            INTDATAWIDTH_port_name = new NamedObject("INTDATAWIDTH");
            PLLLKDETEN_port_name = new NamedObject("PLLLKDETEN");
            PLLPOWERDOWN_port_name = new NamedObject("PLLPOWERDOWN");
            REFCLKPWRDNB_port_name = new NamedObject("REFCLKPWRDNB");
            RXCHBONDI0_port_name = new NamedObject("RXCHBONDI0");
            RXCHBONDI1_port_name = new NamedObject("RXCHBONDI1");
            RXELECIDLERESET0_port_name = new NamedObject("RXELECIDLERESET0");
            RXELECIDLERESET1_port_name = new NamedObject("RXELECIDLERESET1");
            RXENELECIDLERESETB_port_name = new NamedObject("RXENELECIDLERESETB");
            RXENEQB0_port_name = new NamedObject("RXENEQB0");
            RXENEQB1_port_name = new NamedObject("RXENEQB1");
            RXENSAMPLEALIGN0_port_name = new NamedObject("RXENSAMPLEALIGN0");
            RXENSAMPLEALIGN1_port_name = new NamedObject("RXENSAMPLEALIGN1");
            RXEQPOLE0_port_name = new NamedObject("RXEQPOLE0");
            RXEQPOLE1_port_name = new NamedObject("RXEQPOLE1");
            TXENPMAPHASEALIGN_port_name = new NamedObject("TXENPMAPHASEALIGN");
            TXPMASETPHASE_port_name = new NamedObject("TXPMASETPHASE");
            COMFINISH_port_name = new NamedObject("COMFINISH");
            COMINITDET_port_name = new NamedObject("COMINITDET");
            COMSASDET_port_name = new NamedObject("COMSASDET");
            COMWAKEDET_port_name = new NamedObject("COMWAKEDET");
            DFECLKDLYADJMON_port_name = new NamedObject("DFECLKDLYADJMON");
            DFEEYEDACMON_port_name = new NamedObject("DFEEYEDACMON");
            DFESENSCAL_port_name = new NamedObject("DFESENSCAL");
            DFETAP1MONITOR_port_name = new NamedObject("DFETAP1MONITOR");
            DFETAP2MONITOR_port_name = new NamedObject("DFETAP2MONITOR");
            DFETAP3MONITOR_port_name = new NamedObject("DFETAP3MONITOR");
            DFETAP4MONITOR_port_name = new NamedObject("DFETAP4MONITOR");
            MGTREFCLKFAB_port_name = new NamedObject("MGTREFCLKFAB");
            RXDLYALIGNMONITOR_port_name = new NamedObject("RXDLYALIGNMONITOR");
            RXOVERSAMPLEERR_port_name = new NamedObject("RXOVERSAMPLEERR");
            RXPLLLKDET_port_name = new NamedObject("RXPLLLKDET");
            RXRECCLK_port_name = new NamedObject("RXRECCLK");
            RXRECCLKPCS_port_name = new NamedObject("RXRECCLKPCS");
            TSTOUT_port_name = new NamedObject("TSTOUT");
            TXDLYALIGNMONITOR_port_name = new NamedObject("TXDLYALIGNMONITOR");
            TXN_port_name = new NamedObject("TXN");
            TXP_port_name = new NamedObject("TXP");
            TXPLLLKDET_port_name = new NamedObject("TXPLLLKDET");
            DFECLKDLYADJ_port_name = new NamedObject("DFECLKDLYADJ");
            DFEDLYOVRD_port_name = new NamedObject("DFEDLYOVRD");
            DFETAP1_port_name = new NamedObject("DFETAP1");
            DFETAP2_port_name = new NamedObject("DFETAP2");
            DFETAP3_port_name = new NamedObject("DFETAP3");
            DFETAP4_port_name = new NamedObject("DFETAP4");
            DFETAPOVRD_port_name = new NamedObject("DFETAPOVRD");
            GATERXELECIDLE_port_name = new NamedObject("GATERXELECIDLE");
            GREFCLKRX_port_name = new NamedObject("GREFCLKRX");
            GREFCLKTX_port_name = new NamedObject("GREFCLKTX");
            GTXRXRESET_port_name = new NamedObject("GTXRXRESET");
            GTXTEST_port_name = new NamedObject("GTXTEST");
            GTXTXRESET_port_name = new NamedObject("GTXTXRESET");
            IGNORESIGDET_port_name = new NamedObject("IGNORESIGDET");
            MGTREFCLKRX_port_name = new NamedObject("MGTREFCLKRX");
            MGTREFCLKTX_port_name = new NamedObject("MGTREFCLKTX");
            NORTHREFCLKRX_port_name = new NamedObject("NORTHREFCLKRX");
            NORTHREFCLKTX_port_name = new NamedObject("NORTHREFCLKTX");
            PERFCLKRX_port_name = new NamedObject("PERFCLKRX");
            PERFCLKTX_port_name = new NamedObject("PERFCLKTX");
            PLLRXRESET_port_name = new NamedObject("PLLRXRESET");
            PLLTXRESET_port_name = new NamedObject("PLLTXRESET");
            PRBSCNTRESET_port_name = new NamedObject("PRBSCNTRESET");
            RXDLYALIGNDISABLE_port_name = new NamedObject("RXDLYALIGNDISABLE");
            RXDLYALIGNMONENB_port_name = new NamedObject("RXDLYALIGNMONENB");
            RXDLYALIGNOVERRIDE_port_name = new NamedObject("RXDLYALIGNOVERRIDE");
            RXDLYALIGNRESET_port_name = new NamedObject("RXDLYALIGNRESET");
            RXDLYALIGNSWPPRECURB_port_name = new NamedObject("RXDLYALIGNSWPPRECURB");
            RXDLYALIGNUPDSW_port_name = new NamedObject("RXDLYALIGNUPDSW");
            RXENCHANSYNC_port_name = new NamedObject("RXENCHANSYNC");
            RXENMCOMMAALIGN_port_name = new NamedObject("RXENMCOMMAALIGN");
            RXENPCOMMAALIGN_port_name = new NamedObject("RXENPCOMMAALIGN");
            RXENPMAPHASEALIGN_port_name = new NamedObject("RXENPMAPHASEALIGN");
            RXENPRBSTST_port_name = new NamedObject("RXENPRBSTST");
            RXENSAMPLEALIGN_port_name = new NamedObject("RXENSAMPLEALIGN");
            RXEQMIX_port_name = new NamedObject("RXEQMIX");
            RXN_port_name = new NamedObject("RXN");
            RXP_port_name = new NamedObject("RXP");
            RXPLLLKDETEN_port_name = new NamedObject("RXPLLLKDETEN");
            RXPLLPOWERDOWN_port_name = new NamedObject("RXPLLPOWERDOWN");
            RXPLLREFSELDY_port_name = new NamedObject("RXPLLREFSELDY");
            RXPMASETPHASE_port_name = new NamedObject("RXPMASETPHASE");
            RXPOWERDOWN_port_name = new NamedObject("RXPOWERDOWN");
            SOUTHREFCLKRX_port_name = new NamedObject("SOUTHREFCLKRX");
            SOUTHREFCLKTX_port_name = new NamedObject("SOUTHREFCLKTX");
            TXDLYALIGNDISABLE_port_name = new NamedObject("TXDLYALIGNDISABLE");
            TXDLYALIGNMONENB_port_name = new NamedObject("TXDLYALIGNMONENB");
            TXDLYALIGNOVERRIDE_port_name = new NamedObject("TXDLYALIGNOVERRIDE");
            TXDLYALIGNRESET_port_name = new NamedObject("TXDLYALIGNRESET");
            TXDLYALIGNUPDSW_port_name = new NamedObject("TXDLYALIGNUPDSW");
            TXENPRBSTST_port_name = new NamedObject("TXENPRBSTST");
            TXPDOWNASYNCH_port_name = new NamedObject("TXPDOWNASYNCH");
            TXPLLLKDETEN_port_name = new NamedObject("TXPLLLKDETEN");
            TXPLLPOWERDOWN_port_name = new NamedObject("TXPLLPOWERDOWN");
            TXPLLREFSELDY_port_name = new NamedObject("TXPLLREFSELDY");
            TXPOSTEMPHASIS_port_name = new NamedObject("TXPOSTEMPHASIS");
            TXPOWERDOWN_port_name = new NamedObject("TXPOWERDOWN");
            TXPREEMPHASIS_port_name = new NamedObject("TXPREEMPHASIS");
            USRCODEERR_port_name = new NamedObject("USRCODEERR");
            GTXTXN_port_name = new NamedObject("GTXTXN");
            GTXTXP_port_name = new NamedObject("GTXTXP");
            CLKRSVD_port_name = new NamedObject("CLKRSVD");
            GTXRXN_port_name = new NamedObject("GTXRXN");
            GTXRXP_port_name = new NamedObject("GTXRXP");
            RXDFEXYDHOLD_port_name = new NamedObject("RXDFEXYDHOLD");
            RXDFEXYDOVRDEN_port_name = new NamedObject("RXDFEXYDOVRDEN");
            DFECLKDLYADJMONITOR0_port_name = new NamedObject("DFECLKDLYADJMONITOR0");
            DFECLKDLYADJMONITOR1_port_name = new NamedObject("DFECLKDLYADJMONITOR1");
            DFEEYEDACMONITOR0_port_name = new NamedObject("DFEEYEDACMONITOR0");
            DFEEYEDACMONITOR1_port_name = new NamedObject("DFEEYEDACMONITOR1");
            DFESENSCAL0_port_name = new NamedObject("DFESENSCAL0");
            DFESENSCAL1_port_name = new NamedObject("DFESENSCAL1");
            DFETAP1MONITOR0_port_name = new NamedObject("DFETAP1MONITOR0");
            DFETAP1MONITOR1_port_name = new NamedObject("DFETAP1MONITOR1");
            DFETAP2MONITOR0_port_name = new NamedObject("DFETAP2MONITOR0");
            DFETAP2MONITOR1_port_name = new NamedObject("DFETAP2MONITOR1");
            DFETAP3MONITOR0_port_name = new NamedObject("DFETAP3MONITOR0");
            DFETAP3MONITOR1_port_name = new NamedObject("DFETAP3MONITOR1");
            DFETAP4MONITOR0_port_name = new NamedObject("DFETAP4MONITOR0");
            DFETAP4MONITOR1_port_name = new NamedObject("DFETAP4MONITOR1");
            RXDATAVALID0_port_name = new NamedObject("RXDATAVALID0");
            RXDATAVALID1_port_name = new NamedObject("RXDATAVALID1");
            RXHEADER0_port_name = new NamedObject("RXHEADER0");
            RXHEADER1_port_name = new NamedObject("RXHEADER1");
            RXHEADERVALID0_port_name = new NamedObject("RXHEADERVALID0");
            RXHEADERVALID1_port_name = new NamedObject("RXHEADERVALID1");
            RXSTARTOFSEQ0_port_name = new NamedObject("RXSTARTOFSEQ0");
            RXSTARTOFSEQ1_port_name = new NamedObject("RXSTARTOFSEQ1");
            TXGEARBOXREADY0_port_name = new NamedObject("TXGEARBOXREADY0");
            TXGEARBOXREADY1_port_name = new NamedObject("TXGEARBOXREADY1");
            DFECLKDLYADJ0_port_name = new NamedObject("DFECLKDLYADJ0");
            DFECLKDLYADJ1_port_name = new NamedObject("DFECLKDLYADJ1");
            DFETAP10_port_name = new NamedObject("DFETAP10");
            DFETAP11_port_name = new NamedObject("DFETAP11");
            DFETAP20_port_name = new NamedObject("DFETAP20");
            DFETAP21_port_name = new NamedObject("DFETAP21");
            DFETAP30_port_name = new NamedObject("DFETAP30");
            DFETAP31_port_name = new NamedObject("DFETAP31");
            DFETAP40_port_name = new NamedObject("DFETAP40");
            DFETAP41_port_name = new NamedObject("DFETAP41");
            GTXRESET_port_name = new NamedObject("GTXRESET");
            RXGEARBOXSLIP0_port_name = new NamedObject("RXGEARBOXSLIP0");
            RXGEARBOXSLIP1_port_name = new NamedObject("RXGEARBOXSLIP1");
            TXHEADER0_port_name = new NamedObject("TXHEADER0");
            TXHEADER1_port_name = new NamedObject("TXHEADER1");
            TXSEQUENCE0_port_name = new NamedObject("TXSEQUENCE0");
            TXSEQUENCE1_port_name = new NamedObject("TXSEQUENCE1");
            TXSTARTSEQ0_port_name = new NamedObject("TXSTARTSEQ0");
            TXSTARTSEQ1_port_name = new NamedObject("TXSTARTSEQ1");
            OB_port_name = new NamedObject("OB");
            IBUFDISABLE_port_name = new NamedObject("IBUFDISABLE");
            INTERMDISABLE_port_name = new NamedObject("INTERMDISABLE");
            ODIV2_port_name = new NamedObject("ODIV2");
            CSIB_port_name = new NamedObject("CSIB");
            RDWRB_port_name = new NamedObject("RDWRB");
            BUSY_port_name = new NamedObject("BUSY");
            WRITE_port_name = new NamedObject("WRITE");
            CSB_port_name = new NamedObject("CSB");
            Q1_port_name = new NamedObject("Q1");
            Q2_port_name = new NamedObject("Q2");
            Q0_port_name = new NamedObject("Q0");
            CB_port_name = new NamedObject("CB");
            INC_port_name = new NamedObject("INC");
            RDY_port_name = new NamedObject("RDY");
            CNTVALUEOUT_port_name = new NamedObject("CNTVALUEOUT");
            DATAOUT_port_name = new NamedObject("DATAOUT");
            CINVCTRL_port_name = new NamedObject("CINVCTRL");
            CNTVALUEIN_port_name = new NamedObject("CNTVALUEIN");
            DATAIN_port_name = new NamedObject("DATAIN");
            IDATAIN_port_name = new NamedObject("IDATAIN");
            LD_port_name = new NamedObject("LD");
            LDPIPEEN_port_name = new NamedObject("LDPIPEEN");
            REGRST_port_name = new NamedObject("REGRST");
            IFDLY_port_name = new NamedObject("IFDLY");
            Q3_port_name = new NamedObject("Q3");
            Q4_port_name = new NamedObject("Q4");
            Q5_port_name = new NamedObject("Q5");
            Q6_port_name = new NamedObject("Q6");
            Q7_port_name = new NamedObject("Q7");
            Q8_port_name = new NamedObject("Q8");
            Q9_port_name = new NamedObject("Q9");
            D2_port_name = new NamedObject("D2");
            D3_port_name = new NamedObject("D3");
            D4_port_name = new NamedObject("D4");
            D5_port_name = new NamedObject("D5");
            D6_port_name = new NamedObject("D6");
            D7_port_name = new NamedObject("D7");
            D8_port_name = new NamedObject("D8");
            D9_port_name = new NamedObject("D9");
            IO_port_name = new NamedObject("IO");
            IOB_port_name = new NamedObject("IOB");
            DCITERMDISABLE_port_name = new NamedObject("DCITERMDISABLE");
            TM_port_name = new NamedObject("TM");
            TS_port_name = new NamedObject("TS");
            ODATAIN_port_name = new NamedObject("ODATAIN");
            DATAOUT2_port_name = new NamedObject("DATAOUT2");
            TOUT_port_name = new NamedObject("TOUT");
            CAL_port_name = new NamedObject("CAL");
            SDO_port_name = new NamedObject("SDO");
            ADD_port_name = new NamedObject("ADD");
            BKST_port_name = new NamedObject("BKST");
            CS_port_name = new NamedObject("CS");
            SDI_port_name = new NamedObject("SDI");
            AUXSDO_port_name = new NamedObject("AUXSDO");
            DQSOUTN_port_name = new NamedObject("DQSOUTN");
            DQSOUTP_port_name = new NamedObject("DQSOUTP");
            AUXADDR_port_name = new NamedObject("AUXADDR");
            AUXSDOIN_port_name = new NamedObject("AUXSDOIN");
            MEMUPDATE_port_name = new NamedObject("MEMUPDATE");
            SHIFTOUT1_port_name = new NamedObject("SHIFTOUT1");
            SHIFTOUT2_port_name = new NamedObject("SHIFTOUT2");
            BITSLIP_port_name = new NamedObject("BITSLIP");
            CE2_port_name = new NamedObject("CE2");
            CLKDIV_port_name = new NamedObject("CLKDIV");
            DLYCE_port_name = new NamedObject("DLYCE");
            DLYINC_port_name = new NamedObject("DLYINC");
            DLYRST_port_name = new NamedObject("DLYRST");
            OCLK_port_name = new NamedObject("OCLK");
            REV_port_name = new NamedObject("REV");
            SHIFTIN1_port_name = new NamedObject("SHIFTIN1");
            SHIFTIN2_port_name = new NamedObject("SHIFTIN2");
            SR_port_name = new NamedObject("SR");
            CFB0_port_name = new NamedObject("CFB0");
            CFB1_port_name = new NamedObject("CFB1");
            DFB_port_name = new NamedObject("DFB");
            FABRICOUT_port_name = new NamedObject("FABRICOUT");
            INCDEC_port_name = new NamedObject("INCDEC");
            SHIFTOUT_port_name = new NamedObject("SHIFTOUT");
            VALID_port_name = new NamedObject("VALID");
            CLK1_port_name = new NamedObject("CLK1");
            IOCE_port_name = new NamedObject("IOCE");
            SHIFTIN_port_name = new NamedObject("SHIFTIN");
            CLKB_port_name = new NamedObject("CLKB");
            DDLY_port_name = new NamedObject("DDLY");
            DYNCLKDIVSEL_port_name = new NamedObject("DYNCLKDIVSEL");
            DYNCLKSEL_port_name = new NamedObject("DYNCLKSEL");
            OFB_port_name = new NamedObject("OFB");
            CLKDIVP_port_name = new NamedObject("CLKDIVP");
            OCLKB_port_name = new NamedObject("OCLKB");
            TDIPPC_port_name = new NamedObject("TDIPPC");
            TDOPPC_port_name = new NamedObject("TDOPPC");
            TDOTSPPC_port_name = new NamedObject("TDOTSPPC");
            KEYCLEARB_port_name = new NamedObject("KEYCLEARB");
            GE_port_name = new NamedObject("GE");
            LO_port_name = new NamedObject("LO");
            ADDR_port_name = new NamedObject("ADDR");
            BA_port_name = new NamedObject("BA");
            CAS_port_name = new NamedObject("CAS");
            CKE_port_name = new NamedObject("CKE");
            DQIOWEN0_port_name = new NamedObject("DQIOWEN0");
            DQON_port_name = new NamedObject("DQON");
            DQOP_port_name = new NamedObject("DQOP");
            DQSIOWEN90N_port_name = new NamedObject("DQSIOWEN90N");
            DQSIOWEN90P_port_name = new NamedObject("DQSIOWEN90P");
            IOIDRPADD_port_name = new NamedObject("IOIDRPADD");
            IOIDRPADDR_port_name = new NamedObject("IOIDRPADDR");
            IOIDRPBROADCAST_port_name = new NamedObject("IOIDRPBROADCAST");
            IOIDRPCLK_port_name = new NamedObject("IOIDRPCLK");
            IOIDRPCS_port_name = new NamedObject("IOIDRPCS");
            IOIDRPSDO_port_name = new NamedObject("IOIDRPSDO");
            IOIDRPTRAIN_port_name = new NamedObject("IOIDRPTRAIN");
            IOIDRPUPDATE_port_name = new NamedObject("IOIDRPUPDATE");
            LDMN_port_name = new NamedObject("LDMN");
            LDMP_port_name = new NamedObject("LDMP");
            ODT_port_name = new NamedObject("ODT");
            P0CMDEMPTY_port_name = new NamedObject("P0CMDEMPTY");
            P0CMDFULL_port_name = new NamedObject("P0CMDFULL");
            P0RDCOUNT_port_name = new NamedObject("P0RDCOUNT");
            P0RDDATA_port_name = new NamedObject("P0RDDATA");
            P0RDEMPTY_port_name = new NamedObject("P0RDEMPTY");
            P0RDERROR_port_name = new NamedObject("P0RDERROR");
            P0RDFULL_port_name = new NamedObject("P0RDFULL");
            P0RDOVERFLOW_port_name = new NamedObject("P0RDOVERFLOW");
            P0WRCOUNT_port_name = new NamedObject("P0WRCOUNT");
            P0WREMPTY_port_name = new NamedObject("P0WREMPTY");
            P0WRERROR_port_name = new NamedObject("P0WRERROR");
            P0WRFULL_port_name = new NamedObject("P0WRFULL");
            P0WRUNDERRUN_port_name = new NamedObject("P0WRUNDERRUN");
            P1CMDEMPTY_port_name = new NamedObject("P1CMDEMPTY");
            P1CMDFULL_port_name = new NamedObject("P1CMDFULL");
            P1RDCOUNT_port_name = new NamedObject("P1RDCOUNT");
            P1RDDATA_port_name = new NamedObject("P1RDDATA");
            P1RDEMPTY_port_name = new NamedObject("P1RDEMPTY");
            P1RDERROR_port_name = new NamedObject("P1RDERROR");
            P1RDFULL_port_name = new NamedObject("P1RDFULL");
            P1RDOVERFLOW_port_name = new NamedObject("P1RDOVERFLOW");
            P1WRCOUNT_port_name = new NamedObject("P1WRCOUNT");
            P1WREMPTY_port_name = new NamedObject("P1WREMPTY");
            P1WRERROR_port_name = new NamedObject("P1WRERROR");
            P1WRFULL_port_name = new NamedObject("P1WRFULL");
            P1WRUNDERRUN_port_name = new NamedObject("P1WRUNDERRUN");
            P2CMDEMPTY_port_name = new NamedObject("P2CMDEMPTY");
            P2CMDFULL_port_name = new NamedObject("P2CMDFULL");
            P2COUNT_port_name = new NamedObject("P2COUNT");
            P2EMPTY_port_name = new NamedObject("P2EMPTY");
            P2ERROR_port_name = new NamedObject("P2ERROR");
            P2FULL_port_name = new NamedObject("P2FULL");
            P2RDDATA_port_name = new NamedObject("P2RDDATA");
            P2RDOVERFLOW_port_name = new NamedObject("P2RDOVERFLOW");
            P2WRUNDERRUN_port_name = new NamedObject("P2WRUNDERRUN");
            P3CMDEMPTY_port_name = new NamedObject("P3CMDEMPTY");
            P3CMDFULL_port_name = new NamedObject("P3CMDFULL");
            P3COUNT_port_name = new NamedObject("P3COUNT");
            P3EMPTY_port_name = new NamedObject("P3EMPTY");
            P3ERROR_port_name = new NamedObject("P3ERROR");
            P3FULL_port_name = new NamedObject("P3FULL");
            P3RDDATA_port_name = new NamedObject("P3RDDATA");
            P3RDOVERFLOW_port_name = new NamedObject("P3RDOVERFLOW");
            P3WRUNDERRUN_port_name = new NamedObject("P3WRUNDERRUN");
            P4CMDEMPTY_port_name = new NamedObject("P4CMDEMPTY");
            P4CMDFULL_port_name = new NamedObject("P4CMDFULL");
            P4COUNT_port_name = new NamedObject("P4COUNT");
            P4EMPTY_port_name = new NamedObject("P4EMPTY");
            P4ERROR_port_name = new NamedObject("P4ERROR");
            P4FULL_port_name = new NamedObject("P4FULL");
            P4RDDATA_port_name = new NamedObject("P4RDDATA");
            P4RDOVERFLOW_port_name = new NamedObject("P4RDOVERFLOW");
            P4WRUNDERRUN_port_name = new NamedObject("P4WRUNDERRUN");
            P5CMDEMPTY_port_name = new NamedObject("P5CMDEMPTY");
            P5CMDFULL_port_name = new NamedObject("P5CMDFULL");
            P5COUNT_port_name = new NamedObject("P5COUNT");
            P5EMPTY_port_name = new NamedObject("P5EMPTY");
            P5ERROR_port_name = new NamedObject("P5ERROR");
            P5FULL_port_name = new NamedObject("P5FULL");
            P5RDDATA_port_name = new NamedObject("P5RDDATA");
            P5RDOVERFLOW_port_name = new NamedObject("P5RDOVERFLOW");
            P5WRUNDERRUN_port_name = new NamedObject("P5WRUNDERRUN");
            RAS_port_name = new NamedObject("RAS");
            SELFREFRESHMODE_port_name = new NamedObject("SELFREFRESHMODE");
            UDMN_port_name = new NamedObject("UDMN");
            UDMP_port_name = new NamedObject("UDMP");
            UOCALSTART_port_name = new NamedObject("UOCALSTART");
            UOCMDREADYIN_port_name = new NamedObject("UOCMDREADYIN");
            UODATA_port_name = new NamedObject("UODATA");
            UODATAVALID_port_name = new NamedObject("UODATAVALID");
            UODONECAL_port_name = new NamedObject("UODONECAL");
            UOREFRSHFLAG_port_name = new NamedObject("UOREFRSHFLAG");
            UOSDO_port_name = new NamedObject("UOSDO");
            WE_port_name = new NamedObject("WE");
            DQI_port_name = new NamedObject("DQI");
            DQSIOIN_port_name = new NamedObject("DQSIOIN");
            DQSIOIP_port_name = new NamedObject("DQSIOIP");
            IOIDRPSDI_port_name = new NamedObject("IOIDRPSDI");
            P0ARBEN_port_name = new NamedObject("P0ARBEN");
            P0CMDBA_port_name = new NamedObject("P0CMDBA");
            P0CMDBL_port_name = new NamedObject("P0CMDBL");
            P0CMDCA_port_name = new NamedObject("P0CMDCA");
            P0CMDCLK_port_name = new NamedObject("P0CMDCLK");
            P0CMDEN_port_name = new NamedObject("P0CMDEN");
            P0CMDINSTR_port_name = new NamedObject("P0CMDINSTR");
            P0CMDRA_port_name = new NamedObject("P0CMDRA");
            P0RDCLK_port_name = new NamedObject("P0RDCLK");
            P0RDEN_port_name = new NamedObject("P0RDEN");
            P0RWRMASK_port_name = new NamedObject("P0RWRMASK");
            P0WRCLK_port_name = new NamedObject("P0WRCLK");
            P0WRDATA_port_name = new NamedObject("P0WRDATA");
            P0WREN_port_name = new NamedObject("P0WREN");
            P1ARBEN_port_name = new NamedObject("P1ARBEN");
            P1CMDBA_port_name = new NamedObject("P1CMDBA");
            P1CMDBL_port_name = new NamedObject("P1CMDBL");
            P1CMDCA_port_name = new NamedObject("P1CMDCA");
            P1CMDCLK_port_name = new NamedObject("P1CMDCLK");
            P1CMDEN_port_name = new NamedObject("P1CMDEN");
            P1CMDINSTR_port_name = new NamedObject("P1CMDINSTR");
            P1CMDRA_port_name = new NamedObject("P1CMDRA");
            P1RDCLK_port_name = new NamedObject("P1RDCLK");
            P1RDEN_port_name = new NamedObject("P1RDEN");
            P1RWRMASK_port_name = new NamedObject("P1RWRMASK");
            P1WRCLK_port_name = new NamedObject("P1WRCLK");
            P1WRDATA_port_name = new NamedObject("P1WRDATA");
            P1WREN_port_name = new NamedObject("P1WREN");
            P2ARBEN_port_name = new NamedObject("P2ARBEN");
            P2CLK_port_name = new NamedObject("P2CLK");
            P2CMDBA_port_name = new NamedObject("P2CMDBA");
            P2CMDBL_port_name = new NamedObject("P2CMDBL");
            P2CMDCA_port_name = new NamedObject("P2CMDCA");
            P2CMDCLK_port_name = new NamedObject("P2CMDCLK");
            P2CMDEN_port_name = new NamedObject("P2CMDEN");
            P2CMDINSTR_port_name = new NamedObject("P2CMDINSTR");
            P2CMDRA_port_name = new NamedObject("P2CMDRA");
            P2EN_port_name = new NamedObject("P2EN");
            P2WRDATA_port_name = new NamedObject("P2WRDATA");
            P2WRMASK_port_name = new NamedObject("P2WRMASK");
            P3ARBEN_port_name = new NamedObject("P3ARBEN");
            P3CLK_port_name = new NamedObject("P3CLK");
            P3CMDBA_port_name = new NamedObject("P3CMDBA");
            P3CMDBL_port_name = new NamedObject("P3CMDBL");
            P3CMDCA_port_name = new NamedObject("P3CMDCA");
            P3CMDCLK_port_name = new NamedObject("P3CMDCLK");
            P3CMDEN_port_name = new NamedObject("P3CMDEN");
            P3CMDINSTR_port_name = new NamedObject("P3CMDINSTR");
            P3CMDRA_port_name = new NamedObject("P3CMDRA");
            P3EN_port_name = new NamedObject("P3EN");
            P3WRDATA_port_name = new NamedObject("P3WRDATA");
            P3WRMASK_port_name = new NamedObject("P3WRMASK");
            P4ARBEN_port_name = new NamedObject("P4ARBEN");
            P4CLK_port_name = new NamedObject("P4CLK");
            P4CMDBA_port_name = new NamedObject("P4CMDBA");
            P4CMDBL_port_name = new NamedObject("P4CMDBL");
            P4CMDCA_port_name = new NamedObject("P4CMDCA");
            P4CMDCLK_port_name = new NamedObject("P4CMDCLK");
            P4CMDEN_port_name = new NamedObject("P4CMDEN");
            P4CMDINSTR_port_name = new NamedObject("P4CMDINSTR");
            P4CMDRA_port_name = new NamedObject("P4CMDRA");
            P4EN_port_name = new NamedObject("P4EN");
            P4WRDATA_port_name = new NamedObject("P4WRDATA");
            P4WRMASK_port_name = new NamedObject("P4WRMASK");
            P5ARBEN_port_name = new NamedObject("P5ARBEN");
            P5CLK_port_name = new NamedObject("P5CLK");
            P5CMDBA_port_name = new NamedObject("P5CMDBA");
            P5CMDBL_port_name = new NamedObject("P5CMDBL");
            P5CMDCA_port_name = new NamedObject("P5CMDCA");
            P5CMDCLK_port_name = new NamedObject("P5CMDCLK");
            P5CMDEN_port_name = new NamedObject("P5CMDEN");
            P5CMDINSTR_port_name = new NamedObject("P5CMDINSTR");
            P5CMDRA_port_name = new NamedObject("P5CMDRA");
            P5EN_port_name = new NamedObject("P5EN");
            P5WRDATA_port_name = new NamedObject("P5WRDATA");
            P5WRMASK_port_name = new NamedObject("P5WRMASK");
            PLLCE_port_name = new NamedObject("PLLCE");
            PLLCLK_port_name = new NamedObject("PLLCLK");
            PLLLOCK_port_name = new NamedObject("PLLLOCK");
            RECAL_port_name = new NamedObject("RECAL");
            SELFREFRESHENTER_port_name = new NamedObject("SELFREFRESHENTER");
            SYSRST_port_name = new NamedObject("SYSRST");
            UDQSIOIN_port_name = new NamedObject("UDQSIOIN");
            UDQSIOIP_port_name = new NamedObject("UDQSIOIP");
            UIADD_port_name = new NamedObject("UIADD");
            UIADDR_port_name = new NamedObject("UIADDR");
            UIBROADCAST_port_name = new NamedObject("UIBROADCAST");
            UICLK_port_name = new NamedObject("UICLK");
            UICMD_port_name = new NamedObject("UICMD");
            UICMDEN_port_name = new NamedObject("UICMDEN");
            UICMDIN_port_name = new NamedObject("UICMDIN");
            UICS_port_name = new NamedObject("UICS");
            UIDONECAL_port_name = new NamedObject("UIDONECAL");
            UIDQCOUNT_port_name = new NamedObject("UIDQCOUNT");
            UIDQLOWERDEC_port_name = new NamedObject("UIDQLOWERDEC");
            UIDQLOWERINC_port_name = new NamedObject("UIDQLOWERINC");
            UIDQUPPERDEC_port_name = new NamedObject("UIDQUPPERDEC");
            UIDQUPPERINC_port_name = new NamedObject("UIDQUPPERINC");
            UIDRPUPDATE_port_name = new NamedObject("UIDRPUPDATE");
            UILDQSDEC_port_name = new NamedObject("UILDQSDEC");
            UILDQSINC_port_name = new NamedObject("UILDQSINC");
            UIREAD_port_name = new NamedObject("UIREAD");
            UISDI_port_name = new NamedObject("UISDI");
            UIUDQSDEC_port_name = new NamedObject("UIUDQSDEC");
            UIUDQSINC_port_name = new NamedObject("UIUDQSINC");
            CLKFBOUT_port_name = new NamedObject("CLKFBOUT");
            CLKFBOUTB_port_name = new NamedObject("CLKFBOUTB");
            CLKFBSTOPPED_port_name = new NamedObject("CLKFBSTOPPED");
            CLKINSTOPPED_port_name = new NamedObject("CLKINSTOPPED");
            CLKOUT0_port_name = new NamedObject("CLKOUT0");
            CLKOUT0B_port_name = new NamedObject("CLKOUT0B");
            CLKOUT1_port_name = new NamedObject("CLKOUT1");
            CLKOUT1B_port_name = new NamedObject("CLKOUT1B");
            CLKOUT2_port_name = new NamedObject("CLKOUT2");
            CLKOUT2B_port_name = new NamedObject("CLKOUT2B");
            CLKOUT3_port_name = new NamedObject("CLKOUT3");
            CLKOUT3B_port_name = new NamedObject("CLKOUT3B");
            CLKOUT4_port_name = new NamedObject("CLKOUT4");
            CLKOUT5_port_name = new NamedObject("CLKOUT5");
            CLKOUT6_port_name = new NamedObject("CLKOUT6");
            CLKFBIN_port_name = new NamedObject("CLKFBIN");
            CLKIN1_port_name = new NamedObject("CLKIN1");
            CLKIN2_port_name = new NamedObject("CLKIN2");
            CLKINSEL_port_name = new NamedObject("CLKINSEL");
            PWRDWN_port_name = new NamedObject("PWRDWN");
            OFDLY_port_name = new NamedObject("OFDLY");
            OQ_port_name = new NamedObject("OQ");
            TQ_port_name = new NamedObject("TQ");
            OCE_port_name = new NamedObject("OCE");
            T1_port_name = new NamedObject("T1");
            T2_port_name = new NamedObject("T2");
            T3_port_name = new NamedObject("T3");
            T4_port_name = new NamedObject("T4");
            TCE_port_name = new NamedObject("TCE");
            SHIFTOUT3_port_name = new NamedObject("SHIFTOUT3");
            SHIFTOUT4_port_name = new NamedObject("SHIFTOUT4");
            SHIFTIN3_port_name = new NamedObject("SHIFTIN3");
            SHIFTIN4_port_name = new NamedObject("SHIFTIN4");
            TRAIN_port_name = new NamedObject("TRAIN");
            OCBEXTEND_port_name = new NamedObject("OCBEXTEND");
            TFB_port_name = new NamedObject("TFB");
            CLKPERF_port_name = new NamedObject("CLKPERF");
            CLKPERFDELAY_port_name = new NamedObject("CLKPERFDELAY");
            ODV_port_name = new NamedObject("ODV");
            WC_port_name = new NamedObject("WC");
            TBYTEOUT_port_name = new NamedObject("TBYTEOUT");
            TBYTEIN_port_name = new NamedObject("TBYTEIN");
            CFGAERECRCCHECKEN_port_name = new NamedObject("CFGAERECRCCHECKEN");
            CFGAERECRCGENEN_port_name = new NamedObject("CFGAERECRCGENEN");
            CFGCOMMANDBUSMASTERENABLE_port_name = new NamedObject("CFGCOMMANDBUSMASTERENABLE");
            CFGCOMMANDINTERRUPTDISABLE_port_name = new NamedObject("CFGCOMMANDINTERRUPTDISABLE");
            CFGCOMMANDIOENABLE_port_name = new NamedObject("CFGCOMMANDIOENABLE");
            CFGCOMMANDMEMENABLE_port_name = new NamedObject("CFGCOMMANDMEMENABLE");
            CFGCOMMANDSERREN_port_name = new NamedObject("CFGCOMMANDSERREN");
            CFGDEVCONTROL2CPLTIMEOUTDIS_port_name = new NamedObject("CFGDEVCONTROL2CPLTIMEOUTDIS");
            CFGDEVCONTROL2CPLTIMEOUTVAL_port_name = new NamedObject("CFGDEVCONTROL2CPLTIMEOUTVAL");
            CFGDEVCONTROLAUXPOWEREN_port_name = new NamedObject("CFGDEVCONTROLAUXPOWEREN");
            CFGDEVCONTROLCORRERRREPORTINGEN_port_name = new NamedObject("CFGDEVCONTROLCORRERRREPORTINGEN");
            CFGDEVCONTROLENABLERO_port_name = new NamedObject("CFGDEVCONTROLENABLERO");
            CFGDEVCONTROLEXTTAGEN_port_name = new NamedObject("CFGDEVCONTROLEXTTAGEN");
            CFGDEVCONTROLFATALERRREPORTINGEN_port_name = new NamedObject("CFGDEVCONTROLFATALERRREPORTINGEN");
            CFGDEVCONTROLMAXPAYLOAD_port_name = new NamedObject("CFGDEVCONTROLMAXPAYLOAD");
            CFGDEVCONTROLMAXREADREQ_port_name = new NamedObject("CFGDEVCONTROLMAXREADREQ");
            CFGDEVCONTROLNONFATALREPORTINGEN_port_name = new NamedObject("CFGDEVCONTROLNONFATALREPORTINGEN");
            CFGDEVCONTROLNOSNOOPEN_port_name = new NamedObject("CFGDEVCONTROLNOSNOOPEN");
            CFGDEVCONTROLPHANTOMEN_port_name = new NamedObject("CFGDEVCONTROLPHANTOMEN");
            CFGDEVCONTROLURERRREPORTINGEN_port_name = new NamedObject("CFGDEVCONTROLURERRREPORTINGEN");
            CFGDEVSTATUSCORRERRDETECTED_port_name = new NamedObject("CFGDEVSTATUSCORRERRDETECTED");
            CFGDEVSTATUSFATALERRDETECTED_port_name = new NamedObject("CFGDEVSTATUSFATALERRDETECTED");
            CFGDEVSTATUSNONFATALERRDETECTED_port_name = new NamedObject("CFGDEVSTATUSNONFATALERRDETECTED");
            CFGDEVSTATUSURDETECTED_port_name = new NamedObject("CFGDEVSTATUSURDETECTED");
            CFGDO_port_name = new NamedObject("CFGDO");
            CFGERRAERHEADERLOGSETN_port_name = new NamedObject("CFGERRAERHEADERLOGSETN");
            CFGERRCPLRDYN_port_name = new NamedObject("CFGERRCPLRDYN");
            CFGINTERRUPTDO_port_name = new NamedObject("CFGINTERRUPTDO");
            CFGINTERRUPTMMENABLE_port_name = new NamedObject("CFGINTERRUPTMMENABLE");
            CFGINTERRUPTMSIENABLE_port_name = new NamedObject("CFGINTERRUPTMSIENABLE");
            CFGINTERRUPTMSIXENABLE_port_name = new NamedObject("CFGINTERRUPTMSIXENABLE");
            CFGINTERRUPTMSIXFM_port_name = new NamedObject("CFGINTERRUPTMSIXFM");
            CFGINTERRUPTRDYN_port_name = new NamedObject("CFGINTERRUPTRDYN");
            CFGLINKCONTROLASPMCONTROL_port_name = new NamedObject("CFGLINKCONTROLASPMCONTROL");
            CFGLINKCONTROLAUTOBANDWIDTHINTEN_port_name = new NamedObject("CFGLINKCONTROLAUTOBANDWIDTHINTEN");
            CFGLINKCONTROLBANDWIDTHINTEN_port_name = new NamedObject("CFGLINKCONTROLBANDWIDTHINTEN");
            CFGLINKCONTROLCLOCKPMEN_port_name = new NamedObject("CFGLINKCONTROLCLOCKPMEN");
            CFGLINKCONTROLCOMMONCLOCK_port_name = new NamedObject("CFGLINKCONTROLCOMMONCLOCK");
            CFGLINKCONTROLEXTENDEDSYNC_port_name = new NamedObject("CFGLINKCONTROLEXTENDEDSYNC");
            CFGLINKCONTROLHWAUTOWIDTHDIS_port_name = new NamedObject("CFGLINKCONTROLHWAUTOWIDTHDIS");
            CFGLINKCONTROLLINKDISABLE_port_name = new NamedObject("CFGLINKCONTROLLINKDISABLE");
            CFGLINKCONTROLRCB_port_name = new NamedObject("CFGLINKCONTROLRCB");
            CFGLINKCONTROLRETRAINLINK_port_name = new NamedObject("CFGLINKCONTROLRETRAINLINK");
            CFGLINKSTATUSAUTOBANDWIDTHSTATUS_port_name = new NamedObject("CFGLINKSTATUSAUTOBANDWIDTHSTATUS");
            CFGLINKSTATUSBANDWITHSTATUS_port_name = new NamedObject("CFGLINKSTATUSBANDWITHSTATUS");
            CFGLINKSTATUSCURRENTSPEED_port_name = new NamedObject("CFGLINKSTATUSCURRENTSPEED");
            CFGLINKSTATUSDLLACTIVE_port_name = new NamedObject("CFGLINKSTATUSDLLACTIVE");
            CFGLINKSTATUSLINKTRAINING_port_name = new NamedObject("CFGLINKSTATUSLINKTRAINING");
            CFGLINKSTATUSNEGOTIATEDWIDTH_port_name = new NamedObject("CFGLINKSTATUSNEGOTIATEDWIDTH");
            CFGMSGDATA_port_name = new NamedObject("CFGMSGDATA");
            CFGMSGRECEIVED_port_name = new NamedObject("CFGMSGRECEIVED");
            CFGMSGRECEIVEDASSERTINTA_port_name = new NamedObject("CFGMSGRECEIVEDASSERTINTA");
            CFGMSGRECEIVEDASSERTINTB_port_name = new NamedObject("CFGMSGRECEIVEDASSERTINTB");
            CFGMSGRECEIVEDASSERTINTC_port_name = new NamedObject("CFGMSGRECEIVEDASSERTINTC");
            CFGMSGRECEIVEDASSERTINTD_port_name = new NamedObject("CFGMSGRECEIVEDASSERTINTD");
            CFGMSGRECEIVEDDEASSERTINTA_port_name = new NamedObject("CFGMSGRECEIVEDDEASSERTINTA");
            CFGMSGRECEIVEDDEASSERTINTB_port_name = new NamedObject("CFGMSGRECEIVEDDEASSERTINTB");
            CFGMSGRECEIVEDDEASSERTINTC_port_name = new NamedObject("CFGMSGRECEIVEDDEASSERTINTC");
            CFGMSGRECEIVEDDEASSERTINTD_port_name = new NamedObject("CFGMSGRECEIVEDDEASSERTINTD");
            CFGMSGRECEIVEDERRCOR_port_name = new NamedObject("CFGMSGRECEIVEDERRCOR");
            CFGMSGRECEIVEDERRFATAL_port_name = new NamedObject("CFGMSGRECEIVEDERRFATAL");
            CFGMSGRECEIVEDERRNONFATAL_port_name = new NamedObject("CFGMSGRECEIVEDERRNONFATAL");
            CFGMSGRECEIVEDPMASNAK_port_name = new NamedObject("CFGMSGRECEIVEDPMASNAK");
            CFGMSGRECEIVEDPMETO_port_name = new NamedObject("CFGMSGRECEIVEDPMETO");
            CFGMSGRECEIVEDPMETOACK_port_name = new NamedObject("CFGMSGRECEIVEDPMETOACK");
            CFGMSGRECEIVEDPMPME_port_name = new NamedObject("CFGMSGRECEIVEDPMPME");
            CFGMSGRECEIVEDSETSLOTPOWERLIMIT_port_name = new NamedObject("CFGMSGRECEIVEDSETSLOTPOWERLIMIT");
            CFGMSGRECEIVEDUNLOCK_port_name = new NamedObject("CFGMSGRECEIVEDUNLOCK");
            CFGPCIELINKSTATE_port_name = new NamedObject("CFGPCIELINKSTATE");
            CFGPMCSRPMEEN_port_name = new NamedObject("CFGPMCSRPMEEN");
            CFGPMCSRPMESTATUS_port_name = new NamedObject("CFGPMCSRPMESTATUS");
            CFGPMCSRPOWERSTATE_port_name = new NamedObject("CFGPMCSRPOWERSTATE");
            CFGPMRCVASREQL1N_port_name = new NamedObject("CFGPMRCVASREQL1N");
            CFGPMRCVENTERL1N_port_name = new NamedObject("CFGPMRCVENTERL1N");
            CFGPMRCVENTERL23N_port_name = new NamedObject("CFGPMRCVENTERL23N");
            CFGPMRCVREQACKN_port_name = new NamedObject("CFGPMRCVREQACKN");
            CFGRDWRDONEN_port_name = new NamedObject("CFGRDWRDONEN");
            CFGSLOTCONTROLELECTROMECHILCTLPULSE_port_name = new NamedObject("CFGSLOTCONTROLELECTROMECHILCTLPULSE");
            CFGTRANSACTION_port_name = new NamedObject("CFGTRANSACTION");
            CFGTRANSACTIONADDR_port_name = new NamedObject("CFGTRANSACTIONADDR");
            CFGTRANSACTIONTYPE_port_name = new NamedObject("CFGTRANSACTIONTYPE");
            CFGVCTCVCMAP_port_name = new NamedObject("CFGVCTCVCMAP");
            DBGSCLRA_port_name = new NamedObject("DBGSCLRA");
            DBGSCLRB_port_name = new NamedObject("DBGSCLRB");
            DBGSCLRC_port_name = new NamedObject("DBGSCLRC");
            DBGSCLRD_port_name = new NamedObject("DBGSCLRD");
            DBGSCLRE_port_name = new NamedObject("DBGSCLRE");
            DBGSCLRF_port_name = new NamedObject("DBGSCLRF");
            DBGSCLRG_port_name = new NamedObject("DBGSCLRG");
            DBGSCLRH_port_name = new NamedObject("DBGSCLRH");
            DBGSCLRI_port_name = new NamedObject("DBGSCLRI");
            DBGSCLRJ_port_name = new NamedObject("DBGSCLRJ");
            DBGSCLRK_port_name = new NamedObject("DBGSCLRK");
            DBGVECA_port_name = new NamedObject("DBGVECA");
            DBGVECB_port_name = new NamedObject("DBGVECB");
            DBGVECC_port_name = new NamedObject("DBGVECC");
            DRPDRDY_port_name = new NamedObject("DRPDRDY");
            LL2BADDLLPERRN_port_name = new NamedObject("LL2BADDLLPERRN");
            LL2BADTLPERRN_port_name = new NamedObject("LL2BADTLPERRN");
            LL2PROTOCOLERRN_port_name = new NamedObject("LL2PROTOCOLERRN");
            LL2REPLAYROERRN_port_name = new NamedObject("LL2REPLAYROERRN");
            LL2REPLAYTOERRN_port_name = new NamedObject("LL2REPLAYTOERRN");
            LL2SUSPENDOKN_port_name = new NamedObject("LL2SUSPENDOKN");
            LL2TFCINIT1SEQN_port_name = new NamedObject("LL2TFCINIT1SEQN");
            LL2TFCINIT2SEQN_port_name = new NamedObject("LL2TFCINIT2SEQN");
            LNKCLKEN_port_name = new NamedObject("LNKCLKEN");
            MIMRXRADDR_port_name = new NamedObject("MIMRXRADDR");
            MIMRXRCE_port_name = new NamedObject("MIMRXRCE");
            MIMRXREN_port_name = new NamedObject("MIMRXREN");
            MIMRXWADDR_port_name = new NamedObject("MIMRXWADDR");
            MIMRXWDATA_port_name = new NamedObject("MIMRXWDATA");
            MIMRXWEN_port_name = new NamedObject("MIMRXWEN");
            MIMTXRADDR_port_name = new NamedObject("MIMTXRADDR");
            MIMTXRCE_port_name = new NamedObject("MIMTXRCE");
            MIMTXREN_port_name = new NamedObject("MIMTXREN");
            MIMTXWADDR_port_name = new NamedObject("MIMTXWADDR");
            MIMTXWDATA_port_name = new NamedObject("MIMTXWDATA");
            MIMTXWEN_port_name = new NamedObject("MIMTXWEN");
            PIPERX0POLARITY_port_name = new NamedObject("PIPERX0POLARITY");
            PIPERX1POLARITY_port_name = new NamedObject("PIPERX1POLARITY");
            PIPERX2POLARITY_port_name = new NamedObject("PIPERX2POLARITY");
            PIPERX3POLARITY_port_name = new NamedObject("PIPERX3POLARITY");
            PIPERX4POLARITY_port_name = new NamedObject("PIPERX4POLARITY");
            PIPERX5POLARITY_port_name = new NamedObject("PIPERX5POLARITY");
            PIPERX6POLARITY_port_name = new NamedObject("PIPERX6POLARITY");
            PIPERX7POLARITY_port_name = new NamedObject("PIPERX7POLARITY");
            PIPETX0CHARISK_port_name = new NamedObject("PIPETX0CHARISK");
            PIPETX0COMPLIANCE_port_name = new NamedObject("PIPETX0COMPLIANCE");
            PIPETX0DATA_port_name = new NamedObject("PIPETX0DATA");
            PIPETX0ELECIDLE_port_name = new NamedObject("PIPETX0ELECIDLE");
            PIPETX0POWERDOWN_port_name = new NamedObject("PIPETX0POWERDOWN");
            PIPETX1CHARISK_port_name = new NamedObject("PIPETX1CHARISK");
            PIPETX1COMPLIANCE_port_name = new NamedObject("PIPETX1COMPLIANCE");
            PIPETX1DATA_port_name = new NamedObject("PIPETX1DATA");
            PIPETX1ELECIDLE_port_name = new NamedObject("PIPETX1ELECIDLE");
            PIPETX1POWERDOWN_port_name = new NamedObject("PIPETX1POWERDOWN");
            PIPETX2CHARISK_port_name = new NamedObject("PIPETX2CHARISK");
            PIPETX2COMPLIANCE_port_name = new NamedObject("PIPETX2COMPLIANCE");
            PIPETX2DATA_port_name = new NamedObject("PIPETX2DATA");
            PIPETX2ELECIDLE_port_name = new NamedObject("PIPETX2ELECIDLE");
            PIPETX2POWERDOWN_port_name = new NamedObject("PIPETX2POWERDOWN");
            PIPETX3CHARISK_port_name = new NamedObject("PIPETX3CHARISK");
            PIPETX3COMPLIANCE_port_name = new NamedObject("PIPETX3COMPLIANCE");
            PIPETX3DATA_port_name = new NamedObject("PIPETX3DATA");
            PIPETX3ELECIDLE_port_name = new NamedObject("PIPETX3ELECIDLE");
            PIPETX3POWERDOWN_port_name = new NamedObject("PIPETX3POWERDOWN");
            PIPETX4CHARISK_port_name = new NamedObject("PIPETX4CHARISK");
            PIPETX4COMPLIANCE_port_name = new NamedObject("PIPETX4COMPLIANCE");
            PIPETX4DATA_port_name = new NamedObject("PIPETX4DATA");
            PIPETX4ELECIDLE_port_name = new NamedObject("PIPETX4ELECIDLE");
            PIPETX4POWERDOWN_port_name = new NamedObject("PIPETX4POWERDOWN");
            PIPETX5CHARISK_port_name = new NamedObject("PIPETX5CHARISK");
            PIPETX5COMPLIANCE_port_name = new NamedObject("PIPETX5COMPLIANCE");
            PIPETX5DATA_port_name = new NamedObject("PIPETX5DATA");
            PIPETX5ELECIDLE_port_name = new NamedObject("PIPETX5ELECIDLE");
            PIPETX5POWERDOWN_port_name = new NamedObject("PIPETX5POWERDOWN");
            PIPETX6CHARISK_port_name = new NamedObject("PIPETX6CHARISK");
            PIPETX6COMPLIANCE_port_name = new NamedObject("PIPETX6COMPLIANCE");
            PIPETX6DATA_port_name = new NamedObject("PIPETX6DATA");
            PIPETX6ELECIDLE_port_name = new NamedObject("PIPETX6ELECIDLE");
            PIPETX6POWERDOWN_port_name = new NamedObject("PIPETX6POWERDOWN");
            PIPETX7CHARISK_port_name = new NamedObject("PIPETX7CHARISK");
            PIPETX7COMPLIANCE_port_name = new NamedObject("PIPETX7COMPLIANCE");
            PIPETX7DATA_port_name = new NamedObject("PIPETX7DATA");
            PIPETX7ELECIDLE_port_name = new NamedObject("PIPETX7ELECIDLE");
            PIPETX7POWERDOWN_port_name = new NamedObject("PIPETX7POWERDOWN");
            PIPETXDEEMPH_port_name = new NamedObject("PIPETXDEEMPH");
            PIPETXMARGIN_port_name = new NamedObject("PIPETXMARGIN");
            PIPETXRATE_port_name = new NamedObject("PIPETXRATE");
            PIPETXRCVRDET_port_name = new NamedObject("PIPETXRCVRDET");
            PIPETXRESET_port_name = new NamedObject("PIPETXRESET");
            PL2LINKUPN_port_name = new NamedObject("PL2LINKUPN");
            PL2RECEIVERERRN_port_name = new NamedObject("PL2RECEIVERERRN");
            PL2RECOVERYN_port_name = new NamedObject("PL2RECOVERYN");
            PL2RXELECIDLE_port_name = new NamedObject("PL2RXELECIDLE");
            PL2SUSPENDOK_port_name = new NamedObject("PL2SUSPENDOK");
            PLDBGVEC_port_name = new NamedObject("PLDBGVEC");
            PLINITIALLINKWIDTH_port_name = new NamedObject("PLINITIALLINKWIDTH");
            PLLANEREVERSALMODE_port_name = new NamedObject("PLLANEREVERSALMODE");
            PLLINKGEN2CAP_port_name = new NamedObject("PLLINKGEN2CAP");
            PLLINKPARTNERGEN2SUPPORTED_port_name = new NamedObject("PLLINKPARTNERGEN2SUPPORTED");
            PLLINKUPCFGCAP_port_name = new NamedObject("PLLINKUPCFGCAP");
            PLLTSSMSTATE_port_name = new NamedObject("PLLTSSMSTATE");
            PLPHYLNKUPN_port_name = new NamedObject("PLPHYLNKUPN");
            PLRECEIVEDHOTRST_port_name = new NamedObject("PLRECEIVEDHOTRST");
            PLRXPMSTATE_port_name = new NamedObject("PLRXPMSTATE");
            PLSELLNKRATE_port_name = new NamedObject("PLSELLNKRATE");
            PLSELLNKWIDTH_port_name = new NamedObject("PLSELLNKWIDTH");
            PLTXPMSTATE_port_name = new NamedObject("PLTXPMSTATE");
            RECEIVEDFUNCLVLRSTN_port_name = new NamedObject("RECEIVEDFUNCLVLRSTN");
            TL2ASPMSUSPENDCREDITCHECKOKN_port_name = new NamedObject("TL2ASPMSUSPENDCREDITCHECKOKN");
            TL2ASPMSUSPENDREQN_port_name = new NamedObject("TL2ASPMSUSPENDREQN");
            TL2PPMSUSPENDOKN_port_name = new NamedObject("TL2PPMSUSPENDOKN");
            TRNFCCPLD_port_name = new NamedObject("TRNFCCPLD");
            TRNFCCPLH_port_name = new NamedObject("TRNFCCPLH");
            TRNFCNPD_port_name = new NamedObject("TRNFCNPD");
            TRNFCNPH_port_name = new NamedObject("TRNFCNPH");
            TRNFCPD_port_name = new NamedObject("TRNFCPD");
            TRNFCPH_port_name = new NamedObject("TRNFCPH");
            TRNLNKUPN_port_name = new NamedObject("TRNLNKUPN");
            TRNRBARHITN_port_name = new NamedObject("TRNRBARHITN");
            TRNRD_port_name = new NamedObject("TRNRD");
            TRNRDLLPDATA_port_name = new NamedObject("TRNRDLLPDATA");
            TRNRDLLPSRCRDYN_port_name = new NamedObject("TRNRDLLPSRCRDYN");
            TRNRECRCERRN_port_name = new NamedObject("TRNRECRCERRN");
            TRNREOFN_port_name = new NamedObject("TRNREOFN");
            TRNRERRFWDN_port_name = new NamedObject("TRNRERRFWDN");
            TRNRREMN_port_name = new NamedObject("TRNRREMN");
            TRNRSOFN_port_name = new NamedObject("TRNRSOFN");
            TRNRSRCDSCN_port_name = new NamedObject("TRNRSRCDSCN");
            TRNRSRCRDYN_port_name = new NamedObject("TRNRSRCRDYN");
            TRNTBUFAV_port_name = new NamedObject("TRNTBUFAV");
            TRNTCFGREQN_port_name = new NamedObject("TRNTCFGREQN");
            TRNTDLLPDSTRDYN_port_name = new NamedObject("TRNTDLLPDSTRDYN");
            TRNTDSTRDYN_port_name = new NamedObject("TRNTDSTRDYN");
            TRNTERRDROPN_port_name = new NamedObject("TRNTERRDROPN");
            USERRSTN_port_name = new NamedObject("USERRSTN");
            CFGBYTEENN_port_name = new NamedObject("CFGBYTEENN");
            CFGDI_port_name = new NamedObject("CFGDI");
            CFGDSBUSNUMBER_port_name = new NamedObject("CFGDSBUSNUMBER");
            CFGDSDEVICENUMBER_port_name = new NamedObject("CFGDSDEVICENUMBER");
            CFGDSFUNCTIONNUMBER_port_name = new NamedObject("CFGDSFUNCTIONNUMBER");
            CFGDSN_port_name = new NamedObject("CFGDSN");
            CFGDWADDR_port_name = new NamedObject("CFGDWADDR");
            CFGERRACSN_port_name = new NamedObject("CFGERRACSN");
            CFGERRAERHEADERLOG_port_name = new NamedObject("CFGERRAERHEADERLOG");
            CFGERRCORN_port_name = new NamedObject("CFGERRCORN");
            CFGERRCPLABORTN_port_name = new NamedObject("CFGERRCPLABORTN");
            CFGERRCPLTIMEOUTN_port_name = new NamedObject("CFGERRCPLTIMEOUTN");
            CFGERRCPLUNEXPECTN_port_name = new NamedObject("CFGERRCPLUNEXPECTN");
            CFGERRECRCN_port_name = new NamedObject("CFGERRECRCN");
            CFGERRLOCKEDN_port_name = new NamedObject("CFGERRLOCKEDN");
            CFGERRPOSTEDN_port_name = new NamedObject("CFGERRPOSTEDN");
            CFGERRTLPCPLHEADER_port_name = new NamedObject("CFGERRTLPCPLHEADER");
            CFGERRURN_port_name = new NamedObject("CFGERRURN");
            CFGINTERRUPTASSERTN_port_name = new NamedObject("CFGINTERRUPTASSERTN");
            CFGINTERRUPTDI_port_name = new NamedObject("CFGINTERRUPTDI");
            CFGINTERRUPTN_port_name = new NamedObject("CFGINTERRUPTN");
            CFGPMDIRECTASPML1N_port_name = new NamedObject("CFGPMDIRECTASPML1N");
            CFGPMSENDPMACKN_port_name = new NamedObject("CFGPMSENDPMACKN");
            CFGPMSENDPMETON_port_name = new NamedObject("CFGPMSENDPMETON");
            CFGPMSENDPMNAKN_port_name = new NamedObject("CFGPMSENDPMNAKN");
            CFGPMTURNOFFOKN_port_name = new NamedObject("CFGPMTURNOFFOKN");
            CFGPMWAKEN_port_name = new NamedObject("CFGPMWAKEN");
            CFGPORTNUMBER_port_name = new NamedObject("CFGPORTNUMBER");
            CFGRDENN_port_name = new NamedObject("CFGRDENN");
            CFGTRNPENDINGN_port_name = new NamedObject("CFGTRNPENDINGN");
            CFGWRENN_port_name = new NamedObject("CFGWRENN");
            CFGWRREADONLYN_port_name = new NamedObject("CFGWRREADONLYN");
            CFGWRRW1CASRWN_port_name = new NamedObject("CFGWRRW1CASRWN");
            CMRSTN_port_name = new NamedObject("CMRSTN");
            CMSTICKYRSTN_port_name = new NamedObject("CMSTICKYRSTN");
            DBGMODE_port_name = new NamedObject("DBGMODE");
            DBGSUBMODE_port_name = new NamedObject("DBGSUBMODE");
            DLRSTN_port_name = new NamedObject("DLRSTN");
            DRPDADDR_port_name = new NamedObject("DRPDADDR");
            DRPDEN_port_name = new NamedObject("DRPDEN");
            DRPDWE_port_name = new NamedObject("DRPDWE");
            FUNCLVLRSTN_port_name = new NamedObject("FUNCLVLRSTN");
            LL2SENDASREQL1N_port_name = new NamedObject("LL2SENDASREQL1N");
            LL2SENDENTERL1N_port_name = new NamedObject("LL2SENDENTERL1N");
            LL2SENDENTERL23N_port_name = new NamedObject("LL2SENDENTERL23N");
            LL2SUSPENDNOWN_port_name = new NamedObject("LL2SUSPENDNOWN");
            LL2TLPRCVN_port_name = new NamedObject("LL2TLPRCVN");
            MIMRXRDATA_port_name = new NamedObject("MIMRXRDATA");
            MIMTXRDATA_port_name = new NamedObject("MIMTXRDATA");
            PIPECLK_port_name = new NamedObject("PIPECLK");
            PIPERX0CHANISALIGNED_port_name = new NamedObject("PIPERX0CHANISALIGNED");
            PIPERX0CHARISK_port_name = new NamedObject("PIPERX0CHARISK");
            PIPERX0DATA_port_name = new NamedObject("PIPERX0DATA");
            PIPERX0ELECIDLE_port_name = new NamedObject("PIPERX0ELECIDLE");
            PIPERX0PHYSTATUS_port_name = new NamedObject("PIPERX0PHYSTATUS");
            PIPERX0STATUS_port_name = new NamedObject("PIPERX0STATUS");
            PIPERX0VALID_port_name = new NamedObject("PIPERX0VALID");
            PIPERX1CHANISALIGNED_port_name = new NamedObject("PIPERX1CHANISALIGNED");
            PIPERX1CHARISK_port_name = new NamedObject("PIPERX1CHARISK");
            PIPERX1DATA_port_name = new NamedObject("PIPERX1DATA");
            PIPERX1ELECIDLE_port_name = new NamedObject("PIPERX1ELECIDLE");
            PIPERX1PHYSTATUS_port_name = new NamedObject("PIPERX1PHYSTATUS");
            PIPERX1STATUS_port_name = new NamedObject("PIPERX1STATUS");
            PIPERX1VALID_port_name = new NamedObject("PIPERX1VALID");
            PIPERX2CHANISALIGNED_port_name = new NamedObject("PIPERX2CHANISALIGNED");
            PIPERX2CHARISK_port_name = new NamedObject("PIPERX2CHARISK");
            PIPERX2DATA_port_name = new NamedObject("PIPERX2DATA");
            PIPERX2ELECIDLE_port_name = new NamedObject("PIPERX2ELECIDLE");
            PIPERX2PHYSTATUS_port_name = new NamedObject("PIPERX2PHYSTATUS");
            PIPERX2STATUS_port_name = new NamedObject("PIPERX2STATUS");
            PIPERX2VALID_port_name = new NamedObject("PIPERX2VALID");
            PIPERX3CHANISALIGNED_port_name = new NamedObject("PIPERX3CHANISALIGNED");
            PIPERX3CHARISK_port_name = new NamedObject("PIPERX3CHARISK");
            PIPERX3DATA_port_name = new NamedObject("PIPERX3DATA");
            PIPERX3ELECIDLE_port_name = new NamedObject("PIPERX3ELECIDLE");
            PIPERX3PHYSTATUS_port_name = new NamedObject("PIPERX3PHYSTATUS");
            PIPERX3STATUS_port_name = new NamedObject("PIPERX3STATUS");
            PIPERX3VALID_port_name = new NamedObject("PIPERX3VALID");
            PIPERX4CHANISALIGNED_port_name = new NamedObject("PIPERX4CHANISALIGNED");
            PIPERX4CHARISK_port_name = new NamedObject("PIPERX4CHARISK");
            PIPERX4DATA_port_name = new NamedObject("PIPERX4DATA");
            PIPERX4ELECIDLE_port_name = new NamedObject("PIPERX4ELECIDLE");
            PIPERX4PHYSTATUS_port_name = new NamedObject("PIPERX4PHYSTATUS");
            PIPERX4STATUS_port_name = new NamedObject("PIPERX4STATUS");
            PIPERX4VALID_port_name = new NamedObject("PIPERX4VALID");
            PIPERX5CHANISALIGNED_port_name = new NamedObject("PIPERX5CHANISALIGNED");
            PIPERX5CHARISK_port_name = new NamedObject("PIPERX5CHARISK");
            PIPERX5DATA_port_name = new NamedObject("PIPERX5DATA");
            PIPERX5ELECIDLE_port_name = new NamedObject("PIPERX5ELECIDLE");
            PIPERX5PHYSTATUS_port_name = new NamedObject("PIPERX5PHYSTATUS");
            PIPERX5STATUS_port_name = new NamedObject("PIPERX5STATUS");
            PIPERX5VALID_port_name = new NamedObject("PIPERX5VALID");
            PIPERX6CHANISALIGNED_port_name = new NamedObject("PIPERX6CHANISALIGNED");
            PIPERX6CHARISK_port_name = new NamedObject("PIPERX6CHARISK");
            PIPERX6DATA_port_name = new NamedObject("PIPERX6DATA");
            PIPERX6ELECIDLE_port_name = new NamedObject("PIPERX6ELECIDLE");
            PIPERX6PHYSTATUS_port_name = new NamedObject("PIPERX6PHYSTATUS");
            PIPERX6STATUS_port_name = new NamedObject("PIPERX6STATUS");
            PIPERX6VALID_port_name = new NamedObject("PIPERX6VALID");
            PIPERX7CHANISALIGNED_port_name = new NamedObject("PIPERX7CHANISALIGNED");
            PIPERX7CHARISK_port_name = new NamedObject("PIPERX7CHARISK");
            PIPERX7DATA_port_name = new NamedObject("PIPERX7DATA");
            PIPERX7ELECIDLE_port_name = new NamedObject("PIPERX7ELECIDLE");
            PIPERX7PHYSTATUS_port_name = new NamedObject("PIPERX7PHYSTATUS");
            PIPERX7STATUS_port_name = new NamedObject("PIPERX7STATUS");
            PIPERX7VALID_port_name = new NamedObject("PIPERX7VALID");
            PL2DIRECTEDLSTATE_port_name = new NamedObject("PL2DIRECTEDLSTATE");
            PLDBGMODE_port_name = new NamedObject("PLDBGMODE");
            PLDIRECTEDLINKAUTON_port_name = new NamedObject("PLDIRECTEDLINKAUTON");
            PLDIRECTEDLINKCHANGE_port_name = new NamedObject("PLDIRECTEDLINKCHANGE");
            PLDIRECTEDLINKSPEED_port_name = new NamedObject("PLDIRECTEDLINKSPEED");
            PLDIRECTEDLINKWIDTH_port_name = new NamedObject("PLDIRECTEDLINKWIDTH");
            PLDOWNSTREAMDEEMPHSOURCE_port_name = new NamedObject("PLDOWNSTREAMDEEMPHSOURCE");
            PLRSTN_port_name = new NamedObject("PLRSTN");
            PLTRANSMITHOTRST_port_name = new NamedObject("PLTRANSMITHOTRST");
            PLUPSTREAMPREFERDEEMPH_port_name = new NamedObject("PLUPSTREAMPREFERDEEMPH");
            SYSRSTN_port_name = new NamedObject("SYSRSTN");
            TL2ASPMSUSPENDCREDITCHECKN_port_name = new NamedObject("TL2ASPMSUSPENDCREDITCHECKN");
            TL2PPMSUSPENDREQN_port_name = new NamedObject("TL2PPMSUSPENDREQN");
            TLRSTN_port_name = new NamedObject("TLRSTN");
            TRNFCSEL_port_name = new NamedObject("TRNFCSEL");
            TRNRDSTRDYN_port_name = new NamedObject("TRNRDSTRDYN");
            TRNRNPOKN_port_name = new NamedObject("TRNRNPOKN");
            TRNTCFGGNTN_port_name = new NamedObject("TRNTCFGGNTN");
            TRNTD_port_name = new NamedObject("TRNTD");
            TRNTDLLPDATA_port_name = new NamedObject("TRNTDLLPDATA");
            TRNTDLLPSRCRDYN_port_name = new NamedObject("TRNTDLLPSRCRDYN");
            TRNTECRCGENN_port_name = new NamedObject("TRNTECRCGENN");
            TRNTEOFN_port_name = new NamedObject("TRNTEOFN");
            TRNTERRFWDN_port_name = new NamedObject("TRNTERRFWDN");
            TRNTREMN_port_name = new NamedObject("TRNTREMN");
            TRNTSOFN_port_name = new NamedObject("TRNTSOFN");
            TRNTSRCDSCN_port_name = new NamedObject("TRNTSRCDSCN");
            TRNTSRCRDYN_port_name = new NamedObject("TRNTSRCRDYN");
            TRNTSTRN_port_name = new NamedObject("TRNTSTRN");
            USERCLK_port_name = new NamedObject("USERCLK");
            CFGAERROOTERRCORRERRRECEIVED_port_name = new NamedObject("CFGAERROOTERRCORRERRRECEIVED");
            CFGAERROOTERRCORRERRREPORTINGEN_port_name = new NamedObject("CFGAERROOTERRCORRERRREPORTINGEN");
            CFGAERROOTERRFATALERRRECEIVED_port_name = new NamedObject("CFGAERROOTERRFATALERRRECEIVED");
            CFGAERROOTERRFATALERRREPORTINGEN_port_name = new NamedObject("CFGAERROOTERRFATALERRREPORTINGEN");
            CFGAERROOTERRNONFATALERRRECEIVED_port_name = new NamedObject("CFGAERROOTERRNONFATALERRRECEIVED");
            CFGAERROOTERRNONFATALERRREPORTINGEN_port_name = new NamedObject("CFGAERROOTERRNONFATALERRREPORTINGEN");
            CFGBRIDGESERREN_port_name = new NamedObject("CFGBRIDGESERREN");
            CFGDEVCONTROL2ARIFORWARDEN_port_name = new NamedObject("CFGDEVCONTROL2ARIFORWARDEN");
            CFGDEVCONTROL2ATOMICEGRESSBLOCK_port_name = new NamedObject("CFGDEVCONTROL2ATOMICEGRESSBLOCK");
            CFGDEVCONTROL2ATOMICREQUESTEREN_port_name = new NamedObject("CFGDEVCONTROL2ATOMICREQUESTEREN");
            CFGDEVCONTROL2IDOCPLEN_port_name = new NamedObject("CFGDEVCONTROL2IDOCPLEN");
            CFGDEVCONTROL2IDOREQEN_port_name = new NamedObject("CFGDEVCONTROL2IDOREQEN");
            CFGDEVCONTROL2LTREN_port_name = new NamedObject("CFGDEVCONTROL2LTREN");
            CFGDEVCONTROL2TLPPREFIXBLOCK_port_name = new NamedObject("CFGDEVCONTROL2TLPPREFIXBLOCK");
            CFGLINKSTATUSBANDWIDTHSTATUS_port_name = new NamedObject("CFGLINKSTATUSBANDWIDTHSTATUS");
            CFGMGMTDO_port_name = new NamedObject("CFGMGMTDO");
            CFGMGMTRDWRDONEN_port_name = new NamedObject("CFGMGMTRDWRDONEN");
            CFGROOTCONTROLPMEINTEN_port_name = new NamedObject("CFGROOTCONTROLPMEINTEN");
            CFGROOTCONTROLSYSERRCORRERREN_port_name = new NamedObject("CFGROOTCONTROLSYSERRCORRERREN");
            CFGROOTCONTROLSYSERRFATALERREN_port_name = new NamedObject("CFGROOTCONTROLSYSERRFATALERREN");
            CFGROOTCONTROLSYSERRNONFATALERREN_port_name = new NamedObject("CFGROOTCONTROLSYSERRNONFATALERREN");
            LL2BADDLLPERR_port_name = new NamedObject("LL2BADDLLPERR");
            LL2BADTLPERR_port_name = new NamedObject("LL2BADTLPERR");
            LL2LINKSTATUS_port_name = new NamedObject("LL2LINKSTATUS");
            LL2PROTOCOLERR_port_name = new NamedObject("LL2PROTOCOLERR");
            LL2RECEIVERERR_port_name = new NamedObject("LL2RECEIVERERR");
            LL2REPLAYROERR_port_name = new NamedObject("LL2REPLAYROERR");
            LL2REPLAYTOERR_port_name = new NamedObject("LL2REPLAYTOERR");
            LL2SUSPENDOK_port_name = new NamedObject("LL2SUSPENDOK");
            LL2TFCINIT1SEQ_port_name = new NamedObject("LL2TFCINIT1SEQ");
            LL2TFCINIT2SEQ_port_name = new NamedObject("LL2TFCINIT2SEQ");
            LL2TXIDLE_port_name = new NamedObject("LL2TXIDLE");
            PL2L0REQ_port_name = new NamedObject("PL2L0REQ");
            PL2LINKUP_port_name = new NamedObject("PL2LINKUP");
            PL2RECEIVERERR_port_name = new NamedObject("PL2RECEIVERERR");
            PL2RECOVERY_port_name = new NamedObject("PL2RECOVERY");
            PL2RXPMSTATE_port_name = new NamedObject("PL2RXPMSTATE");
            PLDIRECTEDCHANGEDONE_port_name = new NamedObject("PLDIRECTEDCHANGEDONE");
            TL2ASPMSUSPENDCREDITCHECKOK_port_name = new NamedObject("TL2ASPMSUSPENDCREDITCHECKOK");
            TL2ASPMSUSPENDREQ_port_name = new NamedObject("TL2ASPMSUSPENDREQ");
            TL2ERRFCPE_port_name = new NamedObject("TL2ERRFCPE");
            TL2ERRHDR_port_name = new NamedObject("TL2ERRHDR");
            TL2ERRMALFORMED_port_name = new NamedObject("TL2ERRMALFORMED");
            TL2ERRRXOVERFLOW_port_name = new NamedObject("TL2ERRRXOVERFLOW");
            TL2PPMSUSPENDOK_port_name = new NamedObject("TL2PPMSUSPENDOK");
            TRNLNKUP_port_name = new NamedObject("TRNLNKUP");
            TRNRBARHIT_port_name = new NamedObject("TRNRBARHIT");
            TRNRDLLPSRCRDY_port_name = new NamedObject("TRNRDLLPSRCRDY");
            TRNRECRCERR_port_name = new NamedObject("TRNRECRCERR");
            TRNREOF_port_name = new NamedObject("TRNREOF");
            TRNRERRFWD_port_name = new NamedObject("TRNRERRFWD");
            TRNRREM_port_name = new NamedObject("TRNRREM");
            TRNRSOF_port_name = new NamedObject("TRNRSOF");
            TRNRSRCDSC_port_name = new NamedObject("TRNRSRCDSC");
            TRNRSRCRDY_port_name = new NamedObject("TRNRSRCRDY");
            TRNTCFGREQ_port_name = new NamedObject("TRNTCFGREQ");
            TRNTDLLPDSTRDY_port_name = new NamedObject("TRNTDLLPDSTRDY");
            TRNTDSTRDY_port_name = new NamedObject("TRNTDSTRDY");
            TRNTERRDROP_port_name = new NamedObject("TRNTERRDROP");
            CFGAERINTERRUPTMSGNUM_port_name = new NamedObject("CFGAERINTERRUPTMSGNUM");
            CFGDEVID_port_name = new NamedObject("CFGDEVID");
            CFGERRATOMICEGRESSBLOCKEDN_port_name = new NamedObject("CFGERRATOMICEGRESSBLOCKEDN");
            CFGERRINTERNALCORN_port_name = new NamedObject("CFGERRINTERNALCORN");
            CFGERRINTERNALUNCORN_port_name = new NamedObject("CFGERRINTERNALUNCORN");
            CFGERRMALFORMEDN_port_name = new NamedObject("CFGERRMALFORMEDN");
            CFGERRMCBLOCKEDN_port_name = new NamedObject("CFGERRMCBLOCKEDN");
            CFGERRNORECOVERYN_port_name = new NamedObject("CFGERRNORECOVERYN");
            CFGERRPOISONEDN_port_name = new NamedObject("CFGERRPOISONEDN");
            CFGFORCECOMMONCLOCKOFF_port_name = new NamedObject("CFGFORCECOMMONCLOCKOFF");
            CFGFORCEEXTENDEDSYNCON_port_name = new NamedObject("CFGFORCEEXTENDEDSYNCON");
            CFGFORCEMPS_port_name = new NamedObject("CFGFORCEMPS");
            CFGINTERRUPTSTATN_port_name = new NamedObject("CFGINTERRUPTSTATN");
            CFGMGMTBYTEENN_port_name = new NamedObject("CFGMGMTBYTEENN");
            CFGMGMTDI_port_name = new NamedObject("CFGMGMTDI");
            CFGMGMTDWADDR_port_name = new NamedObject("CFGMGMTDWADDR");
            CFGMGMTRDENN_port_name = new NamedObject("CFGMGMTRDENN");
            CFGMGMTWRENN_port_name = new NamedObject("CFGMGMTWRENN");
            CFGMGMTWRREADONLYN_port_name = new NamedObject("CFGMGMTWRREADONLYN");
            CFGMGMTWRRW1CASRWN_port_name = new NamedObject("CFGMGMTWRRW1CASRWN");
            CFGPCIECAPINTERRUPTMSGNUM_port_name = new NamedObject("CFGPCIECAPINTERRUPTMSGNUM");
            CFGPMFORCESTATE_port_name = new NamedObject("CFGPMFORCESTATE");
            CFGPMFORCESTATEENN_port_name = new NamedObject("CFGPMFORCESTATEENN");
            CFGPMHALTASPML0SN_port_name = new NamedObject("CFGPMHALTASPML0SN");
            CFGPMHALTASPML1N_port_name = new NamedObject("CFGPMHALTASPML1N");
            CFGREVID_port_name = new NamedObject("CFGREVID");
            CFGSUBSYSID_port_name = new NamedObject("CFGSUBSYSID");
            CFGSUBSYSVENDID_port_name = new NamedObject("CFGSUBSYSVENDID");
            CFGVENDID_port_name = new NamedObject("CFGVENDID");
            LL2SENDASREQL1_port_name = new NamedObject("LL2SENDASREQL1");
            LL2SENDENTERL1_port_name = new NamedObject("LL2SENDENTERL1");
            LL2SENDENTERL23_port_name = new NamedObject("LL2SENDENTERL23");
            LL2SENDPMACK_port_name = new NamedObject("LL2SENDPMACK");
            LL2SUSPENDNOW_port_name = new NamedObject("LL2SUSPENDNOW");
            LL2TLPRCV_port_name = new NamedObject("LL2TLPRCV");
            PLDIRECTEDLTSSMNEW_port_name = new NamedObject("PLDIRECTEDLTSSMNEW");
            PLDIRECTEDLTSSMNEWVLD_port_name = new NamedObject("PLDIRECTEDLTSSMNEWVLD");
            PLDIRECTEDLTSSMSTALL_port_name = new NamedObject("PLDIRECTEDLTSSMSTALL");
            TL2ASPMSUSPENDCREDITCHECK_port_name = new NamedObject("TL2ASPMSUSPENDCREDITCHECK");
            TL2PPMSUSPENDREQ_port_name = new NamedObject("TL2PPMSUSPENDREQ");
            TRNRDSTRDY_port_name = new NamedObject("TRNRDSTRDY");
            TRNRFCPRET_port_name = new NamedObject("TRNRFCPRET");
            TRNRNPOK_port_name = new NamedObject("TRNRNPOK");
            TRNRNPREQ_port_name = new NamedObject("TRNRNPREQ");
            TRNTCFGGNT_port_name = new NamedObject("TRNTCFGGNT");
            TRNTDLLPSRCRDY_port_name = new NamedObject("TRNTDLLPSRCRDY");
            TRNTECRCGEN_port_name = new NamedObject("TRNTECRCGEN");
            TRNTEOF_port_name = new NamedObject("TRNTEOF");
            TRNTERRFWD_port_name = new NamedObject("TRNTERRFWD");
            TRNTREM_port_name = new NamedObject("TRNTREM");
            TRNTSOF_port_name = new NamedObject("TRNTSOF");
            TRNTSRCDSC_port_name = new NamedObject("TRNTSRCDSC");
            TRNTSRCRDY_port_name = new NamedObject("TRNTSRCRDY");
            TRNTSTR_port_name = new NamedObject("TRNTSTR");
            USERCLK2_port_name = new NamedObject("USERCLK2");
            CFGCURRENTSPEED_port_name = new NamedObject("CFGCURRENTSPEED");
            CFGDPASUBSTATECHANGE_port_name = new NamedObject("CFGDPASUBSTATECHANGE");
            CFGERRCOROUT_port_name = new NamedObject("CFGERRCOROUT");
            CFGERRFATALOUT_port_name = new NamedObject("CFGERRFATALOUT");
            CFGERRNONFATALOUT_port_name = new NamedObject("CFGERRNONFATALOUT");
            CFGEXTFUNCTIONNUMBER_port_name = new NamedObject("CFGEXTFUNCTIONNUMBER");
            CFGEXTREADRECEIVED_port_name = new NamedObject("CFGEXTREADRECEIVED");
            CFGEXTREGISTERNUMBER_port_name = new NamedObject("CFGEXTREGISTERNUMBER");
            CFGEXTWRITEBYTEENABLE_port_name = new NamedObject("CFGEXTWRITEBYTEENABLE");
            CFGEXTWRITEDATA_port_name = new NamedObject("CFGEXTWRITEDATA");
            CFGEXTWRITERECEIVED_port_name = new NamedObject("CFGEXTWRITERECEIVED");
            CFGFCCPLD_port_name = new NamedObject("CFGFCCPLD");
            CFGFCCPLH_port_name = new NamedObject("CFGFCCPLH");
            CFGFCNPD_port_name = new NamedObject("CFGFCNPD");
            CFGFCNPH_port_name = new NamedObject("CFGFCNPH");
            CFGFCPD_port_name = new NamedObject("CFGFCPD");
            CFGFCPH_port_name = new NamedObject("CFGFCPH");
            CFGFLRINPROCESS_port_name = new NamedObject("CFGFLRINPROCESS");
            CFGFUNCTIONPOWERSTATE_port_name = new NamedObject("CFGFUNCTIONPOWERSTATE");
            CFGFUNCTIONSTATUS_port_name = new NamedObject("CFGFUNCTIONSTATUS");
            CFGHOTRESETOUT_port_name = new NamedObject("CFGHOTRESETOUT");
            CFGINPUTUPDATEDONE_port_name = new NamedObject("CFGINPUTUPDATEDONE");
            CFGINTERRUPTAOUTPUT_port_name = new NamedObject("CFGINTERRUPTAOUTPUT");
            CFGINTERRUPTBOUTPUT_port_name = new NamedObject("CFGINTERRUPTBOUTPUT");
            CFGINTERRUPTCOUTPUT_port_name = new NamedObject("CFGINTERRUPTCOUTPUT");
            CFGINTERRUPTDOUTPUT_port_name = new NamedObject("CFGINTERRUPTDOUTPUT");
            CFGINTERRUPTMSIDATA_port_name = new NamedObject("CFGINTERRUPTMSIDATA");
            CFGINTERRUPTMSIFAIL_port_name = new NamedObject("CFGINTERRUPTMSIFAIL");
            CFGINTERRUPTMSIMASKUPDATE_port_name = new NamedObject("CFGINTERRUPTMSIMASKUPDATE");
            CFGINTERRUPTMSIMMENABLE_port_name = new NamedObject("CFGINTERRUPTMSIMMENABLE");
            CFGINTERRUPTMSISENT_port_name = new NamedObject("CFGINTERRUPTMSISENT");
            CFGINTERRUPTMSIVFENABLE_port_name = new NamedObject("CFGINTERRUPTMSIVFENABLE");
            CFGINTERRUPTMSIXFAIL_port_name = new NamedObject("CFGINTERRUPTMSIXFAIL");
            CFGINTERRUPTMSIXMASK_port_name = new NamedObject("CFGINTERRUPTMSIXMASK");
            CFGINTERRUPTMSIXSENT_port_name = new NamedObject("CFGINTERRUPTMSIXSENT");
            CFGINTERRUPTMSIXVFENABLE_port_name = new NamedObject("CFGINTERRUPTMSIXVFENABLE");
            CFGINTERRUPTMSIXVFMASK_port_name = new NamedObject("CFGINTERRUPTMSIXVFMASK");
            CFGINTERRUPTSENT_port_name = new NamedObject("CFGINTERRUPTSENT");
            CFGLINKPOWERSTATE_port_name = new NamedObject("CFGLINKPOWERSTATE");
            CFGLOCALERROR_port_name = new NamedObject("CFGLOCALERROR");
            CFGLTRENABLE_port_name = new NamedObject("CFGLTRENABLE");
            CFGLTSSMSTATE_port_name = new NamedObject("CFGLTSSMSTATE");
            CFGMAXPAYLOAD_port_name = new NamedObject("CFGMAXPAYLOAD");
            CFGMAXREADREQ_port_name = new NamedObject("CFGMAXREADREQ");
            CFGMCUPDATEDONE_port_name = new NamedObject("CFGMCUPDATEDONE");
            CFGMGMTREADDATA_port_name = new NamedObject("CFGMGMTREADDATA");
            CFGMGMTREADWRITEDONE_port_name = new NamedObject("CFGMGMTREADWRITEDONE");
            CFGMSGRECEIVEDDATA_port_name = new NamedObject("CFGMSGRECEIVEDDATA");
            CFGMSGRECEIVEDTYPE_port_name = new NamedObject("CFGMSGRECEIVEDTYPE");
            CFGMSGTRANSMITDONE_port_name = new NamedObject("CFGMSGTRANSMITDONE");
            CFGNEGOTIATEDWIDTH_port_name = new NamedObject("CFGNEGOTIATEDWIDTH");
            CFGOBFFENABLE_port_name = new NamedObject("CFGOBFFENABLE");
            CFGPERFUNCSTATUSDATA_port_name = new NamedObject("CFGPERFUNCSTATUSDATA");
            CFGPERFUNCTIONUPDATEDONE_port_name = new NamedObject("CFGPERFUNCTIONUPDATEDONE");
            CFGPHYLINKDOWN_port_name = new NamedObject("CFGPHYLINKDOWN");
            CFGPHYLINKSTATUS_port_name = new NamedObject("CFGPHYLINKSTATUS");
            CFGPLSTATUSCHANGE_port_name = new NamedObject("CFGPLSTATUSCHANGE");
            CFGPOWERSTATECHANGEINTERRUPT_port_name = new NamedObject("CFGPOWERSTATECHANGEINTERRUPT");
            CFGRCBSTATUS_port_name = new NamedObject("CFGRCBSTATUS");
            CFGTPHFUNCTIONNUM_port_name = new NamedObject("CFGTPHFUNCTIONNUM");
            CFGTPHREQUESTERENABLE_port_name = new NamedObject("CFGTPHREQUESTERENABLE");
            CFGTPHSTMODE_port_name = new NamedObject("CFGTPHSTMODE");
            CFGTPHSTTADDRESS_port_name = new NamedObject("CFGTPHSTTADDRESS");
            CFGTPHSTTREADENABLE_port_name = new NamedObject("CFGTPHSTTREADENABLE");
            CFGTPHSTTWRITEBYTEVALID_port_name = new NamedObject("CFGTPHSTTWRITEBYTEVALID");
            CFGTPHSTTWRITEDATA_port_name = new NamedObject("CFGTPHSTTWRITEDATA");
            CFGTPHSTTWRITEENABLE_port_name = new NamedObject("CFGTPHSTTWRITEENABLE");
            CFGVFFLRINPROCESS_port_name = new NamedObject("CFGVFFLRINPROCESS");
            CFGVFPOWERSTATE_port_name = new NamedObject("CFGVFPOWERSTATE");
            CFGVFSTATUS_port_name = new NamedObject("CFGVFSTATUS");
            CFGVFTPHREQUESTERENABLE_port_name = new NamedObject("CFGVFTPHREQUESTERENABLE");
            CFGVFTPHSTMODE_port_name = new NamedObject("CFGVFTPHSTMODE");
            DBGDATAOUT_port_name = new NamedObject("DBGDATAOUT");
            MAXISCQTDATA_port_name = new NamedObject("MAXISCQTDATA");
            MAXISCQTKEEP_port_name = new NamedObject("MAXISCQTKEEP");
            MAXISCQTLAST_port_name = new NamedObject("MAXISCQTLAST");
            MAXISCQTUSER_port_name = new NamedObject("MAXISCQTUSER");
            MAXISCQTVALID_port_name = new NamedObject("MAXISCQTVALID");
            MAXISRCTDATA_port_name = new NamedObject("MAXISRCTDATA");
            MAXISRCTKEEP_port_name = new NamedObject("MAXISRCTKEEP");
            MAXISRCTLAST_port_name = new NamedObject("MAXISRCTLAST");
            MAXISRCTUSER_port_name = new NamedObject("MAXISRCTUSER");
            MAXISRCTVALID_port_name = new NamedObject("MAXISRCTVALID");
            MICOMPLETIONRAMREADADDRESSAL_port_name = new NamedObject("MICOMPLETIONRAMREADADDRESSAL");
            MICOMPLETIONRAMREADADDRESSAU_port_name = new NamedObject("MICOMPLETIONRAMREADADDRESSAU");
            MICOMPLETIONRAMREADADDRESSBL_port_name = new NamedObject("MICOMPLETIONRAMREADADDRESSBL");
            MICOMPLETIONRAMREADADDRESSBU_port_name = new NamedObject("MICOMPLETIONRAMREADADDRESSBU");
            MICOMPLETIONRAMREADENABLEL_port_name = new NamedObject("MICOMPLETIONRAMREADENABLEL");
            MICOMPLETIONRAMREADENABLEU_port_name = new NamedObject("MICOMPLETIONRAMREADENABLEU");
            MICOMPLETIONRAMWRITEADDRESSAL_port_name = new NamedObject("MICOMPLETIONRAMWRITEADDRESSAL");
            MICOMPLETIONRAMWRITEADDRESSAU_port_name = new NamedObject("MICOMPLETIONRAMWRITEADDRESSAU");
            MICOMPLETIONRAMWRITEADDRESSBL_port_name = new NamedObject("MICOMPLETIONRAMWRITEADDRESSBL");
            MICOMPLETIONRAMWRITEADDRESSBU_port_name = new NamedObject("MICOMPLETIONRAMWRITEADDRESSBU");
            MICOMPLETIONRAMWRITEDATAL_port_name = new NamedObject("MICOMPLETIONRAMWRITEDATAL");
            MICOMPLETIONRAMWRITEDATAU_port_name = new NamedObject("MICOMPLETIONRAMWRITEDATAU");
            MICOMPLETIONRAMWRITEENABLEL_port_name = new NamedObject("MICOMPLETIONRAMWRITEENABLEL");
            MICOMPLETIONRAMWRITEENABLEU_port_name = new NamedObject("MICOMPLETIONRAMWRITEENABLEU");
            MIREPLAYRAMADDRESS_port_name = new NamedObject("MIREPLAYRAMADDRESS");
            MIREPLAYRAMREADENABLE_port_name = new NamedObject("MIREPLAYRAMREADENABLE");
            MIREPLAYRAMWRITEDATA_port_name = new NamedObject("MIREPLAYRAMWRITEDATA");
            MIREPLAYRAMWRITEENABLE_port_name = new NamedObject("MIREPLAYRAMWRITEENABLE");
            MIREQUESTRAMREADADDRESSA_port_name = new NamedObject("MIREQUESTRAMREADADDRESSA");
            MIREQUESTRAMREADADDRESSB_port_name = new NamedObject("MIREQUESTRAMREADADDRESSB");
            MIREQUESTRAMREADENABLE_port_name = new NamedObject("MIREQUESTRAMREADENABLE");
            MIREQUESTRAMWRITEADDRESSA_port_name = new NamedObject("MIREQUESTRAMWRITEADDRESSA");
            MIREQUESTRAMWRITEADDRESSB_port_name = new NamedObject("MIREQUESTRAMWRITEADDRESSB");
            MIREQUESTRAMWRITEDATA_port_name = new NamedObject("MIREQUESTRAMWRITEDATA");
            MIREQUESTRAMWRITEENABLE_port_name = new NamedObject("MIREQUESTRAMWRITEENABLE");
            PCIECQNPREQCOUNT_port_name = new NamedObject("PCIECQNPREQCOUNT");
            PCIERQSEQNUM_port_name = new NamedObject("PCIERQSEQNUM");
            PCIERQSEQNUMVLD_port_name = new NamedObject("PCIERQSEQNUMVLD");
            PCIERQTAG_port_name = new NamedObject("PCIERQTAG");
            PCIERQTAGAV_port_name = new NamedObject("PCIERQTAGAV");
            PCIERQTAGVLD_port_name = new NamedObject("PCIERQTAGVLD");
            PCIETFCNPDAV_port_name = new NamedObject("PCIETFCNPDAV");
            PCIETFCNPHAV_port_name = new NamedObject("PCIETFCNPHAV");
            PIPERX0EQCONTROL_port_name = new NamedObject("PIPERX0EQCONTROL");
            PIPERX0EQLPLFFS_port_name = new NamedObject("PIPERX0EQLPLFFS");
            PIPERX0EQLPTXPRESET_port_name = new NamedObject("PIPERX0EQLPTXPRESET");
            PIPERX0EQPRESET_port_name = new NamedObject("PIPERX0EQPRESET");
            PIPERX1EQCONTROL_port_name = new NamedObject("PIPERX1EQCONTROL");
            PIPERX1EQLPLFFS_port_name = new NamedObject("PIPERX1EQLPLFFS");
            PIPERX1EQLPTXPRESET_port_name = new NamedObject("PIPERX1EQLPTXPRESET");
            PIPERX1EQPRESET_port_name = new NamedObject("PIPERX1EQPRESET");
            PIPERX2EQCONTROL_port_name = new NamedObject("PIPERX2EQCONTROL");
            PIPERX2EQLPLFFS_port_name = new NamedObject("PIPERX2EQLPLFFS");
            PIPERX2EQLPTXPRESET_port_name = new NamedObject("PIPERX2EQLPTXPRESET");
            PIPERX2EQPRESET_port_name = new NamedObject("PIPERX2EQPRESET");
            PIPERX3EQCONTROL_port_name = new NamedObject("PIPERX3EQCONTROL");
            PIPERX3EQLPLFFS_port_name = new NamedObject("PIPERX3EQLPLFFS");
            PIPERX3EQLPTXPRESET_port_name = new NamedObject("PIPERX3EQLPTXPRESET");
            PIPERX3EQPRESET_port_name = new NamedObject("PIPERX3EQPRESET");
            PIPERX4EQCONTROL_port_name = new NamedObject("PIPERX4EQCONTROL");
            PIPERX4EQLPLFFS_port_name = new NamedObject("PIPERX4EQLPLFFS");
            PIPERX4EQLPTXPRESET_port_name = new NamedObject("PIPERX4EQLPTXPRESET");
            PIPERX4EQPRESET_port_name = new NamedObject("PIPERX4EQPRESET");
            PIPERX5EQCONTROL_port_name = new NamedObject("PIPERX5EQCONTROL");
            PIPERX5EQLPLFFS_port_name = new NamedObject("PIPERX5EQLPLFFS");
            PIPERX5EQLPTXPRESET_port_name = new NamedObject("PIPERX5EQLPTXPRESET");
            PIPERX5EQPRESET_port_name = new NamedObject("PIPERX5EQPRESET");
            PIPERX6EQCONTROL_port_name = new NamedObject("PIPERX6EQCONTROL");
            PIPERX6EQLPLFFS_port_name = new NamedObject("PIPERX6EQLPLFFS");
            PIPERX6EQLPTXPRESET_port_name = new NamedObject("PIPERX6EQLPTXPRESET");
            PIPERX6EQPRESET_port_name = new NamedObject("PIPERX6EQPRESET");
            PIPERX7EQCONTROL_port_name = new NamedObject("PIPERX7EQCONTROL");
            PIPERX7EQLPLFFS_port_name = new NamedObject("PIPERX7EQLPLFFS");
            PIPERX7EQLPTXPRESET_port_name = new NamedObject("PIPERX7EQLPTXPRESET");
            PIPERX7EQPRESET_port_name = new NamedObject("PIPERX7EQPRESET");
            PIPETX0DATAVALID_port_name = new NamedObject("PIPETX0DATAVALID");
            PIPETX0EQCONTROL_port_name = new NamedObject("PIPETX0EQCONTROL");
            PIPETX0EQDEEMPH_port_name = new NamedObject("PIPETX0EQDEEMPH");
            PIPETX0EQPRESET_port_name = new NamedObject("PIPETX0EQPRESET");
            PIPETX0STARTBLOCK_port_name = new NamedObject("PIPETX0STARTBLOCK");
            PIPETX0SYNCHEADER_port_name = new NamedObject("PIPETX0SYNCHEADER");
            PIPETX1DATAVALID_port_name = new NamedObject("PIPETX1DATAVALID");
            PIPETX1EQCONTROL_port_name = new NamedObject("PIPETX1EQCONTROL");
            PIPETX1EQDEEMPH_port_name = new NamedObject("PIPETX1EQDEEMPH");
            PIPETX1EQPRESET_port_name = new NamedObject("PIPETX1EQPRESET");
            PIPETX1STARTBLOCK_port_name = new NamedObject("PIPETX1STARTBLOCK");
            PIPETX1SYNCHEADER_port_name = new NamedObject("PIPETX1SYNCHEADER");
            PIPETX2DATAVALID_port_name = new NamedObject("PIPETX2DATAVALID");
            PIPETX2EQCONTROL_port_name = new NamedObject("PIPETX2EQCONTROL");
            PIPETX2EQDEEMPH_port_name = new NamedObject("PIPETX2EQDEEMPH");
            PIPETX2EQPRESET_port_name = new NamedObject("PIPETX2EQPRESET");
            PIPETX2STARTBLOCK_port_name = new NamedObject("PIPETX2STARTBLOCK");
            PIPETX2SYNCHEADER_port_name = new NamedObject("PIPETX2SYNCHEADER");
            PIPETX3DATAVALID_port_name = new NamedObject("PIPETX3DATAVALID");
            PIPETX3EQCONTROL_port_name = new NamedObject("PIPETX3EQCONTROL");
            PIPETX3EQDEEMPH_port_name = new NamedObject("PIPETX3EQDEEMPH");
            PIPETX3EQPRESET_port_name = new NamedObject("PIPETX3EQPRESET");
            PIPETX3STARTBLOCK_port_name = new NamedObject("PIPETX3STARTBLOCK");
            PIPETX3SYNCHEADER_port_name = new NamedObject("PIPETX3SYNCHEADER");
            PIPETX4DATAVALID_port_name = new NamedObject("PIPETX4DATAVALID");
            PIPETX4EQCONTROL_port_name = new NamedObject("PIPETX4EQCONTROL");
            PIPETX4EQDEEMPH_port_name = new NamedObject("PIPETX4EQDEEMPH");
            PIPETX4EQPRESET_port_name = new NamedObject("PIPETX4EQPRESET");
            PIPETX4STARTBLOCK_port_name = new NamedObject("PIPETX4STARTBLOCK");
            PIPETX4SYNCHEADER_port_name = new NamedObject("PIPETX4SYNCHEADER");
            PIPETX5DATAVALID_port_name = new NamedObject("PIPETX5DATAVALID");
            PIPETX5EQCONTROL_port_name = new NamedObject("PIPETX5EQCONTROL");
            PIPETX5EQDEEMPH_port_name = new NamedObject("PIPETX5EQDEEMPH");
            PIPETX5EQPRESET_port_name = new NamedObject("PIPETX5EQPRESET");
            PIPETX5STARTBLOCK_port_name = new NamedObject("PIPETX5STARTBLOCK");
            PIPETX5SYNCHEADER_port_name = new NamedObject("PIPETX5SYNCHEADER");
            PIPETX6DATAVALID_port_name = new NamedObject("PIPETX6DATAVALID");
            PIPETX6EQCONTROL_port_name = new NamedObject("PIPETX6EQCONTROL");
            PIPETX6EQDEEMPH_port_name = new NamedObject("PIPETX6EQDEEMPH");
            PIPETX6EQPRESET_port_name = new NamedObject("PIPETX6EQPRESET");
            PIPETX6STARTBLOCK_port_name = new NamedObject("PIPETX6STARTBLOCK");
            PIPETX6SYNCHEADER_port_name = new NamedObject("PIPETX6SYNCHEADER");
            PIPETX7DATAVALID_port_name = new NamedObject("PIPETX7DATAVALID");
            PIPETX7EQCONTROL_port_name = new NamedObject("PIPETX7EQCONTROL");
            PIPETX7EQDEEMPH_port_name = new NamedObject("PIPETX7EQDEEMPH");
            PIPETX7EQPRESET_port_name = new NamedObject("PIPETX7EQPRESET");
            PIPETX7STARTBLOCK_port_name = new NamedObject("PIPETX7STARTBLOCK");
            PIPETX7SYNCHEADER_port_name = new NamedObject("PIPETX7SYNCHEADER");
            PIPETXSWING_port_name = new NamedObject("PIPETXSWING");
            PLEQINPROGRESS_port_name = new NamedObject("PLEQINPROGRESS");
            PLEQPHASE_port_name = new NamedObject("PLEQPHASE");
            PLGEN3PCSRXSLIDE_port_name = new NamedObject("PLGEN3PCSRXSLIDE");
            SAXISCCTREADY_port_name = new NamedObject("SAXISCCTREADY");
            SAXISRQTREADY_port_name = new NamedObject("SAXISRQTREADY");
            CFGCONFIGSPACEENABLE_port_name = new NamedObject("CFGCONFIGSPACEENABLE");
            CFGDSPORTNUMBER_port_name = new NamedObject("CFGDSPORTNUMBER");
            CFGERRCORIN_port_name = new NamedObject("CFGERRCORIN");
            CFGERRUNCORIN_port_name = new NamedObject("CFGERRUNCORIN");
            CFGEXTREADDATA_port_name = new NamedObject("CFGEXTREADDATA");
            CFGEXTREADDATAVALID_port_name = new NamedObject("CFGEXTREADDATAVALID");
            CFGFCSEL_port_name = new NamedObject("CFGFCSEL");
            CFGFLRDONE_port_name = new NamedObject("CFGFLRDONE");
            CFGHOTRESETIN_port_name = new NamedObject("CFGHOTRESETIN");
            CFGINPUTUPDATEREQUEST_port_name = new NamedObject("CFGINPUTUPDATEREQUEST");
            CFGINTERRUPTINT_port_name = new NamedObject("CFGINTERRUPTINT");
            CFGINTERRUPTMSIATTR_port_name = new NamedObject("CFGINTERRUPTMSIATTR");
            CFGINTERRUPTMSIFUNCTIONNUMBER_port_name = new NamedObject("CFGINTERRUPTMSIFUNCTIONNUMBER");
            CFGINTERRUPTMSIINT_port_name = new NamedObject("CFGINTERRUPTMSIINT");
            CFGINTERRUPTMSIPENDINGSTATUS_port_name = new NamedObject("CFGINTERRUPTMSIPENDINGSTATUS");
            CFGINTERRUPTMSISELECT_port_name = new NamedObject("CFGINTERRUPTMSISELECT");
            CFGINTERRUPTMSITPHPRESENT_port_name = new NamedObject("CFGINTERRUPTMSITPHPRESENT");
            CFGINTERRUPTMSITPHSTTAG_port_name = new NamedObject("CFGINTERRUPTMSITPHSTTAG");
            CFGINTERRUPTMSITPHTYPE_port_name = new NamedObject("CFGINTERRUPTMSITPHTYPE");
            CFGINTERRUPTMSIXADDRESS_port_name = new NamedObject("CFGINTERRUPTMSIXADDRESS");
            CFGINTERRUPTMSIXDATA_port_name = new NamedObject("CFGINTERRUPTMSIXDATA");
            CFGINTERRUPTMSIXINT_port_name = new NamedObject("CFGINTERRUPTMSIXINT");
            CFGINTERRUPTPENDING_port_name = new NamedObject("CFGINTERRUPTPENDING");
            CFGLINKTRAININGENABLE_port_name = new NamedObject("CFGLINKTRAININGENABLE");
            CFGMCUPDATEREQUEST_port_name = new NamedObject("CFGMCUPDATEREQUEST");
            CFGMGMTADDR_port_name = new NamedObject("CFGMGMTADDR");
            CFGMGMTBYTEENABLE_port_name = new NamedObject("CFGMGMTBYTEENABLE");
            CFGMGMTREAD_port_name = new NamedObject("CFGMGMTREAD");
            CFGMGMTTYPE1CFGREGACCESS_port_name = new NamedObject("CFGMGMTTYPE1CFGREGACCESS");
            CFGMGMTWRITE_port_name = new NamedObject("CFGMGMTWRITE");
            CFGMGMTWRITEDATA_port_name = new NamedObject("CFGMGMTWRITEDATA");
            CFGMSGTRANSMIT_port_name = new NamedObject("CFGMSGTRANSMIT");
            CFGMSGTRANSMITDATA_port_name = new NamedObject("CFGMSGTRANSMITDATA");
            CFGMSGTRANSMITTYPE_port_name = new NamedObject("CFGMSGTRANSMITTYPE");
            CFGPERFUNCSTATUSCONTROL_port_name = new NamedObject("CFGPERFUNCSTATUSCONTROL");
            CFGPERFUNCTIONNUMBER_port_name = new NamedObject("CFGPERFUNCTIONNUMBER");
            CFGPERFUNCTIONOUTPUTREQUEST_port_name = new NamedObject("CFGPERFUNCTIONOUTPUTREQUEST");
            CFGPOWERSTATECHANGEACK_port_name = new NamedObject("CFGPOWERSTATECHANGEACK");
            CFGREQPMTRANSITIONL23READY_port_name = new NamedObject("CFGREQPMTRANSITIONL23READY");
            CFGTPHSTTREADDATA_port_name = new NamedObject("CFGTPHSTTREADDATA");
            CFGTPHSTTREADDATAVALID_port_name = new NamedObject("CFGTPHSTTREADDATAVALID");
            CFGVFFLRDONE_port_name = new NamedObject("CFGVFFLRDONE");
            CORECLK_port_name = new NamedObject("CORECLK");
            CORECLKMICOMPLETIONRAML_port_name = new NamedObject("CORECLKMICOMPLETIONRAML");
            CORECLKMICOMPLETIONRAMU_port_name = new NamedObject("CORECLKMICOMPLETIONRAMU");
            CORECLKMIREPLAYRAM_port_name = new NamedObject("CORECLKMIREPLAYRAM");
            CORECLKMIREQUESTRAM_port_name = new NamedObject("CORECLKMIREQUESTRAM");
            MAXISCQTREADY_port_name = new NamedObject("MAXISCQTREADY");
            MAXISRCTREADY_port_name = new NamedObject("MAXISRCTREADY");
            MGMTRESETN_port_name = new NamedObject("MGMTRESETN");
            MGMTSTICKYRESETN_port_name = new NamedObject("MGMTSTICKYRESETN");
            MICOMPLETIONRAMREADDATA_port_name = new NamedObject("MICOMPLETIONRAMREADDATA");
            MIREPLAYRAMREADDATA_port_name = new NamedObject("MIREPLAYRAMREADDATA");
            MIREQUESTRAMREADDATA_port_name = new NamedObject("MIREQUESTRAMREADDATA");
            PCIECQNPREQ_port_name = new NamedObject("PCIECQNPREQ");
            PIPEEQFS_port_name = new NamedObject("PIPEEQFS");
            PIPEEQLF_port_name = new NamedObject("PIPEEQLF");
            PIPERESETN_port_name = new NamedObject("PIPERESETN");
            PIPERX0DATAVALID_port_name = new NamedObject("PIPERX0DATAVALID");
            PIPERX0EQDONE_port_name = new NamedObject("PIPERX0EQDONE");
            PIPERX0EQLPADAPTDONE_port_name = new NamedObject("PIPERX0EQLPADAPTDONE");
            PIPERX0EQLPLFFSSEL_port_name = new NamedObject("PIPERX0EQLPLFFSSEL");
            PIPERX0EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX0EQLPNEWTXCOEFFORPRESET");
            PIPERX0STARTBLOCK_port_name = new NamedObject("PIPERX0STARTBLOCK");
            PIPERX0SYNCHEADER_port_name = new NamedObject("PIPERX0SYNCHEADER");
            PIPERX1DATAVALID_port_name = new NamedObject("PIPERX1DATAVALID");
            PIPERX1EQDONE_port_name = new NamedObject("PIPERX1EQDONE");
            PIPERX1EQLPADAPTDONE_port_name = new NamedObject("PIPERX1EQLPADAPTDONE");
            PIPERX1EQLPLFFSSEL_port_name = new NamedObject("PIPERX1EQLPLFFSSEL");
            PIPERX1EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX1EQLPNEWTXCOEFFORPRESET");
            PIPERX1STARTBLOCK_port_name = new NamedObject("PIPERX1STARTBLOCK");
            PIPERX1SYNCHEADER_port_name = new NamedObject("PIPERX1SYNCHEADER");
            PIPERX2DATAVALID_port_name = new NamedObject("PIPERX2DATAVALID");
            PIPERX2EQDONE_port_name = new NamedObject("PIPERX2EQDONE");
            PIPERX2EQLPADAPTDONE_port_name = new NamedObject("PIPERX2EQLPADAPTDONE");
            PIPERX2EQLPLFFSSEL_port_name = new NamedObject("PIPERX2EQLPLFFSSEL");
            PIPERX2EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX2EQLPNEWTXCOEFFORPRESET");
            PIPERX2STARTBLOCK_port_name = new NamedObject("PIPERX2STARTBLOCK");
            PIPERX2SYNCHEADER_port_name = new NamedObject("PIPERX2SYNCHEADER");
            PIPERX3DATAVALID_port_name = new NamedObject("PIPERX3DATAVALID");
            PIPERX3EQDONE_port_name = new NamedObject("PIPERX3EQDONE");
            PIPERX3EQLPADAPTDONE_port_name = new NamedObject("PIPERX3EQLPADAPTDONE");
            PIPERX3EQLPLFFSSEL_port_name = new NamedObject("PIPERX3EQLPLFFSSEL");
            PIPERX3EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX3EQLPNEWTXCOEFFORPRESET");
            PIPERX3STARTBLOCK_port_name = new NamedObject("PIPERX3STARTBLOCK");
            PIPERX3SYNCHEADER_port_name = new NamedObject("PIPERX3SYNCHEADER");
            PIPERX4DATAVALID_port_name = new NamedObject("PIPERX4DATAVALID");
            PIPERX4EQDONE_port_name = new NamedObject("PIPERX4EQDONE");
            PIPERX4EQLPADAPTDONE_port_name = new NamedObject("PIPERX4EQLPADAPTDONE");
            PIPERX4EQLPLFFSSEL_port_name = new NamedObject("PIPERX4EQLPLFFSSEL");
            PIPERX4EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX4EQLPNEWTXCOEFFORPRESET");
            PIPERX4STARTBLOCK_port_name = new NamedObject("PIPERX4STARTBLOCK");
            PIPERX4SYNCHEADER_port_name = new NamedObject("PIPERX4SYNCHEADER");
            PIPERX5DATAVALID_port_name = new NamedObject("PIPERX5DATAVALID");
            PIPERX5EQDONE_port_name = new NamedObject("PIPERX5EQDONE");
            PIPERX5EQLPADAPTDONE_port_name = new NamedObject("PIPERX5EQLPADAPTDONE");
            PIPERX5EQLPLFFSSEL_port_name = new NamedObject("PIPERX5EQLPLFFSSEL");
            PIPERX5EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX5EQLPNEWTXCOEFFORPRESET");
            PIPERX5STARTBLOCK_port_name = new NamedObject("PIPERX5STARTBLOCK");
            PIPERX5SYNCHEADER_port_name = new NamedObject("PIPERX5SYNCHEADER");
            PIPERX6DATAVALID_port_name = new NamedObject("PIPERX6DATAVALID");
            PIPERX6EQDONE_port_name = new NamedObject("PIPERX6EQDONE");
            PIPERX6EQLPADAPTDONE_port_name = new NamedObject("PIPERX6EQLPADAPTDONE");
            PIPERX6EQLPLFFSSEL_port_name = new NamedObject("PIPERX6EQLPLFFSSEL");
            PIPERX6EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX6EQLPNEWTXCOEFFORPRESET");
            PIPERX6STARTBLOCK_port_name = new NamedObject("PIPERX6STARTBLOCK");
            PIPERX6SYNCHEADER_port_name = new NamedObject("PIPERX6SYNCHEADER");
            PIPERX7DATAVALID_port_name = new NamedObject("PIPERX7DATAVALID");
            PIPERX7EQDONE_port_name = new NamedObject("PIPERX7EQDONE");
            PIPERX7EQLPADAPTDONE_port_name = new NamedObject("PIPERX7EQLPADAPTDONE");
            PIPERX7EQLPLFFSSEL_port_name = new NamedObject("PIPERX7EQLPLFFSSEL");
            PIPERX7EQLPNEWTXCOEFFORPRESET_port_name = new NamedObject("PIPERX7EQLPNEWTXCOEFFORPRESET");
            PIPERX7STARTBLOCK_port_name = new NamedObject("PIPERX7STARTBLOCK");
            PIPERX7SYNCHEADER_port_name = new NamedObject("PIPERX7SYNCHEADER");
            PIPETX0EQCOEFF_port_name = new NamedObject("PIPETX0EQCOEFF");
            PIPETX0EQDONE_port_name = new NamedObject("PIPETX0EQDONE");
            PIPETX1EQCOEFF_port_name = new NamedObject("PIPETX1EQCOEFF");
            PIPETX1EQDONE_port_name = new NamedObject("PIPETX1EQDONE");
            PIPETX2EQCOEFF_port_name = new NamedObject("PIPETX2EQCOEFF");
            PIPETX2EQDONE_port_name = new NamedObject("PIPETX2EQDONE");
            PIPETX3EQCOEFF_port_name = new NamedObject("PIPETX3EQCOEFF");
            PIPETX3EQDONE_port_name = new NamedObject("PIPETX3EQDONE");
            PIPETX4EQCOEFF_port_name = new NamedObject("PIPETX4EQCOEFF");
            PIPETX4EQDONE_port_name = new NamedObject("PIPETX4EQDONE");
            PIPETX5EQCOEFF_port_name = new NamedObject("PIPETX5EQCOEFF");
            PIPETX5EQDONE_port_name = new NamedObject("PIPETX5EQDONE");
            PIPETX6EQCOEFF_port_name = new NamedObject("PIPETX6EQCOEFF");
            PIPETX6EQDONE_port_name = new NamedObject("PIPETX6EQDONE");
            PIPETX7EQCOEFF_port_name = new NamedObject("PIPETX7EQCOEFF");
            PIPETX7EQDONE_port_name = new NamedObject("PIPETX7EQDONE");
            PLDISABLESCRAMBLER_port_name = new NamedObject("PLDISABLESCRAMBLER");
            PLEQRESETEIEOSCOUNT_port_name = new NamedObject("PLEQRESETEIEOSCOUNT");
            PLGEN3PCSDISABLE_port_name = new NamedObject("PLGEN3PCSDISABLE");
            PLGEN3PCSRXSYNCDONE_port_name = new NamedObject("PLGEN3PCSRXSYNCDONE");
            RECCLK_port_name = new NamedObject("RECCLK");
            RESETN_port_name = new NamedObject("RESETN");
            SAXISCCTDATA_port_name = new NamedObject("SAXISCCTDATA");
            SAXISCCTKEEP_port_name = new NamedObject("SAXISCCTKEEP");
            SAXISCCTLAST_port_name = new NamedObject("SAXISCCTLAST");
            SAXISCCTUSER_port_name = new NamedObject("SAXISCCTUSER");
            SAXISCCTVALID_port_name = new NamedObject("SAXISCCTVALID");
            SAXISRQTDATA_port_name = new NamedObject("SAXISRQTDATA");
            SAXISRQTKEEP_port_name = new NamedObject("SAXISRQTKEEP");
            SAXISRQTLAST_port_name = new NamedObject("SAXISRQTLAST");
            SAXISRQTUSER_port_name = new NamedObject("SAXISRQTUSER");
            SAXISRQTVALID_port_name = new NamedObject("SAXISRQTVALID");
            CFGBUSNUMBER_port_name = new NamedObject("CFGBUSNUMBER");
            CFGDEVICENUMBER_port_name = new NamedObject("CFGDEVICENUMBER");
            CFGFUNCTIONNUMBER_port_name = new NamedObject("CFGFUNCTIONNUMBER");
            CFGLINKCONTOLRCB_port_name = new NamedObject("CFGLINKCONTOLRCB");
            CFGPCIELINKSTATEN_port_name = new NamedObject("CFGPCIELINKSTATEN");
            CFGTOTURNOFFN_port_name = new NamedObject("CFGTOTURNOFFN");
            DBGBADDLLPSTATUS_port_name = new NamedObject("DBGBADDLLPSTATUS");
            DBGBADTLPLCRC_port_name = new NamedObject("DBGBADTLPLCRC");
            DBGBADTLPSEQNUM_port_name = new NamedObject("DBGBADTLPSEQNUM");
            DBGBADTLPSTATUS_port_name = new NamedObject("DBGBADTLPSTATUS");
            DBGDLPROTOCOLSTATUS_port_name = new NamedObject("DBGDLPROTOCOLSTATUS");
            DBGFCPROTOCOLERRSTATUS_port_name = new NamedObject("DBGFCPROTOCOLERRSTATUS");
            DBGMLFRMDLENGTH_port_name = new NamedObject("DBGMLFRMDLENGTH");
            DBGMLFRMDMPS_port_name = new NamedObject("DBGMLFRMDMPS");
            DBGMLFRMDTCVC_port_name = new NamedObject("DBGMLFRMDTCVC");
            DBGMLFRMDTLPSTATUS_port_name = new NamedObject("DBGMLFRMDTLPSTATUS");
            DBGMLFRMDUNRECTYPE_port_name = new NamedObject("DBGMLFRMDUNRECTYPE");
            DBGPOISTLPSTATUS_port_name = new NamedObject("DBGPOISTLPSTATUS");
            DBGRCVROVERFLOWSTATUS_port_name = new NamedObject("DBGRCVROVERFLOWSTATUS");
            DBGREGDETECTEDCORRECTABLE_port_name = new NamedObject("DBGREGDETECTEDCORRECTABLE");
            DBGREGDETECTEDFATAL_port_name = new NamedObject("DBGREGDETECTEDFATAL");
            DBGREGDETECTEDNONFATAL_port_name = new NamedObject("DBGREGDETECTEDNONFATAL");
            DBGREGDETECTEDUNSUPPORTED_port_name = new NamedObject("DBGREGDETECTEDUNSUPPORTED");
            DBGRPLYROLLOVERSTATUS_port_name = new NamedObject("DBGRPLYROLLOVERSTATUS");
            DBGRPLYTIMEOUTSTATUS_port_name = new NamedObject("DBGRPLYTIMEOUTSTATUS");
            DBGURNOBARHIT_port_name = new NamedObject("DBGURNOBARHIT");
            DBGURPOISCFGWR_port_name = new NamedObject("DBGURPOISCFGWR");
            DBGURSTATUS_port_name = new NamedObject("DBGURSTATUS");
            DBGURUNSUPMSG_port_name = new NamedObject("DBGURUNSUPMSG");
            PIPEGTPOWERDOWNA_port_name = new NamedObject("PIPEGTPOWERDOWNA");
            PIPEGTPOWERDOWNB_port_name = new NamedObject("PIPEGTPOWERDOWNB");
            PIPEGTTXELECIDLEA_port_name = new NamedObject("PIPEGTTXELECIDLEA");
            PIPEGTTXELECIDLEB_port_name = new NamedObject("PIPEGTTXELECIDLEB");
            PIPERXPOLARITYA_port_name = new NamedObject("PIPERXPOLARITYA");
            PIPERXPOLARITYB_port_name = new NamedObject("PIPERXPOLARITYB");
            PIPERXRESETA_port_name = new NamedObject("PIPERXRESETA");
            PIPERXRESETB_port_name = new NamedObject("PIPERXRESETB");
            PIPETXCHARDISPMODEA_port_name = new NamedObject("PIPETXCHARDISPMODEA");
            PIPETXCHARDISPMODEB_port_name = new NamedObject("PIPETXCHARDISPMODEB");
            PIPETXCHARDISPVALA_port_name = new NamedObject("PIPETXCHARDISPVALA");
            PIPETXCHARDISPVALB_port_name = new NamedObject("PIPETXCHARDISPVALB");
            PIPETXCHARISKA_port_name = new NamedObject("PIPETXCHARISKA");
            PIPETXCHARISKB_port_name = new NamedObject("PIPETXCHARISKB");
            PIPETXDATAA_port_name = new NamedObject("PIPETXDATAA");
            PIPETXDATAB_port_name = new NamedObject("PIPETXDATAB");
            PIPETXRCVRDETA_port_name = new NamedObject("PIPETXRCVRDETA");
            PIPETXRCVRDETB_port_name = new NamedObject("PIPETXRCVRDETB");
            RECEIVEDHOTRESET_port_name = new NamedObject("RECEIVEDHOTRESET");
            CFGSUBSYSVENID_port_name = new NamedObject("CFGSUBSYSVENID");
            CFGTURNOFFOKN_port_name = new NamedObject("CFGTURNOFFOKN");
            CFGVENID_port_name = new NamedObject("CFGVENID");
            CLOCKLOCKED_port_name = new NamedObject("CLOCKLOCKED");
            MGTCLK_port_name = new NamedObject("MGTCLK");
            PIPEGTRESETDONEA_port_name = new NamedObject("PIPEGTRESETDONEA");
            PIPEGTRESETDONEB_port_name = new NamedObject("PIPEGTRESETDONEB");
            PIPEPHYSTATUSA_port_name = new NamedObject("PIPEPHYSTATUSA");
            PIPEPHYSTATUSB_port_name = new NamedObject("PIPEPHYSTATUSB");
            PIPERXCHARISKA_port_name = new NamedObject("PIPERXCHARISKA");
            PIPERXCHARISKB_port_name = new NamedObject("PIPERXCHARISKB");
            PIPERXDATAA_port_name = new NamedObject("PIPERXDATAA");
            PIPERXDATAB_port_name = new NamedObject("PIPERXDATAB");
            PIPERXENTERELECIDLEA_port_name = new NamedObject("PIPERXENTERELECIDLEA");
            PIPERXENTERELECIDLEB_port_name = new NamedObject("PIPERXENTERELECIDLEB");
            PIPERXSTATUSA_port_name = new NamedObject("PIPERXSTATUSA");
            PIPERXSTATUSB_port_name = new NamedObject("PIPERXSTATUSB");
            SYSRESETN_port_name = new NamedObject("SYSRESETN");
            BUSMASTERENABLE_port_name = new NamedObject("BUSMASTERENABLE");
            CRMDOHOTRESETN_port_name = new NamedObject("CRMDOHOTRESETN");
            CRMPWRSOFTRESETN_port_name = new NamedObject("CRMPWRSOFTRESETN");
            DLLTXPMDLLPOUTSTANDING_port_name = new NamedObject("DLLTXPMDLLPOUTSTANDING");
            INTERRUPTDISABLE_port_name = new NamedObject("INTERRUPTDISABLE");
            IOSPACEENABLE_port_name = new NamedObject("IOSPACEENABLE");
            L0CFGLOOPBACKACK_port_name = new NamedObject("L0CFGLOOPBACKACK");
            L0COMPLETERID_port_name = new NamedObject("L0COMPLETERID");
            L0DLLERRORVECTOR_port_name = new NamedObject("L0DLLERRORVECTOR");
            L0DLLRXACKOUTSTANDING_port_name = new NamedObject("L0DLLRXACKOUTSTANDING");
            L0DLLTXNONFCOUTSTANDING_port_name = new NamedObject("L0DLLTXNONFCOUTSTANDING");
            L0DLLTXOUTSTANDING_port_name = new NamedObject("L0DLLTXOUTSTANDING");
            L0DLLVCSTATUS_port_name = new NamedObject("L0DLLVCSTATUS");
            L0DLUPDOWN_port_name = new NamedObject("L0DLUPDOWN");
            L0FIRSTCFGWRITEOCCURRED_port_name = new NamedObject("L0FIRSTCFGWRITEOCCURRED");
            L0LTSSMSTATE_port_name = new NamedObject("L0LTSSMSTATE");
            L0MACENTEREDL0_port_name = new NamedObject("L0MACENTEREDL0");
            L0MACLINKTRAINING_port_name = new NamedObject("L0MACLINKTRAINING");
            L0MACLINKUP_port_name = new NamedObject("L0MACLINKUP");
            L0MACNEGOTIATEDLINKWIDTH_port_name = new NamedObject("L0MACNEGOTIATEDLINKWIDTH");
            L0MACNEWSTATEACK_port_name = new NamedObject("L0MACNEWSTATEACK");
            L0MACRXL0SSTATE_port_name = new NamedObject("L0MACRXL0SSTATE");
            L0MSIENABLE0_port_name = new NamedObject("L0MSIENABLE0");
            L0MULTIMSGEN0_port_name = new NamedObject("L0MULTIMSGEN0");
            L0PMEACK_port_name = new NamedObject("L0PMEACK");
            L0PMEEN_port_name = new NamedObject("L0PMEEN");
            L0PMEREQOUT_port_name = new NamedObject("L0PMEREQOUT");
            L0PWRL1STATE_port_name = new NamedObject("L0PWRL1STATE");
            L0PWRL23READYSTATE_port_name = new NamedObject("L0PWRL23READYSTATE");
            L0PWRSTATE0_port_name = new NamedObject("L0PWRSTATE0");
            L0PWRTURNOFFREQ_port_name = new NamedObject("L0PWRTURNOFFREQ");
            L0PWRTXL0SSTATE_port_name = new NamedObject("L0PWRTXL0SSTATE");
            L0RXDLLPM_port_name = new NamedObject("L0RXDLLPM");
            L0RXDLLPMTYPE_port_name = new NamedObject("L0RXDLLPMTYPE");
            L0RXMACLINKERROR_port_name = new NamedObject("L0RXMACLINKERROR");
            L0STATSCFGOTHERRECEIVED_port_name = new NamedObject("L0STATSCFGOTHERRECEIVED");
            L0STATSCFGOTHERTRANSMITTED_port_name = new NamedObject("L0STATSCFGOTHERTRANSMITTED");
            L0STATSCFGRECEIVED_port_name = new NamedObject("L0STATSCFGRECEIVED");
            L0STATSCFGTRANSMITTED_port_name = new NamedObject("L0STATSCFGTRANSMITTED");
            L0STATSDLLPRECEIVED_port_name = new NamedObject("L0STATSDLLPRECEIVED");
            L0STATSDLLPTRANSMITTED_port_name = new NamedObject("L0STATSDLLPTRANSMITTED");
            L0STATSOSRECEIVED_port_name = new NamedObject("L0STATSOSRECEIVED");
            L0STATSOSTRANSMITTED_port_name = new NamedObject("L0STATSOSTRANSMITTED");
            L0STATSTLPRECEIVED_port_name = new NamedObject("L0STATSTLPRECEIVED");
            L0STATSTLPTRANSMITTED_port_name = new NamedObject("L0STATSTLPTRANSMITTED");
            L0UNLOCKRECEIVED_port_name = new NamedObject("L0UNLOCKRECEIVED");
            LLKRXCHCOMPLETIONAVAILABLEN_port_name = new NamedObject("LLKRXCHCOMPLETIONAVAILABLEN");
            LLKRXCHNONPOSTEDAVAILABLEN_port_name = new NamedObject("LLKRXCHNONPOSTEDAVAILABLEN");
            LLKRXCHPOSTEDAVAILABLEN_port_name = new NamedObject("LLKRXCHPOSTEDAVAILABLEN");
            LLKRXDATA_port_name = new NamedObject("LLKRXDATA");
            LLKRXEOFN_port_name = new NamedObject("LLKRXEOFN");
            LLKRXEOPN_port_name = new NamedObject("LLKRXEOPN");
            LLKRXPREFERREDTYPE_port_name = new NamedObject("LLKRXPREFERREDTYPE");
            LLKRXSOFN_port_name = new NamedObject("LLKRXSOFN");
            LLKRXSOPN_port_name = new NamedObject("LLKRXSOPN");
            LLKRXSRCLASTREQN_port_name = new NamedObject("LLKRXSRCLASTREQN");
            LLKRXSRCRDYN_port_name = new NamedObject("LLKRXSRCRDYN");
            LLKRXVALIDN_port_name = new NamedObject("LLKRXVALIDN");
            LLKTCSTATUS_port_name = new NamedObject("LLKTCSTATUS");
            LLKTXCHANSPACE_port_name = new NamedObject("LLKTXCHANSPACE");
            LLKTXCHCOMPLETIONREADYN_port_name = new NamedObject("LLKTXCHCOMPLETIONREADYN");
            LLKTXCHNONPOSTEDREADYN_port_name = new NamedObject("LLKTXCHNONPOSTEDREADYN");
            LLKTXCHPOSTEDREADYN_port_name = new NamedObject("LLKTXCHPOSTEDREADYN");
            LLKTXCONFIGREADYN_port_name = new NamedObject("LLKTXCONFIGREADYN");
            LLKTXDSTRDYN_port_name = new NamedObject("LLKTXDSTRDYN");
            MAXPAYLOADSIZE_port_name = new NamedObject("MAXPAYLOADSIZE");
            MAXREADREQUESTSIZE_port_name = new NamedObject("MAXREADREQUESTSIZE");
            MEMSPACEENABLE_port_name = new NamedObject("MEMSPACEENABLE");
            MGMTPSO_port_name = new NamedObject("MGMTPSO");
            MGMTRDATA_port_name = new NamedObject("MGMTRDATA");
            MGMTSTATSCREDIT_port_name = new NamedObject("MGMTSTATSCREDIT");
            MIMDLLBRADD_port_name = new NamedObject("MIMDLLBRADD");
            MIMDLLBREN_port_name = new NamedObject("MIMDLLBREN");
            MIMDLLBWADD_port_name = new NamedObject("MIMDLLBWADD");
            MIMDLLBWDATA_port_name = new NamedObject("MIMDLLBWDATA");
            MIMDLLBWEN_port_name = new NamedObject("MIMDLLBWEN");
            MIMRXBRADD_port_name = new NamedObject("MIMRXBRADD");
            MIMRXBREN_port_name = new NamedObject("MIMRXBREN");
            MIMRXBWADD_port_name = new NamedObject("MIMRXBWADD");
            MIMRXBWDATA_port_name = new NamedObject("MIMRXBWDATA");
            MIMRXBWEN_port_name = new NamedObject("MIMRXBWEN");
            MIMTXBRADD_port_name = new NamedObject("MIMTXBRADD");
            MIMTXBREN_port_name = new NamedObject("MIMTXBREN");
            MIMTXBWADD_port_name = new NamedObject("MIMTXBWADD");
            MIMTXBWDATA_port_name = new NamedObject("MIMTXBWDATA");
            MIMTXBWEN_port_name = new NamedObject("MIMTXBWEN");
            PARITYERRORRESPONSE_port_name = new NamedObject("PARITYERRORRESPONSE");
            PIPEDESKEWLANESL0_port_name = new NamedObject("PIPEDESKEWLANESL0");
            PIPEDESKEWLANESL1_port_name = new NamedObject("PIPEDESKEWLANESL1");
            PIPEDESKEWLANESL2_port_name = new NamedObject("PIPEDESKEWLANESL2");
            PIPEDESKEWLANESL3_port_name = new NamedObject("PIPEDESKEWLANESL3");
            PIPEDESKEWLANESL4_port_name = new NamedObject("PIPEDESKEWLANESL4");
            PIPEDESKEWLANESL5_port_name = new NamedObject("PIPEDESKEWLANESL5");
            PIPEDESKEWLANESL6_port_name = new NamedObject("PIPEDESKEWLANESL6");
            PIPEDESKEWLANESL7_port_name = new NamedObject("PIPEDESKEWLANESL7");
            PIPEPOWERDOWNL0_port_name = new NamedObject("PIPEPOWERDOWNL0");
            PIPEPOWERDOWNL1_port_name = new NamedObject("PIPEPOWERDOWNL1");
            PIPEPOWERDOWNL2_port_name = new NamedObject("PIPEPOWERDOWNL2");
            PIPEPOWERDOWNL3_port_name = new NamedObject("PIPEPOWERDOWNL3");
            PIPEPOWERDOWNL4_port_name = new NamedObject("PIPEPOWERDOWNL4");
            PIPEPOWERDOWNL5_port_name = new NamedObject("PIPEPOWERDOWNL5");
            PIPEPOWERDOWNL6_port_name = new NamedObject("PIPEPOWERDOWNL6");
            PIPEPOWERDOWNL7_port_name = new NamedObject("PIPEPOWERDOWNL7");
            PIPERESETL0_port_name = new NamedObject("PIPERESETL0");
            PIPERESETL1_port_name = new NamedObject("PIPERESETL1");
            PIPERESETL2_port_name = new NamedObject("PIPERESETL2");
            PIPERESETL3_port_name = new NamedObject("PIPERESETL3");
            PIPERESETL4_port_name = new NamedObject("PIPERESETL4");
            PIPERESETL5_port_name = new NamedObject("PIPERESETL5");
            PIPERESETL6_port_name = new NamedObject("PIPERESETL6");
            PIPERESETL7_port_name = new NamedObject("PIPERESETL7");
            PIPERXPOLARITYL0_port_name = new NamedObject("PIPERXPOLARITYL0");
            PIPERXPOLARITYL1_port_name = new NamedObject("PIPERXPOLARITYL1");
            PIPERXPOLARITYL2_port_name = new NamedObject("PIPERXPOLARITYL2");
            PIPERXPOLARITYL3_port_name = new NamedObject("PIPERXPOLARITYL3");
            PIPERXPOLARITYL4_port_name = new NamedObject("PIPERXPOLARITYL4");
            PIPERXPOLARITYL5_port_name = new NamedObject("PIPERXPOLARITYL5");
            PIPERXPOLARITYL6_port_name = new NamedObject("PIPERXPOLARITYL6");
            PIPERXPOLARITYL7_port_name = new NamedObject("PIPERXPOLARITYL7");
            PIPETXCOMPLIANCEL0_port_name = new NamedObject("PIPETXCOMPLIANCEL0");
            PIPETXCOMPLIANCEL1_port_name = new NamedObject("PIPETXCOMPLIANCEL1");
            PIPETXCOMPLIANCEL2_port_name = new NamedObject("PIPETXCOMPLIANCEL2");
            PIPETXCOMPLIANCEL3_port_name = new NamedObject("PIPETXCOMPLIANCEL3");
            PIPETXCOMPLIANCEL4_port_name = new NamedObject("PIPETXCOMPLIANCEL4");
            PIPETXCOMPLIANCEL5_port_name = new NamedObject("PIPETXCOMPLIANCEL5");
            PIPETXCOMPLIANCEL6_port_name = new NamedObject("PIPETXCOMPLIANCEL6");
            PIPETXCOMPLIANCEL7_port_name = new NamedObject("PIPETXCOMPLIANCEL7");
            PIPETXDATAKL0_port_name = new NamedObject("PIPETXDATAKL0");
            PIPETXDATAKL1_port_name = new NamedObject("PIPETXDATAKL1");
            PIPETXDATAKL2_port_name = new NamedObject("PIPETXDATAKL2");
            PIPETXDATAKL3_port_name = new NamedObject("PIPETXDATAKL3");
            PIPETXDATAKL4_port_name = new NamedObject("PIPETXDATAKL4");
            PIPETXDATAKL5_port_name = new NamedObject("PIPETXDATAKL5");
            PIPETXDATAKL6_port_name = new NamedObject("PIPETXDATAKL6");
            PIPETXDATAKL7_port_name = new NamedObject("PIPETXDATAKL7");
            PIPETXDATAL0_port_name = new NamedObject("PIPETXDATAL0");
            PIPETXDATAL1_port_name = new NamedObject("PIPETXDATAL1");
            PIPETXDATAL2_port_name = new NamedObject("PIPETXDATAL2");
            PIPETXDATAL3_port_name = new NamedObject("PIPETXDATAL3");
            PIPETXDATAL4_port_name = new NamedObject("PIPETXDATAL4");
            PIPETXDATAL5_port_name = new NamedObject("PIPETXDATAL5");
            PIPETXDATAL6_port_name = new NamedObject("PIPETXDATAL6");
            PIPETXDATAL7_port_name = new NamedObject("PIPETXDATAL7");
            PIPETXDETECTRXLOOPBACKL0_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL0");
            PIPETXDETECTRXLOOPBACKL1_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL1");
            PIPETXDETECTRXLOOPBACKL2_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL2");
            PIPETXDETECTRXLOOPBACKL3_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL3");
            PIPETXDETECTRXLOOPBACKL4_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL4");
            PIPETXDETECTRXLOOPBACKL5_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL5");
            PIPETXDETECTRXLOOPBACKL6_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL6");
            PIPETXDETECTRXLOOPBACKL7_port_name = new NamedObject("PIPETXDETECTRXLOOPBACKL7");
            PIPETXELECIDLEL0_port_name = new NamedObject("PIPETXELECIDLEL0");
            PIPETXELECIDLEL1_port_name = new NamedObject("PIPETXELECIDLEL1");
            PIPETXELECIDLEL2_port_name = new NamedObject("PIPETXELECIDLEL2");
            PIPETXELECIDLEL3_port_name = new NamedObject("PIPETXELECIDLEL3");
            PIPETXELECIDLEL4_port_name = new NamedObject("PIPETXELECIDLEL4");
            PIPETXELECIDLEL5_port_name = new NamedObject("PIPETXELECIDLEL5");
            PIPETXELECIDLEL6_port_name = new NamedObject("PIPETXELECIDLEL6");
            PIPETXELECIDLEL7_port_name = new NamedObject("PIPETXELECIDLEL7");
            SERRENABLE_port_name = new NamedObject("SERRENABLE");
            URREPORTINGENABLE_port_name = new NamedObject("URREPORTINGENABLE");
            AUXPOWER_port_name = new NamedObject("AUXPOWER");
            COMPLIANCEAVOID_port_name = new NamedObject("COMPLIANCEAVOID");
            CRMCORECLK_port_name = new NamedObject("CRMCORECLK");
            CRMCORECLKDLO_port_name = new NamedObject("CRMCORECLKDLO");
            CRMCORECLKRXO_port_name = new NamedObject("CRMCORECLKRXO");
            CRMCORECLKTXO_port_name = new NamedObject("CRMCORECLKTXO");
            CRMLINKRSTN_port_name = new NamedObject("CRMLINKRSTN");
            CRMMACRSTN_port_name = new NamedObject("CRMMACRSTN");
            CRMMGMTRSTN_port_name = new NamedObject("CRMMGMTRSTN");
            CRMNVRSTN_port_name = new NamedObject("CRMNVRSTN");
            CRMURSTN_port_name = new NamedObject("CRMURSTN");
            CRMUSERCFGRSTN_port_name = new NamedObject("CRMUSERCFGRSTN");
            CRMUSERCLK_port_name = new NamedObject("CRMUSERCLK");
            CRMUSERCLKRXO_port_name = new NamedObject("CRMUSERCLKRXO");
            CRMUSERCLKTXO_port_name = new NamedObject("CRMUSERCLKTXO");
            L0CFGDISABLESCRAMBLE_port_name = new NamedObject("L0CFGDISABLESCRAMBLE");
            L0CFGLOOPBACKMASTER_port_name = new NamedObject("L0CFGLOOPBACKMASTER");
            L0LEGACYINTFUNCT0_port_name = new NamedObject("L0LEGACYINTFUNCT0");
            L0MSIREQUEST0_port_name = new NamedObject("L0MSIREQUEST0");
            L0PACKETHEADERFROMUSER_port_name = new NamedObject("L0PACKETHEADERFROMUSER");
            L0PMEREQIN_port_name = new NamedObject("L0PMEREQIN");
            L0SETCOMPLETERABORTERROR_port_name = new NamedObject("L0SETCOMPLETERABORTERROR");
            L0SETCOMPLETIONTIMEOUTCORRERROR_port_name = new NamedObject("L0SETCOMPLETIONTIMEOUTCORRERROR");
            L0SETCOMPLETIONTIMEOUTUNCORRERROR_port_name = new NamedObject("L0SETCOMPLETIONTIMEOUTUNCORRERROR");
            L0SETDETECTEDCORRERROR_port_name = new NamedObject("L0SETDETECTEDCORRERROR");
            L0SETDETECTEDFATALERROR_port_name = new NamedObject("L0SETDETECTEDFATALERROR");
            L0SETDETECTEDNONFATALERROR_port_name = new NamedObject("L0SETDETECTEDNONFATALERROR");
            L0SETUNEXPECTEDCOMPLETIONCORRERROR_port_name = new NamedObject("L0SETUNEXPECTEDCOMPLETIONCORRERROR");
            L0SETUNEXPECTEDCOMPLETIONUNCORRERROR_port_name = new NamedObject("L0SETUNEXPECTEDCOMPLETIONUNCORRERROR");
            L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR_port_name = new NamedObject("L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR");
            L0SETUNSUPPORTEDREQUESTOTHERERROR_port_name = new NamedObject("L0SETUNSUPPORTEDREQUESTOTHERERROR");
            L0SETUSERDETECTEDPARITYERROR_port_name = new NamedObject("L0SETUSERDETECTEDPARITYERROR");
            L0SETUSERMASTERDATAPARITY_port_name = new NamedObject("L0SETUSERMASTERDATAPARITY");
            L0SETUSERRECEIVEDMASTERABORT_port_name = new NamedObject("L0SETUSERRECEIVEDMASTERABORT");
            L0SETUSERRECEIVEDTARGETABORT_port_name = new NamedObject("L0SETUSERRECEIVEDTARGETABORT");
            L0SETUSERSIGNALLEDTARGETABORT_port_name = new NamedObject("L0SETUSERSIGNALLEDTARGETABORT");
            L0SETUSERSYSTEMERROR_port_name = new NamedObject("L0SETUSERSYSTEMERROR");
            L0TRANSACTIONSPENDING_port_name = new NamedObject("L0TRANSACTIONSPENDING");
            LLKRXCHFIFO_port_name = new NamedObject("LLKRXCHFIFO");
            LLKRXCHTC_port_name = new NamedObject("LLKRXCHTC");
            LLKRXDSTCONTREQN_port_name = new NamedObject("LLKRXDSTCONTREQN");
            LLKRXDSTREQN_port_name = new NamedObject("LLKRXDSTREQN");
            LLKTXCHFIFO_port_name = new NamedObject("LLKTXCHFIFO");
            LLKTXCHTC_port_name = new NamedObject("LLKTXCHTC");
            LLKTXDATA_port_name = new NamedObject("LLKTXDATA");
            LLKTXENABLEN_port_name = new NamedObject("LLKTXENABLEN");
            LLKTXEOFN_port_name = new NamedObject("LLKTXEOFN");
            LLKTXEOPN_port_name = new NamedObject("LLKTXEOPN");
            LLKTXSOFN_port_name = new NamedObject("LLKTXSOFN");
            LLKTXSOPN_port_name = new NamedObject("LLKTXSOPN");
            LLKTXSRCDSCN_port_name = new NamedObject("LLKTXSRCDSCN");
            LLKTXSRCRDYN_port_name = new NamedObject("LLKTXSRCRDYN");
            MGMTADDR_port_name = new NamedObject("MGMTADDR");
            MGMTBWREN_port_name = new NamedObject("MGMTBWREN");
            MGMTRDEN_port_name = new NamedObject("MGMTRDEN");
            MGMTSTATSCREDITSEL_port_name = new NamedObject("MGMTSTATSCREDITSEL");
            MGMTWDATA_port_name = new NamedObject("MGMTWDATA");
            MGMTWREN_port_name = new NamedObject("MGMTWREN");
            MIMDLLBRDATA_port_name = new NamedObject("MIMDLLBRDATA");
            MIMRXBRDATA_port_name = new NamedObject("MIMRXBRDATA");
            MIMTXBRDATA_port_name = new NamedObject("MIMTXBRDATA");
            PIPEPHYSTATUSL0_port_name = new NamedObject("PIPEPHYSTATUSL0");
            PIPEPHYSTATUSL1_port_name = new NamedObject("PIPEPHYSTATUSL1");
            PIPEPHYSTATUSL2_port_name = new NamedObject("PIPEPHYSTATUSL2");
            PIPEPHYSTATUSL3_port_name = new NamedObject("PIPEPHYSTATUSL3");
            PIPEPHYSTATUSL4_port_name = new NamedObject("PIPEPHYSTATUSL4");
            PIPEPHYSTATUSL5_port_name = new NamedObject("PIPEPHYSTATUSL5");
            PIPEPHYSTATUSL6_port_name = new NamedObject("PIPEPHYSTATUSL6");
            PIPEPHYSTATUSL7_port_name = new NamedObject("PIPEPHYSTATUSL7");
            PIPERXCHANISALIGNEDL0_port_name = new NamedObject("PIPERXCHANISALIGNEDL0");
            PIPERXCHANISALIGNEDL1_port_name = new NamedObject("PIPERXCHANISALIGNEDL1");
            PIPERXCHANISALIGNEDL2_port_name = new NamedObject("PIPERXCHANISALIGNEDL2");
            PIPERXCHANISALIGNEDL3_port_name = new NamedObject("PIPERXCHANISALIGNEDL3");
            PIPERXCHANISALIGNEDL4_port_name = new NamedObject("PIPERXCHANISALIGNEDL4");
            PIPERXCHANISALIGNEDL5_port_name = new NamedObject("PIPERXCHANISALIGNEDL5");
            PIPERXCHANISALIGNEDL6_port_name = new NamedObject("PIPERXCHANISALIGNEDL6");
            PIPERXCHANISALIGNEDL7_port_name = new NamedObject("PIPERXCHANISALIGNEDL7");
            PIPERXDATAKL0_port_name = new NamedObject("PIPERXDATAKL0");
            PIPERXDATAKL1_port_name = new NamedObject("PIPERXDATAKL1");
            PIPERXDATAKL2_port_name = new NamedObject("PIPERXDATAKL2");
            PIPERXDATAKL3_port_name = new NamedObject("PIPERXDATAKL3");
            PIPERXDATAKL4_port_name = new NamedObject("PIPERXDATAKL4");
            PIPERXDATAKL5_port_name = new NamedObject("PIPERXDATAKL5");
            PIPERXDATAKL6_port_name = new NamedObject("PIPERXDATAKL6");
            PIPERXDATAKL7_port_name = new NamedObject("PIPERXDATAKL7");
            PIPERXDATAL0_port_name = new NamedObject("PIPERXDATAL0");
            PIPERXDATAL1_port_name = new NamedObject("PIPERXDATAL1");
            PIPERXDATAL2_port_name = new NamedObject("PIPERXDATAL2");
            PIPERXDATAL3_port_name = new NamedObject("PIPERXDATAL3");
            PIPERXDATAL4_port_name = new NamedObject("PIPERXDATAL4");
            PIPERXDATAL5_port_name = new NamedObject("PIPERXDATAL5");
            PIPERXDATAL6_port_name = new NamedObject("PIPERXDATAL6");
            PIPERXDATAL7_port_name = new NamedObject("PIPERXDATAL7");
            PIPERXELECIDLEL0_port_name = new NamedObject("PIPERXELECIDLEL0");
            PIPERXELECIDLEL1_port_name = new NamedObject("PIPERXELECIDLEL1");
            PIPERXELECIDLEL2_port_name = new NamedObject("PIPERXELECIDLEL2");
            PIPERXELECIDLEL3_port_name = new NamedObject("PIPERXELECIDLEL3");
            PIPERXELECIDLEL4_port_name = new NamedObject("PIPERXELECIDLEL4");
            PIPERXELECIDLEL5_port_name = new NamedObject("PIPERXELECIDLEL5");
            PIPERXELECIDLEL6_port_name = new NamedObject("PIPERXELECIDLEL6");
            PIPERXELECIDLEL7_port_name = new NamedObject("PIPERXELECIDLEL7");
            PIPERXSTATUSL0_port_name = new NamedObject("PIPERXSTATUSL0");
            PIPERXSTATUSL1_port_name = new NamedObject("PIPERXSTATUSL1");
            PIPERXSTATUSL2_port_name = new NamedObject("PIPERXSTATUSL2");
            PIPERXSTATUSL3_port_name = new NamedObject("PIPERXSTATUSL3");
            PIPERXSTATUSL4_port_name = new NamedObject("PIPERXSTATUSL4");
            PIPERXSTATUSL5_port_name = new NamedObject("PIPERXSTATUSL5");
            PIPERXSTATUSL6_port_name = new NamedObject("PIPERXSTATUSL6");
            PIPERXSTATUSL7_port_name = new NamedObject("PIPERXSTATUSL7");
            PIPERXVALIDL0_port_name = new NamedObject("PIPERXVALIDL0");
            PIPERXVALIDL1_port_name = new NamedObject("PIPERXVALIDL1");
            PIPERXVALIDL2_port_name = new NamedObject("PIPERXVALIDL2");
            PIPERXVALIDL3_port_name = new NamedObject("PIPERXVALIDL3");
            PIPERXVALIDL4_port_name = new NamedObject("PIPERXVALIDL4");
            PIPERXVALIDL5_port_name = new NamedObject("PIPERXVALIDL5");
            PIPERXVALIDL6_port_name = new NamedObject("PIPERXVALIDL6");
            PIPERXVALIDL7_port_name = new NamedObject("PIPERXVALIDL7");
            CRMRXHOTRESETN_port_name = new NamedObject("CRMRXHOTRESETN");
            L0ASAUTONOMOUSINITCOMPLETED_port_name = new NamedObject("L0ASAUTONOMOUSINITCOMPLETED");
            L0ATTENTIONINDICATORCONTROL_port_name = new NamedObject("L0ATTENTIONINDICATORCONTROL");
            L0CORRERRMSGRCVD_port_name = new NamedObject("L0CORRERRMSGRCVD");
            L0DLLASRXSTATE_port_name = new NamedObject("L0DLLASRXSTATE");
            L0DLLASTXSTATE_port_name = new NamedObject("L0DLLASTXSTATE");
            L0ERRMSGREQID_port_name = new NamedObject("L0ERRMSGREQID");
            L0FATALERRMSGRCVD_port_name = new NamedObject("L0FATALERRMSGRCVD");
            L0FWDCORRERROUT_port_name = new NamedObject("L0FWDCORRERROUT");
            L0FWDFATALERROUT_port_name = new NamedObject("L0FWDFATALERROUT");
            L0FWDNONFATALERROUT_port_name = new NamedObject("L0FWDNONFATALERROUT");
            L0MACUPSTREAMDOWNSTREAM_port_name = new NamedObject("L0MACUPSTREAMDOWNSTREAM");
            L0MCFOUND_port_name = new NamedObject("L0MCFOUND");
            L0NONFATALERRMSGRCVD_port_name = new NamedObject("L0NONFATALERRMSGRCVD");
            L0POWERCONTROLLERCONTROL_port_name = new NamedObject("L0POWERCONTROLLERCONTROL");
            L0POWERINDICATORCONTROL_port_name = new NamedObject("L0POWERINDICATORCONTROL");
            L0PWRINHIBITTRANSFERS_port_name = new NamedObject("L0PWRINHIBITTRANSFERS");
            L0PWRL23READYDEVICE_port_name = new NamedObject("L0PWRL23READYDEVICE");
            L0RECEIVEDASSERTINTALEGACYINT_port_name = new NamedObject("L0RECEIVEDASSERTINTALEGACYINT");
            L0RECEIVEDASSERTINTBLEGACYINT_port_name = new NamedObject("L0RECEIVEDASSERTINTBLEGACYINT");
            L0RECEIVEDASSERTINTCLEGACYINT_port_name = new NamedObject("L0RECEIVEDASSERTINTCLEGACYINT");
            L0RECEIVEDASSERTINTDLEGACYINT_port_name = new NamedObject("L0RECEIVEDASSERTINTDLEGACYINT");
            L0RECEIVEDDEASSERTINTALEGACYINT_port_name = new NamedObject("L0RECEIVEDDEASSERTINTALEGACYINT");
            L0RECEIVEDDEASSERTINTBLEGACYINT_port_name = new NamedObject("L0RECEIVEDDEASSERTINTBLEGACYINT");
            L0RECEIVEDDEASSERTINTCLEGACYINT_port_name = new NamedObject("L0RECEIVEDDEASSERTINTCLEGACYINT");
            L0RECEIVEDDEASSERTINTDLEGACYINT_port_name = new NamedObject("L0RECEIVEDDEASSERTINTDLEGACYINT");
            L0RXBEACON_port_name = new NamedObject("L0RXBEACON");
            L0RXDLLFCCMPLMCCRED_port_name = new NamedObject("L0RXDLLFCCMPLMCCRED");
            L0RXDLLFCCMPLMCUPDATE_port_name = new NamedObject("L0RXDLLFCCMPLMCUPDATE");
            L0RXDLLFCNPOSTBYPCRED_port_name = new NamedObject("L0RXDLLFCNPOSTBYPCRED");
            L0RXDLLFCNPOSTBYPUPDATE_port_name = new NamedObject("L0RXDLLFCNPOSTBYPUPDATE");
            L0RXDLLFCPOSTORDCRED_port_name = new NamedObject("L0RXDLLFCPOSTORDCRED");
            L0RXDLLFCPOSTORDUPDATE_port_name = new NamedObject("L0RXDLLFCPOSTORDUPDATE");
            L0RXDLLSBFCDATA_port_name = new NamedObject("L0RXDLLSBFCDATA");
            L0RXDLLSBFCUPDATE_port_name = new NamedObject("L0RXDLLSBFCUPDATE");
            L0RXDLLTLPECRCOK_port_name = new NamedObject("L0RXDLLTLPECRCOK");
            L0RXDLLTLPEND_port_name = new NamedObject("L0RXDLLTLPEND");
            L0TOGGLEELECTROMECHANICALINTERLOCK_port_name = new NamedObject("L0TOGGLEELECTROMECHANICALINTERLOCK");
            L0TRANSFORMEDVC_port_name = new NamedObject("L0TRANSFORMEDVC");
            L0TXDLLFCCMPLMCUPDATED_port_name = new NamedObject("L0TXDLLFCCMPLMCUPDATED");
            L0TXDLLFCNPOSTBYPUPDATED_port_name = new NamedObject("L0TXDLLFCNPOSTBYPUPDATED");
            L0TXDLLFCPOSTORDUPDATED_port_name = new NamedObject("L0TXDLLFCPOSTORDUPDATED");
            L0TXDLLPMUPDATED_port_name = new NamedObject("L0TXDLLPMUPDATED");
            L0TXDLLSBFCUPDATED_port_name = new NamedObject("L0TXDLLSBFCUPDATED");
            L0UCBYPFOUND_port_name = new NamedObject("L0UCBYPFOUND");
            L0UCORDFOUND_port_name = new NamedObject("L0UCORDFOUND");
            LLKRX4DWHEADERN_port_name = new NamedObject("LLKRX4DWHEADERN");
            LLKRXCHCOMPLETIONPARTIALN_port_name = new NamedObject("LLKRXCHCOMPLETIONPARTIALN");
            LLKRXCHCONFIGAVAILABLEN_port_name = new NamedObject("LLKRXCHCONFIGAVAILABLEN");
            LLKRXCHCONFIGPARTIALN_port_name = new NamedObject("LLKRXCHCONFIGPARTIALN");
            LLKRXCHNONPOSTEDPARTIALN_port_name = new NamedObject("LLKRXCHNONPOSTEDPARTIALN");
            LLKRXCHPOSTEDPARTIALN_port_name = new NamedObject("LLKRXCHPOSTEDPARTIALN");
            LLKRXECRCBADN_port_name = new NamedObject("LLKRXECRCBADN");
            LLKRXSRCDSCN_port_name = new NamedObject("LLKRXSRCDSCN");
            CFGNEGOTIATEDLINKWIDTH_port_name = new NamedObject("CFGNEGOTIATEDLINKWIDTH");
            CRMCFGBRIDGEHOTRESET_port_name = new NamedObject("CRMCFGBRIDGEHOTRESET");
            CRMTXHOTRESETN_port_name = new NamedObject("CRMTXHOTRESETN");
            CROSSLINKSEED_port_name = new NamedObject("CROSSLINKSEED");
            L0ACKNAKTIMERADJUSTMENT_port_name = new NamedObject("L0ACKNAKTIMERADJUSTMENT");
            L0ALLDOWNPORTSINL1_port_name = new NamedObject("L0ALLDOWNPORTSINL1");
            L0ALLDOWNRXPORTSINL0S_port_name = new NamedObject("L0ALLDOWNRXPORTSINL0S");
            L0ASE_port_name = new NamedObject("L0ASE");
            L0ASPORTCOUNT_port_name = new NamedObject("L0ASPORTCOUNT");
            L0ASTURNPOOLBITSCONSUMED_port_name = new NamedObject("L0ASTURNPOOLBITSCONSUMED");
            L0ATTENTIONBUTTONPRESSED_port_name = new NamedObject("L0ATTENTIONBUTTONPRESSED");
            L0CFGASSPANTREEOWNEDSTATE_port_name = new NamedObject("L0CFGASSPANTREEOWNEDSTATE");
            L0CFGASSTATECHANGECMD_port_name = new NamedObject("L0CFGASSTATECHANGECMD");
            L0CFGEXTENDEDSYNC_port_name = new NamedObject("L0CFGEXTENDEDSYNC");
            L0CFGL0SENTRYENABLE_port_name = new NamedObject("L0CFGL0SENTRYENABLE");
            L0CFGL0SENTRYSUP_port_name = new NamedObject("L0CFGL0SENTRYSUP");
            L0CFGL0SEXITLAT_port_name = new NamedObject("L0CFGL0SEXITLAT");
            L0CFGLINKDISABLE_port_name = new NamedObject("L0CFGLINKDISABLE");
            L0CFGNEGOTIATEDMAXP_port_name = new NamedObject("L0CFGNEGOTIATEDMAXP");
            L0CFGVCENABLE_port_name = new NamedObject("L0CFGVCENABLE");
            L0CFGVCID_port_name = new NamedObject("L0CFGVCID");
            L0DLLHOLDLINKUP_port_name = new NamedObject("L0DLLHOLDLINKUP");
            L0ELECTROMECHANICALINTERLOCKENGAGED_port_name = new NamedObject("L0ELECTROMECHANICALINTERLOCKENGAGED");
            L0FWDASSERTINTALEGACYINT_port_name = new NamedObject("L0FWDASSERTINTALEGACYINT");
            L0FWDASSERTINTBLEGACYINT_port_name = new NamedObject("L0FWDASSERTINTBLEGACYINT");
            L0FWDASSERTINTCLEGACYINT_port_name = new NamedObject("L0FWDASSERTINTCLEGACYINT");
            L0FWDASSERTINTDLEGACYINT_port_name = new NamedObject("L0FWDASSERTINTDLEGACYINT");
            L0FWDCORRERRIN_port_name = new NamedObject("L0FWDCORRERRIN");
            L0FWDDEASSERTINTALEGACYINT_port_name = new NamedObject("L0FWDDEASSERTINTALEGACYINT");
            L0FWDDEASSERTINTBLEGACYINT_port_name = new NamedObject("L0FWDDEASSERTINTBLEGACYINT");
            L0FWDDEASSERTINTCLEGACYINT_port_name = new NamedObject("L0FWDDEASSERTINTCLEGACYINT");
            L0FWDDEASSERTINTDLEGACYINT_port_name = new NamedObject("L0FWDDEASSERTINTDLEGACYINT");
            L0FWDFATALERRIN_port_name = new NamedObject("L0FWDFATALERRIN");
            L0FWDNONFATALERRIN_port_name = new NamedObject("L0FWDNONFATALERRIN");
            L0MRLSENSORCLOSEDN_port_name = new NamedObject("L0MRLSENSORCLOSEDN");
            L0PORTNUMBER_port_name = new NamedObject("L0PORTNUMBER");
            L0POWERFAULTDETECTED_port_name = new NamedObject("L0POWERFAULTDETECTED");
            L0PRESENCEDETECTSLOTEMPTYN_port_name = new NamedObject("L0PRESENCEDETECTSLOTEMPTYN");
            L0PWRNEWSTATEREQ_port_name = new NamedObject("L0PWRNEWSTATEREQ");
            L0PWRNEXTLINKSTATE_port_name = new NamedObject("L0PWRNEXTLINKSTATE");
            L0REPLAYTIMERADJUSTMENT_port_name = new NamedObject("L0REPLAYTIMERADJUSTMENT");
            L0ROOTTURNOFFREQ_port_name = new NamedObject("L0ROOTTURNOFFREQ");
            L0RXTLTLPNONINITIALIZEDVC_port_name = new NamedObject("L0RXTLTLPNONINITIALIZEDVC");
            L0SENDUNLOCKMESSAGE_port_name = new NamedObject("L0SENDUNLOCKMESSAGE");
            L0SETLINKDETECTEDPARITYERROR_port_name = new NamedObject("L0SETLINKDETECTEDPARITYERROR");
            L0SETLINKMASTERDATAPARITY_port_name = new NamedObject("L0SETLINKMASTERDATAPARITY");
            L0SETLINKRECEIVEDMASTERABORT_port_name = new NamedObject("L0SETLINKRECEIVEDMASTERABORT");
            L0SETLINKRECEIVEDTARGETABORT_port_name = new NamedObject("L0SETLINKRECEIVEDTARGETABORT");
            L0SETLINKSIGNALLEDTARGETABORT_port_name = new NamedObject("L0SETLINKSIGNALLEDTARGETABORT");
            L0SETLINKSYSTEMERROR_port_name = new NamedObject("L0SETLINKSYSTEMERROR");
            L0TLASFCCREDSTARVATION_port_name = new NamedObject("L0TLASFCCREDSTARVATION");
            L0TLLINKRETRAIN_port_name = new NamedObject("L0TLLINKRETRAIN");
            L0TXBEACON_port_name = new NamedObject("L0TXBEACON");
            L0TXCFGPM_port_name = new NamedObject("L0TXCFGPM");
            L0TXCFGPMTYPE_port_name = new NamedObject("L0TXCFGPMTYPE");
            L0TXTLFCCMPLMCCRED_port_name = new NamedObject("L0TXTLFCCMPLMCCRED");
            L0TXTLFCCMPLMCUPDATE_port_name = new NamedObject("L0TXTLFCCMPLMCUPDATE");
            L0TXTLFCNPOSTBYPCRED_port_name = new NamedObject("L0TXTLFCNPOSTBYPCRED");
            L0TXTLFCNPOSTBYPUPDATE_port_name = new NamedObject("L0TXTLFCNPOSTBYPUPDATE");
            L0TXTLFCPOSTORDCRED_port_name = new NamedObject("L0TXTLFCPOSTORDCRED");
            L0TXTLFCPOSTORDUPDATE_port_name = new NamedObject("L0TXTLFCPOSTORDUPDATE");
            L0TXTLSBFCDATA_port_name = new NamedObject("L0TXTLSBFCDATA");
            L0TXTLSBFCUPDATE_port_name = new NamedObject("L0TXTLSBFCUPDATE");
            L0TXTLTLPDATA_port_name = new NamedObject("L0TXTLTLPDATA");
            L0TXTLTLPEDB_port_name = new NamedObject("L0TXTLTLPEDB");
            L0TXTLTLPENABLE_port_name = new NamedObject("L0TXTLTLPENABLE");
            L0TXTLTLPEND_port_name = new NamedObject("L0TXTLTLPEND");
            L0TXTLTLPLATENCY_port_name = new NamedObject("L0TXTLTLPLATENCY");
            L0TXTLTLPREQ_port_name = new NamedObject("L0TXTLTLPREQ");
            L0TXTLTLPREQEND_port_name = new NamedObject("L0TXTLTLPREQEND");
            L0TXTLTLPWIDTH_port_name = new NamedObject("L0TXTLTLPWIDTH");
            L0UPSTREAMRXPORTINL0S_port_name = new NamedObject("L0UPSTREAMRXPORTINL0S");
            L0VC0PREVIEWEXPAND_port_name = new NamedObject("L0VC0PREVIEWEXPAND");
            L0WAKEN_port_name = new NamedObject("L0WAKEN");
            LLKTX4DWHEADERN_port_name = new NamedObject("LLKTX4DWHEADERN");
            LLKTXCOMPLETEN_port_name = new NamedObject("LLKTXCOMPLETEN");
            LLKTXCREATEECRCN_port_name = new NamedObject("LLKTXCREATEECRCN");
            MAINPOWER_port_name = new NamedObject("MAINPOWER");
            COUNTERREADVAL_port_name = new NamedObject("COUNTERREADVAL");
            FINEOVERFLOW_port_name = new NamedObject("FINEOVERFLOW");
            ICLK_port_name = new NamedObject("ICLK");
            ICLKDIV_port_name = new NamedObject("ICLKDIV");
            ISERDESRST_port_name = new NamedObject("ISERDESRST");
            RCLK_port_name = new NamedObject("RCLK");
            COUNTERLOADEN_port_name = new NamedObject("COUNTERLOADEN");
            COUNTERLOADVAL_port_name = new NamedObject("COUNTERLOADVAL");
            COUNTERREADEN_port_name = new NamedObject("COUNTERREADEN");
            DIVIDERST_port_name = new NamedObject("DIVIDERST");
            EDGEADV_port_name = new NamedObject("EDGEADV");
            FINEENABLE_port_name = new NamedObject("FINEENABLE");
            FINEINC_port_name = new NamedObject("FINEINC");
            FREQREFCLK_port_name = new NamedObject("FREQREFCLK");
            MEMREFCLK_port_name = new NamedObject("MEMREFCLK");
            PHASEREFCLK_port_name = new NamedObject("PHASEREFCLK");
            RANKSEL_port_name = new NamedObject("RANKSEL");
            SYNCIN_port_name = new NamedObject("SYNCIN");
            SYSCLK_port_name = new NamedObject("SYSCLK");
            DQSFOUND_port_name = new NamedObject("DQSFOUND");
            DQSOUTOFRANGE_port_name = new NamedObject("DQSOUTOFRANGE");
            PHASELOCKED_port_name = new NamedObject("PHASELOCKED");
            WRENABLE_port_name = new NamedObject("WRENABLE");
            BURSTPENDINGPHY_port_name = new NamedObject("BURSTPENDINGPHY");
            ENCALIBPHY_port_name = new NamedObject("ENCALIBPHY");
            RANKSELPHY_port_name = new NamedObject("RANKSELPHY");
            RSTDQSFIND_port_name = new NamedObject("RSTDQSFIND");
            COARSEOVERFLOW_port_name = new NamedObject("COARSEOVERFLOW");
            OCLKDELAYED_port_name = new NamedObject("OCLKDELAYED");
            OCLKDIV_port_name = new NamedObject("OCLKDIV");
            OSERDESRST_port_name = new NamedObject("OSERDESRST");
            COARSEENABLE_port_name = new NamedObject("COARSEENABLE");
            COARSEINC_port_name = new NamedObject("COARSEINC");
            SELFINEOCLKDELAY_port_name = new NamedObject("SELFINEOCLKDELAY");
            CTSBUS_port_name = new NamedObject("CTSBUS");
            DQSBUS_port_name = new NamedObject("DQSBUS");
            DTSBUS_port_name = new NamedObject("DTSBUS");
            RDENABLE_port_name = new NamedObject("RDENABLE");
            AUXOUTPUT_port_name = new NamedObject("AUXOUTPUT");
            INBURSTPENDING_port_name = new NamedObject("INBURSTPENDING");
            INRANKA_port_name = new NamedObject("INRANKA");
            INRANKB_port_name = new NamedObject("INRANKB");
            INRANKC_port_name = new NamedObject("INRANKC");
            INRANKD_port_name = new NamedObject("INRANKD");
            OUTBURSTPENDING_port_name = new NamedObject("OUTBURSTPENDING");
            PCENABLECALIB_port_name = new NamedObject("PCENABLECALIB");
            PHYCTLALMOSTFULL_port_name = new NamedObject("PHYCTLALMOSTFULL");
            PHYCTLEMPTY_port_name = new NamedObject("PHYCTLEMPTY");
            PHYCTLFULL_port_name = new NamedObject("PHYCTLFULL");
            PHYCTLREADY_port_name = new NamedObject("PHYCTLREADY");
            PHYCLK_port_name = new NamedObject("PHYCLK");
            PHYCTLMSTREMPTY_port_name = new NamedObject("PHYCTLMSTREMPTY");
            PHYCTLWD_port_name = new NamedObject("PHYCTLWD");
            PHYCTLWRENABLE_port_name = new NamedObject("PHYCTLWRENABLE");
            READCALIBENABLE_port_name = new NamedObject("READCALIBENABLE");
            REFDLLLOCK_port_name = new NamedObject("REFDLLLOCK");
            WRITECALIBENABLE_port_name = new NamedObject("WRITECALIBENABLE");
            CLKFBDCM_port_name = new NamedObject("CLKFBDCM");
            CLKOUTDCM0_port_name = new NamedObject("CLKOUTDCM0");
            CLKOUTDCM1_port_name = new NamedObject("CLKOUTDCM1");
            CLKOUTDCM2_port_name = new NamedObject("CLKOUTDCM2");
            CLKOUTDCM3_port_name = new NamedObject("CLKOUTDCM3");
            CLKOUTDCM4_port_name = new NamedObject("CLKOUTDCM4");
            CLKOUTDCM5_port_name = new NamedObject("CLKOUTDCM5");
            REL_port_name = new NamedObject("REL");
            CLKA1_port_name = new NamedObject("CLKA1");
            CLKA1D2_port_name = new NamedObject("CLKA1D2");
            CLKA1D4_port_name = new NamedObject("CLKA1D4");
            CLKA1D8_port_name = new NamedObject("CLKA1D8");
            CLKB1_port_name = new NamedObject("CLKB1");
            CLKC1_port_name = new NamedObject("CLKC1");
            CLKD1_port_name = new NamedObject("CLKD1");
            CLKA_port_name = new NamedObject("CLKA");
            CLKC_port_name = new NamedObject("CLKC");
            CLKD_port_name = new NamedObject("CLKD");
            APUFCMDECODED_port_name = new NamedObject("APUFCMDECODED");
            APUFCMDECUDI_port_name = new NamedObject("APUFCMDECUDI");
            APUFCMDECUDIVALID_port_name = new NamedObject("APUFCMDECUDIVALID");
            APUFCMENDIAN_port_name = new NamedObject("APUFCMENDIAN");
            APUFCMFLUSH_port_name = new NamedObject("APUFCMFLUSH");
            APUFCMINSTRUCTION_port_name = new NamedObject("APUFCMINSTRUCTION");
            APUFCMINSTRVALID_port_name = new NamedObject("APUFCMINSTRVALID");
            APUFCMLOADBYTEEN_port_name = new NamedObject("APUFCMLOADBYTEEN");
            APUFCMLOADDATA_port_name = new NamedObject("APUFCMLOADDATA");
            APUFCMLOADDVALID_port_name = new NamedObject("APUFCMLOADDVALID");
            APUFCMOPERANDVALID_port_name = new NamedObject("APUFCMOPERANDVALID");
            APUFCMRADATA_port_name = new NamedObject("APUFCMRADATA");
            APUFCMRBDATA_port_name = new NamedObject("APUFCMRBDATA");
            APUFCMWRITEBACKOK_port_name = new NamedObject("APUFCMWRITEBACKOK");
            APUFCMXERCA_port_name = new NamedObject("APUFCMXERCA");
            C405CPMCORESLEEPREQ_port_name = new NamedObject("C405CPMCORESLEEPREQ");
            C405CPMMSRCE_port_name = new NamedObject("C405CPMMSRCE");
            C405CPMMSREE_port_name = new NamedObject("C405CPMMSREE");
            C405CPMTIMERIRQ_port_name = new NamedObject("C405CPMTIMERIRQ");
            C405CPMTIMERRESETREQ_port_name = new NamedObject("C405CPMTIMERRESETREQ");
            C405DBGLOADDATAONAPUDBUS_port_name = new NamedObject("C405DBGLOADDATAONAPUDBUS");
            C405DBGMSRWE_port_name = new NamedObject("C405DBGMSRWE");
            C405DBGSTOPACK_port_name = new NamedObject("C405DBGSTOPACK");
            C405DBGWBCOMPLETE_port_name = new NamedObject("C405DBGWBCOMPLETE");
            C405DBGWBFULL_port_name = new NamedObject("C405DBGWBFULL");
            C405DBGWBIAR_port_name = new NamedObject("C405DBGWBIAR");
            C405JTGCAPTUREDR_port_name = new NamedObject("C405JTGCAPTUREDR");
            C405JTGEXTEST_port_name = new NamedObject("C405JTGEXTEST");
            C405JTGPGMOUT_port_name = new NamedObject("C405JTGPGMOUT");
            C405JTGSHIFTDR_port_name = new NamedObject("C405JTGSHIFTDR");
            C405JTGTDO_port_name = new NamedObject("C405JTGTDO");
            C405JTGTDOEN_port_name = new NamedObject("C405JTGTDOEN");
            C405JTGUPDATEDR_port_name = new NamedObject("C405JTGUPDATEDR");
            C405PLBDCUABORT_port_name = new NamedObject("C405PLBDCUABORT");
            C405PLBDCUABUS_port_name = new NamedObject("C405PLBDCUABUS");
            C405PLBDCUBE_port_name = new NamedObject("C405PLBDCUBE");
            C405PLBDCUCACHEABLE_port_name = new NamedObject("C405PLBDCUCACHEABLE");
            C405PLBDCUGUARDED_port_name = new NamedObject("C405PLBDCUGUARDED");
            C405PLBDCUPRIORITY_port_name = new NamedObject("C405PLBDCUPRIORITY");
            C405PLBDCUREQUEST_port_name = new NamedObject("C405PLBDCUREQUEST");
            C405PLBDCURNW_port_name = new NamedObject("C405PLBDCURNW");
            C405PLBDCUSIZE2_port_name = new NamedObject("C405PLBDCUSIZE2");
            C405PLBDCUU0ATTR_port_name = new NamedObject("C405PLBDCUU0ATTR");
            C405PLBDCUWRDBUS_port_name = new NamedObject("C405PLBDCUWRDBUS");
            C405PLBDCUWRITETHRU_port_name = new NamedObject("C405PLBDCUWRITETHRU");
            C405PLBICUABORT_port_name = new NamedObject("C405PLBICUABORT");
            C405PLBICUABUS_port_name = new NamedObject("C405PLBICUABUS");
            C405PLBICUCACHEABLE_port_name = new NamedObject("C405PLBICUCACHEABLE");
            C405PLBICUPRIORITY_port_name = new NamedObject("C405PLBICUPRIORITY");
            C405PLBICUREQUEST_port_name = new NamedObject("C405PLBICUREQUEST");
            C405PLBICUSIZE_port_name = new NamedObject("C405PLBICUSIZE");
            C405PLBICUU0ATTR_port_name = new NamedObject("C405PLBICUU0ATTR");
            C405RSTCHIPRESETREQ_port_name = new NamedObject("C405RSTCHIPRESETREQ");
            C405RSTCORERESETREQ_port_name = new NamedObject("C405RSTCORERESETREQ");
            C405RSTSYSRESETREQ_port_name = new NamedObject("C405RSTSYSRESETREQ");
            C405TRCCYCLE_port_name = new NamedObject("C405TRCCYCLE");
            C405TRCEVENEXECUTIONSTATUS_port_name = new NamedObject("C405TRCEVENEXECUTIONSTATUS");
            C405TRCODDEXECUTIONSTATUS_port_name = new NamedObject("C405TRCODDEXECUTIONSTATUS");
            C405TRCTRACESTATUS_port_name = new NamedObject("C405TRCTRACESTATUS");
            C405TRCTRIGGEREVENTOUT_port_name = new NamedObject("C405TRCTRIGGEREVENTOUT");
            C405TRCTRIGGEREVENTTYPE_port_name = new NamedObject("C405TRCTRIGGEREVENTTYPE");
            C405XXXMACHINECHECK_port_name = new NamedObject("C405XXXMACHINECHECK");
            DCREMACENABLER_port_name = new NamedObject("DCREMACENABLER");
            DSOCMBRAMABUS_port_name = new NamedObject("DSOCMBRAMABUS");
            DSOCMBRAMBYTEWRITE_port_name = new NamedObject("DSOCMBRAMBYTEWRITE");
            DSOCMBRAMEN_port_name = new NamedObject("DSOCMBRAMEN");
            DSOCMBRAMWRDBUS_port_name = new NamedObject("DSOCMBRAMWRDBUS");
            DSOCMBUSY_port_name = new NamedObject("DSOCMBUSY");
            DSOCMRDADDRVALID_port_name = new NamedObject("DSOCMRDADDRVALID");
            DSOCMWRADDRVALID_port_name = new NamedObject("DSOCMWRADDRVALID");
            EXTDCRABUS_port_name = new NamedObject("EXTDCRABUS");
            EXTDCRDBUSOUT_port_name = new NamedObject("EXTDCRDBUSOUT");
            EXTDCRREAD_port_name = new NamedObject("EXTDCRREAD");
            EXTDCRWRITE_port_name = new NamedObject("EXTDCRWRITE");
            ISOCMBRAMEN_port_name = new NamedObject("ISOCMBRAMEN");
            ISOCMBRAMEVENWRITEEN_port_name = new NamedObject("ISOCMBRAMEVENWRITEEN");
            ISOCMBRAMODDWRITEEN_port_name = new NamedObject("ISOCMBRAMODDWRITEEN");
            ISOCMBRAMRDABUS_port_name = new NamedObject("ISOCMBRAMRDABUS");
            ISOCMBRAMWRABUS_port_name = new NamedObject("ISOCMBRAMWRABUS");
            ISOCMBRAMWRDBUS_port_name = new NamedObject("ISOCMBRAMWRDBUS");
            ISOCMDCRBRAMEVENEN_port_name = new NamedObject("ISOCMDCRBRAMEVENEN");
            ISOCMDCRBRAMODDEN_port_name = new NamedObject("ISOCMDCRBRAMODDEN");
            ISOCMDCRBRAMRDSELECT_port_name = new NamedObject("ISOCMDCRBRAMRDSELECT");
            BRAMDSOCMCLK_port_name = new NamedObject("BRAMDSOCMCLK");
            BRAMDSOCMRDDBUS_port_name = new NamedObject("BRAMDSOCMRDDBUS");
            BRAMISOCMCLK_port_name = new NamedObject("BRAMISOCMCLK");
            BRAMISOCMDCRRDDBUS_port_name = new NamedObject("BRAMISOCMDCRRDDBUS");
            BRAMISOCMRDDBUS_port_name = new NamedObject("BRAMISOCMRDDBUS");
            CPMC405CLOCK_port_name = new NamedObject("CPMC405CLOCK");
            CPMC405CORECLKINACTIVE_port_name = new NamedObject("CPMC405CORECLKINACTIVE");
            CPMC405CPUCLKEN_port_name = new NamedObject("CPMC405CPUCLKEN");
            CPMC405JTAGCLKEN_port_name = new NamedObject("CPMC405JTAGCLKEN");
            CPMC405SYNCBYPASS_port_name = new NamedObject("CPMC405SYNCBYPASS");
            CPMC405TIMERCLKEN_port_name = new NamedObject("CPMC405TIMERCLKEN");
            CPMC405TIMERTICK_port_name = new NamedObject("CPMC405TIMERTICK");
            CPMDCRCLK_port_name = new NamedObject("CPMDCRCLK");
            CPMFCMCLK_port_name = new NamedObject("CPMFCMCLK");
            DBGC405DEBUGHALT_port_name = new NamedObject("DBGC405DEBUGHALT");
            DBGC405EXTBUSHOLDACK_port_name = new NamedObject("DBGC405EXTBUSHOLDACK");
            DBGC405UNCONDDEBUGEVENT_port_name = new NamedObject("DBGC405UNCONDDEBUGEVENT");
            DSARCVALUE_port_name = new NamedObject("DSARCVALUE");
            DSCNTLVALUE_port_name = new NamedObject("DSCNTLVALUE");
            DSOCMRWCOMPLETE_port_name = new NamedObject("DSOCMRWCOMPLETE");
            EICC405CRITINPUTIRQ_port_name = new NamedObject("EICC405CRITINPUTIRQ");
            EICC405EXTINPUTIRQ_port_name = new NamedObject("EICC405EXTINPUTIRQ");
            EXTDCRACK_port_name = new NamedObject("EXTDCRACK");
            EXTDCRDBUSIN_port_name = new NamedObject("EXTDCRDBUSIN");
            FCMAPUCR_port_name = new NamedObject("FCMAPUCR");
            FCMAPUDCDCREN_port_name = new NamedObject("FCMAPUDCDCREN");
            FCMAPUDCDFORCEALIGN_port_name = new NamedObject("FCMAPUDCDFORCEALIGN");
            FCMAPUDCDFORCEBESTEERING_port_name = new NamedObject("FCMAPUDCDFORCEBESTEERING");
            FCMAPUDCDFPUOP_port_name = new NamedObject("FCMAPUDCDFPUOP");
            FCMAPUDCDGPRWRITE_port_name = new NamedObject("FCMAPUDCDGPRWRITE");
            FCMAPUDCDLDSTBYTE_port_name = new NamedObject("FCMAPUDCDLDSTBYTE");
            FCMAPUDCDLDSTDW_port_name = new NamedObject("FCMAPUDCDLDSTDW");
            FCMAPUDCDLDSTHW_port_name = new NamedObject("FCMAPUDCDLDSTHW");
            FCMAPUDCDLDSTQW_port_name = new NamedObject("FCMAPUDCDLDSTQW");
            FCMAPUDCDLDSTWD_port_name = new NamedObject("FCMAPUDCDLDSTWD");
            FCMAPUDCDLOAD_port_name = new NamedObject("FCMAPUDCDLOAD");
            FCMAPUDCDPRIVOP_port_name = new NamedObject("FCMAPUDCDPRIVOP");
            FCMAPUDCDRAEN_port_name = new NamedObject("FCMAPUDCDRAEN");
            FCMAPUDCDRBEN_port_name = new NamedObject("FCMAPUDCDRBEN");
            FCMAPUDCDSTORE_port_name = new NamedObject("FCMAPUDCDSTORE");
            FCMAPUDCDTRAPBE_port_name = new NamedObject("FCMAPUDCDTRAPBE");
            FCMAPUDCDTRAPLE_port_name = new NamedObject("FCMAPUDCDTRAPLE");
            FCMAPUDCDUPDATE_port_name = new NamedObject("FCMAPUDCDUPDATE");
            FCMAPUDCDXERCAEN_port_name = new NamedObject("FCMAPUDCDXERCAEN");
            FCMAPUDCDXEROVEN_port_name = new NamedObject("FCMAPUDCDXEROVEN");
            FCMAPUDECODEBUSY_port_name = new NamedObject("FCMAPUDECODEBUSY");
            FCMAPUDONE_port_name = new NamedObject("FCMAPUDONE");
            FCMAPUEXCEPTION_port_name = new NamedObject("FCMAPUEXCEPTION");
            FCMAPUEXEBLOCKINGMCO_port_name = new NamedObject("FCMAPUEXEBLOCKINGMCO");
            FCMAPUEXECRFIELD_port_name = new NamedObject("FCMAPUEXECRFIELD");
            FCMAPUEXENONBLOCKINGMCO_port_name = new NamedObject("FCMAPUEXENONBLOCKINGMCO");
            FCMAPUINSTRACK_port_name = new NamedObject("FCMAPUINSTRACK");
            FCMAPULOADWAIT_port_name = new NamedObject("FCMAPULOADWAIT");
            FCMAPURESULT_port_name = new NamedObject("FCMAPURESULT");
            FCMAPURESULTVALID_port_name = new NamedObject("FCMAPURESULTVALID");
            FCMAPUSLEEPNOTREADY_port_name = new NamedObject("FCMAPUSLEEPNOTREADY");
            FCMAPUXERCA_port_name = new NamedObject("FCMAPUXERCA");
            FCMAPUXEROV_port_name = new NamedObject("FCMAPUXEROV");
            ISARCVALUE_port_name = new NamedObject("ISARCVALUE");
            ISCNTLVALUE_port_name = new NamedObject("ISCNTLVALUE");
            JTGC405BNDSCANTDO_port_name = new NamedObject("JTGC405BNDSCANTDO");
            JTGC405TCK_port_name = new NamedObject("JTGC405TCK");
            JTGC405TDI_port_name = new NamedObject("JTGC405TDI");
            JTGC405TMS_port_name = new NamedObject("JTGC405TMS");
            JTGC405TRSTNEG_port_name = new NamedObject("JTGC405TRSTNEG");
            MCBCPUCLKEN_port_name = new NamedObject("MCBCPUCLKEN");
            MCBJTAGEN_port_name = new NamedObject("MCBJTAGEN");
            MCBTIMEREN_port_name = new NamedObject("MCBTIMEREN");
            MCPPCRST_port_name = new NamedObject("MCPPCRST");
            PLBC405DCUADDRACK_port_name = new NamedObject("PLBC405DCUADDRACK");
            PLBC405DCUBUSY_port_name = new NamedObject("PLBC405DCUBUSY");
            PLBC405DCUERR_port_name = new NamedObject("PLBC405DCUERR");
            PLBC405DCURDDACK_port_name = new NamedObject("PLBC405DCURDDACK");
            PLBC405DCURDDBUS_port_name = new NamedObject("PLBC405DCURDDBUS");
            PLBC405DCURDWDADDR_port_name = new NamedObject("PLBC405DCURDWDADDR");
            PLBC405DCUSSIZE1_port_name = new NamedObject("PLBC405DCUSSIZE1");
            PLBC405DCUWRDACK_port_name = new NamedObject("PLBC405DCUWRDACK");
            PLBC405ICUADDRACK_port_name = new NamedObject("PLBC405ICUADDRACK");
            PLBC405ICUBUSY_port_name = new NamedObject("PLBC405ICUBUSY");
            PLBC405ICUERR_port_name = new NamedObject("PLBC405ICUERR");
            PLBC405ICURDDACK_port_name = new NamedObject("PLBC405ICURDDACK");
            PLBC405ICURDDBUS_port_name = new NamedObject("PLBC405ICURDDBUS");
            PLBC405ICURDWDADDR_port_name = new NamedObject("PLBC405ICURDWDADDR");
            PLBC405ICUSSIZE1_port_name = new NamedObject("PLBC405ICUSSIZE1");
            PLBCLK_port_name = new NamedObject("PLBCLK");
            RSTC405RESETCHIP_port_name = new NamedObject("RSTC405RESETCHIP");
            RSTC405RESETCORE_port_name = new NamedObject("RSTC405RESETCORE");
            RSTC405RESETSYS_port_name = new NamedObject("RSTC405RESETSYS");
            TIEAPUCONTROL_port_name = new NamedObject("TIEAPUCONTROL");
            TIEAPUUDI1_port_name = new NamedObject("TIEAPUUDI1");
            TIEAPUUDI2_port_name = new NamedObject("TIEAPUUDI2");
            TIEAPUUDI3_port_name = new NamedObject("TIEAPUUDI3");
            TIEAPUUDI4_port_name = new NamedObject("TIEAPUUDI4");
            TIEAPUUDI5_port_name = new NamedObject("TIEAPUUDI5");
            TIEAPUUDI6_port_name = new NamedObject("TIEAPUUDI6");
            TIEAPUUDI7_port_name = new NamedObject("TIEAPUUDI7");
            TIEAPUUDI8_port_name = new NamedObject("TIEAPUUDI8");
            TIEC405DETERMINISTICMULT_port_name = new NamedObject("TIEC405DETERMINISTICMULT");
            TIEC405DISOPERANDFWD_port_name = new NamedObject("TIEC405DISOPERANDFWD");
            TIEC405MMUEN_port_name = new NamedObject("TIEC405MMUEN");
            TIEDCRADDR_port_name = new NamedObject("TIEDCRADDR");
            TIEPVRBIT10_port_name = new NamedObject("TIEPVRBIT10");
            TIEPVRBIT11_port_name = new NamedObject("TIEPVRBIT11");
            TIEPVRBIT28_port_name = new NamedObject("TIEPVRBIT28");
            TIEPVRBIT29_port_name = new NamedObject("TIEPVRBIT29");
            TIEPVRBIT30_port_name = new NamedObject("TIEPVRBIT30");
            TIEPVRBIT31_port_name = new NamedObject("TIEPVRBIT31");
            TIEPVRBIT8_port_name = new NamedObject("TIEPVRBIT8");
            TIEPVRBIT9_port_name = new NamedObject("TIEPVRBIT9");
            TRCC405TRACEDISABLE_port_name = new NamedObject("TRCC405TRACEDISABLE");
            TRCC405TRIGGEREVENTIN_port_name = new NamedObject("TRCC405TRIGGEREVENTIN");
            APUFCMDECFPUOP_port_name = new NamedObject("APUFCMDECFPUOP");
            APUFCMDECLDSTXFERSIZE_port_name = new NamedObject("APUFCMDECLDSTXFERSIZE");
            APUFCMDECLOAD_port_name = new NamedObject("APUFCMDECLOAD");
            APUFCMDECNONAUTON_port_name = new NamedObject("APUFCMDECNONAUTON");
            APUFCMDECSTORE_port_name = new NamedObject("APUFCMDECSTORE");
            APUFCMLOADBYTEADDR_port_name = new NamedObject("APUFCMLOADBYTEADDR");
            APUFCMMSRFE0_port_name = new NamedObject("APUFCMMSRFE0");
            APUFCMMSRFE1_port_name = new NamedObject("APUFCMMSRFE1");
            APUFCMNEXTINSTRREADY_port_name = new NamedObject("APUFCMNEXTINSTRREADY");
            C440CPMCORESLEEPREQ_port_name = new NamedObject("C440CPMCORESLEEPREQ");
            C440CPMDECIRPTREQ_port_name = new NamedObject("C440CPMDECIRPTREQ");
            C440CPMFITIRPTREQ_port_name = new NamedObject("C440CPMFITIRPTREQ");
            C440CPMMSRCE_port_name = new NamedObject("C440CPMMSRCE");
            C440CPMMSREE_port_name = new NamedObject("C440CPMMSREE");
            C440CPMTIMERRESETREQ_port_name = new NamedObject("C440CPMTIMERRESETREQ");
            C440CPMWDIRPTREQ_port_name = new NamedObject("C440CPMWDIRPTREQ");
            C440DBGSYSTEMCONTROL_port_name = new NamedObject("C440DBGSYSTEMCONTROL");
            C440JTGTDO_port_name = new NamedObject("C440JTGTDO");
            C440JTGTDOEN_port_name = new NamedObject("C440JTGTDOEN");
            C440MACHINECHECK_port_name = new NamedObject("C440MACHINECHECK");
            C440RSTCHIPRESETREQ_port_name = new NamedObject("C440RSTCHIPRESETREQ");
            C440RSTCORERESETREQ_port_name = new NamedObject("C440RSTCORERESETREQ");
            C440RSTSYSTEMRESETREQ_port_name = new NamedObject("C440RSTSYSTEMRESETREQ");
            C440TRCBRANCHSTATUS_port_name = new NamedObject("C440TRCBRANCHSTATUS");
            C440TRCCYCLE_port_name = new NamedObject("C440TRCCYCLE");
            C440TRCEXECUTIONSTATUS_port_name = new NamedObject("C440TRCEXECUTIONSTATUS");
            C440TRCTRACESTATUS_port_name = new NamedObject("C440TRCTRACESTATUS");
            C440TRCTRIGGEREVENTOUT_port_name = new NamedObject("C440TRCTRIGGEREVENTOUT");
            C440TRCTRIGGEREVENTTYPE_port_name = new NamedObject("C440TRCTRIGGEREVENTTYPE");
            DMA0LLRSTENGINEACK_port_name = new NamedObject("DMA0LLRSTENGINEACK");
            DMA0LLRXDSTRDYN_port_name = new NamedObject("DMA0LLRXDSTRDYN");
            DMA0LLTXD_port_name = new NamedObject("DMA0LLTXD");
            DMA0LLTXEOFN_port_name = new NamedObject("DMA0LLTXEOFN");
            DMA0LLTXEOPN_port_name = new NamedObject("DMA0LLTXEOPN");
            DMA0LLTXREM_port_name = new NamedObject("DMA0LLTXREM");
            DMA0LLTXSOFN_port_name = new NamedObject("DMA0LLTXSOFN");
            DMA0LLTXSOPN_port_name = new NamedObject("DMA0LLTXSOPN");
            DMA0LLTXSRCRDYN_port_name = new NamedObject("DMA0LLTXSRCRDYN");
            DMA0RXIRQ_port_name = new NamedObject("DMA0RXIRQ");
            DMA0TXIRQ_port_name = new NamedObject("DMA0TXIRQ");
            DMA1LLRSTENGINEACK_port_name = new NamedObject("DMA1LLRSTENGINEACK");
            DMA1LLRXDSTRDYN_port_name = new NamedObject("DMA1LLRXDSTRDYN");
            DMA1LLTXD_port_name = new NamedObject("DMA1LLTXD");
            DMA1LLTXEOFN_port_name = new NamedObject("DMA1LLTXEOFN");
            DMA1LLTXEOPN_port_name = new NamedObject("DMA1LLTXEOPN");
            DMA1LLTXREM_port_name = new NamedObject("DMA1LLTXREM");
            DMA1LLTXSOFN_port_name = new NamedObject("DMA1LLTXSOFN");
            DMA1LLTXSOPN_port_name = new NamedObject("DMA1LLTXSOPN");
            DMA1LLTXSRCRDYN_port_name = new NamedObject("DMA1LLTXSRCRDYN");
            DMA1RXIRQ_port_name = new NamedObject("DMA1RXIRQ");
            DMA1TXIRQ_port_name = new NamedObject("DMA1TXIRQ");
            DMA2LLRSTENGINEACK_port_name = new NamedObject("DMA2LLRSTENGINEACK");
            DMA2LLRXDSTRDYN_port_name = new NamedObject("DMA2LLRXDSTRDYN");
            DMA2LLTXD_port_name = new NamedObject("DMA2LLTXD");
            DMA2LLTXEOFN_port_name = new NamedObject("DMA2LLTXEOFN");
            DMA2LLTXEOPN_port_name = new NamedObject("DMA2LLTXEOPN");
            DMA2LLTXREM_port_name = new NamedObject("DMA2LLTXREM");
            DMA2LLTXSOFN_port_name = new NamedObject("DMA2LLTXSOFN");
            DMA2LLTXSOPN_port_name = new NamedObject("DMA2LLTXSOPN");
            DMA2LLTXSRCRDYN_port_name = new NamedObject("DMA2LLTXSRCRDYN");
            DMA2RXIRQ_port_name = new NamedObject("DMA2RXIRQ");
            DMA2TXIRQ_port_name = new NamedObject("DMA2TXIRQ");
            DMA3LLRSTENGINEACK_port_name = new NamedObject("DMA3LLRSTENGINEACK");
            DMA3LLRXDSTRDYN_port_name = new NamedObject("DMA3LLRXDSTRDYN");
            DMA3LLTXD_port_name = new NamedObject("DMA3LLTXD");
            DMA3LLTXEOFN_port_name = new NamedObject("DMA3LLTXEOFN");
            DMA3LLTXEOPN_port_name = new NamedObject("DMA3LLTXEOPN");
            DMA3LLTXREM_port_name = new NamedObject("DMA3LLTXREM");
            DMA3LLTXSOFN_port_name = new NamedObject("DMA3LLTXSOFN");
            DMA3LLTXSOPN_port_name = new NamedObject("DMA3LLTXSOPN");
            DMA3LLTXSRCRDYN_port_name = new NamedObject("DMA3LLTXSRCRDYN");
            DMA3RXIRQ_port_name = new NamedObject("DMA3RXIRQ");
            DMA3TXIRQ_port_name = new NamedObject("DMA3TXIRQ");
            MIMCADDRESS_port_name = new NamedObject("MIMCADDRESS");
            MIMCADDRESSVALID_port_name = new NamedObject("MIMCADDRESSVALID");
            MIMCBANKCONFLICT_port_name = new NamedObject("MIMCBANKCONFLICT");
            MIMCBYTEENABLE_port_name = new NamedObject("MIMCBYTEENABLE");
            MIMCREADNOTWRITE_port_name = new NamedObject("MIMCREADNOTWRITE");
            MIMCROWCONFLICT_port_name = new NamedObject("MIMCROWCONFLICT");
            MIMCWRITEDATA_port_name = new NamedObject("MIMCWRITEDATA");
            MIMCWRITEDATAVALID_port_name = new NamedObject("MIMCWRITEDATAVALID");
            PPCCPMINTERCONNECTBUSY_port_name = new NamedObject("PPCCPMINTERCONNECTBUSY");
            PPCDMDCRABUS_port_name = new NamedObject("PPCDMDCRABUS");
            PPCDMDCRDBUSOUT_port_name = new NamedObject("PPCDMDCRDBUSOUT");
            PPCDMDCRREAD_port_name = new NamedObject("PPCDMDCRREAD");
            PPCDMDCRUABUS_port_name = new NamedObject("PPCDMDCRUABUS");
            PPCDMDCRWRITE_port_name = new NamedObject("PPCDMDCRWRITE");
            PPCDSDCRACK_port_name = new NamedObject("PPCDSDCRACK");
            PPCDSDCRDBUSIN_port_name = new NamedObject("PPCDSDCRDBUSIN");
            PPCDSDCRTIMEOUTWAIT_port_name = new NamedObject("PPCDSDCRTIMEOUTWAIT");
            PPCEICINTERCONNECTIRQ_port_name = new NamedObject("PPCEICINTERCONNECTIRQ");
            PPCMPLBABORT_port_name = new NamedObject("PPCMPLBABORT");
            PPCMPLBABUS_port_name = new NamedObject("PPCMPLBABUS");
            PPCMPLBBE_port_name = new NamedObject("PPCMPLBBE");
            PPCMPLBBUSLOCK_port_name = new NamedObject("PPCMPLBBUSLOCK");
            PPCMPLBLOCKERR_port_name = new NamedObject("PPCMPLBLOCKERR");
            PPCMPLBPRIORITY_port_name = new NamedObject("PPCMPLBPRIORITY");
            PPCMPLBRDBURST_port_name = new NamedObject("PPCMPLBRDBURST");
            PPCMPLBREQUEST_port_name = new NamedObject("PPCMPLBREQUEST");
            PPCMPLBRNW_port_name = new NamedObject("PPCMPLBRNW");
            PPCMPLBSIZE_port_name = new NamedObject("PPCMPLBSIZE");
            PPCMPLBTATTRIBUTE_port_name = new NamedObject("PPCMPLBTATTRIBUTE");
            PPCMPLBTYPE_port_name = new NamedObject("PPCMPLBTYPE");
            PPCMPLBUABUS_port_name = new NamedObject("PPCMPLBUABUS");
            PPCMPLBWRBURST_port_name = new NamedObject("PPCMPLBWRBURST");
            PPCMPLBWRDBUS_port_name = new NamedObject("PPCMPLBWRDBUS");
            PPCS0PLBADDRACK_port_name = new NamedObject("PPCS0PLBADDRACK");
            PPCS0PLBMBUSY_port_name = new NamedObject("PPCS0PLBMBUSY");
            PPCS0PLBMIRQ_port_name = new NamedObject("PPCS0PLBMIRQ");
            PPCS0PLBMRDERR_port_name = new NamedObject("PPCS0PLBMRDERR");
            PPCS0PLBMWRERR_port_name = new NamedObject("PPCS0PLBMWRERR");
            PPCS0PLBRDBTERM_port_name = new NamedObject("PPCS0PLBRDBTERM");
            PPCS0PLBRDCOMP_port_name = new NamedObject("PPCS0PLBRDCOMP");
            PPCS0PLBRDDACK_port_name = new NamedObject("PPCS0PLBRDDACK");
            PPCS0PLBRDDBUS_port_name = new NamedObject("PPCS0PLBRDDBUS");
            PPCS0PLBRDWDADDR_port_name = new NamedObject("PPCS0PLBRDWDADDR");
            PPCS0PLBREARBITRATE_port_name = new NamedObject("PPCS0PLBREARBITRATE");
            PPCS0PLBSSIZE_port_name = new NamedObject("PPCS0PLBSSIZE");
            PPCS0PLBWAIT_port_name = new NamedObject("PPCS0PLBWAIT");
            PPCS0PLBWRBTERM_port_name = new NamedObject("PPCS0PLBWRBTERM");
            PPCS0PLBWRCOMP_port_name = new NamedObject("PPCS0PLBWRCOMP");
            PPCS0PLBWRDACK_port_name = new NamedObject("PPCS0PLBWRDACK");
            PPCS1PLBADDRACK_port_name = new NamedObject("PPCS1PLBADDRACK");
            PPCS1PLBMBUSY_port_name = new NamedObject("PPCS1PLBMBUSY");
            PPCS1PLBMIRQ_port_name = new NamedObject("PPCS1PLBMIRQ");
            PPCS1PLBMRDERR_port_name = new NamedObject("PPCS1PLBMRDERR");
            PPCS1PLBMWRERR_port_name = new NamedObject("PPCS1PLBMWRERR");
            PPCS1PLBRDBTERM_port_name = new NamedObject("PPCS1PLBRDBTERM");
            PPCS1PLBRDCOMP_port_name = new NamedObject("PPCS1PLBRDCOMP");
            PPCS1PLBRDDACK_port_name = new NamedObject("PPCS1PLBRDDACK");
            PPCS1PLBRDDBUS_port_name = new NamedObject("PPCS1PLBRDDBUS");
            PPCS1PLBRDWDADDR_port_name = new NamedObject("PPCS1PLBRDWDADDR");
            PPCS1PLBREARBITRATE_port_name = new NamedObject("PPCS1PLBREARBITRATE");
            PPCS1PLBSSIZE_port_name = new NamedObject("PPCS1PLBSSIZE");
            PPCS1PLBWAIT_port_name = new NamedObject("PPCS1PLBWAIT");
            PPCS1PLBWRBTERM_port_name = new NamedObject("PPCS1PLBWRBTERM");
            PPCS1PLBWRCOMP_port_name = new NamedObject("PPCS1PLBWRCOMP");
            PPCS1PLBWRDACK_port_name = new NamedObject("PPCS1PLBWRDACK");
            CPMC440CLK_port_name = new NamedObject("CPMC440CLK");
            CPMC440CLKEN_port_name = new NamedObject("CPMC440CLKEN");
            CPMC440CORECLOCKINACTIVE_port_name = new NamedObject("CPMC440CORECLOCKINACTIVE");
            CPMC440TIMERCLOCK_port_name = new NamedObject("CPMC440TIMERCLOCK");
            CPMDMA0LLCLK_port_name = new NamedObject("CPMDMA0LLCLK");
            CPMDMA1LLCLK_port_name = new NamedObject("CPMDMA1LLCLK");
            CPMDMA2LLCLK_port_name = new NamedObject("CPMDMA2LLCLK");
            CPMDMA3LLCLK_port_name = new NamedObject("CPMDMA3LLCLK");
            CPMINTERCONNECTCLK_port_name = new NamedObject("CPMINTERCONNECTCLK");
            CPMINTERCONNECTCLKEN_port_name = new NamedObject("CPMINTERCONNECTCLKEN");
            CPMINTERCONNECTCLKNTO1_port_name = new NamedObject("CPMINTERCONNECTCLKNTO1");
            CPMMCCLK_port_name = new NamedObject("CPMMCCLK");
            CPMPPCMPLBCLK_port_name = new NamedObject("CPMPPCMPLBCLK");
            CPMPPCS0PLBCLK_port_name = new NamedObject("CPMPPCS0PLBCLK");
            CPMPPCS1PLBCLK_port_name = new NamedObject("CPMPPCS1PLBCLK");
            DBGC440DEBUGHALT_port_name = new NamedObject("DBGC440DEBUGHALT");
            DBGC440SYSTEMSTATUS_port_name = new NamedObject("DBGC440SYSTEMSTATUS");
            DBGC440UNCONDDEBUGEVENT_port_name = new NamedObject("DBGC440UNCONDDEBUGEVENT");
            DCRPPCDMACK_port_name = new NamedObject("DCRPPCDMACK");
            DCRPPCDMDBUSIN_port_name = new NamedObject("DCRPPCDMDBUSIN");
            DCRPPCDMTIMEOUTWAIT_port_name = new NamedObject("DCRPPCDMTIMEOUTWAIT");
            DCRPPCDSABUS_port_name = new NamedObject("DCRPPCDSABUS");
            DCRPPCDSDBUSOUT_port_name = new NamedObject("DCRPPCDSDBUSOUT");
            DCRPPCDSREAD_port_name = new NamedObject("DCRPPCDSREAD");
            DCRPPCDSWRITE_port_name = new NamedObject("DCRPPCDSWRITE");
            EICC440CRITIRQ_port_name = new NamedObject("EICC440CRITIRQ");
            EICC440EXTIRQ_port_name = new NamedObject("EICC440EXTIRQ");
            FCMAPUCONFIRMINSTR_port_name = new NamedObject("FCMAPUCONFIRMINSTR");
            FCMAPUFPSCRFEX_port_name = new NamedObject("FCMAPUFPSCRFEX");
            FCMAPUSTOREDATA_port_name = new NamedObject("FCMAPUSTOREDATA");
            JTGC440TCK_port_name = new NamedObject("JTGC440TCK");
            JTGC440TDI_port_name = new NamedObject("JTGC440TDI");
            JTGC440TMS_port_name = new NamedObject("JTGC440TMS");
            JTGC440TRSTNEG_port_name = new NamedObject("JTGC440TRSTNEG");
            LLDMA0RSTENGINEREQ_port_name = new NamedObject("LLDMA0RSTENGINEREQ");
            LLDMA0RXD_port_name = new NamedObject("LLDMA0RXD");
            LLDMA0RXEOFN_port_name = new NamedObject("LLDMA0RXEOFN");
            LLDMA0RXEOPN_port_name = new NamedObject("LLDMA0RXEOPN");
            LLDMA0RXREM_port_name = new NamedObject("LLDMA0RXREM");
            LLDMA0RXSOFN_port_name = new NamedObject("LLDMA0RXSOFN");
            LLDMA0RXSOPN_port_name = new NamedObject("LLDMA0RXSOPN");
            LLDMA0RXSRCRDYN_port_name = new NamedObject("LLDMA0RXSRCRDYN");
            LLDMA0TXDSTRDYN_port_name = new NamedObject("LLDMA0TXDSTRDYN");
            LLDMA1RSTENGINEREQ_port_name = new NamedObject("LLDMA1RSTENGINEREQ");
            LLDMA1RXD_port_name = new NamedObject("LLDMA1RXD");
            LLDMA1RXEOFN_port_name = new NamedObject("LLDMA1RXEOFN");
            LLDMA1RXEOPN_port_name = new NamedObject("LLDMA1RXEOPN");
            LLDMA1RXREM_port_name = new NamedObject("LLDMA1RXREM");
            LLDMA1RXSOFN_port_name = new NamedObject("LLDMA1RXSOFN");
            LLDMA1RXSOPN_port_name = new NamedObject("LLDMA1RXSOPN");
            LLDMA1RXSRCRDYN_port_name = new NamedObject("LLDMA1RXSRCRDYN");
            LLDMA1TXDSTRDYN_port_name = new NamedObject("LLDMA1TXDSTRDYN");
            LLDMA2RSTENGINEREQ_port_name = new NamedObject("LLDMA2RSTENGINEREQ");
            LLDMA2RXD_port_name = new NamedObject("LLDMA2RXD");
            LLDMA2RXEOFN_port_name = new NamedObject("LLDMA2RXEOFN");
            LLDMA2RXEOPN_port_name = new NamedObject("LLDMA2RXEOPN");
            LLDMA2RXREM_port_name = new NamedObject("LLDMA2RXREM");
            LLDMA2RXSOFN_port_name = new NamedObject("LLDMA2RXSOFN");
            LLDMA2RXSOPN_port_name = new NamedObject("LLDMA2RXSOPN");
            LLDMA2RXSRCRDYN_port_name = new NamedObject("LLDMA2RXSRCRDYN");
            LLDMA2TXDSTRDYN_port_name = new NamedObject("LLDMA2TXDSTRDYN");
            LLDMA3RSTENGINEREQ_port_name = new NamedObject("LLDMA3RSTENGINEREQ");
            LLDMA3RXD_port_name = new NamedObject("LLDMA3RXD");
            LLDMA3RXEOFN_port_name = new NamedObject("LLDMA3RXEOFN");
            LLDMA3RXEOPN_port_name = new NamedObject("LLDMA3RXEOPN");
            LLDMA3RXREM_port_name = new NamedObject("LLDMA3RXREM");
            LLDMA3RXSOFN_port_name = new NamedObject("LLDMA3RXSOFN");
            LLDMA3RXSOPN_port_name = new NamedObject("LLDMA3RXSOPN");
            LLDMA3RXSRCRDYN_port_name = new NamedObject("LLDMA3RXSRCRDYN");
            LLDMA3TXDSTRDYN_port_name = new NamedObject("LLDMA3TXDSTRDYN");
            MCMIADDRREADYTOACCEPT_port_name = new NamedObject("MCMIADDRREADYTOACCEPT");
            MCMIREADDATA_port_name = new NamedObject("MCMIREADDATA");
            MCMIREADDATAERR_port_name = new NamedObject("MCMIREADDATAERR");
            MCMIREADDATAVALID_port_name = new NamedObject("MCMIREADDATAVALID");
            PLBPPCMADDRACK_port_name = new NamedObject("PLBPPCMADDRACK");
            PLBPPCMMBUSY_port_name = new NamedObject("PLBPPCMMBUSY");
            PLBPPCMMIRQ_port_name = new NamedObject("PLBPPCMMIRQ");
            PLBPPCMMRDERR_port_name = new NamedObject("PLBPPCMMRDERR");
            PLBPPCMMWRERR_port_name = new NamedObject("PLBPPCMMWRERR");
            PLBPPCMRDBTERM_port_name = new NamedObject("PLBPPCMRDBTERM");
            PLBPPCMRDDACK_port_name = new NamedObject("PLBPPCMRDDACK");
            PLBPPCMRDDBUS_port_name = new NamedObject("PLBPPCMRDDBUS");
            PLBPPCMRDPENDPRI_port_name = new NamedObject("PLBPPCMRDPENDPRI");
            PLBPPCMRDPENDREQ_port_name = new NamedObject("PLBPPCMRDPENDREQ");
            PLBPPCMRDWDADDR_port_name = new NamedObject("PLBPPCMRDWDADDR");
            PLBPPCMREARBITRATE_port_name = new NamedObject("PLBPPCMREARBITRATE");
            PLBPPCMREQPRI_port_name = new NamedObject("PLBPPCMREQPRI");
            PLBPPCMSSIZE_port_name = new NamedObject("PLBPPCMSSIZE");
            PLBPPCMTIMEOUT_port_name = new NamedObject("PLBPPCMTIMEOUT");
            PLBPPCMWRBTERM_port_name = new NamedObject("PLBPPCMWRBTERM");
            PLBPPCMWRDACK_port_name = new NamedObject("PLBPPCMWRDACK");
            PLBPPCMWRPENDPRI_port_name = new NamedObject("PLBPPCMWRPENDPRI");
            PLBPPCMWRPENDREQ_port_name = new NamedObject("PLBPPCMWRPENDREQ");
            PLBPPCS0ABORT_port_name = new NamedObject("PLBPPCS0ABORT");
            PLBPPCS0ABUS_port_name = new NamedObject("PLBPPCS0ABUS");
            PLBPPCS0BE_port_name = new NamedObject("PLBPPCS0BE");
            PLBPPCS0BUSLOCK_port_name = new NamedObject("PLBPPCS0BUSLOCK");
            PLBPPCS0LOCKERR_port_name = new NamedObject("PLBPPCS0LOCKERR");
            PLBPPCS0MASTERID_port_name = new NamedObject("PLBPPCS0MASTERID");
            PLBPPCS0MSIZE_port_name = new NamedObject("PLBPPCS0MSIZE");
            PLBPPCS0PAVALID_port_name = new NamedObject("PLBPPCS0PAVALID");
            PLBPPCS0RDBURST_port_name = new NamedObject("PLBPPCS0RDBURST");
            PLBPPCS0RDPENDPRI_port_name = new NamedObject("PLBPPCS0RDPENDPRI");
            PLBPPCS0RDPENDREQ_port_name = new NamedObject("PLBPPCS0RDPENDREQ");
            PLBPPCS0RDPRIM_port_name = new NamedObject("PLBPPCS0RDPRIM");
            PLBPPCS0REQPRI_port_name = new NamedObject("PLBPPCS0REQPRI");
            PLBPPCS0RNW_port_name = new NamedObject("PLBPPCS0RNW");
            PLBPPCS0SAVALID_port_name = new NamedObject("PLBPPCS0SAVALID");
            PLBPPCS0SIZE_port_name = new NamedObject("PLBPPCS0SIZE");
            PLBPPCS0TATTRIBUTE_port_name = new NamedObject("PLBPPCS0TATTRIBUTE");
            PLBPPCS0TYPE_port_name = new NamedObject("PLBPPCS0TYPE");
            PLBPPCS0UABUS_port_name = new NamedObject("PLBPPCS0UABUS");
            PLBPPCS0WRBURST_port_name = new NamedObject("PLBPPCS0WRBURST");
            PLBPPCS0WRDBUS_port_name = new NamedObject("PLBPPCS0WRDBUS");
            PLBPPCS0WRPENDPRI_port_name = new NamedObject("PLBPPCS0WRPENDPRI");
            PLBPPCS0WRPENDREQ_port_name = new NamedObject("PLBPPCS0WRPENDREQ");
            PLBPPCS0WRPRIM_port_name = new NamedObject("PLBPPCS0WRPRIM");
            PLBPPCS1ABORT_port_name = new NamedObject("PLBPPCS1ABORT");
            PLBPPCS1ABUS_port_name = new NamedObject("PLBPPCS1ABUS");
            PLBPPCS1BE_port_name = new NamedObject("PLBPPCS1BE");
            PLBPPCS1BUSLOCK_port_name = new NamedObject("PLBPPCS1BUSLOCK");
            PLBPPCS1LOCKERR_port_name = new NamedObject("PLBPPCS1LOCKERR");
            PLBPPCS1MASTERID_port_name = new NamedObject("PLBPPCS1MASTERID");
            PLBPPCS1MSIZE_port_name = new NamedObject("PLBPPCS1MSIZE");
            PLBPPCS1PAVALID_port_name = new NamedObject("PLBPPCS1PAVALID");
            PLBPPCS1RDBURST_port_name = new NamedObject("PLBPPCS1RDBURST");
            PLBPPCS1RDPENDPRI_port_name = new NamedObject("PLBPPCS1RDPENDPRI");
            PLBPPCS1RDPENDREQ_port_name = new NamedObject("PLBPPCS1RDPENDREQ");
            PLBPPCS1RDPRIM_port_name = new NamedObject("PLBPPCS1RDPRIM");
            PLBPPCS1REQPRI_port_name = new NamedObject("PLBPPCS1REQPRI");
            PLBPPCS1RNW_port_name = new NamedObject("PLBPPCS1RNW");
            PLBPPCS1SAVALID_port_name = new NamedObject("PLBPPCS1SAVALID");
            PLBPPCS1SIZE_port_name = new NamedObject("PLBPPCS1SIZE");
            PLBPPCS1TATTRIBUTE_port_name = new NamedObject("PLBPPCS1TATTRIBUTE");
            PLBPPCS1TYPE_port_name = new NamedObject("PLBPPCS1TYPE");
            PLBPPCS1UABUS_port_name = new NamedObject("PLBPPCS1UABUS");
            PLBPPCS1WRBURST_port_name = new NamedObject("PLBPPCS1WRBURST");
            PLBPPCS1WRDBUS_port_name = new NamedObject("PLBPPCS1WRDBUS");
            PLBPPCS1WRPENDPRI_port_name = new NamedObject("PLBPPCS1WRPENDPRI");
            PLBPPCS1WRPENDREQ_port_name = new NamedObject("PLBPPCS1WRPENDREQ");
            PLBPPCS1WRPRIM_port_name = new NamedObject("PLBPPCS1WRPRIM");
            RSTC440RESETCHIP_port_name = new NamedObject("RSTC440RESETCHIP");
            RSTC440RESETCORE_port_name = new NamedObject("RSTC440RESETCORE");
            RSTC440RESETSYSTEM_port_name = new NamedObject("RSTC440RESETSYSTEM");
            TIEC440DCURDLDCACHEPLBPRIO_port_name = new NamedObject("TIEC440DCURDLDCACHEPLBPRIO");
            TIEC440DCURDNONCACHEPLBPRIO_port_name = new NamedObject("TIEC440DCURDNONCACHEPLBPRIO");
            TIEC440DCURDTOUCHPLBPRIO_port_name = new NamedObject("TIEC440DCURDTOUCHPLBPRIO");
            TIEC440DCURDURGENTPLBPRIO_port_name = new NamedObject("TIEC440DCURDURGENTPLBPRIO");
            TIEC440DCUWRFLUSHPLBPRIO_port_name = new NamedObject("TIEC440DCUWRFLUSHPLBPRIO");
            TIEC440DCUWRSTOREPLBPRIO_port_name = new NamedObject("TIEC440DCUWRSTOREPLBPRIO");
            TIEC440DCUWRURGENTPLBPRIO_port_name = new NamedObject("TIEC440DCUWRURGENTPLBPRIO");
            TIEC440ENDIANRESET_port_name = new NamedObject("TIEC440ENDIANRESET");
            TIEC440ERPNRESET_port_name = new NamedObject("TIEC440ERPNRESET");
            TIEC440ICURDFETCHPLBPRIO_port_name = new NamedObject("TIEC440ICURDFETCHPLBPRIO");
            TIEC440ICURDSPECPLBPRIO_port_name = new NamedObject("TIEC440ICURDSPECPLBPRIO");
            TIEC440ICURDTOUCHPLBPRIO_port_name = new NamedObject("TIEC440ICURDTOUCHPLBPRIO");
            TIEC440PIR_port_name = new NamedObject("TIEC440PIR");
            TIEC440PVR_port_name = new NamedObject("TIEC440PVR");
            TIEC440USERRESET_port_name = new NamedObject("TIEC440USERRESET");
            TIEDCRBASEADDR_port_name = new NamedObject("TIEDCRBASEADDR");
            TRCC440TRACEDISABLE_port_name = new NamedObject("TRCC440TRACEDISABLE");
            TRCC440TRIGGEREVENTIN_port_name = new NamedObject("TRCC440TRIGGEREVENTIN");
            DMA0DATYPE_port_name = new NamedObject("DMA0DATYPE");
            DMA0DAVALID_port_name = new NamedObject("DMA0DAVALID");
            DMA0DRREADY_port_name = new NamedObject("DMA0DRREADY");
            DMA0RSTN_port_name = new NamedObject("DMA0RSTN");
            DMA1DATYPE_port_name = new NamedObject("DMA1DATYPE");
            DMA1DAVALID_port_name = new NamedObject("DMA1DAVALID");
            DMA1DRREADY_port_name = new NamedObject("DMA1DRREADY");
            DMA1RSTN_port_name = new NamedObject("DMA1RSTN");
            DMA2DATYPE_port_name = new NamedObject("DMA2DATYPE");
            DMA2DAVALID_port_name = new NamedObject("DMA2DAVALID");
            DMA2DRREADY_port_name = new NamedObject("DMA2DRREADY");
            DMA2RSTN_port_name = new NamedObject("DMA2RSTN");
            DMA3DATYPE_port_name = new NamedObject("DMA3DATYPE");
            DMA3DAVALID_port_name = new NamedObject("DMA3DAVALID");
            DMA3DRREADY_port_name = new NamedObject("DMA3DRREADY");
            DMA3RSTN_port_name = new NamedObject("DMA3RSTN");
            EMIOCAN0PHYTX_port_name = new NamedObject("EMIOCAN0PHYTX");
            EMIOCAN1PHYTX_port_name = new NamedObject("EMIOCAN1PHYTX");
            EMIOENET0GMIITXD_port_name = new NamedObject("EMIOENET0GMIITXD");
            EMIOENET0GMIITXEN_port_name = new NamedObject("EMIOENET0GMIITXEN");
            EMIOENET0GMIITXER_port_name = new NamedObject("EMIOENET0GMIITXER");
            EMIOENET0MDIOMDC_port_name = new NamedObject("EMIOENET0MDIOMDC");
            EMIOENET0MDIOO_port_name = new NamedObject("EMIOENET0MDIOO");
            EMIOENET0MDIOTN_port_name = new NamedObject("EMIOENET0MDIOTN");
            EMIOENET0PTPDELAYREQRX_port_name = new NamedObject("EMIOENET0PTPDELAYREQRX");
            EMIOENET0PTPDELAYREQTX_port_name = new NamedObject("EMIOENET0PTPDELAYREQTX");
            EMIOENET0PTPPDELAYREQRX_port_name = new NamedObject("EMIOENET0PTPPDELAYREQRX");
            EMIOENET0PTPPDELAYREQTX_port_name = new NamedObject("EMIOENET0PTPPDELAYREQTX");
            EMIOENET0PTPPDELAYRESPRX_port_name = new NamedObject("EMIOENET0PTPPDELAYRESPRX");
            EMIOENET0PTPPDELAYRESPTX_port_name = new NamedObject("EMIOENET0PTPPDELAYRESPTX");
            EMIOENET0PTPSYNCFRAMERX_port_name = new NamedObject("EMIOENET0PTPSYNCFRAMERX");
            EMIOENET0PTPSYNCFRAMETX_port_name = new NamedObject("EMIOENET0PTPSYNCFRAMETX");
            EMIOENET0SOFRX_port_name = new NamedObject("EMIOENET0SOFRX");
            EMIOENET0SOFTX_port_name = new NamedObject("EMIOENET0SOFTX");
            EMIOENET1GMIITXD_port_name = new NamedObject("EMIOENET1GMIITXD");
            EMIOENET1GMIITXEN_port_name = new NamedObject("EMIOENET1GMIITXEN");
            EMIOENET1GMIITXER_port_name = new NamedObject("EMIOENET1GMIITXER");
            EMIOENET1MDIOMDC_port_name = new NamedObject("EMIOENET1MDIOMDC");
            EMIOENET1MDIOO_port_name = new NamedObject("EMIOENET1MDIOO");
            EMIOENET1MDIOTN_port_name = new NamedObject("EMIOENET1MDIOTN");
            EMIOENET1PTPDELAYREQRX_port_name = new NamedObject("EMIOENET1PTPDELAYREQRX");
            EMIOENET1PTPDELAYREQTX_port_name = new NamedObject("EMIOENET1PTPDELAYREQTX");
            EMIOENET1PTPPDELAYREQRX_port_name = new NamedObject("EMIOENET1PTPPDELAYREQRX");
            EMIOENET1PTPPDELAYREQTX_port_name = new NamedObject("EMIOENET1PTPPDELAYREQTX");
            EMIOENET1PTPPDELAYRESPRX_port_name = new NamedObject("EMIOENET1PTPPDELAYRESPRX");
            EMIOENET1PTPPDELAYRESPTX_port_name = new NamedObject("EMIOENET1PTPPDELAYRESPTX");
            EMIOENET1PTPSYNCFRAMERX_port_name = new NamedObject("EMIOENET1PTPSYNCFRAMERX");
            EMIOENET1PTPSYNCFRAMETX_port_name = new NamedObject("EMIOENET1PTPSYNCFRAMETX");
            EMIOENET1SOFRX_port_name = new NamedObject("EMIOENET1SOFRX");
            EMIOENET1SOFTX_port_name = new NamedObject("EMIOENET1SOFTX");
            EMIOGPIOO_port_name = new NamedObject("EMIOGPIOO");
            EMIOGPIOTN_port_name = new NamedObject("EMIOGPIOTN");
            EMIOI2C0SCLO_port_name = new NamedObject("EMIOI2C0SCLO");
            EMIOI2C0SCLTN_port_name = new NamedObject("EMIOI2C0SCLTN");
            EMIOI2C0SDAO_port_name = new NamedObject("EMIOI2C0SDAO");
            EMIOI2C0SDATN_port_name = new NamedObject("EMIOI2C0SDATN");
            EMIOI2C1SCLO_port_name = new NamedObject("EMIOI2C1SCLO");
            EMIOI2C1SCLTN_port_name = new NamedObject("EMIOI2C1SCLTN");
            EMIOI2C1SDAO_port_name = new NamedObject("EMIOI2C1SDAO");
            EMIOI2C1SDATN_port_name = new NamedObject("EMIOI2C1SDATN");
            EMIOPJTAGTDO_port_name = new NamedObject("EMIOPJTAGTDO");
            EMIOPJTAGTDTN_port_name = new NamedObject("EMIOPJTAGTDTN");
            EMIOSDIO0BUSPOW_port_name = new NamedObject("EMIOSDIO0BUSPOW");
            EMIOSDIO0BUSVOLT_port_name = new NamedObject("EMIOSDIO0BUSVOLT");
            EMIOSDIO0CLK_port_name = new NamedObject("EMIOSDIO0CLK");
            EMIOSDIO0CMDO_port_name = new NamedObject("EMIOSDIO0CMDO");
            EMIOSDIO0CMDTN_port_name = new NamedObject("EMIOSDIO0CMDTN");
            EMIOSDIO0DATAO_port_name = new NamedObject("EMIOSDIO0DATAO");
            EMIOSDIO0DATATN_port_name = new NamedObject("EMIOSDIO0DATATN");
            EMIOSDIO0LED_port_name = new NamedObject("EMIOSDIO0LED");
            EMIOSDIO1BUSPOW_port_name = new NamedObject("EMIOSDIO1BUSPOW");
            EMIOSDIO1BUSVOLT_port_name = new NamedObject("EMIOSDIO1BUSVOLT");
            EMIOSDIO1CLK_port_name = new NamedObject("EMIOSDIO1CLK");
            EMIOSDIO1CMDO_port_name = new NamedObject("EMIOSDIO1CMDO");
            EMIOSDIO1CMDTN_port_name = new NamedObject("EMIOSDIO1CMDTN");
            EMIOSDIO1DATAO_port_name = new NamedObject("EMIOSDIO1DATAO");
            EMIOSDIO1DATATN_port_name = new NamedObject("EMIOSDIO1DATATN");
            EMIOSDIO1LED_port_name = new NamedObject("EMIOSDIO1LED");
            EMIOSPI0MO_port_name = new NamedObject("EMIOSPI0MO");
            EMIOSPI0MOTN_port_name = new NamedObject("EMIOSPI0MOTN");
            EMIOSPI0SCLKO_port_name = new NamedObject("EMIOSPI0SCLKO");
            EMIOSPI0SCLKTN_port_name = new NamedObject("EMIOSPI0SCLKTN");
            EMIOSPI0SO_port_name = new NamedObject("EMIOSPI0SO");
            EMIOSPI0SSNTN_port_name = new NamedObject("EMIOSPI0SSNTN");
            EMIOSPI0SSON_port_name = new NamedObject("EMIOSPI0SSON");
            EMIOSPI0STN_port_name = new NamedObject("EMIOSPI0STN");
            EMIOSPI1MO_port_name = new NamedObject("EMIOSPI1MO");
            EMIOSPI1MOTN_port_name = new NamedObject("EMIOSPI1MOTN");
            EMIOSPI1SCLKO_port_name = new NamedObject("EMIOSPI1SCLKO");
            EMIOSPI1SCLKTN_port_name = new NamedObject("EMIOSPI1SCLKTN");
            EMIOSPI1SO_port_name = new NamedObject("EMIOSPI1SO");
            EMIOSPI1SSNTN_port_name = new NamedObject("EMIOSPI1SSNTN");
            EMIOSPI1SSON_port_name = new NamedObject("EMIOSPI1SSON");
            EMIOSPI1STN_port_name = new NamedObject("EMIOSPI1STN");
            EMIOTRACECTL_port_name = new NamedObject("EMIOTRACECTL");
            EMIOTRACEDATA_port_name = new NamedObject("EMIOTRACEDATA");
            EMIOTTC0WAVEO_port_name = new NamedObject("EMIOTTC0WAVEO");
            EMIOTTC1WAVEO_port_name = new NamedObject("EMIOTTC1WAVEO");
            EMIOUART0DTRN_port_name = new NamedObject("EMIOUART0DTRN");
            EMIOUART0RTSN_port_name = new NamedObject("EMIOUART0RTSN");
            EMIOUART0TX_port_name = new NamedObject("EMIOUART0TX");
            EMIOUART1DTRN_port_name = new NamedObject("EMIOUART1DTRN");
            EMIOUART1RTSN_port_name = new NamedObject("EMIOUART1RTSN");
            EMIOUART1TX_port_name = new NamedObject("EMIOUART1TX");
            EMIOUSB0PORTINDCTL_port_name = new NamedObject("EMIOUSB0PORTINDCTL");
            EMIOUSB0VBUSPWRSELECT_port_name = new NamedObject("EMIOUSB0VBUSPWRSELECT");
            EMIOUSB1PORTINDCTL_port_name = new NamedObject("EMIOUSB1PORTINDCTL");
            EMIOUSB1VBUSPWRSELECT_port_name = new NamedObject("EMIOUSB1VBUSPWRSELECT");
            EMIOWDTRSTO_port_name = new NamedObject("EMIOWDTRSTO");
            EVENTEVENTO_port_name = new NamedObject("EVENTEVENTO");
            EVENTSTANDBYWFE_port_name = new NamedObject("EVENTSTANDBYWFE");
            EVENTSTANDBYWFI_port_name = new NamedObject("EVENTSTANDBYWFI");
            FCLKCLK_port_name = new NamedObject("FCLKCLK");
            FCLKRESETN_port_name = new NamedObject("FCLKRESETN");
            FTMTF2PTRIGACK_port_name = new NamedObject("FTMTF2PTRIGACK");
            FTMTP2FDEBUG_port_name = new NamedObject("FTMTP2FDEBUG");
            FTMTP2FTRIG_port_name = new NamedObject("FTMTP2FTRIG");
            IRQP2F_port_name = new NamedObject("IRQP2F");
            MAXIGP0ARADDR_port_name = new NamedObject("MAXIGP0ARADDR");
            MAXIGP0ARBURST_port_name = new NamedObject("MAXIGP0ARBURST");
            MAXIGP0ARCACHE_port_name = new NamedObject("MAXIGP0ARCACHE");
            MAXIGP0ARESETN_port_name = new NamedObject("MAXIGP0ARESETN");
            MAXIGP0ARID_port_name = new NamedObject("MAXIGP0ARID");
            MAXIGP0ARLEN_port_name = new NamedObject("MAXIGP0ARLEN");
            MAXIGP0ARLOCK_port_name = new NamedObject("MAXIGP0ARLOCK");
            MAXIGP0ARPROT_port_name = new NamedObject("MAXIGP0ARPROT");
            MAXIGP0ARQOS_port_name = new NamedObject("MAXIGP0ARQOS");
            MAXIGP0ARSIZE_port_name = new NamedObject("MAXIGP0ARSIZE");
            MAXIGP0ARVALID_port_name = new NamedObject("MAXIGP0ARVALID");
            MAXIGP0AWADDR_port_name = new NamedObject("MAXIGP0AWADDR");
            MAXIGP0AWBURST_port_name = new NamedObject("MAXIGP0AWBURST");
            MAXIGP0AWCACHE_port_name = new NamedObject("MAXIGP0AWCACHE");
            MAXIGP0AWID_port_name = new NamedObject("MAXIGP0AWID");
            MAXIGP0AWLEN_port_name = new NamedObject("MAXIGP0AWLEN");
            MAXIGP0AWLOCK_port_name = new NamedObject("MAXIGP0AWLOCK");
            MAXIGP0AWPROT_port_name = new NamedObject("MAXIGP0AWPROT");
            MAXIGP0AWQOS_port_name = new NamedObject("MAXIGP0AWQOS");
            MAXIGP0AWSIZE_port_name = new NamedObject("MAXIGP0AWSIZE");
            MAXIGP0AWVALID_port_name = new NamedObject("MAXIGP0AWVALID");
            MAXIGP0BREADY_port_name = new NamedObject("MAXIGP0BREADY");
            MAXIGP0RREADY_port_name = new NamedObject("MAXIGP0RREADY");
            MAXIGP0WDATA_port_name = new NamedObject("MAXIGP0WDATA");
            MAXIGP0WID_port_name = new NamedObject("MAXIGP0WID");
            MAXIGP0WLAST_port_name = new NamedObject("MAXIGP0WLAST");
            MAXIGP0WSTRB_port_name = new NamedObject("MAXIGP0WSTRB");
            MAXIGP0WVALID_port_name = new NamedObject("MAXIGP0WVALID");
            MAXIGP1ARADDR_port_name = new NamedObject("MAXIGP1ARADDR");
            MAXIGP1ARBURST_port_name = new NamedObject("MAXIGP1ARBURST");
            MAXIGP1ARCACHE_port_name = new NamedObject("MAXIGP1ARCACHE");
            MAXIGP1ARESETN_port_name = new NamedObject("MAXIGP1ARESETN");
            MAXIGP1ARID_port_name = new NamedObject("MAXIGP1ARID");
            MAXIGP1ARLEN_port_name = new NamedObject("MAXIGP1ARLEN");
            MAXIGP1ARLOCK_port_name = new NamedObject("MAXIGP1ARLOCK");
            MAXIGP1ARPROT_port_name = new NamedObject("MAXIGP1ARPROT");
            MAXIGP1ARQOS_port_name = new NamedObject("MAXIGP1ARQOS");
            MAXIGP1ARSIZE_port_name = new NamedObject("MAXIGP1ARSIZE");
            MAXIGP1ARVALID_port_name = new NamedObject("MAXIGP1ARVALID");
            MAXIGP1AWADDR_port_name = new NamedObject("MAXIGP1AWADDR");
            MAXIGP1AWBURST_port_name = new NamedObject("MAXIGP1AWBURST");
            MAXIGP1AWCACHE_port_name = new NamedObject("MAXIGP1AWCACHE");
            MAXIGP1AWID_port_name = new NamedObject("MAXIGP1AWID");
            MAXIGP1AWLEN_port_name = new NamedObject("MAXIGP1AWLEN");
            MAXIGP1AWLOCK_port_name = new NamedObject("MAXIGP1AWLOCK");
            MAXIGP1AWPROT_port_name = new NamedObject("MAXIGP1AWPROT");
            MAXIGP1AWQOS_port_name = new NamedObject("MAXIGP1AWQOS");
            MAXIGP1AWSIZE_port_name = new NamedObject("MAXIGP1AWSIZE");
            MAXIGP1AWVALID_port_name = new NamedObject("MAXIGP1AWVALID");
            MAXIGP1BREADY_port_name = new NamedObject("MAXIGP1BREADY");
            MAXIGP1RREADY_port_name = new NamedObject("MAXIGP1RREADY");
            MAXIGP1WDATA_port_name = new NamedObject("MAXIGP1WDATA");
            MAXIGP1WID_port_name = new NamedObject("MAXIGP1WID");
            MAXIGP1WLAST_port_name = new NamedObject("MAXIGP1WLAST");
            MAXIGP1WSTRB_port_name = new NamedObject("MAXIGP1WSTRB");
            MAXIGP1WVALID_port_name = new NamedObject("MAXIGP1WVALID");
            SAXIACPARESETN_port_name = new NamedObject("SAXIACPARESETN");
            SAXIACPARREADY_port_name = new NamedObject("SAXIACPARREADY");
            SAXIACPAWREADY_port_name = new NamedObject("SAXIACPAWREADY");
            SAXIACPBID_port_name = new NamedObject("SAXIACPBID");
            SAXIACPBRESP_port_name = new NamedObject("SAXIACPBRESP");
            SAXIACPBVALID_port_name = new NamedObject("SAXIACPBVALID");
            SAXIACPRDATA_port_name = new NamedObject("SAXIACPRDATA");
            SAXIACPRID_port_name = new NamedObject("SAXIACPRID");
            SAXIACPRLAST_port_name = new NamedObject("SAXIACPRLAST");
            SAXIACPRRESP_port_name = new NamedObject("SAXIACPRRESP");
            SAXIACPRVALID_port_name = new NamedObject("SAXIACPRVALID");
            SAXIACPWREADY_port_name = new NamedObject("SAXIACPWREADY");
            SAXIGP0ARESETN_port_name = new NamedObject("SAXIGP0ARESETN");
            SAXIGP0ARREADY_port_name = new NamedObject("SAXIGP0ARREADY");
            SAXIGP0AWREADY_port_name = new NamedObject("SAXIGP0AWREADY");
            SAXIGP0BID_port_name = new NamedObject("SAXIGP0BID");
            SAXIGP0BRESP_port_name = new NamedObject("SAXIGP0BRESP");
            SAXIGP0BVALID_port_name = new NamedObject("SAXIGP0BVALID");
            SAXIGP0RDATA_port_name = new NamedObject("SAXIGP0RDATA");
            SAXIGP0RID_port_name = new NamedObject("SAXIGP0RID");
            SAXIGP0RLAST_port_name = new NamedObject("SAXIGP0RLAST");
            SAXIGP0RRESP_port_name = new NamedObject("SAXIGP0RRESP");
            SAXIGP0RVALID_port_name = new NamedObject("SAXIGP0RVALID");
            SAXIGP0WREADY_port_name = new NamedObject("SAXIGP0WREADY");
            SAXIGP1ARESETN_port_name = new NamedObject("SAXIGP1ARESETN");
            SAXIGP1ARREADY_port_name = new NamedObject("SAXIGP1ARREADY");
            SAXIGP1AWREADY_port_name = new NamedObject("SAXIGP1AWREADY");
            SAXIGP1BID_port_name = new NamedObject("SAXIGP1BID");
            SAXIGP1BRESP_port_name = new NamedObject("SAXIGP1BRESP");
            SAXIGP1BVALID_port_name = new NamedObject("SAXIGP1BVALID");
            SAXIGP1RDATA_port_name = new NamedObject("SAXIGP1RDATA");
            SAXIGP1RID_port_name = new NamedObject("SAXIGP1RID");
            SAXIGP1RLAST_port_name = new NamedObject("SAXIGP1RLAST");
            SAXIGP1RRESP_port_name = new NamedObject("SAXIGP1RRESP");
            SAXIGP1RVALID_port_name = new NamedObject("SAXIGP1RVALID");
            SAXIGP1WREADY_port_name = new NamedObject("SAXIGP1WREADY");
            SAXIHP0ARESETN_port_name = new NamedObject("SAXIHP0ARESETN");
            SAXIHP0ARREADY_port_name = new NamedObject("SAXIHP0ARREADY");
            SAXIHP0AWREADY_port_name = new NamedObject("SAXIHP0AWREADY");
            SAXIHP0BID_port_name = new NamedObject("SAXIHP0BID");
            SAXIHP0BRESP_port_name = new NamedObject("SAXIHP0BRESP");
            SAXIHP0BVALID_port_name = new NamedObject("SAXIHP0BVALID");
            SAXIHP0RACOUNT_port_name = new NamedObject("SAXIHP0RACOUNT");
            SAXIHP0RCOUNT_port_name = new NamedObject("SAXIHP0RCOUNT");
            SAXIHP0RDATA_port_name = new NamedObject("SAXIHP0RDATA");
            SAXIHP0RID_port_name = new NamedObject("SAXIHP0RID");
            SAXIHP0RLAST_port_name = new NamedObject("SAXIHP0RLAST");
            SAXIHP0RRESP_port_name = new NamedObject("SAXIHP0RRESP");
            SAXIHP0RVALID_port_name = new NamedObject("SAXIHP0RVALID");
            SAXIHP0WACOUNT_port_name = new NamedObject("SAXIHP0WACOUNT");
            SAXIHP0WCOUNT_port_name = new NamedObject("SAXIHP0WCOUNT");
            SAXIHP0WREADY_port_name = new NamedObject("SAXIHP0WREADY");
            SAXIHP1ARESETN_port_name = new NamedObject("SAXIHP1ARESETN");
            SAXIHP1ARREADY_port_name = new NamedObject("SAXIHP1ARREADY");
            SAXIHP1AWREADY_port_name = new NamedObject("SAXIHP1AWREADY");
            SAXIHP1BID_port_name = new NamedObject("SAXIHP1BID");
            SAXIHP1BRESP_port_name = new NamedObject("SAXIHP1BRESP");
            SAXIHP1BVALID_port_name = new NamedObject("SAXIHP1BVALID");
            SAXIHP1RACOUNT_port_name = new NamedObject("SAXIHP1RACOUNT");
            SAXIHP1RCOUNT_port_name = new NamedObject("SAXIHP1RCOUNT");
            SAXIHP1RDATA_port_name = new NamedObject("SAXIHP1RDATA");
            SAXIHP1RID_port_name = new NamedObject("SAXIHP1RID");
            SAXIHP1RLAST_port_name = new NamedObject("SAXIHP1RLAST");
            SAXIHP1RRESP_port_name = new NamedObject("SAXIHP1RRESP");
            SAXIHP1RVALID_port_name = new NamedObject("SAXIHP1RVALID");
            SAXIHP1WACOUNT_port_name = new NamedObject("SAXIHP1WACOUNT");
            SAXIHP1WCOUNT_port_name = new NamedObject("SAXIHP1WCOUNT");
            SAXIHP1WREADY_port_name = new NamedObject("SAXIHP1WREADY");
            SAXIHP2ARESETN_port_name = new NamedObject("SAXIHP2ARESETN");
            SAXIHP2ARREADY_port_name = new NamedObject("SAXIHP2ARREADY");
            SAXIHP2AWREADY_port_name = new NamedObject("SAXIHP2AWREADY");
            SAXIHP2BID_port_name = new NamedObject("SAXIHP2BID");
            SAXIHP2BRESP_port_name = new NamedObject("SAXIHP2BRESP");
            SAXIHP2BVALID_port_name = new NamedObject("SAXIHP2BVALID");
            SAXIHP2RACOUNT_port_name = new NamedObject("SAXIHP2RACOUNT");
            SAXIHP2RCOUNT_port_name = new NamedObject("SAXIHP2RCOUNT");
            SAXIHP2RDATA_port_name = new NamedObject("SAXIHP2RDATA");
            SAXIHP2RID_port_name = new NamedObject("SAXIHP2RID");
            SAXIHP2RLAST_port_name = new NamedObject("SAXIHP2RLAST");
            SAXIHP2RRESP_port_name = new NamedObject("SAXIHP2RRESP");
            SAXIHP2RVALID_port_name = new NamedObject("SAXIHP2RVALID");
            SAXIHP2WACOUNT_port_name = new NamedObject("SAXIHP2WACOUNT");
            SAXIHP2WCOUNT_port_name = new NamedObject("SAXIHP2WCOUNT");
            SAXIHP2WREADY_port_name = new NamedObject("SAXIHP2WREADY");
            SAXIHP3ARESETN_port_name = new NamedObject("SAXIHP3ARESETN");
            SAXIHP3ARREADY_port_name = new NamedObject("SAXIHP3ARREADY");
            SAXIHP3AWREADY_port_name = new NamedObject("SAXIHP3AWREADY");
            SAXIHP3BID_port_name = new NamedObject("SAXIHP3BID");
            SAXIHP3BRESP_port_name = new NamedObject("SAXIHP3BRESP");
            SAXIHP3BVALID_port_name = new NamedObject("SAXIHP3BVALID");
            SAXIHP3RACOUNT_port_name = new NamedObject("SAXIHP3RACOUNT");
            SAXIHP3RCOUNT_port_name = new NamedObject("SAXIHP3RCOUNT");
            SAXIHP3RDATA_port_name = new NamedObject("SAXIHP3RDATA");
            SAXIHP3RID_port_name = new NamedObject("SAXIHP3RID");
            SAXIHP3RLAST_port_name = new NamedObject("SAXIHP3RLAST");
            SAXIHP3RRESP_port_name = new NamedObject("SAXIHP3RRESP");
            SAXIHP3RVALID_port_name = new NamedObject("SAXIHP3RVALID");
            SAXIHP3WACOUNT_port_name = new NamedObject("SAXIHP3WACOUNT");
            SAXIHP3WCOUNT_port_name = new NamedObject("SAXIHP3WCOUNT");
            SAXIHP3WREADY_port_name = new NamedObject("SAXIHP3WREADY");
            DDRA_port_name = new NamedObject("DDRA");
            DDRBA_port_name = new NamedObject("DDRBA");
            DDRCASB_port_name = new NamedObject("DDRCASB");
            DDRCKE_port_name = new NamedObject("DDRCKE");
            DDRCKN_port_name = new NamedObject("DDRCKN");
            DDRCKP_port_name = new NamedObject("DDRCKP");
            DDRCSB_port_name = new NamedObject("DDRCSB");
            DDRDM_port_name = new NamedObject("DDRDM");
            DDRDQ_port_name = new NamedObject("DDRDQ");
            DDRDQSN_port_name = new NamedObject("DDRDQSN");
            DDRDQSP_port_name = new NamedObject("DDRDQSP");
            DDRDRSTB_port_name = new NamedObject("DDRDRSTB");
            DDRODT_port_name = new NamedObject("DDRODT");
            DDRRASB_port_name = new NamedObject("DDRRASB");
            DDRVRN_port_name = new NamedObject("DDRVRN");
            DDRVRP_port_name = new NamedObject("DDRVRP");
            DDRWEB_port_name = new NamedObject("DDRWEB");
            MIO_port_name = new NamedObject("MIO");
            PSPORB_port_name = new NamedObject("PSPORB");
            PSSRSTB_port_name = new NamedObject("PSSRSTB");
            DDRARB_port_name = new NamedObject("DDRARB");
            DMA0ACLK_port_name = new NamedObject("DMA0ACLK");
            DMA0DAREADY_port_name = new NamedObject("DMA0DAREADY");
            DMA0DRLAST_port_name = new NamedObject("DMA0DRLAST");
            DMA0DRTYPE_port_name = new NamedObject("DMA0DRTYPE");
            DMA0DRVALID_port_name = new NamedObject("DMA0DRVALID");
            DMA1ACLK_port_name = new NamedObject("DMA1ACLK");
            DMA1DAREADY_port_name = new NamedObject("DMA1DAREADY");
            DMA1DRLAST_port_name = new NamedObject("DMA1DRLAST");
            DMA1DRTYPE_port_name = new NamedObject("DMA1DRTYPE");
            DMA1DRVALID_port_name = new NamedObject("DMA1DRVALID");
            DMA2ACLK_port_name = new NamedObject("DMA2ACLK");
            DMA2DAREADY_port_name = new NamedObject("DMA2DAREADY");
            DMA2DRLAST_port_name = new NamedObject("DMA2DRLAST");
            DMA2DRTYPE_port_name = new NamedObject("DMA2DRTYPE");
            DMA2DRVALID_port_name = new NamedObject("DMA2DRVALID");
            DMA3ACLK_port_name = new NamedObject("DMA3ACLK");
            DMA3DAREADY_port_name = new NamedObject("DMA3DAREADY");
            DMA3DRLAST_port_name = new NamedObject("DMA3DRLAST");
            DMA3DRTYPE_port_name = new NamedObject("DMA3DRTYPE");
            DMA3DRVALID_port_name = new NamedObject("DMA3DRVALID");
            EMIOCAN0PHYRX_port_name = new NamedObject("EMIOCAN0PHYRX");
            EMIOCAN1PHYRX_port_name = new NamedObject("EMIOCAN1PHYRX");
            EMIOENET0EXTINTIN_port_name = new NamedObject("EMIOENET0EXTINTIN");
            EMIOENET0GMIICOL_port_name = new NamedObject("EMIOENET0GMIICOL");
            EMIOENET0GMIICRS_port_name = new NamedObject("EMIOENET0GMIICRS");
            EMIOENET0GMIIRXCLK_port_name = new NamedObject("EMIOENET0GMIIRXCLK");
            EMIOENET0GMIIRXD_port_name = new NamedObject("EMIOENET0GMIIRXD");
            EMIOENET0GMIIRXDV_port_name = new NamedObject("EMIOENET0GMIIRXDV");
            EMIOENET0GMIIRXER_port_name = new NamedObject("EMIOENET0GMIIRXER");
            EMIOENET0GMIITXCLK_port_name = new NamedObject("EMIOENET0GMIITXCLK");
            EMIOENET0MDIOI_port_name = new NamedObject("EMIOENET0MDIOI");
            EMIOENET1EXTINTIN_port_name = new NamedObject("EMIOENET1EXTINTIN");
            EMIOENET1GMIICOL_port_name = new NamedObject("EMIOENET1GMIICOL");
            EMIOENET1GMIICRS_port_name = new NamedObject("EMIOENET1GMIICRS");
            EMIOENET1GMIIRXCLK_port_name = new NamedObject("EMIOENET1GMIIRXCLK");
            EMIOENET1GMIIRXD_port_name = new NamedObject("EMIOENET1GMIIRXD");
            EMIOENET1GMIIRXDV_port_name = new NamedObject("EMIOENET1GMIIRXDV");
            EMIOENET1GMIIRXER_port_name = new NamedObject("EMIOENET1GMIIRXER");
            EMIOENET1GMIITXCLK_port_name = new NamedObject("EMIOENET1GMIITXCLK");
            EMIOENET1MDIOI_port_name = new NamedObject("EMIOENET1MDIOI");
            EMIOGPIOI_port_name = new NamedObject("EMIOGPIOI");
            EMIOI2C0SCLI_port_name = new NamedObject("EMIOI2C0SCLI");
            EMIOI2C0SDAI_port_name = new NamedObject("EMIOI2C0SDAI");
            EMIOI2C1SCLI_port_name = new NamedObject("EMIOI2C1SCLI");
            EMIOI2C1SDAI_port_name = new NamedObject("EMIOI2C1SDAI");
            EMIOPJTAGTCK_port_name = new NamedObject("EMIOPJTAGTCK");
            EMIOPJTAGTDI_port_name = new NamedObject("EMIOPJTAGTDI");
            EMIOPJTAGTMS_port_name = new NamedObject("EMIOPJTAGTMS");
            EMIOSDIO0CDN_port_name = new NamedObject("EMIOSDIO0CDN");
            EMIOSDIO0CLKFB_port_name = new NamedObject("EMIOSDIO0CLKFB");
            EMIOSDIO0CMDI_port_name = new NamedObject("EMIOSDIO0CMDI");
            EMIOSDIO0DATAI_port_name = new NamedObject("EMIOSDIO0DATAI");
            EMIOSDIO0WP_port_name = new NamedObject("EMIOSDIO0WP");
            EMIOSDIO1CDN_port_name = new NamedObject("EMIOSDIO1CDN");
            EMIOSDIO1CLKFB_port_name = new NamedObject("EMIOSDIO1CLKFB");
            EMIOSDIO1CMDI_port_name = new NamedObject("EMIOSDIO1CMDI");
            EMIOSDIO1DATAI_port_name = new NamedObject("EMIOSDIO1DATAI");
            EMIOSDIO1WP_port_name = new NamedObject("EMIOSDIO1WP");
            EMIOSPI0MI_port_name = new NamedObject("EMIOSPI0MI");
            EMIOSPI0SCLKI_port_name = new NamedObject("EMIOSPI0SCLKI");
            EMIOSPI0SI_port_name = new NamedObject("EMIOSPI0SI");
            EMIOSPI0SSIN_port_name = new NamedObject("EMIOSPI0SSIN");
            EMIOSPI1MI_port_name = new NamedObject("EMIOSPI1MI");
            EMIOSPI1SCLKI_port_name = new NamedObject("EMIOSPI1SCLKI");
            EMIOSPI1SI_port_name = new NamedObject("EMIOSPI1SI");
            EMIOSPI1SSIN_port_name = new NamedObject("EMIOSPI1SSIN");
            EMIOSRAMINTIN_port_name = new NamedObject("EMIOSRAMINTIN");
            EMIOTRACECLK_port_name = new NamedObject("EMIOTRACECLK");
            EMIOTTC0CLKI_port_name = new NamedObject("EMIOTTC0CLKI");
            EMIOTTC1CLKI_port_name = new NamedObject("EMIOTTC1CLKI");
            EMIOUART0CTSN_port_name = new NamedObject("EMIOUART0CTSN");
            EMIOUART0DCDN_port_name = new NamedObject("EMIOUART0DCDN");
            EMIOUART0DSRN_port_name = new NamedObject("EMIOUART0DSRN");
            EMIOUART0RIN_port_name = new NamedObject("EMIOUART0RIN");
            EMIOUART0RX_port_name = new NamedObject("EMIOUART0RX");
            EMIOUART1CTSN_port_name = new NamedObject("EMIOUART1CTSN");
            EMIOUART1DCDN_port_name = new NamedObject("EMIOUART1DCDN");
            EMIOUART1DSRN_port_name = new NamedObject("EMIOUART1DSRN");
            EMIOUART1RIN_port_name = new NamedObject("EMIOUART1RIN");
            EMIOUART1RX_port_name = new NamedObject("EMIOUART1RX");
            EMIOUSB0VBUSPWRFAULT_port_name = new NamedObject("EMIOUSB0VBUSPWRFAULT");
            EMIOUSB1VBUSPWRFAULT_port_name = new NamedObject("EMIOUSB1VBUSPWRFAULT");
            EMIOWDTCLKI_port_name = new NamedObject("EMIOWDTCLKI");
            EVENTEVENTI_port_name = new NamedObject("EVENTEVENTI");
            FCLKCLKTRIGN_port_name = new NamedObject("FCLKCLKTRIGN");
            FPGAIDLEN_port_name = new NamedObject("FPGAIDLEN");
            FTMDTRACEINATID_port_name = new NamedObject("FTMDTRACEINATID");
            FTMDTRACEINCLOCK_port_name = new NamedObject("FTMDTRACEINCLOCK");
            FTMDTRACEINDATA_port_name = new NamedObject("FTMDTRACEINDATA");
            FTMDTRACEINVALID_port_name = new NamedObject("FTMDTRACEINVALID");
            FTMTF2PDEBUG_port_name = new NamedObject("FTMTF2PDEBUG");
            FTMTF2PTRIG_port_name = new NamedObject("FTMTF2PTRIG");
            FTMTP2FTRIGACK_port_name = new NamedObject("FTMTP2FTRIGACK");
            IRQF2P_port_name = new NamedObject("IRQF2P");
            MAXIGP0ACLK_port_name = new NamedObject("MAXIGP0ACLK");
            MAXIGP0ARREADY_port_name = new NamedObject("MAXIGP0ARREADY");
            MAXIGP0AWREADY_port_name = new NamedObject("MAXIGP0AWREADY");
            MAXIGP0BID_port_name = new NamedObject("MAXIGP0BID");
            MAXIGP0BRESP_port_name = new NamedObject("MAXIGP0BRESP");
            MAXIGP0BVALID_port_name = new NamedObject("MAXIGP0BVALID");
            MAXIGP0RDATA_port_name = new NamedObject("MAXIGP0RDATA");
            MAXIGP0RID_port_name = new NamedObject("MAXIGP0RID");
            MAXIGP0RLAST_port_name = new NamedObject("MAXIGP0RLAST");
            MAXIGP0RRESP_port_name = new NamedObject("MAXIGP0RRESP");
            MAXIGP0RVALID_port_name = new NamedObject("MAXIGP0RVALID");
            MAXIGP0WREADY_port_name = new NamedObject("MAXIGP0WREADY");
            MAXIGP1ACLK_port_name = new NamedObject("MAXIGP1ACLK");
            MAXIGP1ARREADY_port_name = new NamedObject("MAXIGP1ARREADY");
            MAXIGP1AWREADY_port_name = new NamedObject("MAXIGP1AWREADY");
            MAXIGP1BID_port_name = new NamedObject("MAXIGP1BID");
            MAXIGP1BRESP_port_name = new NamedObject("MAXIGP1BRESP");
            MAXIGP1BVALID_port_name = new NamedObject("MAXIGP1BVALID");
            MAXIGP1RDATA_port_name = new NamedObject("MAXIGP1RDATA");
            MAXIGP1RID_port_name = new NamedObject("MAXIGP1RID");
            MAXIGP1RLAST_port_name = new NamedObject("MAXIGP1RLAST");
            MAXIGP1RRESP_port_name = new NamedObject("MAXIGP1RRESP");
            MAXIGP1RVALID_port_name = new NamedObject("MAXIGP1RVALID");
            MAXIGP1WREADY_port_name = new NamedObject("MAXIGP1WREADY");
            SAXIACPACLK_port_name = new NamedObject("SAXIACPACLK");
            SAXIACPARADDR_port_name = new NamedObject("SAXIACPARADDR");
            SAXIACPARBURST_port_name = new NamedObject("SAXIACPARBURST");
            SAXIACPARCACHE_port_name = new NamedObject("SAXIACPARCACHE");
            SAXIACPARID_port_name = new NamedObject("SAXIACPARID");
            SAXIACPARLEN_port_name = new NamedObject("SAXIACPARLEN");
            SAXIACPARLOCK_port_name = new NamedObject("SAXIACPARLOCK");
            SAXIACPARPROT_port_name = new NamedObject("SAXIACPARPROT");
            SAXIACPARQOS_port_name = new NamedObject("SAXIACPARQOS");
            SAXIACPARSIZE_port_name = new NamedObject("SAXIACPARSIZE");
            SAXIACPARUSER_port_name = new NamedObject("SAXIACPARUSER");
            SAXIACPARVALID_port_name = new NamedObject("SAXIACPARVALID");
            SAXIACPAWADDR_port_name = new NamedObject("SAXIACPAWADDR");
            SAXIACPAWBURST_port_name = new NamedObject("SAXIACPAWBURST");
            SAXIACPAWCACHE_port_name = new NamedObject("SAXIACPAWCACHE");
            SAXIACPAWID_port_name = new NamedObject("SAXIACPAWID");
            SAXIACPAWLEN_port_name = new NamedObject("SAXIACPAWLEN");
            SAXIACPAWLOCK_port_name = new NamedObject("SAXIACPAWLOCK");
            SAXIACPAWPROT_port_name = new NamedObject("SAXIACPAWPROT");
            SAXIACPAWQOS_port_name = new NamedObject("SAXIACPAWQOS");
            SAXIACPAWSIZE_port_name = new NamedObject("SAXIACPAWSIZE");
            SAXIACPAWUSER_port_name = new NamedObject("SAXIACPAWUSER");
            SAXIACPAWVALID_port_name = new NamedObject("SAXIACPAWVALID");
            SAXIACPBREADY_port_name = new NamedObject("SAXIACPBREADY");
            SAXIACPRREADY_port_name = new NamedObject("SAXIACPRREADY");
            SAXIACPWDATA_port_name = new NamedObject("SAXIACPWDATA");
            SAXIACPWID_port_name = new NamedObject("SAXIACPWID");
            SAXIACPWLAST_port_name = new NamedObject("SAXIACPWLAST");
            SAXIACPWSTRB_port_name = new NamedObject("SAXIACPWSTRB");
            SAXIACPWVALID_port_name = new NamedObject("SAXIACPWVALID");
            SAXIGP0ACLK_port_name = new NamedObject("SAXIGP0ACLK");
            SAXIGP0ARADDR_port_name = new NamedObject("SAXIGP0ARADDR");
            SAXIGP0ARBURST_port_name = new NamedObject("SAXIGP0ARBURST");
            SAXIGP0ARCACHE_port_name = new NamedObject("SAXIGP0ARCACHE");
            SAXIGP0ARID_port_name = new NamedObject("SAXIGP0ARID");
            SAXIGP0ARLEN_port_name = new NamedObject("SAXIGP0ARLEN");
            SAXIGP0ARLOCK_port_name = new NamedObject("SAXIGP0ARLOCK");
            SAXIGP0ARPROT_port_name = new NamedObject("SAXIGP0ARPROT");
            SAXIGP0ARQOS_port_name = new NamedObject("SAXIGP0ARQOS");
            SAXIGP0ARSIZE_port_name = new NamedObject("SAXIGP0ARSIZE");
            SAXIGP0ARVALID_port_name = new NamedObject("SAXIGP0ARVALID");
            SAXIGP0AWADDR_port_name = new NamedObject("SAXIGP0AWADDR");
            SAXIGP0AWBURST_port_name = new NamedObject("SAXIGP0AWBURST");
            SAXIGP0AWCACHE_port_name = new NamedObject("SAXIGP0AWCACHE");
            SAXIGP0AWID_port_name = new NamedObject("SAXIGP0AWID");
            SAXIGP0AWLEN_port_name = new NamedObject("SAXIGP0AWLEN");
            SAXIGP0AWLOCK_port_name = new NamedObject("SAXIGP0AWLOCK");
            SAXIGP0AWPROT_port_name = new NamedObject("SAXIGP0AWPROT");
            SAXIGP0AWQOS_port_name = new NamedObject("SAXIGP0AWQOS");
            SAXIGP0AWSIZE_port_name = new NamedObject("SAXIGP0AWSIZE");
            SAXIGP0AWVALID_port_name = new NamedObject("SAXIGP0AWVALID");
            SAXIGP0BREADY_port_name = new NamedObject("SAXIGP0BREADY");
            SAXIGP0RREADY_port_name = new NamedObject("SAXIGP0RREADY");
            SAXIGP0WDATA_port_name = new NamedObject("SAXIGP0WDATA");
            SAXIGP0WID_port_name = new NamedObject("SAXIGP0WID");
            SAXIGP0WLAST_port_name = new NamedObject("SAXIGP0WLAST");
            SAXIGP0WSTRB_port_name = new NamedObject("SAXIGP0WSTRB");
            SAXIGP0WVALID_port_name = new NamedObject("SAXIGP0WVALID");
            SAXIGP1ACLK_port_name = new NamedObject("SAXIGP1ACLK");
            SAXIGP1ARADDR_port_name = new NamedObject("SAXIGP1ARADDR");
            SAXIGP1ARBURST_port_name = new NamedObject("SAXIGP1ARBURST");
            SAXIGP1ARCACHE_port_name = new NamedObject("SAXIGP1ARCACHE");
            SAXIGP1ARID_port_name = new NamedObject("SAXIGP1ARID");
            SAXIGP1ARLEN_port_name = new NamedObject("SAXIGP1ARLEN");
            SAXIGP1ARLOCK_port_name = new NamedObject("SAXIGP1ARLOCK");
            SAXIGP1ARPROT_port_name = new NamedObject("SAXIGP1ARPROT");
            SAXIGP1ARQOS_port_name = new NamedObject("SAXIGP1ARQOS");
            SAXIGP1ARSIZE_port_name = new NamedObject("SAXIGP1ARSIZE");
            SAXIGP1ARVALID_port_name = new NamedObject("SAXIGP1ARVALID");
            SAXIGP1AWADDR_port_name = new NamedObject("SAXIGP1AWADDR");
            SAXIGP1AWBURST_port_name = new NamedObject("SAXIGP1AWBURST");
            SAXIGP1AWCACHE_port_name = new NamedObject("SAXIGP1AWCACHE");
            SAXIGP1AWID_port_name = new NamedObject("SAXIGP1AWID");
            SAXIGP1AWLEN_port_name = new NamedObject("SAXIGP1AWLEN");
            SAXIGP1AWLOCK_port_name = new NamedObject("SAXIGP1AWLOCK");
            SAXIGP1AWPROT_port_name = new NamedObject("SAXIGP1AWPROT");
            SAXIGP1AWQOS_port_name = new NamedObject("SAXIGP1AWQOS");
            SAXIGP1AWSIZE_port_name = new NamedObject("SAXIGP1AWSIZE");
            SAXIGP1AWVALID_port_name = new NamedObject("SAXIGP1AWVALID");
            SAXIGP1BREADY_port_name = new NamedObject("SAXIGP1BREADY");
            SAXIGP1RREADY_port_name = new NamedObject("SAXIGP1RREADY");
            SAXIGP1WDATA_port_name = new NamedObject("SAXIGP1WDATA");
            SAXIGP1WID_port_name = new NamedObject("SAXIGP1WID");
            SAXIGP1WLAST_port_name = new NamedObject("SAXIGP1WLAST");
            SAXIGP1WSTRB_port_name = new NamedObject("SAXIGP1WSTRB");
            SAXIGP1WVALID_port_name = new NamedObject("SAXIGP1WVALID");
            SAXIHP0ACLK_port_name = new NamedObject("SAXIHP0ACLK");
            SAXIHP0ARADDR_port_name = new NamedObject("SAXIHP0ARADDR");
            SAXIHP0ARBURST_port_name = new NamedObject("SAXIHP0ARBURST");
            SAXIHP0ARCACHE_port_name = new NamedObject("SAXIHP0ARCACHE");
            SAXIHP0ARID_port_name = new NamedObject("SAXIHP0ARID");
            SAXIHP0ARLEN_port_name = new NamedObject("SAXIHP0ARLEN");
            SAXIHP0ARLOCK_port_name = new NamedObject("SAXIHP0ARLOCK");
            SAXIHP0ARPROT_port_name = new NamedObject("SAXIHP0ARPROT");
            SAXIHP0ARQOS_port_name = new NamedObject("SAXIHP0ARQOS");
            SAXIHP0ARSIZE_port_name = new NamedObject("SAXIHP0ARSIZE");
            SAXIHP0ARVALID_port_name = new NamedObject("SAXIHP0ARVALID");
            SAXIHP0AWADDR_port_name = new NamedObject("SAXIHP0AWADDR");
            SAXIHP0AWBURST_port_name = new NamedObject("SAXIHP0AWBURST");
            SAXIHP0AWCACHE_port_name = new NamedObject("SAXIHP0AWCACHE");
            SAXIHP0AWID_port_name = new NamedObject("SAXIHP0AWID");
            SAXIHP0AWLEN_port_name = new NamedObject("SAXIHP0AWLEN");
            SAXIHP0AWLOCK_port_name = new NamedObject("SAXIHP0AWLOCK");
            SAXIHP0AWPROT_port_name = new NamedObject("SAXIHP0AWPROT");
            SAXIHP0AWQOS_port_name = new NamedObject("SAXIHP0AWQOS");
            SAXIHP0AWSIZE_port_name = new NamedObject("SAXIHP0AWSIZE");
            SAXIHP0AWVALID_port_name = new NamedObject("SAXIHP0AWVALID");
            SAXIHP0BREADY_port_name = new NamedObject("SAXIHP0BREADY");
            SAXIHP0RDISSUECAP1EN_port_name = new NamedObject("SAXIHP0RDISSUECAP1EN");
            SAXIHP0RREADY_port_name = new NamedObject("SAXIHP0RREADY");
            SAXIHP0WDATA_port_name = new NamedObject("SAXIHP0WDATA");
            SAXIHP0WID_port_name = new NamedObject("SAXIHP0WID");
            SAXIHP0WLAST_port_name = new NamedObject("SAXIHP0WLAST");
            SAXIHP0WRISSUECAP1EN_port_name = new NamedObject("SAXIHP0WRISSUECAP1EN");
            SAXIHP0WSTRB_port_name = new NamedObject("SAXIHP0WSTRB");
            SAXIHP0WVALID_port_name = new NamedObject("SAXIHP0WVALID");
            SAXIHP1ACLK_port_name = new NamedObject("SAXIHP1ACLK");
            SAXIHP1ARADDR_port_name = new NamedObject("SAXIHP1ARADDR");
            SAXIHP1ARBURST_port_name = new NamedObject("SAXIHP1ARBURST");
            SAXIHP1ARCACHE_port_name = new NamedObject("SAXIHP1ARCACHE");
            SAXIHP1ARID_port_name = new NamedObject("SAXIHP1ARID");
            SAXIHP1ARLEN_port_name = new NamedObject("SAXIHP1ARLEN");
            SAXIHP1ARLOCK_port_name = new NamedObject("SAXIHP1ARLOCK");
            SAXIHP1ARPROT_port_name = new NamedObject("SAXIHP1ARPROT");
            SAXIHP1ARQOS_port_name = new NamedObject("SAXIHP1ARQOS");
            SAXIHP1ARSIZE_port_name = new NamedObject("SAXIHP1ARSIZE");
            SAXIHP1ARVALID_port_name = new NamedObject("SAXIHP1ARVALID");
            SAXIHP1AWADDR_port_name = new NamedObject("SAXIHP1AWADDR");
            SAXIHP1AWBURST_port_name = new NamedObject("SAXIHP1AWBURST");
            SAXIHP1AWCACHE_port_name = new NamedObject("SAXIHP1AWCACHE");
            SAXIHP1AWID_port_name = new NamedObject("SAXIHP1AWID");
            SAXIHP1AWLEN_port_name = new NamedObject("SAXIHP1AWLEN");
            SAXIHP1AWLOCK_port_name = new NamedObject("SAXIHP1AWLOCK");
            SAXIHP1AWPROT_port_name = new NamedObject("SAXIHP1AWPROT");
            SAXIHP1AWQOS_port_name = new NamedObject("SAXIHP1AWQOS");
            SAXIHP1AWSIZE_port_name = new NamedObject("SAXIHP1AWSIZE");
            SAXIHP1AWVALID_port_name = new NamedObject("SAXIHP1AWVALID");
            SAXIHP1BREADY_port_name = new NamedObject("SAXIHP1BREADY");
            SAXIHP1RDISSUECAP1EN_port_name = new NamedObject("SAXIHP1RDISSUECAP1EN");
            SAXIHP1RREADY_port_name = new NamedObject("SAXIHP1RREADY");
            SAXIHP1WDATA_port_name = new NamedObject("SAXIHP1WDATA");
            SAXIHP1WID_port_name = new NamedObject("SAXIHP1WID");
            SAXIHP1WLAST_port_name = new NamedObject("SAXIHP1WLAST");
            SAXIHP1WRISSUECAP1EN_port_name = new NamedObject("SAXIHP1WRISSUECAP1EN");
            SAXIHP1WSTRB_port_name = new NamedObject("SAXIHP1WSTRB");
            SAXIHP1WVALID_port_name = new NamedObject("SAXIHP1WVALID");
            SAXIHP2ACLK_port_name = new NamedObject("SAXIHP2ACLK");
            SAXIHP2ARADDR_port_name = new NamedObject("SAXIHP2ARADDR");
            SAXIHP2ARBURST_port_name = new NamedObject("SAXIHP2ARBURST");
            SAXIHP2ARCACHE_port_name = new NamedObject("SAXIHP2ARCACHE");
            SAXIHP2ARID_port_name = new NamedObject("SAXIHP2ARID");
            SAXIHP2ARLEN_port_name = new NamedObject("SAXIHP2ARLEN");
            SAXIHP2ARLOCK_port_name = new NamedObject("SAXIHP2ARLOCK");
            SAXIHP2ARPROT_port_name = new NamedObject("SAXIHP2ARPROT");
            SAXIHP2ARQOS_port_name = new NamedObject("SAXIHP2ARQOS");
            SAXIHP2ARSIZE_port_name = new NamedObject("SAXIHP2ARSIZE");
            SAXIHP2ARVALID_port_name = new NamedObject("SAXIHP2ARVALID");
            SAXIHP2AWADDR_port_name = new NamedObject("SAXIHP2AWADDR");
            SAXIHP2AWBURST_port_name = new NamedObject("SAXIHP2AWBURST");
            SAXIHP2AWCACHE_port_name = new NamedObject("SAXIHP2AWCACHE");
            SAXIHP2AWID_port_name = new NamedObject("SAXIHP2AWID");
            SAXIHP2AWLEN_port_name = new NamedObject("SAXIHP2AWLEN");
            SAXIHP2AWLOCK_port_name = new NamedObject("SAXIHP2AWLOCK");
            SAXIHP2AWPROT_port_name = new NamedObject("SAXIHP2AWPROT");
            SAXIHP2AWQOS_port_name = new NamedObject("SAXIHP2AWQOS");
            SAXIHP2AWSIZE_port_name = new NamedObject("SAXIHP2AWSIZE");
            SAXIHP2AWVALID_port_name = new NamedObject("SAXIHP2AWVALID");
            SAXIHP2BREADY_port_name = new NamedObject("SAXIHP2BREADY");
            SAXIHP2RDISSUECAP1EN_port_name = new NamedObject("SAXIHP2RDISSUECAP1EN");
            SAXIHP2RREADY_port_name = new NamedObject("SAXIHP2RREADY");
            SAXIHP2WDATA_port_name = new NamedObject("SAXIHP2WDATA");
            SAXIHP2WID_port_name = new NamedObject("SAXIHP2WID");
            SAXIHP2WLAST_port_name = new NamedObject("SAXIHP2WLAST");
            SAXIHP2WRISSUECAP1EN_port_name = new NamedObject("SAXIHP2WRISSUECAP1EN");
            SAXIHP2WSTRB_port_name = new NamedObject("SAXIHP2WSTRB");
            SAXIHP2WVALID_port_name = new NamedObject("SAXIHP2WVALID");
            SAXIHP3ACLK_port_name = new NamedObject("SAXIHP3ACLK");
            SAXIHP3ARADDR_port_name = new NamedObject("SAXIHP3ARADDR");
            SAXIHP3ARBURST_port_name = new NamedObject("SAXIHP3ARBURST");
            SAXIHP3ARCACHE_port_name = new NamedObject("SAXIHP3ARCACHE");
            SAXIHP3ARID_port_name = new NamedObject("SAXIHP3ARID");
            SAXIHP3ARLEN_port_name = new NamedObject("SAXIHP3ARLEN");
            SAXIHP3ARLOCK_port_name = new NamedObject("SAXIHP3ARLOCK");
            SAXIHP3ARPROT_port_name = new NamedObject("SAXIHP3ARPROT");
            SAXIHP3ARQOS_port_name = new NamedObject("SAXIHP3ARQOS");
            SAXIHP3ARSIZE_port_name = new NamedObject("SAXIHP3ARSIZE");
            SAXIHP3ARVALID_port_name = new NamedObject("SAXIHP3ARVALID");
            SAXIHP3AWADDR_port_name = new NamedObject("SAXIHP3AWADDR");
            SAXIHP3AWBURST_port_name = new NamedObject("SAXIHP3AWBURST");
            SAXIHP3AWCACHE_port_name = new NamedObject("SAXIHP3AWCACHE");
            SAXIHP3AWID_port_name = new NamedObject("SAXIHP3AWID");
            SAXIHP3AWLEN_port_name = new NamedObject("SAXIHP3AWLEN");
            SAXIHP3AWLOCK_port_name = new NamedObject("SAXIHP3AWLOCK");
            SAXIHP3AWPROT_port_name = new NamedObject("SAXIHP3AWPROT");
            SAXIHP3AWQOS_port_name = new NamedObject("SAXIHP3AWQOS");
            SAXIHP3AWSIZE_port_name = new NamedObject("SAXIHP3AWSIZE");
            SAXIHP3AWVALID_port_name = new NamedObject("SAXIHP3AWVALID");
            SAXIHP3BREADY_port_name = new NamedObject("SAXIHP3BREADY");
            SAXIHP3RDISSUECAP1EN_port_name = new NamedObject("SAXIHP3RDISSUECAP1EN");
            SAXIHP3RREADY_port_name = new NamedObject("SAXIHP3RREADY");
            SAXIHP3WDATA_port_name = new NamedObject("SAXIHP3WDATA");
            SAXIHP3WID_port_name = new NamedObject("SAXIHP3WID");
            SAXIHP3WLAST_port_name = new NamedObject("SAXIHP3WLAST");
            SAXIHP3WRISSUECAP1EN_port_name = new NamedObject("SAXIHP3WRISSUECAP1EN");
            SAXIHP3WSTRB_port_name = new NamedObject("SAXIHP3WSTRB");
            SAXIHP3WVALID_port_name = new NamedObject("SAXIHP3WVALID");
            DPO_port_name = new NamedObject("DPO");
            SPO_port_name = new NamedObject("SPO");
            DPRA_port_name = new NamedObject("DPRA");
            WCLK_port_name = new NamedObject("WCLK");
            A0_port_name = new NamedObject("A0");
            A1_port_name = new NamedObject("A1");
            A2_port_name = new NamedObject("A2");
            A3_port_name = new NamedObject("A3");
            A4_port_name = new NamedObject("A4");
            A5_port_name = new NamedObject("A5");
            A6_port_name = new NamedObject("A6");
            DPRA0_port_name = new NamedObject("DPRA0");
            DPRA1_port_name = new NamedObject("DPRA1");
            DPRA2_port_name = new NamedObject("DPRA2");
            DPRA3_port_name = new NamedObject("DPRA3");
            O0_port_name = new NamedObject("O0");
            O1_port_name = new NamedObject("O1");
            O2_port_name = new NamedObject("O2");
            O3_port_name = new NamedObject("O3");
            DOC_port_name = new NamedObject("DOC");
            DOD_port_name = new NamedObject("DOD");
            ADDRA_port_name = new NamedObject("ADDRA");
            ADDRB_port_name = new NamedObject("ADDRB");
            ADDRC_port_name = new NamedObject("ADDRC");
            ADDRD_port_name = new NamedObject("ADDRD");
            DIC_port_name = new NamedObject("DIC");
            DID_port_name = new NamedObject("DID");
            DPRA4_port_name = new NamedObject("DPRA4");
            DPRA5_port_name = new NamedObject("DPRA5");
            CASCADEOUTA_port_name = new NamedObject("CASCADEOUTA");
            CASCADEOUTB_port_name = new NamedObject("CASCADEOUTB");
            DOPA_port_name = new NamedObject("DOPA");
            DOPB_port_name = new NamedObject("DOPB");
            CASCADEINA_port_name = new NamedObject("CASCADEINA");
            CASCADEINB_port_name = new NamedObject("CASCADEINB");
            DIPA_port_name = new NamedObject("DIPA");
            DIPB_port_name = new NamedObject("DIPB");
            ENA_port_name = new NamedObject("ENA");
            ENB_port_name = new NamedObject("ENB");
            REGCEA_port_name = new NamedObject("REGCEA");
            REGCEB_port_name = new NamedObject("REGCEB");
            SSRA_port_name = new NamedObject("SSRA");
            SSRB_port_name = new NamedObject("SSRB");
            WEA_port_name = new NamedObject("WEA");
            WEB_port_name = new NamedObject("WEB");
            EN_port_name = new NamedObject("EN");
            SSR_port_name = new NamedObject("SSR");
            DOADO_port_name = new NamedObject("DOADO");
            DOBDO_port_name = new NamedObject("DOBDO");
            DOPADOP_port_name = new NamedObject("DOPADOP");
            DOPBDOP_port_name = new NamedObject("DOPBDOP");
            ADDRARDADDR_port_name = new NamedObject("ADDRARDADDR");
            ADDRBWRADDR_port_name = new NamedObject("ADDRBWRADDR");
            CLKARDCLK_port_name = new NamedObject("CLKARDCLK");
            CLKBWRCLK_port_name = new NamedObject("CLKBWRCLK");
            DIADI_port_name = new NamedObject("DIADI");
            DIBDI_port_name = new NamedObject("DIBDI");
            DIPADIP_port_name = new NamedObject("DIPADIP");
            DIPBDIP_port_name = new NamedObject("DIPBDIP");
            ENARDEN_port_name = new NamedObject("ENARDEN");
            ENBWREN_port_name = new NamedObject("ENBWREN");
            REGCEAREGCE_port_name = new NamedObject("REGCEAREGCE");
            RSTRAMARSTRAM_port_name = new NamedObject("RSTRAMARSTRAM");
            RSTRAMB_port_name = new NamedObject("RSTRAMB");
            RSTREGARSTREG_port_name = new NamedObject("RSTREGARSTREG");
            RSTREGB_port_name = new NamedObject("RSTREGB");
            WEBWE_port_name = new NamedObject("WEBWE");
            RDADDR_port_name = new NamedObject("RDADDR");
            WRADDR_port_name = new NamedObject("WRADDR");
            CASCADEOUTLATA_port_name = new NamedObject("CASCADEOUTLATA");
            CASCADEOUTLATB_port_name = new NamedObject("CASCADEOUTLATB");
            CASCADEOUTREGA_port_name = new NamedObject("CASCADEOUTREGA");
            CASCADEOUTREGB_port_name = new NamedObject("CASCADEOUTREGB");
            CASCADEINLATA_port_name = new NamedObject("CASCADEINLATA");
            CASCADEINLATB_port_name = new NamedObject("CASCADEINLATB");
            CASCADEINREGA_port_name = new NamedObject("CASCADEINREGA");
            CASCADEINREGB_port_name = new NamedObject("CASCADEINREGB");
            RDADDRECC_port_name = new NamedObject("RDADDRECC");
            RDADDRL_port_name = new NamedObject("RDADDRL");
            RDADDRU_port_name = new NamedObject("RDADDRU");
            RDENL_port_name = new NamedObject("RDENL");
            RDENU_port_name = new NamedObject("RDENU");
            REGCEL_port_name = new NamedObject("REGCEL");
            REGCEU_port_name = new NamedObject("REGCEU");
            SSRL_port_name = new NamedObject("SSRL");
            SSRU_port_name = new NamedObject("SSRU");
            WEL_port_name = new NamedObject("WEL");
            WEU_port_name = new NamedObject("WEU");
            WRADDRL_port_name = new NamedObject("WRADDRL");
            WRADDRU_port_name = new NamedObject("WRADDRU");
            WRENL_port_name = new NamedObject("WRENL");
            WRENU_port_name = new NamedObject("WRENU");
            ADDRAL_port_name = new NamedObject("ADDRAL");
            ADDRAU_port_name = new NamedObject("ADDRAU");
            ADDRBL_port_name = new NamedObject("ADDRBL");
            ADDRBU_port_name = new NamedObject("ADDRBU");
            CLKAL_port_name = new NamedObject("CLKAL");
            CLKAU_port_name = new NamedObject("CLKAU");
            CLKBL_port_name = new NamedObject("CLKBL");
            CLKBU_port_name = new NamedObject("CLKBU");
            ENAL_port_name = new NamedObject("ENAL");
            ENAU_port_name = new NamedObject("ENAU");
            ENBL_port_name = new NamedObject("ENBL");
            ENBU_port_name = new NamedObject("ENBU");
            REGCEAL_port_name = new NamedObject("REGCEAL");
            REGCEAU_port_name = new NamedObject("REGCEAU");
            REGCEBL_port_name = new NamedObject("REGCEBL");
            REGCEBU_port_name = new NamedObject("REGCEBU");
            REGCLKAL_port_name = new NamedObject("REGCLKAL");
            REGCLKAU_port_name = new NamedObject("REGCLKAU");
            REGCLKBL_port_name = new NamedObject("REGCLKBL");
            REGCLKBU_port_name = new NamedObject("REGCLKBU");
            SSRAL_port_name = new NamedObject("SSRAL");
            SSRAU_port_name = new NamedObject("SSRAU");
            SSRBL_port_name = new NamedObject("SSRBL");
            SSRBU_port_name = new NamedObject("SSRBU");
            WEAL_port_name = new NamedObject("WEAL");
            WEAU_port_name = new NamedObject("WEAU");
            WEBL_port_name = new NamedObject("WEBL");
            WEBU_port_name = new NamedObject("WEBU");
            ADDRAWRADDR_port_name = new NamedObject("ADDRAWRADDR");
            ADDRBRDADDR_port_name = new NamedObject("ADDRBRDADDR");
            CLKAWRCLK_port_name = new NamedObject("CLKAWRCLK");
            CLKBRDCLK_port_name = new NamedObject("CLKBRDCLK");
            ENAWREN_port_name = new NamedObject("ENAWREN");
            ENBRDEN_port_name = new NamedObject("ENBRDEN");
            REGCEBREGCE_port_name = new NamedObject("REGCEBREGCE");
            RSTBRST_port_name = new NamedObject("RSTBRST");
            WEAWEL_port_name = new NamedObject("WEAWEL");
            WEBWEU_port_name = new NamedObject("WEBWEU");
            A7_port_name = new NamedObject("A7");
            CSOB_port_name = new NamedObject("CSOB");
            DONE_port_name = new NamedObject("DONE");
            INITB_port_name = new NamedObject("INITB");
            CCLK_port_name = new NamedObject("CCLK");
            PROGB_port_name = new NamedObject("PROGB");
            DCMLOCK_port_name = new NamedObject("DCMLOCK");
            MISO_port_name = new NamedObject("MISO");
            MOSI_port_name = new NamedObject("MOSI");
            Q15_port_name = new NamedObject("Q15");
            Q31_port_name = new NamedObject("Q31");
            GSROUT_port_name = new NamedObject("GSROUT");
            GSRIN_port_name = new NamedObject("GSRIN");
            GTSOUT_port_name = new NamedObject("GTSOUT");
            GTSIN_port_name = new NamedObject("GTSIN");
            EOSOUT_port_name = new NamedObject("EOSOUT");
            USRCCLKOIN_port_name = new NamedObject("USRCCLKOIN");
            USRCCLKTSIN_port_name = new NamedObject("USRCCLKTSIN");
            USRDONEOIN_port_name = new NamedObject("USRDONEOIN");
            USRDONETSIN_port_name = new NamedObject("USRDONETSIN");
            CFGCLK_port_name = new NamedObject("CFGCLK");
            CFGMCLK_port_name = new NamedObject("CFGMCLK");
            EOS_port_name = new NamedObject("EOS");
            PREQ_port_name = new NamedObject("PREQ");
            GSR_port_name = new NamedObject("GSR");
            GTS_port_name = new NamedObject("GTS");
            PACK_port_name = new NamedObject("PACK");
            USRCCLKO_port_name = new NamedObject("USRCCLKO");
            USRCCLKTS_port_name = new NamedObject("USRCCLKTS");
            USRDONEO_port_name = new NamedObject("USRDONEO");
            USRDONETS_port_name = new NamedObject("USRDONETS");
            MBT_port_name = new NamedObject("MBT");
            DINSPI_port_name = new NamedObject("DINSPI");
            TCKSPI_port_name = new NamedObject("TCKSPI");
            SREQ_port_name = new NamedObject("SREQ");
            SACK_port_name = new NamedObject("SACK");
            ALM_port_name = new NamedObject("ALM");
            CHANNEL_port_name = new NamedObject("CHANNEL");
            EOC_port_name = new NamedObject("EOC");
            JTAGBUSY_port_name = new NamedObject("JTAGBUSY");
            JTAGLOCKED_port_name = new NamedObject("JTAGLOCKED");
            JTAGMODIFIED_port_name = new NamedObject("JTAGMODIFIED");
            OT_port_name = new NamedObject("OT");
            CONVST_port_name = new NamedObject("CONVST");
            CONVSTCLK_port_name = new NamedObject("CONVSTCLK");
            VAUXN_port_name = new NamedObject("VAUXN");
            VAUXP_port_name = new NamedObject("VAUXP");
            VN_port_name = new NamedObject("VN");
            VP_port_name = new NamedObject("VP");
            EMAC0PHYTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC0PHYTXGMIIMIICLKOUT");
            EMAC0SPEEDIS10100_port_name = new NamedObject("EMAC0SPEEDIS10100");
            EMAC1PHYTXGMIIMIICLKOUT_port_name = new NamedObject("EMAC1PHYTXGMIIMIICLKOUT");
            EMAC1SPEEDIS10100_port_name = new NamedObject("EMAC1SPEEDIS10100");
            PHYEMAC0TXGMIIMIICLKIN_port_name = new NamedObject("PHYEMAC0TXGMIIMIICLKIN");
            PHYEMAC1TXGMIIMIICLKIN_port_name = new NamedObject("PHYEMAC1TXGMIIMIICLKIN");
            EMACCLIENTANINTERRUPT_port_name = new NamedObject("EMACCLIENTANINTERRUPT");
            EMACCLIENTRXBADFRAME_port_name = new NamedObject("EMACCLIENTRXBADFRAME");
            EMACCLIENTRXCLIENTCLKOUT_port_name = new NamedObject("EMACCLIENTRXCLIENTCLKOUT");
            EMACCLIENTRXD_port_name = new NamedObject("EMACCLIENTRXD");
            EMACCLIENTRXDVLD_port_name = new NamedObject("EMACCLIENTRXDVLD");
            EMACCLIENTRXDVLDMSW_port_name = new NamedObject("EMACCLIENTRXDVLDMSW");
            EMACCLIENTRXFRAMEDROP_port_name = new NamedObject("EMACCLIENTRXFRAMEDROP");
            EMACCLIENTRXGOODFRAME_port_name = new NamedObject("EMACCLIENTRXGOODFRAME");
            EMACCLIENTRXSTATS_port_name = new NamedObject("EMACCLIENTRXSTATS");
            EMACCLIENTRXSTATSBYTEVLD_port_name = new NamedObject("EMACCLIENTRXSTATSBYTEVLD");
            EMACCLIENTRXSTATSVLD_port_name = new NamedObject("EMACCLIENTRXSTATSVLD");
            EMACCLIENTTXACK_port_name = new NamedObject("EMACCLIENTTXACK");
            EMACCLIENTTXCLIENTCLKOUT_port_name = new NamedObject("EMACCLIENTTXCLIENTCLKOUT");
            EMACCLIENTTXCOLLISION_port_name = new NamedObject("EMACCLIENTTXCOLLISION");
            EMACCLIENTTXRETRANSMIT_port_name = new NamedObject("EMACCLIENTTXRETRANSMIT");
            EMACCLIENTTXSTATS_port_name = new NamedObject("EMACCLIENTTXSTATS");
            EMACCLIENTTXSTATSBYTEVLD_port_name = new NamedObject("EMACCLIENTTXSTATSBYTEVLD");
            EMACCLIENTTXSTATSVLD_port_name = new NamedObject("EMACCLIENTTXSTATSVLD");
            EMACPHYENCOMMAALIGN_port_name = new NamedObject("EMACPHYENCOMMAALIGN");
            EMACPHYLOOPBACKMSB_port_name = new NamedObject("EMACPHYLOOPBACKMSB");
            EMACPHYMCLKOUT_port_name = new NamedObject("EMACPHYMCLKOUT");
            EMACPHYMDOUT_port_name = new NamedObject("EMACPHYMDOUT");
            EMACPHYMDTRI_port_name = new NamedObject("EMACPHYMDTRI");
            EMACPHYMGTRXRESET_port_name = new NamedObject("EMACPHYMGTRXRESET");
            EMACPHYMGTTXRESET_port_name = new NamedObject("EMACPHYMGTTXRESET");
            EMACPHYPOWERDOWN_port_name = new NamedObject("EMACPHYPOWERDOWN");
            EMACPHYSYNCACQSTATUS_port_name = new NamedObject("EMACPHYSYNCACQSTATUS");
            EMACPHYTXCHARDISPMODE_port_name = new NamedObject("EMACPHYTXCHARDISPMODE");
            EMACPHYTXCHARDISPVAL_port_name = new NamedObject("EMACPHYTXCHARDISPVAL");
            EMACPHYTXCHARISK_port_name = new NamedObject("EMACPHYTXCHARISK");
            EMACPHYTXCLK_port_name = new NamedObject("EMACPHYTXCLK");
            EMACPHYTXD_port_name = new NamedObject("EMACPHYTXD");
            EMACPHYTXEN_port_name = new NamedObject("EMACPHYTXEN");
            EMACPHYTXER_port_name = new NamedObject("EMACPHYTXER");
            EMACPHYTXGMIIMIICLKOUT_port_name = new NamedObject("EMACPHYTXGMIIMIICLKOUT");
            EMACSPEEDIS10100_port_name = new NamedObject("EMACSPEEDIS10100");
            CLIENTEMACDCMLOCKED_port_name = new NamedObject("CLIENTEMACDCMLOCKED");
            CLIENTEMACPAUSEREQ_port_name = new NamedObject("CLIENTEMACPAUSEREQ");
            CLIENTEMACPAUSEVAL_port_name = new NamedObject("CLIENTEMACPAUSEVAL");
            CLIENTEMACRXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMACRXCLIENTCLKIN");
            CLIENTEMACTXCLIENTCLKIN_port_name = new NamedObject("CLIENTEMACTXCLIENTCLKIN");
            CLIENTEMACTXD_port_name = new NamedObject("CLIENTEMACTXD");
            CLIENTEMACTXDVLD_port_name = new NamedObject("CLIENTEMACTXDVLD");
            CLIENTEMACTXDVLDMSW_port_name = new NamedObject("CLIENTEMACTXDVLDMSW");
            CLIENTEMACTXFIRSTBYTE_port_name = new NamedObject("CLIENTEMACTXFIRSTBYTE");
            CLIENTEMACTXIFGDELAY_port_name = new NamedObject("CLIENTEMACTXIFGDELAY");
            CLIENTEMACTXUNDERRUN_port_name = new NamedObject("CLIENTEMACTXUNDERRUN");
            PHYEMACCOL_port_name = new NamedObject("PHYEMACCOL");
            PHYEMACCRS_port_name = new NamedObject("PHYEMACCRS");
            PHYEMACGTXCLK_port_name = new NamedObject("PHYEMACGTXCLK");
            PHYEMACMCLKIN_port_name = new NamedObject("PHYEMACMCLKIN");
            PHYEMACMDIN_port_name = new NamedObject("PHYEMACMDIN");
            PHYEMACMIITXCLK_port_name = new NamedObject("PHYEMACMIITXCLK");
            PHYEMACPHYAD_port_name = new NamedObject("PHYEMACPHYAD");
            PHYEMACRXBUFSTATUS_port_name = new NamedObject("PHYEMACRXBUFSTATUS");
            PHYEMACRXCHARISCOMMA_port_name = new NamedObject("PHYEMACRXCHARISCOMMA");
            PHYEMACRXCHARISK_port_name = new NamedObject("PHYEMACRXCHARISK");
            PHYEMACRXCLK_port_name = new NamedObject("PHYEMACRXCLK");
            PHYEMACRXCLKCORCNT_port_name = new NamedObject("PHYEMACRXCLKCORCNT");
            PHYEMACRXD_port_name = new NamedObject("PHYEMACRXD");
            PHYEMACRXDISPERR_port_name = new NamedObject("PHYEMACRXDISPERR");
            PHYEMACRXDV_port_name = new NamedObject("PHYEMACRXDV");
            PHYEMACRXER_port_name = new NamedObject("PHYEMACRXER");
            PHYEMACRXNOTINTABLE_port_name = new NamedObject("PHYEMACRXNOTINTABLE");
            PHYEMACRXRUNDISP_port_name = new NamedObject("PHYEMACRXRUNDISP");
            PHYEMACSIGNALDET_port_name = new NamedObject("PHYEMACSIGNALDET");
            PHYEMACTXBUFERR_port_name = new NamedObject("PHYEMACTXBUFERR");
            PHYEMACTXGMIIMIICLKIN_port_name = new NamedObject("PHYEMACTXGMIIMIICLKIN");
            DATA_port_name = new NamedObject("DATA");
            DATAVALID_port_name = new NamedObject("DATAVALID");
            MUXADDR_port_name = new NamedObject("MUXADDR");
            LI_port_name = new NamedObject("LI");
            DLYFABRIC_port_name = new NamedObject("DLYFABRIC");
            DLYIFF_port_name = new NamedObject("DLYIFF");
            DLYIN_port_name = new NamedObject("DLYIN");
            DDR_CLK_OUT_port_name = new NamedObject("DDR_CLK_OUT");
            DIV2_CLK_OUT_port_name = new NamedObject("DIV2_CLK_OUT");
            DIV4_CLK_OUT_port_name = new NamedObject("DIV4_CLK_OUT");
            DIVCLK_OUT_port_name = new NamedObject("DIVCLK_OUT");
            DQSSN_port_name = new NamedObject("DQSSN");
            DQSSP_port_name = new NamedObject("DQSSP");
            PDOUT_port_name = new NamedObject("PDOUT");
            RIU2CLB_RD_DATA_port_name = new NamedObject("RIU2CLB_RD_DATA");
            RIU2CLB_RD_VALID_port_name = new NamedObject("RIU2CLB_RD_VALID");
            CFG_RESET_port_name = new NamedObject("CFG_RESET");
            CLB2RIU_ADDR_port_name = new NamedObject("CLB2RIU_ADDR");
            CLB2RIU_BYTESLICE_SEL_port_name = new NamedObject("CLB2RIU_BYTESLICE_SEL");
            CLB2RIU_WR_DATA_port_name = new NamedObject("CLB2RIU_WR_DATA");
            CLB2RIU_WR_EN_port_name = new NamedObject("CLB2RIU_WR_EN");
            CNTVALUEINM_port_name = new NamedObject("CNTVALUEINM");
            CNTVALUEINSP_port_name = new NamedObject("CNTVALUEINSP");
            DQS_port_name = new NamedObject("DQS");
            PLL_CLK_IN_port_name = new NamedObject("PLL_CLK_IN");
            XOROUT_port_name = new NamedObject("XOROUT");
            DOUTP_port_name = new NamedObject("DOUTP");
            PROGEMPTY_port_name = new NamedObject("PROGEMPTY");
            PROGFULL_port_name = new NamedObject("PROGFULL");
            RDRSTBUSY_port_name = new NamedObject("RDRSTBUSY");
            WRRSTBUSY_port_name = new NamedObject("WRRSTBUSY");
            DINP_port_name = new NamedObject("DINP");
            CASDOUT_port_name = new NamedObject("CASDOUT");
            CASDOUTP_port_name = new NamedObject("CASDOUTP");
            CASNXTEMPTY_port_name = new NamedObject("CASNXTEMPTY");
            CASPRVRDEN_port_name = new NamedObject("CASPRVRDEN");
            CASDBITERR_port_name = new NamedObject("CASDBITERR");
            CASDIN_port_name = new NamedObject("CASDIN");
            CASDINP_port_name = new NamedObject("CASDINP");
            CASNXTRDEN_port_name = new NamedObject("CASNXTRDEN");
            CASPRVEMPTY_port_name = new NamedObject("CASPRVEMPTY");
            CASSBITERR_port_name = new NamedObject("CASSBITERR");
            RXDFEAGCCTRL_port_name = new NamedObject("RXDFEAGCCTRL");
            CASC_OUT_port_name = new NamedObject("CASC_OUT");
            CASC_IN_port_name = new NamedObject("CASC_IN");
            CASC_RETURN_port_name = new NamedObject("CASC_RETURN");
            LOAD_port_name = new NamedObject("LOAD");
            CLK_B_port_name = new NamedObject("CLK_B");
            CDDCDONE_port_name = new NamedObject("CDDCDONE");
            CDDCREQ_port_name = new NamedObject("CDDCREQ");
            DOE_port_name = new NamedObject("DOE");
            DOF_port_name = new NamedObject("DOF");
            DOG_port_name = new NamedObject("DOG");
            DOH_port_name = new NamedObject("DOH");
            ADDRE_port_name = new NamedObject("ADDRE");
            ADDRF_port_name = new NamedObject("ADDRF");
            ADDRG_port_name = new NamedObject("ADDRG");
            ADDRH_port_name = new NamedObject("ADDRH");
            DIE_port_name = new NamedObject("DIE");
            DIF_port_name = new NamedObject("DIF");
            DIG_port_name = new NamedObject("DIG");
            DIH_port_name = new NamedObject("DIH");
            CASDOUTA_port_name = new NamedObject("CASDOUTA");
            CASDOUTB_port_name = new NamedObject("CASDOUTB");
            CASDOUTPA_port_name = new NamedObject("CASDOUTPA");
            CASDOUTPB_port_name = new NamedObject("CASDOUTPB");
            DOUTADOUT_port_name = new NamedObject("DOUTADOUT");
            DOUTBDOUT_port_name = new NamedObject("DOUTBDOUT");
            DOUTPADOUTP_port_name = new NamedObject("DOUTPADOUTP");
            DOUTPBDOUTP_port_name = new NamedObject("DOUTPBDOUTP");
            ADDRENA_port_name = new NamedObject("ADDRENA");
            ADDRENB_port_name = new NamedObject("ADDRENB");
            CASDINA_port_name = new NamedObject("CASDINA");
            CASDINB_port_name = new NamedObject("CASDINB");
            CASDINPA_port_name = new NamedObject("CASDINPA");
            CASDINPB_port_name = new NamedObject("CASDINPB");
            CASSELDA_port_name = new NamedObject("CASSELDA");
            CASSELDB_port_name = new NamedObject("CASSELDB");
            CASSELPIPEDA_port_name = new NamedObject("CASSELPIPEDA");
            CASSELPIPEDB_port_name = new NamedObject("CASSELPIPEDB");
            DINADIN_port_name = new NamedObject("DINADIN");
            DINBDIN_port_name = new NamedObject("DINBDIN");
            DINPADINP_port_name = new NamedObject("DINPADINP");
            DINPBDINP_port_name = new NamedObject("DINPBDINP");
            SLEEP_port_name = new NamedObject("SLEEP");
            CLK_OUT_port_name = new NamedObject("CLK_OUT");
            CLK_C_port_name = new NamedObject("CLK_C");
            CLK_C_B_port_name = new NamedObject("CLK_C_B");
            DATAIN1_port_name = new NamedObject("DATAIN1");
            NCLK_port_name = new NamedObject("NCLK");
            PCLK_port_name = new NamedObject("PCLK");
            SET_port_name = new NamedObject("SET");
            DTS_port_name = new NamedObject("DTS");
            FCSBO_port_name = new NamedObject("FCSBO");
            FCSBTS_port_name = new NamedObject("FCSBTS");
            CLKOUTXIPHY_port_name = new NamedObject("CLKOUTXIPHY");
            CLKOUTXIPHYEN_port_name = new NamedObject("CLKOUTXIPHYEN");
            T_OUT_port_name = new NamedObject("T_OUT");
            DDR_CLK_port_name = new NamedObject("DDR_CLK");
            DIV2_CLK_port_name = new NamedObject("DIV2_CLK");
            DIV4_CLK_port_name = new NamedObject("DIV4_CLK");
            TBYTE_IN_port_name = new NamedObject("TBYTE_IN");
        } catch(InvalidEdifNameException e) {
            // this should never happen
            throw new RuntimeException(e);
        }
    }

    public static EdifCell AND2() {
        return _AND2;
    }

    public static EdifCell AND2B1() {
        return _AND2B1;
    }

    public static EdifCell AND2B1L() {
        return _AND2B1L;
    }

    public static EdifCell AND2B2() {
        return _AND2B2;
    }

    public static EdifCell AND3() {
        return _AND3;
    }

    public static EdifCell AND3B1() {
        return _AND3B1;
    }

    public static EdifCell AND3B2() {
        return _AND3B2;
    }

    public static EdifCell AND3B3() {
        return _AND3B3;
    }

    public static EdifCell AND4() {
        return _AND4;
    }

    public static EdifCell AND4B1() {
        return _AND4B1;
    }

    public static EdifCell AND4B2() {
        return _AND4B2;
    }

    public static EdifCell AND4B3() {
        return _AND4B3;
    }

    public static EdifCell AND4B4() {
        return _AND4B4;
    }

    public static EdifCell AND5() {
        return _AND5;
    }

    public static EdifCell AND5B1() {
        return _AND5B1;
    }

    public static EdifCell AND5B2() {
        return _AND5B2;
    }

    public static EdifCell AND5B3() {
        return _AND5B3;
    }

    public static EdifCell AND5B4() {
        return _AND5B4;
    }

    public static EdifCell AND5B5() {
        return _AND5B5;
    }

    public static EdifCell AND6() {
        return _AND6;
    }

    public static EdifCell AND7() {
        return _AND7;
    }

    public static EdifCell AND8() {
        return _AND8;
    }

    public static EdifCell AUTOBUF() {
        return _AUTOBUF;
    }

    public static EdifCell BSCANE2() {
        return _BSCANE2;
    }

    public static EdifCell BSCAN_FPGACORE() {
        return _BSCAN_FPGACORE;
    }

    public static EdifCell BSCAN_SPARTAN3() {
        return _BSCAN_SPARTAN3;
    }

    public static EdifCell BSCAN_SPARTAN3A() {
        return _BSCAN_SPARTAN3A;
    }

    public static EdifCell BSCAN_SPARTAN6() {
        return _BSCAN_SPARTAN6;
    }

    public static EdifCell BSCAN_VIRTEX4() {
        return _BSCAN_VIRTEX4;
    }

    public static EdifCell BSCAN_VIRTEX5() {
        return _BSCAN_VIRTEX5;
    }

    public static EdifCell BSCAN_VIRTEX6() {
        return _BSCAN_VIRTEX6;
    }

    public static EdifCell BUF() {
        return _BUF;
    }

    public static EdifCell BUFCF() {
        return _BUFCF;
    }

    public static EdifCell BUFE() {
        return _BUFE;
    }

    public static EdifCell BUFFOE() {
        return _BUFFOE;
    }

    public static EdifCell BUFG() {
        return _BUFG;
    }

    public static EdifCell BUFGCE() {
        return _BUFGCE;
    }

    public static EdifCell BUFGCE_1() {
        return _BUFGCE_1;
    }

    public static EdifCell BUFGCTRL() {
        return _BUFGCTRL;
    }

    public static EdifCell BUFGDLL() {
        return _BUFGDLL;
    }

    public static EdifCell BUFGMUX() {
        return _BUFGMUX;
    }

    public static EdifCell BUFGMUX_1() {
        return _BUFGMUX_1;
    }

    public static EdifCell BUFGMUX_CTRL() {
        return _BUFGMUX_CTRL;
    }

    public static EdifCell BUFGMUX_VIRTEX4() {
        return _BUFGMUX_VIRTEX4;
    }

    public static EdifCell BUFGP() {
        return _BUFGP;
    }

    public static EdifCell BUFGSR() {
        return _BUFGSR;
    }

    public static EdifCell BUFGTS() {
        return _BUFGTS;
    }

    public static EdifCell BUFG_LB() {
        return _BUFG_LB;
    }

    public static EdifCell BUFH() {
        return _BUFH;
    }

    public static EdifCell BUFHCE() {
        return _BUFHCE;
    }

    public static EdifCell BUFIO() {
        return _BUFIO;
    }

    public static EdifCell BUFIO2() {
        return _BUFIO2;
    }

    public static EdifCell BUFIO2FB() {
        return _BUFIO2FB;
    }

    public static EdifCell BUFIO2_2CLK() {
        return _BUFIO2_2CLK;
    }

    public static EdifCell BUFIODQS() {
        return _BUFIODQS;
    }

    public static EdifCell BUFMR() {
        return _BUFMR;
    }

    public static EdifCell BUFMRCE() {
        return _BUFMRCE;
    }

    public static EdifCell BUFPLL() {
        return _BUFPLL;
    }

    public static EdifCell BUFPLL_MCB() {
        return _BUFPLL_MCB;
    }

    public static EdifCell BUFR() {
        return _BUFR;
    }

    public static EdifCell BUFT() {
        return _BUFT;
    }

    public static EdifCell CAPTUREE2() {
        return _CAPTUREE2;
    }

    public static EdifCell CAPTURE_FPGACORE() {
        return _CAPTURE_FPGACORE;
    }

    public static EdifCell CAPTURE_SPARTAN3() {
        return _CAPTURE_SPARTAN3;
    }

    public static EdifCell CAPTURE_SPARTAN3A() {
        return _CAPTURE_SPARTAN3A;
    }

    public static EdifCell CAPTURE_VIRTEX4() {
        return _CAPTURE_VIRTEX4;
    }

    public static EdifCell CAPTURE_VIRTEX5() {
        return _CAPTURE_VIRTEX5;
    }

    public static EdifCell CAPTURE_VIRTEX6() {
        return _CAPTURE_VIRTEX6;
    }

    public static EdifCell CARRY4() {
        return _CARRY4;
    }

    public static EdifCell CFGLUT5() {
        return _CFGLUT5;
    }

    public static EdifCell CLKDLL() {
        return _CLKDLL;
    }

    public static EdifCell CLKDLLE() {
        return _CLKDLLE;
    }

    public static EdifCell CLKDLLHF() {
        return _CLKDLLHF;
    }

    public static EdifCell CLK_DIV10() {
        return _CLK_DIV10;
    }

    public static EdifCell CLK_DIV10R() {
        return _CLK_DIV10R;
    }

    public static EdifCell CLK_DIV10RSD() {
        return _CLK_DIV10RSD;
    }

    public static EdifCell CLK_DIV10SD() {
        return _CLK_DIV10SD;
    }

    public static EdifCell CLK_DIV12() {
        return _CLK_DIV12;
    }

    public static EdifCell CLK_DIV12R() {
        return _CLK_DIV12R;
    }

    public static EdifCell CLK_DIV12RSD() {
        return _CLK_DIV12RSD;
    }

    public static EdifCell CLK_DIV12SD() {
        return _CLK_DIV12SD;
    }

    public static EdifCell CLK_DIV14() {
        return _CLK_DIV14;
    }

    public static EdifCell CLK_DIV14R() {
        return _CLK_DIV14R;
    }

    public static EdifCell CLK_DIV14RSD() {
        return _CLK_DIV14RSD;
    }

    public static EdifCell CLK_DIV14SD() {
        return _CLK_DIV14SD;
    }

    public static EdifCell CLK_DIV16() {
        return _CLK_DIV16;
    }

    public static EdifCell CLK_DIV16R() {
        return _CLK_DIV16R;
    }

    public static EdifCell CLK_DIV16RSD() {
        return _CLK_DIV16RSD;
    }

    public static EdifCell CLK_DIV16SD() {
        return _CLK_DIV16SD;
    }

    public static EdifCell CLK_DIV2() {
        return _CLK_DIV2;
    }

    public static EdifCell CLK_DIV2R() {
        return _CLK_DIV2R;
    }

    public static EdifCell CLK_DIV2RSD() {
        return _CLK_DIV2RSD;
    }

    public static EdifCell CLK_DIV2SD() {
        return _CLK_DIV2SD;
    }

    public static EdifCell CLK_DIV4() {
        return _CLK_DIV4;
    }

    public static EdifCell CLK_DIV4R() {
        return _CLK_DIV4R;
    }

    public static EdifCell CLK_DIV4RSD() {
        return _CLK_DIV4RSD;
    }

    public static EdifCell CLK_DIV4SD() {
        return _CLK_DIV4SD;
    }

    public static EdifCell CLK_DIV6() {
        return _CLK_DIV6;
    }

    public static EdifCell CLK_DIV6R() {
        return _CLK_DIV6R;
    }

    public static EdifCell CLK_DIV6RSD() {
        return _CLK_DIV6RSD;
    }

    public static EdifCell CLK_DIV6SD() {
        return _CLK_DIV6SD;
    }

    public static EdifCell CLK_DIV8() {
        return _CLK_DIV8;
    }

    public static EdifCell CLK_DIV8R() {
        return _CLK_DIV8R;
    }

    public static EdifCell CLK_DIV8RSD() {
        return _CLK_DIV8RSD;
    }

    public static EdifCell CLK_DIV8SD() {
        return _CLK_DIV8SD;
    }

    public static EdifCell CONFIG() {
        return _CONFIG;
    }

    public static EdifCell CRC32() {
        return _CRC32;
    }

    public static EdifCell CRC64() {
        return _CRC64;
    }

    public static EdifCell DCIRESET() {
        return _DCIRESET;
    }

    public static EdifCell DCM() {
        return _DCM;
    }

    public static EdifCell DCM_ADV() {
        return _DCM_ADV;
    }

    public static EdifCell DCM_BASE() {
        return _DCM_BASE;
    }

    public static EdifCell DCM_CLKGEN() {
        return _DCM_CLKGEN;
    }

    public static EdifCell DCM_PS() {
        return _DCM_PS;
    }

    public static EdifCell DCM_SP() {
        return _DCM_SP;
    }

    public static EdifCell DNA_PORT() {
        return _DNA_PORT;
    }

    public static EdifCell DSP48() {
        return _DSP48;
    }

    public static EdifCell DSP48A() {
        return _DSP48A;
    }

    public static EdifCell DSP48A1() {
        return _DSP48A1;
    }

    public static EdifCell DSP48E() {
        return _DSP48E;
    }

    public static EdifCell DSP48E1() {
        return _DSP48E1;
    }

    public static EdifCell EFUSE_USR() {
        return _EFUSE_USR;
    }

    public static EdifCell EMAC() {
        return _EMAC;
    }

    public static EdifCell FD() {
        return _FD;
    }

    public static EdifCell FDC() {
        return _FDC;
    }

    public static EdifCell FDCE() {
        return _FDCE;
    }

    public static EdifCell FDCE_1() {
        return _FDCE_1;
    }

    public static EdifCell FDCP() {
        return _FDCP;
    }

    public static EdifCell FDCPE() {
        return _FDCPE;
    }

    public static EdifCell FDCPE_1() {
        return _FDCPE_1;
    }

    public static EdifCell FDCP_1() {
        return _FDCP_1;
    }

    public static EdifCell FDC_1() {
        return _FDC_1;
    }

    public static EdifCell FDD() {
        return _FDD;
    }

    public static EdifCell FDDC() {
        return _FDDC;
    }

    public static EdifCell FDDCE() {
        return _FDDCE;
    }

    public static EdifCell FDDCP() {
        return _FDDCP;
    }

    public static EdifCell FDDCPE() {
        return _FDDCPE;
    }

    public static EdifCell FDDP() {
        return _FDDP;
    }

    public static EdifCell FDDPE() {
        return _FDDPE;
    }

    public static EdifCell FDDRCPE() {
        return _FDDRCPE;
    }

    public static EdifCell FDDRRSE() {
        return _FDDRRSE;
    }

    public static EdifCell FDE() {
        return _FDE;
    }

    public static EdifCell FDE_1() {
        return _FDE_1;
    }

    public static EdifCell FDP() {
        return _FDP;
    }

    public static EdifCell FDPE() {
        return _FDPE;
    }

    public static EdifCell FDPE_1() {
        return _FDPE_1;
    }

    public static EdifCell FDP_1() {
        return _FDP_1;
    }

    public static EdifCell FDR() {
        return _FDR;
    }

    public static EdifCell FDRE() {
        return _FDRE;
    }

    public static EdifCell FDRE_1() {
        return _FDRE_1;
    }

    public static EdifCell FDRS() {
        return _FDRS;
    }

    public static EdifCell FDRSE() {
        return _FDRSE;
    }

    public static EdifCell FDRSE_1() {
        return _FDRSE_1;
    }

    public static EdifCell FDRS_1() {
        return _FDRS_1;
    }

    public static EdifCell FDR_1() {
        return _FDR_1;
    }

    public static EdifCell FDS() {
        return _FDS;
    }

    public static EdifCell FDSE() {
        return _FDSE;
    }

    public static EdifCell FDSE_1() {
        return _FDSE_1;
    }

    public static EdifCell FDS_1() {
        return _FDS_1;
    }

    public static EdifCell FD_1() {
        return _FD_1;
    }

    public static EdifCell FIFO16() {
        return _FIFO16;
    }

    public static EdifCell FIFO18() {
        return _FIFO18;
    }

    public static EdifCell FIFO18E1() {
        return _FIFO18E1;
    }

    public static EdifCell FIFO18_36() {
        return _FIFO18_36;
    }

    public static EdifCell FIFO36() {
        return _FIFO36;
    }

    public static EdifCell FIFO36E1() {
        return _FIFO36E1;
    }

    public static EdifCell FIFO36_72() {
        return _FIFO36_72;
    }

    public static EdifCell FIFO36_72_EXP() {
        return _FIFO36_72_EXP;
    }

    public static EdifCell FIFO36_EXP() {
        return _FIFO36_EXP;
    }

    public static EdifCell FMAP() {
        return _FMAP;
    }

    public static EdifCell FRAME_ECCE2() {
        return _FRAME_ECCE2;
    }

    public static EdifCell FRAME_ECC_VIRTEX4() {
        return _FRAME_ECC_VIRTEX4;
    }

    public static EdifCell FRAME_ECC_VIRTEX5() {
        return _FRAME_ECC_VIRTEX5;
    }

    public static EdifCell FRAME_ECC_VIRTEX6() {
        return _FRAME_ECC_VIRTEX6;
    }

    public static EdifCell FTC() {
        return _FTC;
    }

    public static EdifCell FTCP() {
        return _FTCP;
    }

    public static EdifCell FTP() {
        return _FTP;
    }

    public static EdifCell GND() {
        return _GND;
    }

    public static EdifCell GT11() {
        return _GT11;
    }

    public static EdifCell GT11CLK() {
        return _GT11CLK;
    }

    public static EdifCell GT11CLK_MGT() {
        return _GT11CLK_MGT;
    }

    public static EdifCell GT11_CUSTOM() {
        return _GT11_CUSTOM;
    }

    public static EdifCell GT11_DUAL() {
        return _GT11_DUAL;
    }

    public static EdifCell GTHE1_QUAD() {
        return _GTHE1_QUAD;
    }

    public static EdifCell GTHE2_CHANNEL() {
        return _GTHE2_CHANNEL;
    }

    public static EdifCell GTHE2_COMMON() {
        return _GTHE2_COMMON;
    }

    public static EdifCell GTPA1_DUAL() {
        return _GTPA1_DUAL;
    }

    public static EdifCell GTPE2_CHANNEL() {
        return _GTPE2_CHANNEL;
    }

    public static EdifCell GTPE2_COMMON() {
        return _GTPE2_COMMON;
    }

    public static EdifCell GTP_DUAL() {
        return _GTP_DUAL;
    }

    public static EdifCell GTXE1() {
        return _GTXE1;
    }

    public static EdifCell GTXE2_CHANNEL() {
        return _GTXE2_CHANNEL;
    }

    public static EdifCell GTXE2_COMMON() {
        return _GTXE2_COMMON;
    }

    public static EdifCell GTX_DUAL() {
        return _GTX_DUAL;
    }

    public static EdifCell IBUF() {
        return _IBUF;
    }

    public static EdifCell IBUFDS() {
        return _IBUFDS;
    }

    public static EdifCell IBUFDS_BLVDS_25() {
        return _IBUFDS_BLVDS_25;
    }

    public static EdifCell IBUFDS_DIFF_OUT() {
        return _IBUFDS_DIFF_OUT;
    }

    public static EdifCell IBUFDS_DIFF_OUT_IBUFDISABLE() {
        return _IBUFDS_DIFF_OUT_IBUFDISABLE;
    }

    public static EdifCell IBUFDS_DIFF_OUT_INTERMDISABLE() {
        return _IBUFDS_DIFF_OUT_INTERMDISABLE;
    }

    public static EdifCell IBUFDS_DLY_ADJ() {
        return _IBUFDS_DLY_ADJ;
    }

    public static EdifCell IBUFDS_GTE2() {
        return _IBUFDS_GTE2;
    }

    public static EdifCell IBUFDS_GTHE1() {
        return _IBUFDS_GTHE1;
    }

    public static EdifCell IBUFDS_GTXE1() {
        return _IBUFDS_GTXE1;
    }

    public static EdifCell IBUFDS_IBUFDISABLE() {
        return _IBUFDS_IBUFDISABLE;
    }

    public static EdifCell IBUFDS_INTERMDISABLE() {
        return _IBUFDS_INTERMDISABLE;
    }

    public static EdifCell IBUFDS_LDT_25() {
        return _IBUFDS_LDT_25;
    }

    public static EdifCell IBUFDS_LVDSEXT_25() {
        return _IBUFDS_LVDSEXT_25;
    }

    public static EdifCell IBUFDS_LVDSEXT_25_DCI() {
        return _IBUFDS_LVDSEXT_25_DCI;
    }

    public static EdifCell IBUFDS_LVDSEXT_33() {
        return _IBUFDS_LVDSEXT_33;
    }

    public static EdifCell IBUFDS_LVDSEXT_33_DCI() {
        return _IBUFDS_LVDSEXT_33_DCI;
    }

    public static EdifCell IBUFDS_LVDS_25() {
        return _IBUFDS_LVDS_25;
    }

    public static EdifCell IBUFDS_LVDS_25_DCI() {
        return _IBUFDS_LVDS_25_DCI;
    }

    public static EdifCell IBUFDS_LVDS_33() {
        return _IBUFDS_LVDS_33;
    }

    public static EdifCell IBUFDS_LVDS_33_DCI() {
        return _IBUFDS_LVDS_33_DCI;
    }

    public static EdifCell IBUFDS_LVPECL_25() {
        return _IBUFDS_LVPECL_25;
    }

    public static EdifCell IBUFDS_LVPECL_33() {
        return _IBUFDS_LVPECL_33;
    }

    public static EdifCell IBUFDS_ULVDS_25() {
        return _IBUFDS_ULVDS_25;
    }

    public static EdifCell IBUFG() {
        return _IBUFG;
    }

    public static EdifCell IBUFGDS() {
        return _IBUFGDS;
    }

    public static EdifCell IBUFGDS_BLVDS_25() {
        return _IBUFGDS_BLVDS_25;
    }

    public static EdifCell IBUFGDS_DIFF_OUT() {
        return _IBUFGDS_DIFF_OUT;
    }

    public static EdifCell IBUFGDS_LDT_25() {
        return _IBUFGDS_LDT_25;
    }

    public static EdifCell IBUFGDS_LVDSEXT_25() {
        return _IBUFGDS_LVDSEXT_25;
    }

    public static EdifCell IBUFGDS_LVDSEXT_25_DCI() {
        return _IBUFGDS_LVDSEXT_25_DCI;
    }

    public static EdifCell IBUFGDS_LVDSEXT_33() {
        return _IBUFGDS_LVDSEXT_33;
    }

    public static EdifCell IBUFGDS_LVDSEXT_33_DCI() {
        return _IBUFGDS_LVDSEXT_33_DCI;
    }

    public static EdifCell IBUFGDS_LVDS_25() {
        return _IBUFGDS_LVDS_25;
    }

    public static EdifCell IBUFGDS_LVDS_25_DCI() {
        return _IBUFGDS_LVDS_25_DCI;
    }

    public static EdifCell IBUFGDS_LVDS_33() {
        return _IBUFGDS_LVDS_33;
    }

    public static EdifCell IBUFGDS_LVDS_33_DCI() {
        return _IBUFGDS_LVDS_33_DCI;
    }

    public static EdifCell IBUFGDS_LVPECL_25() {
        return _IBUFGDS_LVPECL_25;
    }

    public static EdifCell IBUFGDS_LVPECL_33() {
        return _IBUFGDS_LVPECL_33;
    }

    public static EdifCell IBUFGDS_ULVDS_25() {
        return _IBUFGDS_ULVDS_25;
    }

    public static EdifCell IBUFG_AGP() {
        return _IBUFG_AGP;
    }

    public static EdifCell IBUFG_CTT() {
        return _IBUFG_CTT;
    }

    public static EdifCell IBUFG_GTL() {
        return _IBUFG_GTL;
    }

    public static EdifCell IBUFG_GTLP() {
        return _IBUFG_GTLP;
    }

    public static EdifCell IBUFG_GTLP_DCI() {
        return _IBUFG_GTLP_DCI;
    }

    public static EdifCell IBUFG_GTL_DCI() {
        return _IBUFG_GTL_DCI;
    }

    public static EdifCell IBUFG_HSTL_I() {
        return _IBUFG_HSTL_I;
    }

    public static EdifCell IBUFG_HSTL_II() {
        return _IBUFG_HSTL_II;
    }

    public static EdifCell IBUFG_HSTL_III() {
        return _IBUFG_HSTL_III;
    }

    public static EdifCell IBUFG_HSTL_III_18() {
        return _IBUFG_HSTL_III_18;
    }

    public static EdifCell IBUFG_HSTL_III_DCI() {
        return _IBUFG_HSTL_III_DCI;
    }

    public static EdifCell IBUFG_HSTL_III_DCI_18() {
        return _IBUFG_HSTL_III_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_II_18() {
        return _IBUFG_HSTL_II_18;
    }

    public static EdifCell IBUFG_HSTL_II_DCI() {
        return _IBUFG_HSTL_II_DCI;
    }

    public static EdifCell IBUFG_HSTL_II_DCI_18() {
        return _IBUFG_HSTL_II_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_IV() {
        return _IBUFG_HSTL_IV;
    }

    public static EdifCell IBUFG_HSTL_IV_18() {
        return _IBUFG_HSTL_IV_18;
    }

    public static EdifCell IBUFG_HSTL_IV_DCI() {
        return _IBUFG_HSTL_IV_DCI;
    }

    public static EdifCell IBUFG_HSTL_IV_DCI_18() {
        return _IBUFG_HSTL_IV_DCI_18;
    }

    public static EdifCell IBUFG_HSTL_I_18() {
        return _IBUFG_HSTL_I_18;
    }

    public static EdifCell IBUFG_HSTL_I_DCI() {
        return _IBUFG_HSTL_I_DCI;
    }

    public static EdifCell IBUFG_HSTL_I_DCI_18() {
        return _IBUFG_HSTL_I_DCI_18;
    }

    public static EdifCell IBUFG_LVCMOS12() {
        return _IBUFG_LVCMOS12;
    }

    public static EdifCell IBUFG_LVCMOS15() {
        return _IBUFG_LVCMOS15;
    }

    public static EdifCell IBUFG_LVCMOS18() {
        return _IBUFG_LVCMOS18;
    }

    public static EdifCell IBUFG_LVCMOS2() {
        return _IBUFG_LVCMOS2;
    }

    public static EdifCell IBUFG_LVCMOS25() {
        return _IBUFG_LVCMOS25;
    }

    public static EdifCell IBUFG_LVCMOS33() {
        return _IBUFG_LVCMOS33;
    }

    public static EdifCell IBUFG_LVDCI_15() {
        return _IBUFG_LVDCI_15;
    }

    public static EdifCell IBUFG_LVDCI_18() {
        return _IBUFG_LVDCI_18;
    }

    public static EdifCell IBUFG_LVDCI_25() {
        return _IBUFG_LVDCI_25;
    }

    public static EdifCell IBUFG_LVDCI_33() {
        return _IBUFG_LVDCI_33;
    }

    public static EdifCell IBUFG_LVDCI_DV2_15() {
        return _IBUFG_LVDCI_DV2_15;
    }

    public static EdifCell IBUFG_LVDCI_DV2_18() {
        return _IBUFG_LVDCI_DV2_18;
    }

    public static EdifCell IBUFG_LVDCI_DV2_25() {
        return _IBUFG_LVDCI_DV2_25;
    }

    public static EdifCell IBUFG_LVDCI_DV2_33() {
        return _IBUFG_LVDCI_DV2_33;
    }

    public static EdifCell IBUFG_LVDS() {
        return _IBUFG_LVDS;
    }

    public static EdifCell IBUFG_LVPECL() {
        return _IBUFG_LVPECL;
    }

    public static EdifCell IBUFG_LVTTL() {
        return _IBUFG_LVTTL;
    }

    public static EdifCell IBUFG_PCI33_3() {
        return _IBUFG_PCI33_3;
    }

    public static EdifCell IBUFG_PCI33_5() {
        return _IBUFG_PCI33_5;
    }

    public static EdifCell IBUFG_PCI66_3() {
        return _IBUFG_PCI66_3;
    }

    public static EdifCell IBUFG_PCIX() {
        return _IBUFG_PCIX;
    }

    public static EdifCell IBUFG_PCIX66_3() {
        return _IBUFG_PCIX66_3;
    }

    public static EdifCell IBUFG_SSTL18_I() {
        return _IBUFG_SSTL18_I;
    }

    public static EdifCell IBUFG_SSTL18_II() {
        return _IBUFG_SSTL18_II;
    }

    public static EdifCell IBUFG_SSTL18_II_DCI() {
        return _IBUFG_SSTL18_II_DCI;
    }

    public static EdifCell IBUFG_SSTL18_I_DCI() {
        return _IBUFG_SSTL18_I_DCI;
    }

    public static EdifCell IBUFG_SSTL2_I() {
        return _IBUFG_SSTL2_I;
    }

    public static EdifCell IBUFG_SSTL2_II() {
        return _IBUFG_SSTL2_II;
    }

    public static EdifCell IBUFG_SSTL2_II_DCI() {
        return _IBUFG_SSTL2_II_DCI;
    }

    public static EdifCell IBUFG_SSTL2_I_DCI() {
        return _IBUFG_SSTL2_I_DCI;
    }

    public static EdifCell IBUFG_SSTL3_I() {
        return _IBUFG_SSTL3_I;
    }

    public static EdifCell IBUFG_SSTL3_II() {
        return _IBUFG_SSTL3_II;
    }

    public static EdifCell IBUFG_SSTL3_II_DCI() {
        return _IBUFG_SSTL3_II_DCI;
    }

    public static EdifCell IBUFG_SSTL3_I_DCI() {
        return _IBUFG_SSTL3_I_DCI;
    }

    public static EdifCell IBUF_AGP() {
        return _IBUF_AGP;
    }

    public static EdifCell IBUF_CTT() {
        return _IBUF_CTT;
    }

    public static EdifCell IBUF_DLY_ADJ() {
        return _IBUF_DLY_ADJ;
    }

    public static EdifCell IBUF_GTL() {
        return _IBUF_GTL;
    }

    public static EdifCell IBUF_GTLP() {
        return _IBUF_GTLP;
    }

    public static EdifCell IBUF_GTLP_DCI() {
        return _IBUF_GTLP_DCI;
    }

    public static EdifCell IBUF_GTL_DCI() {
        return _IBUF_GTL_DCI;
    }

    public static EdifCell IBUF_HSTL_I() {
        return _IBUF_HSTL_I;
    }

    public static EdifCell IBUF_HSTL_II() {
        return _IBUF_HSTL_II;
    }

    public static EdifCell IBUF_HSTL_III() {
        return _IBUF_HSTL_III;
    }

    public static EdifCell IBUF_HSTL_III_18() {
        return _IBUF_HSTL_III_18;
    }

    public static EdifCell IBUF_HSTL_III_DCI() {
        return _IBUF_HSTL_III_DCI;
    }

    public static EdifCell IBUF_HSTL_III_DCI_18() {
        return _IBUF_HSTL_III_DCI_18;
    }

    public static EdifCell IBUF_HSTL_II_18() {
        return _IBUF_HSTL_II_18;
    }

    public static EdifCell IBUF_HSTL_II_DCI() {
        return _IBUF_HSTL_II_DCI;
    }

    public static EdifCell IBUF_HSTL_II_DCI_18() {
        return _IBUF_HSTL_II_DCI_18;
    }

    public static EdifCell IBUF_HSTL_IV() {
        return _IBUF_HSTL_IV;
    }

    public static EdifCell IBUF_HSTL_IV_18() {
        return _IBUF_HSTL_IV_18;
    }

    public static EdifCell IBUF_HSTL_IV_DCI() {
        return _IBUF_HSTL_IV_DCI;
    }

    public static EdifCell IBUF_HSTL_IV_DCI_18() {
        return _IBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell IBUF_HSTL_I_18() {
        return _IBUF_HSTL_I_18;
    }

    public static EdifCell IBUF_HSTL_I_DCI() {
        return _IBUF_HSTL_I_DCI;
    }

    public static EdifCell IBUF_HSTL_I_DCI_18() {
        return _IBUF_HSTL_I_DCI_18;
    }

    public static EdifCell IBUF_IBUFDISABLE() {
        return _IBUF_IBUFDISABLE;
    }

    public static EdifCell IBUF_INTERMDISABLE() {
        return _IBUF_INTERMDISABLE;
    }

    public static EdifCell IBUF_LVCMOS12() {
        return _IBUF_LVCMOS12;
    }

    public static EdifCell IBUF_LVCMOS15() {
        return _IBUF_LVCMOS15;
    }

    public static EdifCell IBUF_LVCMOS18() {
        return _IBUF_LVCMOS18;
    }

    public static EdifCell IBUF_LVCMOS2() {
        return _IBUF_LVCMOS2;
    }

    public static EdifCell IBUF_LVCMOS25() {
        return _IBUF_LVCMOS25;
    }

    public static EdifCell IBUF_LVCMOS33() {
        return _IBUF_LVCMOS33;
    }

    public static EdifCell IBUF_LVDCI_15() {
        return _IBUF_LVDCI_15;
    }

    public static EdifCell IBUF_LVDCI_18() {
        return _IBUF_LVDCI_18;
    }

    public static EdifCell IBUF_LVDCI_25() {
        return _IBUF_LVDCI_25;
    }

    public static EdifCell IBUF_LVDCI_33() {
        return _IBUF_LVDCI_33;
    }

    public static EdifCell IBUF_LVDCI_DV2_15() {
        return _IBUF_LVDCI_DV2_15;
    }

    public static EdifCell IBUF_LVDCI_DV2_18() {
        return _IBUF_LVDCI_DV2_18;
    }

    public static EdifCell IBUF_LVDCI_DV2_25() {
        return _IBUF_LVDCI_DV2_25;
    }

    public static EdifCell IBUF_LVDCI_DV2_33() {
        return _IBUF_LVDCI_DV2_33;
    }

    public static EdifCell IBUF_LVDS() {
        return _IBUF_LVDS;
    }

    public static EdifCell IBUF_LVPECL() {
        return _IBUF_LVPECL;
    }

    public static EdifCell IBUF_LVTTL() {
        return _IBUF_LVTTL;
    }

    public static EdifCell IBUF_PCI33_3() {
        return _IBUF_PCI33_3;
    }

    public static EdifCell IBUF_PCI33_5() {
        return _IBUF_PCI33_5;
    }

    public static EdifCell IBUF_PCI66_3() {
        return _IBUF_PCI66_3;
    }

    public static EdifCell IBUF_PCIX() {
        return _IBUF_PCIX;
    }

    public static EdifCell IBUF_PCIX66_3() {
        return _IBUF_PCIX66_3;
    }

    public static EdifCell IBUF_SSTL18_I() {
        return _IBUF_SSTL18_I;
    }

    public static EdifCell IBUF_SSTL18_II() {
        return _IBUF_SSTL18_II;
    }

    public static EdifCell IBUF_SSTL18_II_DCI() {
        return _IBUF_SSTL18_II_DCI;
    }

    public static EdifCell IBUF_SSTL18_I_DCI() {
        return _IBUF_SSTL18_I_DCI;
    }

    public static EdifCell IBUF_SSTL2_I() {
        return _IBUF_SSTL2_I;
    }

    public static EdifCell IBUF_SSTL2_II() {
        return _IBUF_SSTL2_II;
    }

    public static EdifCell IBUF_SSTL2_II_DCI() {
        return _IBUF_SSTL2_II_DCI;
    }

    public static EdifCell IBUF_SSTL2_I_DCI() {
        return _IBUF_SSTL2_I_DCI;
    }

    public static EdifCell IBUF_SSTL3_I() {
        return _IBUF_SSTL3_I;
    }

    public static EdifCell IBUF_SSTL3_II() {
        return _IBUF_SSTL3_II;
    }

    public static EdifCell IBUF_SSTL3_II_DCI() {
        return _IBUF_SSTL3_II_DCI;
    }

    public static EdifCell IBUF_SSTL3_I_DCI() {
        return _IBUF_SSTL3_I_DCI;
    }

    public static EdifCell ICAPE2() {
        return _ICAPE2;
    }

    public static EdifCell ICAP_SPARTAN3A() {
        return _ICAP_SPARTAN3A;
    }

    public static EdifCell ICAP_SPARTAN6() {
        return _ICAP_SPARTAN6;
    }

    public static EdifCell ICAP_VIRTEX4() {
        return _ICAP_VIRTEX4;
    }

    public static EdifCell ICAP_VIRTEX5() {
        return _ICAP_VIRTEX5;
    }

    public static EdifCell ICAP_VIRTEX6() {
        return _ICAP_VIRTEX6;
    }

    public static EdifCell IDDR() {
        return _IDDR;
    }

    public static EdifCell IDDR2() {
        return _IDDR2;
    }

    public static EdifCell IDDR_2CLK() {
        return _IDDR_2CLK;
    }

    public static EdifCell IDELAY() {
        return _IDELAY;
    }

    public static EdifCell IDELAYCTRL() {
        return _IDELAYCTRL;
    }

    public static EdifCell IDELAYE2() {
        return _IDELAYE2;
    }

    public static EdifCell IDELAYE2_FINEDELAY() {
        return _IDELAYE2_FINEDELAY;
    }

    public static EdifCell IFDDRCPE() {
        return _IFDDRCPE;
    }

    public static EdifCell IFDDRRSE() {
        return _IFDDRRSE;
    }

    public static EdifCell ILD() {
        return _ILD;
    }

    public static EdifCell INV() {
        return _INV;
    }

    public static EdifCell IN_FIFO() {
        return _IN_FIFO;
    }

    public static EdifCell IOBUF() {
        return _IOBUF;
    }

    public static EdifCell IOBUFDS() {
        return _IOBUFDS;
    }

    public static EdifCell IOBUFDS_BLVDS_25() {
        return _IOBUFDS_BLVDS_25;
    }

    public static EdifCell IOBUFDS_DCIEN() {
        return _IOBUFDS_DCIEN;
    }

    public static EdifCell IOBUFDS_DIFF_OUT() {
        return _IOBUFDS_DIFF_OUT;
    }

    public static EdifCell IOBUFDS_DIFF_OUT_DCIEN() {
        return _IOBUFDS_DIFF_OUT_DCIEN;
    }

    public static EdifCell IOBUFDS_DIFF_OUT_INTERMDISABLE() {
        return _IOBUFDS_DIFF_OUT_INTERMDISABLE;
    }

    public static EdifCell IOBUFDS_INTERMDISABLE() {
        return _IOBUFDS_INTERMDISABLE;
    }

    public static EdifCell IOBUFE() {
        return _IOBUFE;
    }

    public static EdifCell IOBUF_AGP() {
        return _IOBUF_AGP;
    }

    public static EdifCell IOBUF_CTT() {
        return _IOBUF_CTT;
    }

    public static EdifCell IOBUF_DCIEN() {
        return _IOBUF_DCIEN;
    }

    public static EdifCell IOBUF_F_12() {
        return _IOBUF_F_12;
    }

    public static EdifCell IOBUF_F_16() {
        return _IOBUF_F_16;
    }

    public static EdifCell IOBUF_F_2() {
        return _IOBUF_F_2;
    }

    public static EdifCell IOBUF_F_24() {
        return _IOBUF_F_24;
    }

    public static EdifCell IOBUF_F_4() {
        return _IOBUF_F_4;
    }

    public static EdifCell IOBUF_F_6() {
        return _IOBUF_F_6;
    }

    public static EdifCell IOBUF_F_8() {
        return _IOBUF_F_8;
    }

    public static EdifCell IOBUF_GTL() {
        return _IOBUF_GTL;
    }

    public static EdifCell IOBUF_GTLP() {
        return _IOBUF_GTLP;
    }

    public static EdifCell IOBUF_GTLP_DCI() {
        return _IOBUF_GTLP_DCI;
    }

    public static EdifCell IOBUF_GTL_DCI() {
        return _IOBUF_GTL_DCI;
    }

    public static EdifCell IOBUF_HSTL_I() {
        return _IOBUF_HSTL_I;
    }

    public static EdifCell IOBUF_HSTL_II() {
        return _IOBUF_HSTL_II;
    }

    public static EdifCell IOBUF_HSTL_III() {
        return _IOBUF_HSTL_III;
    }

    public static EdifCell IOBUF_HSTL_III_18() {
        return _IOBUF_HSTL_III_18;
    }

    public static EdifCell IOBUF_HSTL_II_18() {
        return _IOBUF_HSTL_II_18;
    }

    public static EdifCell IOBUF_HSTL_II_DCI() {
        return _IOBUF_HSTL_II_DCI;
    }

    public static EdifCell IOBUF_HSTL_II_DCI_18() {
        return _IOBUF_HSTL_II_DCI_18;
    }

    public static EdifCell IOBUF_HSTL_IV() {
        return _IOBUF_HSTL_IV;
    }

    public static EdifCell IOBUF_HSTL_IV_18() {
        return _IOBUF_HSTL_IV_18;
    }

    public static EdifCell IOBUF_HSTL_IV_DCI() {
        return _IOBUF_HSTL_IV_DCI;
    }

    public static EdifCell IOBUF_HSTL_IV_DCI_18() {
        return _IOBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell IOBUF_HSTL_I_18() {
        return _IOBUF_HSTL_I_18;
    }

    public static EdifCell IOBUF_INTERMDISABLE() {
        return _IOBUF_INTERMDISABLE;
    }

    public static EdifCell IOBUF_LVCMOS12() {
        return _IOBUF_LVCMOS12;
    }

    public static EdifCell IOBUF_LVCMOS12_F_2() {
        return _IOBUF_LVCMOS12_F_2;
    }

    public static EdifCell IOBUF_LVCMOS12_F_4() {
        return _IOBUF_LVCMOS12_F_4;
    }

    public static EdifCell IOBUF_LVCMOS12_F_6() {
        return _IOBUF_LVCMOS12_F_6;
    }

    public static EdifCell IOBUF_LVCMOS12_F_8() {
        return _IOBUF_LVCMOS12_F_8;
    }

    public static EdifCell IOBUF_LVCMOS12_S_2() {
        return _IOBUF_LVCMOS12_S_2;
    }

    public static EdifCell IOBUF_LVCMOS12_S_4() {
        return _IOBUF_LVCMOS12_S_4;
    }

    public static EdifCell IOBUF_LVCMOS12_S_6() {
        return _IOBUF_LVCMOS12_S_6;
    }

    public static EdifCell IOBUF_LVCMOS12_S_8() {
        return _IOBUF_LVCMOS12_S_8;
    }

    public static EdifCell IOBUF_LVCMOS15() {
        return _IOBUF_LVCMOS15;
    }

    public static EdifCell IOBUF_LVCMOS15_F_12() {
        return _IOBUF_LVCMOS15_F_12;
    }

    public static EdifCell IOBUF_LVCMOS15_F_16() {
        return _IOBUF_LVCMOS15_F_16;
    }

    public static EdifCell IOBUF_LVCMOS15_F_2() {
        return _IOBUF_LVCMOS15_F_2;
    }

    public static EdifCell IOBUF_LVCMOS15_F_4() {
        return _IOBUF_LVCMOS15_F_4;
    }

    public static EdifCell IOBUF_LVCMOS15_F_6() {
        return _IOBUF_LVCMOS15_F_6;
    }

    public static EdifCell IOBUF_LVCMOS15_F_8() {
        return _IOBUF_LVCMOS15_F_8;
    }

    public static EdifCell IOBUF_LVCMOS15_S_12() {
        return _IOBUF_LVCMOS15_S_12;
    }

    public static EdifCell IOBUF_LVCMOS15_S_16() {
        return _IOBUF_LVCMOS15_S_16;
    }

    public static EdifCell IOBUF_LVCMOS15_S_2() {
        return _IOBUF_LVCMOS15_S_2;
    }

    public static EdifCell IOBUF_LVCMOS15_S_4() {
        return _IOBUF_LVCMOS15_S_4;
    }

    public static EdifCell IOBUF_LVCMOS15_S_6() {
        return _IOBUF_LVCMOS15_S_6;
    }

    public static EdifCell IOBUF_LVCMOS15_S_8() {
        return _IOBUF_LVCMOS15_S_8;
    }

    public static EdifCell IOBUF_LVCMOS18() {
        return _IOBUF_LVCMOS18;
    }

    public static EdifCell IOBUF_LVCMOS18_F_12() {
        return _IOBUF_LVCMOS18_F_12;
    }

    public static EdifCell IOBUF_LVCMOS18_F_16() {
        return _IOBUF_LVCMOS18_F_16;
    }

    public static EdifCell IOBUF_LVCMOS18_F_2() {
        return _IOBUF_LVCMOS18_F_2;
    }

    public static EdifCell IOBUF_LVCMOS18_F_4() {
        return _IOBUF_LVCMOS18_F_4;
    }

    public static EdifCell IOBUF_LVCMOS18_F_6() {
        return _IOBUF_LVCMOS18_F_6;
    }

    public static EdifCell IOBUF_LVCMOS18_F_8() {
        return _IOBUF_LVCMOS18_F_8;
    }

    public static EdifCell IOBUF_LVCMOS18_S_12() {
        return _IOBUF_LVCMOS18_S_12;
    }

    public static EdifCell IOBUF_LVCMOS18_S_16() {
        return _IOBUF_LVCMOS18_S_16;
    }

    public static EdifCell IOBUF_LVCMOS18_S_2() {
        return _IOBUF_LVCMOS18_S_2;
    }

    public static EdifCell IOBUF_LVCMOS18_S_4() {
        return _IOBUF_LVCMOS18_S_4;
    }

    public static EdifCell IOBUF_LVCMOS18_S_6() {
        return _IOBUF_LVCMOS18_S_6;
    }

    public static EdifCell IOBUF_LVCMOS18_S_8() {
        return _IOBUF_LVCMOS18_S_8;
    }

    public static EdifCell IOBUF_LVCMOS2() {
        return _IOBUF_LVCMOS2;
    }

    public static EdifCell IOBUF_LVCMOS25() {
        return _IOBUF_LVCMOS25;
    }

    public static EdifCell IOBUF_LVCMOS25_F_12() {
        return _IOBUF_LVCMOS25_F_12;
    }

    public static EdifCell IOBUF_LVCMOS25_F_16() {
        return _IOBUF_LVCMOS25_F_16;
    }

    public static EdifCell IOBUF_LVCMOS25_F_2() {
        return _IOBUF_LVCMOS25_F_2;
    }

    public static EdifCell IOBUF_LVCMOS25_F_24() {
        return _IOBUF_LVCMOS25_F_24;
    }

    public static EdifCell IOBUF_LVCMOS25_F_4() {
        return _IOBUF_LVCMOS25_F_4;
    }

    public static EdifCell IOBUF_LVCMOS25_F_6() {
        return _IOBUF_LVCMOS25_F_6;
    }

    public static EdifCell IOBUF_LVCMOS25_F_8() {
        return _IOBUF_LVCMOS25_F_8;
    }

    public static EdifCell IOBUF_LVCMOS25_S_12() {
        return _IOBUF_LVCMOS25_S_12;
    }

    public static EdifCell IOBUF_LVCMOS25_S_16() {
        return _IOBUF_LVCMOS25_S_16;
    }

    public static EdifCell IOBUF_LVCMOS25_S_2() {
        return _IOBUF_LVCMOS25_S_2;
    }

    public static EdifCell IOBUF_LVCMOS25_S_24() {
        return _IOBUF_LVCMOS25_S_24;
    }

    public static EdifCell IOBUF_LVCMOS25_S_4() {
        return _IOBUF_LVCMOS25_S_4;
    }

    public static EdifCell IOBUF_LVCMOS25_S_6() {
        return _IOBUF_LVCMOS25_S_6;
    }

    public static EdifCell IOBUF_LVCMOS25_S_8() {
        return _IOBUF_LVCMOS25_S_8;
    }

    public static EdifCell IOBUF_LVCMOS33() {
        return _IOBUF_LVCMOS33;
    }

    public static EdifCell IOBUF_LVCMOS33_F_12() {
        return _IOBUF_LVCMOS33_F_12;
    }

    public static EdifCell IOBUF_LVCMOS33_F_16() {
        return _IOBUF_LVCMOS33_F_16;
    }

    public static EdifCell IOBUF_LVCMOS33_F_2() {
        return _IOBUF_LVCMOS33_F_2;
    }

    public static EdifCell IOBUF_LVCMOS33_F_24() {
        return _IOBUF_LVCMOS33_F_24;
    }

    public static EdifCell IOBUF_LVCMOS33_F_4() {
        return _IOBUF_LVCMOS33_F_4;
    }

    public static EdifCell IOBUF_LVCMOS33_F_6() {
        return _IOBUF_LVCMOS33_F_6;
    }

    public static EdifCell IOBUF_LVCMOS33_F_8() {
        return _IOBUF_LVCMOS33_F_8;
    }

    public static EdifCell IOBUF_LVCMOS33_S_12() {
        return _IOBUF_LVCMOS33_S_12;
    }

    public static EdifCell IOBUF_LVCMOS33_S_16() {
        return _IOBUF_LVCMOS33_S_16;
    }

    public static EdifCell IOBUF_LVCMOS33_S_2() {
        return _IOBUF_LVCMOS33_S_2;
    }

    public static EdifCell IOBUF_LVCMOS33_S_24() {
        return _IOBUF_LVCMOS33_S_24;
    }

    public static EdifCell IOBUF_LVCMOS33_S_4() {
        return _IOBUF_LVCMOS33_S_4;
    }

    public static EdifCell IOBUF_LVCMOS33_S_6() {
        return _IOBUF_LVCMOS33_S_6;
    }

    public static EdifCell IOBUF_LVCMOS33_S_8() {
        return _IOBUF_LVCMOS33_S_8;
    }

    public static EdifCell IOBUF_LVDCI_15() {
        return _IOBUF_LVDCI_15;
    }

    public static EdifCell IOBUF_LVDCI_18() {
        return _IOBUF_LVDCI_18;
    }

    public static EdifCell IOBUF_LVDCI_25() {
        return _IOBUF_LVDCI_25;
    }

    public static EdifCell IOBUF_LVDCI_33() {
        return _IOBUF_LVDCI_33;
    }

    public static EdifCell IOBUF_LVDCI_DV2_15() {
        return _IOBUF_LVDCI_DV2_15;
    }

    public static EdifCell IOBUF_LVDCI_DV2_18() {
        return _IOBUF_LVDCI_DV2_18;
    }

    public static EdifCell IOBUF_LVDCI_DV2_25() {
        return _IOBUF_LVDCI_DV2_25;
    }

    public static EdifCell IOBUF_LVDCI_DV2_33() {
        return _IOBUF_LVDCI_DV2_33;
    }

    public static EdifCell IOBUF_LVDS() {
        return _IOBUF_LVDS;
    }

    public static EdifCell IOBUF_LVPECL() {
        return _IOBUF_LVPECL;
    }

    public static EdifCell IOBUF_LVTTL() {
        return _IOBUF_LVTTL;
    }

    public static EdifCell IOBUF_LVTTL_F_12() {
        return _IOBUF_LVTTL_F_12;
    }

    public static EdifCell IOBUF_LVTTL_F_16() {
        return _IOBUF_LVTTL_F_16;
    }

    public static EdifCell IOBUF_LVTTL_F_2() {
        return _IOBUF_LVTTL_F_2;
    }

    public static EdifCell IOBUF_LVTTL_F_24() {
        return _IOBUF_LVTTL_F_24;
    }

    public static EdifCell IOBUF_LVTTL_F_4() {
        return _IOBUF_LVTTL_F_4;
    }

    public static EdifCell IOBUF_LVTTL_F_6() {
        return _IOBUF_LVTTL_F_6;
    }

    public static EdifCell IOBUF_LVTTL_F_8() {
        return _IOBUF_LVTTL_F_8;
    }

    public static EdifCell IOBUF_LVTTL_S_12() {
        return _IOBUF_LVTTL_S_12;
    }

    public static EdifCell IOBUF_LVTTL_S_16() {
        return _IOBUF_LVTTL_S_16;
    }

    public static EdifCell IOBUF_LVTTL_S_2() {
        return _IOBUF_LVTTL_S_2;
    }

    public static EdifCell IOBUF_LVTTL_S_24() {
        return _IOBUF_LVTTL_S_24;
    }

    public static EdifCell IOBUF_LVTTL_S_4() {
        return _IOBUF_LVTTL_S_4;
    }

    public static EdifCell IOBUF_LVTTL_S_6() {
        return _IOBUF_LVTTL_S_6;
    }

    public static EdifCell IOBUF_LVTTL_S_8() {
        return _IOBUF_LVTTL_S_8;
    }

    public static EdifCell IOBUF_PCI33_3() {
        return _IOBUF_PCI33_3;
    }

    public static EdifCell IOBUF_PCI33_5() {
        return _IOBUF_PCI33_5;
    }

    public static EdifCell IOBUF_PCI66_3() {
        return _IOBUF_PCI66_3;
    }

    public static EdifCell IOBUF_PCIX() {
        return _IOBUF_PCIX;
    }

    public static EdifCell IOBUF_PCIX66_3() {
        return _IOBUF_PCIX66_3;
    }

    public static EdifCell IOBUF_SSTL18_I() {
        return _IOBUF_SSTL18_I;
    }

    public static EdifCell IOBUF_SSTL18_II() {
        return _IOBUF_SSTL18_II;
    }

    public static EdifCell IOBUF_SSTL18_II_DCI() {
        return _IOBUF_SSTL18_II_DCI;
    }

    public static EdifCell IOBUF_SSTL2_I() {
        return _IOBUF_SSTL2_I;
    }

    public static EdifCell IOBUF_SSTL2_II() {
        return _IOBUF_SSTL2_II;
    }

    public static EdifCell IOBUF_SSTL2_II_DCI() {
        return _IOBUF_SSTL2_II_DCI;
    }

    public static EdifCell IOBUF_SSTL3_I() {
        return _IOBUF_SSTL3_I;
    }

    public static EdifCell IOBUF_SSTL3_II() {
        return _IOBUF_SSTL3_II;
    }

    public static EdifCell IOBUF_SSTL3_II_DCI() {
        return _IOBUF_SSTL3_II_DCI;
    }

    public static EdifCell IOBUF_S_12() {
        return _IOBUF_S_12;
    }

    public static EdifCell IOBUF_S_16() {
        return _IOBUF_S_16;
    }

    public static EdifCell IOBUF_S_2() {
        return _IOBUF_S_2;
    }

    public static EdifCell IOBUF_S_24() {
        return _IOBUF_S_24;
    }

    public static EdifCell IOBUF_S_4() {
        return _IOBUF_S_4;
    }

    public static EdifCell IOBUF_S_6() {
        return _IOBUF_S_6;
    }

    public static EdifCell IOBUF_S_8() {
        return _IOBUF_S_8;
    }

    public static EdifCell IODELAY() {
        return _IODELAY;
    }

    public static EdifCell IODELAY2() {
        return _IODELAY2;
    }

    public static EdifCell IODELAYE1() {
        return _IODELAYE1;
    }

    public static EdifCell IODRP2() {
        return _IODRP2;
    }

    public static EdifCell IODRP2_MCB() {
        return _IODRP2_MCB;
    }

    public static EdifCell ISERDES() {
        return _ISERDES;
    }

    public static EdifCell ISERDES2() {
        return _ISERDES2;
    }

    public static EdifCell ISERDESE1() {
        return _ISERDESE1;
    }

    public static EdifCell ISERDESE2() {
        return _ISERDESE2;
    }

    public static EdifCell ISERDES_NODELAY() {
        return _ISERDES_NODELAY;
    }

    public static EdifCell JTAGPPC() {
        return _JTAGPPC;
    }

    public static EdifCell JTAGPPC440() {
        return _JTAGPPC440;
    }

    public static EdifCell JTAG_SIME2() {
        return _JTAG_SIME2;
    }

    public static EdifCell JTAG_SIM_SPARTAN3A() {
        return _JTAG_SIM_SPARTAN3A;
    }

    public static EdifCell JTAG_SIM_SPARTAN6() {
        return _JTAG_SIM_SPARTAN6;
    }

    public static EdifCell JTAG_SIM_VIRTEX4() {
        return _JTAG_SIM_VIRTEX4;
    }

    public static EdifCell JTAG_SIM_VIRTEX5() {
        return _JTAG_SIM_VIRTEX5;
    }

    public static EdifCell JTAG_SIM_VIRTEX6() {
        return _JTAG_SIM_VIRTEX6;
    }

    public static EdifCell KEEP() {
        return _KEEP;
    }

    public static EdifCell KEEPER() {
        return _KEEPER;
    }

    public static EdifCell KEY_CLEAR() {
        return _KEY_CLEAR;
    }

    public static EdifCell LD() {
        return _LD;
    }

    public static EdifCell LDC() {
        return _LDC;
    }

    public static EdifCell LDCE() {
        return _LDCE;
    }

    public static EdifCell LDCE_1() {
        return _LDCE_1;
    }

    public static EdifCell LDCP() {
        return _LDCP;
    }

    public static EdifCell LDCPE() {
        return _LDCPE;
    }

    public static EdifCell LDCPE_1() {
        return _LDCPE_1;
    }

    public static EdifCell LDCP_1() {
        return _LDCP_1;
    }

    public static EdifCell LDC_1() {
        return _LDC_1;
    }

    public static EdifCell LDE() {
        return _LDE;
    }

    public static EdifCell LDE_1() {
        return _LDE_1;
    }

    public static EdifCell LDG() {
        return _LDG;
    }

    public static EdifCell LDP() {
        return _LDP;
    }

    public static EdifCell LDPE() {
        return _LDPE;
    }

    public static EdifCell LDPE_1() {
        return _LDPE_1;
    }

    public static EdifCell LDP_1() {
        return _LDP_1;
    }

    public static EdifCell LD_1() {
        return _LD_1;
    }

    public static EdifCell LUT1() {
        return _LUT1;
    }

    public static EdifCell LUT1_D() {
        return _LUT1_D;
    }

    public static EdifCell LUT1_L() {
        return _LUT1_L;
    }

    public static EdifCell LUT2() {
        return _LUT2;
    }

    public static EdifCell LUT2_D() {
        return _LUT2_D;
    }

    public static EdifCell LUT2_L() {
        return _LUT2_L;
    }

    public static EdifCell LUT3() {
        return _LUT3;
    }

    public static EdifCell LUT3_D() {
        return _LUT3_D;
    }

    public static EdifCell LUT3_L() {
        return _LUT3_L;
    }

    public static EdifCell LUT4() {
        return _LUT4;
    }

    public static EdifCell LUT4_D() {
        return _LUT4_D;
    }

    public static EdifCell LUT4_L() {
        return _LUT4_L;
    }

    public static EdifCell LUT5() {
        return _LUT5;
    }

    public static EdifCell LUT5_D() {
        return _LUT5_D;
    }

    public static EdifCell LUT5_L() {
        return _LUT5_L;
    }

    public static EdifCell LUT6() {
        return _LUT6;
    }

    public static EdifCell LUT6_2() {
        return _LUT6_2;
    }

    public static EdifCell LUT6_D() {
        return _LUT6_D;
    }

    public static EdifCell LUT6_L() {
        return _LUT6_L;
    }

    public static EdifCell MCB() {
        return _MCB;
    }

    public static EdifCell MERGE() {
        return _MERGE;
    }

    public static EdifCell MIN_OFF() {
        return _MIN_OFF;
    }

    public static EdifCell MMCME2_ADV() {
        return _MMCME2_ADV;
    }

    public static EdifCell MMCME2_BASE() {
        return _MMCME2_BASE;
    }

    public static EdifCell MMCM_ADV() {
        return _MMCM_ADV;
    }

    public static EdifCell MMCM_BASE() {
        return _MMCM_BASE;
    }

    public static EdifCell MULT18X18() {
        return _MULT18X18;
    }

    public static EdifCell MULT18X18S() {
        return _MULT18X18S;
    }

    public static EdifCell MULT18X18SIO() {
        return _MULT18X18SIO;
    }

    public static EdifCell MULT_AND() {
        return _MULT_AND;
    }

    public static EdifCell MUXCY() {
        return _MUXCY;
    }

    public static EdifCell MUXCY_D() {
        return _MUXCY_D;
    }

    public static EdifCell MUXCY_L() {
        return _MUXCY_L;
    }

    public static EdifCell MUXF5() {
        return _MUXF5;
    }

    public static EdifCell MUXF5_D() {
        return _MUXF5_D;
    }

    public static EdifCell MUXF5_L() {
        return _MUXF5_L;
    }

    public static EdifCell MUXF6() {
        return _MUXF6;
    }

    public static EdifCell MUXF6_D() {
        return _MUXF6_D;
    }

    public static EdifCell MUXF6_L() {
        return _MUXF6_L;
    }

    public static EdifCell MUXF7() {
        return _MUXF7;
    }

    public static EdifCell MUXF7_D() {
        return _MUXF7_D;
    }

    public static EdifCell MUXF7_L() {
        return _MUXF7_L;
    }

    public static EdifCell MUXF8() {
        return _MUXF8;
    }

    public static EdifCell MUXF8_D() {
        return _MUXF8_D;
    }

    public static EdifCell MUXF8_L() {
        return _MUXF8_L;
    }

    public static EdifCell NAND2() {
        return _NAND2;
    }

    public static EdifCell NAND2B1() {
        return _NAND2B1;
    }

    public static EdifCell NAND2B2() {
        return _NAND2B2;
    }

    public static EdifCell NAND3() {
        return _NAND3;
    }

    public static EdifCell NAND3B1() {
        return _NAND3B1;
    }

    public static EdifCell NAND3B2() {
        return _NAND3B2;
    }

    public static EdifCell NAND3B3() {
        return _NAND3B3;
    }

    public static EdifCell NAND4() {
        return _NAND4;
    }

    public static EdifCell NAND4B1() {
        return _NAND4B1;
    }

    public static EdifCell NAND4B2() {
        return _NAND4B2;
    }

    public static EdifCell NAND4B3() {
        return _NAND4B3;
    }

    public static EdifCell NAND4B4() {
        return _NAND4B4;
    }

    public static EdifCell NAND5() {
        return _NAND5;
    }

    public static EdifCell NAND5B1() {
        return _NAND5B1;
    }

    public static EdifCell NAND5B2() {
        return _NAND5B2;
    }

    public static EdifCell NAND5B3() {
        return _NAND5B3;
    }

    public static EdifCell NAND5B4() {
        return _NAND5B4;
    }

    public static EdifCell NAND5B5() {
        return _NAND5B5;
    }

    public static EdifCell NOR2() {
        return _NOR2;
    }

    public static EdifCell NOR2B1() {
        return _NOR2B1;
    }

    public static EdifCell NOR2B2() {
        return _NOR2B2;
    }

    public static EdifCell NOR3() {
        return _NOR3;
    }

    public static EdifCell NOR3B1() {
        return _NOR3B1;
    }

    public static EdifCell NOR3B2() {
        return _NOR3B2;
    }

    public static EdifCell NOR3B3() {
        return _NOR3B3;
    }

    public static EdifCell NOR4() {
        return _NOR4;
    }

    public static EdifCell NOR4B1() {
        return _NOR4B1;
    }

    public static EdifCell NOR4B2() {
        return _NOR4B2;
    }

    public static EdifCell NOR4B3() {
        return _NOR4B3;
    }

    public static EdifCell NOR4B4() {
        return _NOR4B4;
    }

    public static EdifCell NOR5() {
        return _NOR5;
    }

    public static EdifCell NOR5B1() {
        return _NOR5B1;
    }

    public static EdifCell NOR5B2() {
        return _NOR5B2;
    }

    public static EdifCell NOR5B3() {
        return _NOR5B3;
    }

    public static EdifCell NOR5B4() {
        return _NOR5B4;
    }

    public static EdifCell NOR5B5() {
        return _NOR5B5;
    }

    public static EdifCell OBUF() {
        return _OBUF;
    }

    public static EdifCell OBUFDS() {
        return _OBUFDS;
    }

    public static EdifCell OBUFDS_BLVDS_25() {
        return _OBUFDS_BLVDS_25;
    }

    public static EdifCell OBUFDS_LDT_25() {
        return _OBUFDS_LDT_25;
    }

    public static EdifCell OBUFDS_LVDSEXT_25() {
        return _OBUFDS_LVDSEXT_25;
    }

    public static EdifCell OBUFDS_LVDSEXT_33() {
        return _OBUFDS_LVDSEXT_33;
    }

    public static EdifCell OBUFDS_LVDS_25() {
        return _OBUFDS_LVDS_25;
    }

    public static EdifCell OBUFDS_LVDS_33() {
        return _OBUFDS_LVDS_33;
    }

    public static EdifCell OBUFDS_LVPECL_25() {
        return _OBUFDS_LVPECL_25;
    }

    public static EdifCell OBUFDS_LVPECL_33() {
        return _OBUFDS_LVPECL_33;
    }

    public static EdifCell OBUFDS_ULVDS_25() {
        return _OBUFDS_ULVDS_25;
    }

    public static EdifCell OBUFE() {
        return _OBUFE;
    }

    public static EdifCell OBUFT() {
        return _OBUFT;
    }

    public static EdifCell OBUFTDS() {
        return _OBUFTDS;
    }

    public static EdifCell OBUFTDS_BLVDS_25() {
        return _OBUFTDS_BLVDS_25;
    }

    public static EdifCell OBUFTDS_LDT_25() {
        return _OBUFTDS_LDT_25;
    }

    public static EdifCell OBUFTDS_LVDSEXT_25() {
        return _OBUFTDS_LVDSEXT_25;
    }

    public static EdifCell OBUFTDS_LVDSEXT_33() {
        return _OBUFTDS_LVDSEXT_33;
    }

    public static EdifCell OBUFTDS_LVDS_25() {
        return _OBUFTDS_LVDS_25;
    }

    public static EdifCell OBUFTDS_LVDS_33() {
        return _OBUFTDS_LVDS_33;
    }

    public static EdifCell OBUFTDS_LVPECL_25() {
        return _OBUFTDS_LVPECL_25;
    }

    public static EdifCell OBUFTDS_LVPECL_33() {
        return _OBUFTDS_LVPECL_33;
    }

    public static EdifCell OBUFTDS_ULVDS_25() {
        return _OBUFTDS_ULVDS_25;
    }

    public static EdifCell OBUFT_AGP() {
        return _OBUFT_AGP;
    }

    public static EdifCell OBUFT_CTT() {
        return _OBUFT_CTT;
    }

    public static EdifCell OBUFT_F_12() {
        return _OBUFT_F_12;
    }

    public static EdifCell OBUFT_F_16() {
        return _OBUFT_F_16;
    }

    public static EdifCell OBUFT_F_2() {
        return _OBUFT_F_2;
    }

    public static EdifCell OBUFT_F_24() {
        return _OBUFT_F_24;
    }

    public static EdifCell OBUFT_F_4() {
        return _OBUFT_F_4;
    }

    public static EdifCell OBUFT_F_6() {
        return _OBUFT_F_6;
    }

    public static EdifCell OBUFT_F_8() {
        return _OBUFT_F_8;
    }

    public static EdifCell OBUFT_GTL() {
        return _OBUFT_GTL;
    }

    public static EdifCell OBUFT_GTLP() {
        return _OBUFT_GTLP;
    }

    public static EdifCell OBUFT_GTLP_DCI() {
        return _OBUFT_GTLP_DCI;
    }

    public static EdifCell OBUFT_GTL_DCI() {
        return _OBUFT_GTL_DCI;
    }

    public static EdifCell OBUFT_HSTL_I() {
        return _OBUFT_HSTL_I;
    }

    public static EdifCell OBUFT_HSTL_II() {
        return _OBUFT_HSTL_II;
    }

    public static EdifCell OBUFT_HSTL_III() {
        return _OBUFT_HSTL_III;
    }

    public static EdifCell OBUFT_HSTL_III_18() {
        return _OBUFT_HSTL_III_18;
    }

    public static EdifCell OBUFT_HSTL_III_DCI() {
        return _OBUFT_HSTL_III_DCI;
    }

    public static EdifCell OBUFT_HSTL_III_DCI_18() {
        return _OBUFT_HSTL_III_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_II_18() {
        return _OBUFT_HSTL_II_18;
    }

    public static EdifCell OBUFT_HSTL_II_DCI() {
        return _OBUFT_HSTL_II_DCI;
    }

    public static EdifCell OBUFT_HSTL_II_DCI_18() {
        return _OBUFT_HSTL_II_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_IV() {
        return _OBUFT_HSTL_IV;
    }

    public static EdifCell OBUFT_HSTL_IV_18() {
        return _OBUFT_HSTL_IV_18;
    }

    public static EdifCell OBUFT_HSTL_IV_DCI() {
        return _OBUFT_HSTL_IV_DCI;
    }

    public static EdifCell OBUFT_HSTL_IV_DCI_18() {
        return _OBUFT_HSTL_IV_DCI_18;
    }

    public static EdifCell OBUFT_HSTL_I_18() {
        return _OBUFT_HSTL_I_18;
    }

    public static EdifCell OBUFT_HSTL_I_DCI() {
        return _OBUFT_HSTL_I_DCI;
    }

    public static EdifCell OBUFT_HSTL_I_DCI_18() {
        return _OBUFT_HSTL_I_DCI_18;
    }

    public static EdifCell OBUFT_LVCMOS12() {
        return _OBUFT_LVCMOS12;
    }

    public static EdifCell OBUFT_LVCMOS12_F_2() {
        return _OBUFT_LVCMOS12_F_2;
    }

    public static EdifCell OBUFT_LVCMOS12_F_4() {
        return _OBUFT_LVCMOS12_F_4;
    }

    public static EdifCell OBUFT_LVCMOS12_F_6() {
        return _OBUFT_LVCMOS12_F_6;
    }

    public static EdifCell OBUFT_LVCMOS12_F_8() {
        return _OBUFT_LVCMOS12_F_8;
    }

    public static EdifCell OBUFT_LVCMOS12_S_2() {
        return _OBUFT_LVCMOS12_S_2;
    }

    public static EdifCell OBUFT_LVCMOS12_S_4() {
        return _OBUFT_LVCMOS12_S_4;
    }

    public static EdifCell OBUFT_LVCMOS12_S_6() {
        return _OBUFT_LVCMOS12_S_6;
    }

    public static EdifCell OBUFT_LVCMOS12_S_8() {
        return _OBUFT_LVCMOS12_S_8;
    }

    public static EdifCell OBUFT_LVCMOS15() {
        return _OBUFT_LVCMOS15;
    }

    public static EdifCell OBUFT_LVCMOS15_F_12() {
        return _OBUFT_LVCMOS15_F_12;
    }

    public static EdifCell OBUFT_LVCMOS15_F_16() {
        return _OBUFT_LVCMOS15_F_16;
    }

    public static EdifCell OBUFT_LVCMOS15_F_2() {
        return _OBUFT_LVCMOS15_F_2;
    }

    public static EdifCell OBUFT_LVCMOS15_F_4() {
        return _OBUFT_LVCMOS15_F_4;
    }

    public static EdifCell OBUFT_LVCMOS15_F_6() {
        return _OBUFT_LVCMOS15_F_6;
    }

    public static EdifCell OBUFT_LVCMOS15_F_8() {
        return _OBUFT_LVCMOS15_F_8;
    }

    public static EdifCell OBUFT_LVCMOS15_S_12() {
        return _OBUFT_LVCMOS15_S_12;
    }

    public static EdifCell OBUFT_LVCMOS15_S_16() {
        return _OBUFT_LVCMOS15_S_16;
    }

    public static EdifCell OBUFT_LVCMOS15_S_2() {
        return _OBUFT_LVCMOS15_S_2;
    }

    public static EdifCell OBUFT_LVCMOS15_S_4() {
        return _OBUFT_LVCMOS15_S_4;
    }

    public static EdifCell OBUFT_LVCMOS15_S_6() {
        return _OBUFT_LVCMOS15_S_6;
    }

    public static EdifCell OBUFT_LVCMOS15_S_8() {
        return _OBUFT_LVCMOS15_S_8;
    }

    public static EdifCell OBUFT_LVCMOS18() {
        return _OBUFT_LVCMOS18;
    }

    public static EdifCell OBUFT_LVCMOS18_F_12() {
        return _OBUFT_LVCMOS18_F_12;
    }

    public static EdifCell OBUFT_LVCMOS18_F_16() {
        return _OBUFT_LVCMOS18_F_16;
    }

    public static EdifCell OBUFT_LVCMOS18_F_2() {
        return _OBUFT_LVCMOS18_F_2;
    }

    public static EdifCell OBUFT_LVCMOS18_F_4() {
        return _OBUFT_LVCMOS18_F_4;
    }

    public static EdifCell OBUFT_LVCMOS18_F_6() {
        return _OBUFT_LVCMOS18_F_6;
    }

    public static EdifCell OBUFT_LVCMOS18_F_8() {
        return _OBUFT_LVCMOS18_F_8;
    }

    public static EdifCell OBUFT_LVCMOS18_S_12() {
        return _OBUFT_LVCMOS18_S_12;
    }

    public static EdifCell OBUFT_LVCMOS18_S_16() {
        return _OBUFT_LVCMOS18_S_16;
    }

    public static EdifCell OBUFT_LVCMOS18_S_2() {
        return _OBUFT_LVCMOS18_S_2;
    }

    public static EdifCell OBUFT_LVCMOS18_S_4() {
        return _OBUFT_LVCMOS18_S_4;
    }

    public static EdifCell OBUFT_LVCMOS18_S_6() {
        return _OBUFT_LVCMOS18_S_6;
    }

    public static EdifCell OBUFT_LVCMOS18_S_8() {
        return _OBUFT_LVCMOS18_S_8;
    }

    public static EdifCell OBUFT_LVCMOS2() {
        return _OBUFT_LVCMOS2;
    }

    public static EdifCell OBUFT_LVCMOS25() {
        return _OBUFT_LVCMOS25;
    }

    public static EdifCell OBUFT_LVCMOS25_F_12() {
        return _OBUFT_LVCMOS25_F_12;
    }

    public static EdifCell OBUFT_LVCMOS25_F_16() {
        return _OBUFT_LVCMOS25_F_16;
    }

    public static EdifCell OBUFT_LVCMOS25_F_2() {
        return _OBUFT_LVCMOS25_F_2;
    }

    public static EdifCell OBUFT_LVCMOS25_F_24() {
        return _OBUFT_LVCMOS25_F_24;
    }

    public static EdifCell OBUFT_LVCMOS25_F_4() {
        return _OBUFT_LVCMOS25_F_4;
    }

    public static EdifCell OBUFT_LVCMOS25_F_6() {
        return _OBUFT_LVCMOS25_F_6;
    }

    public static EdifCell OBUFT_LVCMOS25_F_8() {
        return _OBUFT_LVCMOS25_F_8;
    }

    public static EdifCell OBUFT_LVCMOS25_S_12() {
        return _OBUFT_LVCMOS25_S_12;
    }

    public static EdifCell OBUFT_LVCMOS25_S_16() {
        return _OBUFT_LVCMOS25_S_16;
    }

    public static EdifCell OBUFT_LVCMOS25_S_2() {
        return _OBUFT_LVCMOS25_S_2;
    }

    public static EdifCell OBUFT_LVCMOS25_S_24() {
        return _OBUFT_LVCMOS25_S_24;
    }

    public static EdifCell OBUFT_LVCMOS25_S_4() {
        return _OBUFT_LVCMOS25_S_4;
    }

    public static EdifCell OBUFT_LVCMOS25_S_6() {
        return _OBUFT_LVCMOS25_S_6;
    }

    public static EdifCell OBUFT_LVCMOS25_S_8() {
        return _OBUFT_LVCMOS25_S_8;
    }

    public static EdifCell OBUFT_LVCMOS33() {
        return _OBUFT_LVCMOS33;
    }

    public static EdifCell OBUFT_LVCMOS33_F_12() {
        return _OBUFT_LVCMOS33_F_12;
    }

    public static EdifCell OBUFT_LVCMOS33_F_16() {
        return _OBUFT_LVCMOS33_F_16;
    }

    public static EdifCell OBUFT_LVCMOS33_F_2() {
        return _OBUFT_LVCMOS33_F_2;
    }

    public static EdifCell OBUFT_LVCMOS33_F_24() {
        return _OBUFT_LVCMOS33_F_24;
    }

    public static EdifCell OBUFT_LVCMOS33_F_4() {
        return _OBUFT_LVCMOS33_F_4;
    }

    public static EdifCell OBUFT_LVCMOS33_F_6() {
        return _OBUFT_LVCMOS33_F_6;
    }

    public static EdifCell OBUFT_LVCMOS33_F_8() {
        return _OBUFT_LVCMOS33_F_8;
    }

    public static EdifCell OBUFT_LVCMOS33_S_12() {
        return _OBUFT_LVCMOS33_S_12;
    }

    public static EdifCell OBUFT_LVCMOS33_S_16() {
        return _OBUFT_LVCMOS33_S_16;
    }

    public static EdifCell OBUFT_LVCMOS33_S_2() {
        return _OBUFT_LVCMOS33_S_2;
    }

    public static EdifCell OBUFT_LVCMOS33_S_24() {
        return _OBUFT_LVCMOS33_S_24;
    }

    public static EdifCell OBUFT_LVCMOS33_S_4() {
        return _OBUFT_LVCMOS33_S_4;
    }

    public static EdifCell OBUFT_LVCMOS33_S_6() {
        return _OBUFT_LVCMOS33_S_6;
    }

    public static EdifCell OBUFT_LVCMOS33_S_8() {
        return _OBUFT_LVCMOS33_S_8;
    }

    public static EdifCell OBUFT_LVDCI_15() {
        return _OBUFT_LVDCI_15;
    }

    public static EdifCell OBUFT_LVDCI_18() {
        return _OBUFT_LVDCI_18;
    }

    public static EdifCell OBUFT_LVDCI_25() {
        return _OBUFT_LVDCI_25;
    }

    public static EdifCell OBUFT_LVDCI_33() {
        return _OBUFT_LVDCI_33;
    }

    public static EdifCell OBUFT_LVDCI_DV2_15() {
        return _OBUFT_LVDCI_DV2_15;
    }

    public static EdifCell OBUFT_LVDCI_DV2_18() {
        return _OBUFT_LVDCI_DV2_18;
    }

    public static EdifCell OBUFT_LVDCI_DV2_25() {
        return _OBUFT_LVDCI_DV2_25;
    }

    public static EdifCell OBUFT_LVDCI_DV2_33() {
        return _OBUFT_LVDCI_DV2_33;
    }

    public static EdifCell OBUFT_LVDS() {
        return _OBUFT_LVDS;
    }

    public static EdifCell OBUFT_LVPECL() {
        return _OBUFT_LVPECL;
    }

    public static EdifCell OBUFT_LVTTL() {
        return _OBUFT_LVTTL;
    }

    public static EdifCell OBUFT_LVTTL_F_12() {
        return _OBUFT_LVTTL_F_12;
    }

    public static EdifCell OBUFT_LVTTL_F_16() {
        return _OBUFT_LVTTL_F_16;
    }

    public static EdifCell OBUFT_LVTTL_F_2() {
        return _OBUFT_LVTTL_F_2;
    }

    public static EdifCell OBUFT_LVTTL_F_24() {
        return _OBUFT_LVTTL_F_24;
    }

    public static EdifCell OBUFT_LVTTL_F_4() {
        return _OBUFT_LVTTL_F_4;
    }

    public static EdifCell OBUFT_LVTTL_F_6() {
        return _OBUFT_LVTTL_F_6;
    }

    public static EdifCell OBUFT_LVTTL_F_8() {
        return _OBUFT_LVTTL_F_8;
    }

    public static EdifCell OBUFT_LVTTL_S_12() {
        return _OBUFT_LVTTL_S_12;
    }

    public static EdifCell OBUFT_LVTTL_S_16() {
        return _OBUFT_LVTTL_S_16;
    }

    public static EdifCell OBUFT_LVTTL_S_2() {
        return _OBUFT_LVTTL_S_2;
    }

    public static EdifCell OBUFT_LVTTL_S_24() {
        return _OBUFT_LVTTL_S_24;
    }

    public static EdifCell OBUFT_LVTTL_S_4() {
        return _OBUFT_LVTTL_S_4;
    }

    public static EdifCell OBUFT_LVTTL_S_6() {
        return _OBUFT_LVTTL_S_6;
    }

    public static EdifCell OBUFT_LVTTL_S_8() {
        return _OBUFT_LVTTL_S_8;
    }

    public static EdifCell OBUFT_PCI33_3() {
        return _OBUFT_PCI33_3;
    }

    public static EdifCell OBUFT_PCI33_5() {
        return _OBUFT_PCI33_5;
    }

    public static EdifCell OBUFT_PCI66_3() {
        return _OBUFT_PCI66_3;
    }

    public static EdifCell OBUFT_PCIX() {
        return _OBUFT_PCIX;
    }

    public static EdifCell OBUFT_PCIX66_3() {
        return _OBUFT_PCIX66_3;
    }

    public static EdifCell OBUFT_SSTL18_I() {
        return _OBUFT_SSTL18_I;
    }

    public static EdifCell OBUFT_SSTL18_II() {
        return _OBUFT_SSTL18_II;
    }

    public static EdifCell OBUFT_SSTL18_II_DCI() {
        return _OBUFT_SSTL18_II_DCI;
    }

    public static EdifCell OBUFT_SSTL18_I_DCI() {
        return _OBUFT_SSTL18_I_DCI;
    }

    public static EdifCell OBUFT_SSTL2_I() {
        return _OBUFT_SSTL2_I;
    }

    public static EdifCell OBUFT_SSTL2_II() {
        return _OBUFT_SSTL2_II;
    }

    public static EdifCell OBUFT_SSTL2_II_DCI() {
        return _OBUFT_SSTL2_II_DCI;
    }

    public static EdifCell OBUFT_SSTL2_I_DCI() {
        return _OBUFT_SSTL2_I_DCI;
    }

    public static EdifCell OBUFT_SSTL3_I() {
        return _OBUFT_SSTL3_I;
    }

    public static EdifCell OBUFT_SSTL3_II() {
        return _OBUFT_SSTL3_II;
    }

    public static EdifCell OBUFT_SSTL3_II_DCI() {
        return _OBUFT_SSTL3_II_DCI;
    }

    public static EdifCell OBUFT_SSTL3_I_DCI() {
        return _OBUFT_SSTL3_I_DCI;
    }

    public static EdifCell OBUFT_S_12() {
        return _OBUFT_S_12;
    }

    public static EdifCell OBUFT_S_16() {
        return _OBUFT_S_16;
    }

    public static EdifCell OBUFT_S_2() {
        return _OBUFT_S_2;
    }

    public static EdifCell OBUFT_S_24() {
        return _OBUFT_S_24;
    }

    public static EdifCell OBUFT_S_4() {
        return _OBUFT_S_4;
    }

    public static EdifCell OBUFT_S_6() {
        return _OBUFT_S_6;
    }

    public static EdifCell OBUFT_S_8() {
        return _OBUFT_S_8;
    }

    public static EdifCell OBUF_AGP() {
        return _OBUF_AGP;
    }

    public static EdifCell OBUF_CTT() {
        return _OBUF_CTT;
    }

    public static EdifCell OBUF_F_12() {
        return _OBUF_F_12;
    }

    public static EdifCell OBUF_F_16() {
        return _OBUF_F_16;
    }

    public static EdifCell OBUF_F_2() {
        return _OBUF_F_2;
    }

    public static EdifCell OBUF_F_24() {
        return _OBUF_F_24;
    }

    public static EdifCell OBUF_F_4() {
        return _OBUF_F_4;
    }

    public static EdifCell OBUF_F_6() {
        return _OBUF_F_6;
    }

    public static EdifCell OBUF_F_8() {
        return _OBUF_F_8;
    }

    public static EdifCell OBUF_GTL() {
        return _OBUF_GTL;
    }

    public static EdifCell OBUF_GTLP() {
        return _OBUF_GTLP;
    }

    public static EdifCell OBUF_GTLP_DCI() {
        return _OBUF_GTLP_DCI;
    }

    public static EdifCell OBUF_GTL_DCI() {
        return _OBUF_GTL_DCI;
    }

    public static EdifCell OBUF_HSTL_I() {
        return _OBUF_HSTL_I;
    }

    public static EdifCell OBUF_HSTL_II() {
        return _OBUF_HSTL_II;
    }

    public static EdifCell OBUF_HSTL_III() {
        return _OBUF_HSTL_III;
    }

    public static EdifCell OBUF_HSTL_III_18() {
        return _OBUF_HSTL_III_18;
    }

    public static EdifCell OBUF_HSTL_III_DCI() {
        return _OBUF_HSTL_III_DCI;
    }

    public static EdifCell OBUF_HSTL_III_DCI_18() {
        return _OBUF_HSTL_III_DCI_18;
    }

    public static EdifCell OBUF_HSTL_II_18() {
        return _OBUF_HSTL_II_18;
    }

    public static EdifCell OBUF_HSTL_II_DCI() {
        return _OBUF_HSTL_II_DCI;
    }

    public static EdifCell OBUF_HSTL_II_DCI_18() {
        return _OBUF_HSTL_II_DCI_18;
    }

    public static EdifCell OBUF_HSTL_IV() {
        return _OBUF_HSTL_IV;
    }

    public static EdifCell OBUF_HSTL_IV_18() {
        return _OBUF_HSTL_IV_18;
    }

    public static EdifCell OBUF_HSTL_IV_DCI() {
        return _OBUF_HSTL_IV_DCI;
    }

    public static EdifCell OBUF_HSTL_IV_DCI_18() {
        return _OBUF_HSTL_IV_DCI_18;
    }

    public static EdifCell OBUF_HSTL_I_18() {
        return _OBUF_HSTL_I_18;
    }

    public static EdifCell OBUF_HSTL_I_DCI() {
        return _OBUF_HSTL_I_DCI;
    }

    public static EdifCell OBUF_HSTL_I_DCI_18() {
        return _OBUF_HSTL_I_DCI_18;
    }

    public static EdifCell OBUF_LVCMOS12() {
        return _OBUF_LVCMOS12;
    }

    public static EdifCell OBUF_LVCMOS12_F_2() {
        return _OBUF_LVCMOS12_F_2;
    }

    public static EdifCell OBUF_LVCMOS12_F_4() {
        return _OBUF_LVCMOS12_F_4;
    }

    public static EdifCell OBUF_LVCMOS12_F_6() {
        return _OBUF_LVCMOS12_F_6;
    }

    public static EdifCell OBUF_LVCMOS12_F_8() {
        return _OBUF_LVCMOS12_F_8;
    }

    public static EdifCell OBUF_LVCMOS12_S_2() {
        return _OBUF_LVCMOS12_S_2;
    }

    public static EdifCell OBUF_LVCMOS12_S_4() {
        return _OBUF_LVCMOS12_S_4;
    }

    public static EdifCell OBUF_LVCMOS12_S_6() {
        return _OBUF_LVCMOS12_S_6;
    }

    public static EdifCell OBUF_LVCMOS12_S_8() {
        return _OBUF_LVCMOS12_S_8;
    }

    public static EdifCell OBUF_LVCMOS15() {
        return _OBUF_LVCMOS15;
    }

    public static EdifCell OBUF_LVCMOS15_F_12() {
        return _OBUF_LVCMOS15_F_12;
    }

    public static EdifCell OBUF_LVCMOS15_F_16() {
        return _OBUF_LVCMOS15_F_16;
    }

    public static EdifCell OBUF_LVCMOS15_F_2() {
        return _OBUF_LVCMOS15_F_2;
    }

    public static EdifCell OBUF_LVCMOS15_F_4() {
        return _OBUF_LVCMOS15_F_4;
    }

    public static EdifCell OBUF_LVCMOS15_F_6() {
        return _OBUF_LVCMOS15_F_6;
    }

    public static EdifCell OBUF_LVCMOS15_F_8() {
        return _OBUF_LVCMOS15_F_8;
    }

    public static EdifCell OBUF_LVCMOS15_S_12() {
        return _OBUF_LVCMOS15_S_12;
    }

    public static EdifCell OBUF_LVCMOS15_S_16() {
        return _OBUF_LVCMOS15_S_16;
    }

    public static EdifCell OBUF_LVCMOS15_S_2() {
        return _OBUF_LVCMOS15_S_2;
    }

    public static EdifCell OBUF_LVCMOS15_S_4() {
        return _OBUF_LVCMOS15_S_4;
    }

    public static EdifCell OBUF_LVCMOS15_S_6() {
        return _OBUF_LVCMOS15_S_6;
    }

    public static EdifCell OBUF_LVCMOS15_S_8() {
        return _OBUF_LVCMOS15_S_8;
    }

    public static EdifCell OBUF_LVCMOS18() {
        return _OBUF_LVCMOS18;
    }

    public static EdifCell OBUF_LVCMOS18_F_12() {
        return _OBUF_LVCMOS18_F_12;
    }

    public static EdifCell OBUF_LVCMOS18_F_16() {
        return _OBUF_LVCMOS18_F_16;
    }

    public static EdifCell OBUF_LVCMOS18_F_2() {
        return _OBUF_LVCMOS18_F_2;
    }

    public static EdifCell OBUF_LVCMOS18_F_4() {
        return _OBUF_LVCMOS18_F_4;
    }

    public static EdifCell OBUF_LVCMOS18_F_6() {
        return _OBUF_LVCMOS18_F_6;
    }

    public static EdifCell OBUF_LVCMOS18_F_8() {
        return _OBUF_LVCMOS18_F_8;
    }

    public static EdifCell OBUF_LVCMOS18_S_12() {
        return _OBUF_LVCMOS18_S_12;
    }

    public static EdifCell OBUF_LVCMOS18_S_16() {
        return _OBUF_LVCMOS18_S_16;
    }

    public static EdifCell OBUF_LVCMOS18_S_2() {
        return _OBUF_LVCMOS18_S_2;
    }

    public static EdifCell OBUF_LVCMOS18_S_4() {
        return _OBUF_LVCMOS18_S_4;
    }

    public static EdifCell OBUF_LVCMOS18_S_6() {
        return _OBUF_LVCMOS18_S_6;
    }

    public static EdifCell OBUF_LVCMOS18_S_8() {
        return _OBUF_LVCMOS18_S_8;
    }

    public static EdifCell OBUF_LVCMOS2() {
        return _OBUF_LVCMOS2;
    }

    public static EdifCell OBUF_LVCMOS25() {
        return _OBUF_LVCMOS25;
    }

    public static EdifCell OBUF_LVCMOS25_F_12() {
        return _OBUF_LVCMOS25_F_12;
    }

    public static EdifCell OBUF_LVCMOS25_F_16() {
        return _OBUF_LVCMOS25_F_16;
    }

    public static EdifCell OBUF_LVCMOS25_F_2() {
        return _OBUF_LVCMOS25_F_2;
    }

    public static EdifCell OBUF_LVCMOS25_F_24() {
        return _OBUF_LVCMOS25_F_24;
    }

    public static EdifCell OBUF_LVCMOS25_F_4() {
        return _OBUF_LVCMOS25_F_4;
    }

    public static EdifCell OBUF_LVCMOS25_F_6() {
        return _OBUF_LVCMOS25_F_6;
    }

    public static EdifCell OBUF_LVCMOS25_F_8() {
        return _OBUF_LVCMOS25_F_8;
    }

    public static EdifCell OBUF_LVCMOS25_S_12() {
        return _OBUF_LVCMOS25_S_12;
    }

    public static EdifCell OBUF_LVCMOS25_S_16() {
        return _OBUF_LVCMOS25_S_16;
    }

    public static EdifCell OBUF_LVCMOS25_S_2() {
        return _OBUF_LVCMOS25_S_2;
    }

    public static EdifCell OBUF_LVCMOS25_S_24() {
        return _OBUF_LVCMOS25_S_24;
    }

    public static EdifCell OBUF_LVCMOS25_S_4() {
        return _OBUF_LVCMOS25_S_4;
    }

    public static EdifCell OBUF_LVCMOS25_S_6() {
        return _OBUF_LVCMOS25_S_6;
    }

    public static EdifCell OBUF_LVCMOS25_S_8() {
        return _OBUF_LVCMOS25_S_8;
    }

    public static EdifCell OBUF_LVCMOS33() {
        return _OBUF_LVCMOS33;
    }

    public static EdifCell OBUF_LVCMOS33_F_12() {
        return _OBUF_LVCMOS33_F_12;
    }

    public static EdifCell OBUF_LVCMOS33_F_16() {
        return _OBUF_LVCMOS33_F_16;
    }

    public static EdifCell OBUF_LVCMOS33_F_2() {
        return _OBUF_LVCMOS33_F_2;
    }

    public static EdifCell OBUF_LVCMOS33_F_24() {
        return _OBUF_LVCMOS33_F_24;
    }

    public static EdifCell OBUF_LVCMOS33_F_4() {
        return _OBUF_LVCMOS33_F_4;
    }

    public static EdifCell OBUF_LVCMOS33_F_6() {
        return _OBUF_LVCMOS33_F_6;
    }

    public static EdifCell OBUF_LVCMOS33_F_8() {
        return _OBUF_LVCMOS33_F_8;
    }

    public static EdifCell OBUF_LVCMOS33_S_12() {
        return _OBUF_LVCMOS33_S_12;
    }

    public static EdifCell OBUF_LVCMOS33_S_16() {
        return _OBUF_LVCMOS33_S_16;
    }

    public static EdifCell OBUF_LVCMOS33_S_2() {
        return _OBUF_LVCMOS33_S_2;
    }

    public static EdifCell OBUF_LVCMOS33_S_24() {
        return _OBUF_LVCMOS33_S_24;
    }

    public static EdifCell OBUF_LVCMOS33_S_4() {
        return _OBUF_LVCMOS33_S_4;
    }

    public static EdifCell OBUF_LVCMOS33_S_6() {
        return _OBUF_LVCMOS33_S_6;
    }

    public static EdifCell OBUF_LVCMOS33_S_8() {
        return _OBUF_LVCMOS33_S_8;
    }

    public static EdifCell OBUF_LVDCI_15() {
        return _OBUF_LVDCI_15;
    }

    public static EdifCell OBUF_LVDCI_18() {
        return _OBUF_LVDCI_18;
    }

    public static EdifCell OBUF_LVDCI_25() {
        return _OBUF_LVDCI_25;
    }

    public static EdifCell OBUF_LVDCI_33() {
        return _OBUF_LVDCI_33;
    }

    public static EdifCell OBUF_LVDCI_DV2_15() {
        return _OBUF_LVDCI_DV2_15;
    }

    public static EdifCell OBUF_LVDCI_DV2_18() {
        return _OBUF_LVDCI_DV2_18;
    }

    public static EdifCell OBUF_LVDCI_DV2_25() {
        return _OBUF_LVDCI_DV2_25;
    }

    public static EdifCell OBUF_LVDCI_DV2_33() {
        return _OBUF_LVDCI_DV2_33;
    }

    public static EdifCell OBUF_LVDS() {
        return _OBUF_LVDS;
    }

    public static EdifCell OBUF_LVPECL() {
        return _OBUF_LVPECL;
    }

    public static EdifCell OBUF_LVTTL() {
        return _OBUF_LVTTL;
    }

    public static EdifCell OBUF_LVTTL_F_12() {
        return _OBUF_LVTTL_F_12;
    }

    public static EdifCell OBUF_LVTTL_F_16() {
        return _OBUF_LVTTL_F_16;
    }

    public static EdifCell OBUF_LVTTL_F_2() {
        return _OBUF_LVTTL_F_2;
    }

    public static EdifCell OBUF_LVTTL_F_24() {
        return _OBUF_LVTTL_F_24;
    }

    public static EdifCell OBUF_LVTTL_F_4() {
        return _OBUF_LVTTL_F_4;
    }

    public static EdifCell OBUF_LVTTL_F_6() {
        return _OBUF_LVTTL_F_6;
    }

    public static EdifCell OBUF_LVTTL_F_8() {
        return _OBUF_LVTTL_F_8;
    }

    public static EdifCell OBUF_LVTTL_S_12() {
        return _OBUF_LVTTL_S_12;
    }

    public static EdifCell OBUF_LVTTL_S_16() {
        return _OBUF_LVTTL_S_16;
    }

    public static EdifCell OBUF_LVTTL_S_2() {
        return _OBUF_LVTTL_S_2;
    }

    public static EdifCell OBUF_LVTTL_S_24() {
        return _OBUF_LVTTL_S_24;
    }

    public static EdifCell OBUF_LVTTL_S_4() {
        return _OBUF_LVTTL_S_4;
    }

    public static EdifCell OBUF_LVTTL_S_6() {
        return _OBUF_LVTTL_S_6;
    }

    public static EdifCell OBUF_LVTTL_S_8() {
        return _OBUF_LVTTL_S_8;
    }

    public static EdifCell OBUF_PCI33_3() {
        return _OBUF_PCI33_3;
    }

    public static EdifCell OBUF_PCI33_5() {
        return _OBUF_PCI33_5;
    }

    public static EdifCell OBUF_PCI66_3() {
        return _OBUF_PCI66_3;
    }

    public static EdifCell OBUF_PCIX() {
        return _OBUF_PCIX;
    }

    public static EdifCell OBUF_PCIX66_3() {
        return _OBUF_PCIX66_3;
    }

    public static EdifCell OBUF_SSTL18_I() {
        return _OBUF_SSTL18_I;
    }

    public static EdifCell OBUF_SSTL18_II() {
        return _OBUF_SSTL18_II;
    }

    public static EdifCell OBUF_SSTL18_II_DCI() {
        return _OBUF_SSTL18_II_DCI;
    }

    public static EdifCell OBUF_SSTL18_I_DCI() {
        return _OBUF_SSTL18_I_DCI;
    }

    public static EdifCell OBUF_SSTL2_I() {
        return _OBUF_SSTL2_I;
    }

    public static EdifCell OBUF_SSTL2_II() {
        return _OBUF_SSTL2_II;
    }

    public static EdifCell OBUF_SSTL2_II_DCI() {
        return _OBUF_SSTL2_II_DCI;
    }

    public static EdifCell OBUF_SSTL2_I_DCI() {
        return _OBUF_SSTL2_I_DCI;
    }

    public static EdifCell OBUF_SSTL3_I() {
        return _OBUF_SSTL3_I;
    }

    public static EdifCell OBUF_SSTL3_II() {
        return _OBUF_SSTL3_II;
    }

    public static EdifCell OBUF_SSTL3_II_DCI() {
        return _OBUF_SSTL3_II_DCI;
    }

    public static EdifCell OBUF_SSTL3_I_DCI() {
        return _OBUF_SSTL3_I_DCI;
    }

    public static EdifCell OBUF_S_12() {
        return _OBUF_S_12;
    }

    public static EdifCell OBUF_S_16() {
        return _OBUF_S_16;
    }

    public static EdifCell OBUF_S_2() {
        return _OBUF_S_2;
    }

    public static EdifCell OBUF_S_24() {
        return _OBUF_S_24;
    }

    public static EdifCell OBUF_S_4() {
        return _OBUF_S_4;
    }

    public static EdifCell OBUF_S_6() {
        return _OBUF_S_6;
    }

    public static EdifCell OBUF_S_8() {
        return _OBUF_S_8;
    }

    public static EdifCell ODDR() {
        return _ODDR;
    }

    public static EdifCell ODDR2() {
        return _ODDR2;
    }

    public static EdifCell ODELAYE2() {
        return _ODELAYE2;
    }

    public static EdifCell ODELAYE2_FINEDELAY() {
        return _ODELAYE2_FINEDELAY;
    }

    public static EdifCell OFDDRCPE() {
        return _OFDDRCPE;
    }

    public static EdifCell OFDDRRSE() {
        return _OFDDRRSE;
    }

    public static EdifCell OFDDRTCPE() {
        return _OFDDRTCPE;
    }

    public static EdifCell OFDDRTRSE() {
        return _OFDDRTRSE;
    }

    public static EdifCell OPT_OFF() {
        return _OPT_OFF;
    }

    public static EdifCell OPT_UIM() {
        return _OPT_UIM;
    }

    public static EdifCell OR2() {
        return _OR2;
    }

    public static EdifCell OR2B1() {
        return _OR2B1;
    }

    public static EdifCell OR2B2() {
        return _OR2B2;
    }

    public static EdifCell OR2L() {
        return _OR2L;
    }

    public static EdifCell OR3() {
        return _OR3;
    }

    public static EdifCell OR3B1() {
        return _OR3B1;
    }

    public static EdifCell OR3B2() {
        return _OR3B2;
    }

    public static EdifCell OR3B3() {
        return _OR3B3;
    }

    public static EdifCell OR4() {
        return _OR4;
    }

    public static EdifCell OR4B1() {
        return _OR4B1;
    }

    public static EdifCell OR4B2() {
        return _OR4B2;
    }

    public static EdifCell OR4B3() {
        return _OR4B3;
    }

    public static EdifCell OR4B4() {
        return _OR4B4;
    }

    public static EdifCell OR5() {
        return _OR5;
    }

    public static EdifCell OR5B1() {
        return _OR5B1;
    }

    public static EdifCell OR5B2() {
        return _OR5B2;
    }

    public static EdifCell OR5B3() {
        return _OR5B3;
    }

    public static EdifCell OR5B4() {
        return _OR5B4;
    }

    public static EdifCell OR5B5() {
        return _OR5B5;
    }

    public static EdifCell OR6() {
        return _OR6;
    }

    public static EdifCell OR7() {
        return _OR7;
    }

    public static EdifCell OR8() {
        return _OR8;
    }

    public static EdifCell ORCY() {
        return _ORCY;
    }

    public static EdifCell OSERDES() {
        return _OSERDES;
    }

    public static EdifCell OSERDES2() {
        return _OSERDES2;
    }

    public static EdifCell OSERDESE1() {
        return _OSERDESE1;
    }

    public static EdifCell OSERDESE2() {
        return _OSERDESE2;
    }

    public static EdifCell OUT_FIFO() {
        return _OUT_FIFO;
    }

    public static EdifCell PCIE_2_0() {
        return _PCIE_2_0;
    }

    public static EdifCell PCIE_2_1() {
        return _PCIE_2_1;
    }

    public static EdifCell PCIE_3_0() {
        return _PCIE_3_0;
    }

    public static EdifCell PCIE_A1() {
        return _PCIE_A1;
    }

    public static EdifCell PCIE_EP() {
        return _PCIE_EP;
    }

    public static EdifCell PCIE_INTERNAL_1_1() {
        return _PCIE_INTERNAL_1_1;
    }

    public static EdifCell PHASER_IN() {
        return _PHASER_IN;
    }

    public static EdifCell PHASER_IN_PHY() {
        return _PHASER_IN_PHY;
    }

    public static EdifCell PHASER_OUT() {
        return _PHASER_OUT;
    }

    public static EdifCell PHASER_OUT_PHY() {
        return _PHASER_OUT_PHY;
    }

    public static EdifCell PHASER_REF() {
        return _PHASER_REF;
    }

    public static EdifCell PHY_CONTROL() {
        return _PHY_CONTROL;
    }

    public static EdifCell PLLE2_ADV() {
        return _PLLE2_ADV;
    }

    public static EdifCell PLLE2_BASE() {
        return _PLLE2_BASE;
    }

    public static EdifCell PLL_ADV() {
        return _PLL_ADV;
    }

    public static EdifCell PLL_BASE() {
        return _PLL_BASE;
    }

    public static EdifCell PMCD() {
        return _PMCD;
    }

    public static EdifCell POST_CRC_INTERNAL() {
        return _POST_CRC_INTERNAL;
    }

    public static EdifCell PPC405_ADV() {
        return _PPC405_ADV;
    }

    public static EdifCell PPC440() {
        return _PPC440;
    }

    public static EdifCell PS7() {
        return _PS7;
    }

    public static EdifCell PULLDOWN() {
        return _PULLDOWN;
    }

    public static EdifCell PULLUP() {
        return _PULLUP;
    }

    public static EdifCell RAM128X1D() {
        return _RAM128X1D;
    }

    public static EdifCell RAM128X1S() {
        return _RAM128X1S;
    }

    public static EdifCell RAM128X1S_1() {
        return _RAM128X1S_1;
    }

    public static EdifCell RAM16X1D() {
        return _RAM16X1D;
    }

    public static EdifCell RAM16X1D_1() {
        return _RAM16X1D_1;
    }

    public static EdifCell RAM16X1S() {
        return _RAM16X1S;
    }

    public static EdifCell RAM16X1S_1() {
        return _RAM16X1S_1;
    }

    public static EdifCell RAM16X2S() {
        return _RAM16X2S;
    }

    public static EdifCell RAM16X4S() {
        return _RAM16X4S;
    }

    public static EdifCell RAM16X8S() {
        return _RAM16X8S;
    }

    public static EdifCell RAM256X1S() {
        return _RAM256X1S;
    }

    public static EdifCell RAM32M() {
        return _RAM32M;
    }

    public static EdifCell RAM32X1D() {
        return _RAM32X1D;
    }

    public static EdifCell RAM32X1D_1() {
        return _RAM32X1D_1;
    }

    public static EdifCell RAM32X1S() {
        return _RAM32X1S;
    }

    public static EdifCell RAM32X1S_1() {
        return _RAM32X1S_1;
    }

    public static EdifCell RAM32X2S() {
        return _RAM32X2S;
    }

    public static EdifCell RAM32X4S() {
        return _RAM32X4S;
    }

    public static EdifCell RAM32X8S() {
        return _RAM32X8S;
    }

    public static EdifCell RAM64M() {
        return _RAM64M;
    }

    public static EdifCell RAM64X1D() {
        return _RAM64X1D;
    }

    public static EdifCell RAM64X1D_1() {
        return _RAM64X1D_1;
    }

    public static EdifCell RAM64X1S() {
        return _RAM64X1S;
    }

    public static EdifCell RAM64X1S_1() {
        return _RAM64X1S_1;
    }

    public static EdifCell RAM64X2S() {
        return _RAM64X2S;
    }

    public static EdifCell RAMB16() {
        return _RAMB16;
    }

    public static EdifCell RAMB16BWE() {
        return _RAMB16BWE;
    }

    public static EdifCell RAMB16BWER() {
        return _RAMB16BWER;
    }

    public static EdifCell RAMB16BWE_S18() {
        return _RAMB16BWE_S18;
    }

    public static EdifCell RAMB16BWE_S18_S18() {
        return _RAMB16BWE_S18_S18;
    }

    public static EdifCell RAMB16BWE_S18_S9() {
        return _RAMB16BWE_S18_S9;
    }

    public static EdifCell RAMB16BWE_S36() {
        return _RAMB16BWE_S36;
    }

    public static EdifCell RAMB16BWE_S36_S18() {
        return _RAMB16BWE_S36_S18;
    }

    public static EdifCell RAMB16BWE_S36_S36() {
        return _RAMB16BWE_S36_S36;
    }

    public static EdifCell RAMB16BWE_S36_S9() {
        return _RAMB16BWE_S36_S9;
    }

    public static EdifCell RAMB16_S1() {
        return _RAMB16_S1;
    }

    public static EdifCell RAMB16_S18() {
        return _RAMB16_S18;
    }

    public static EdifCell RAMB16_S18_S18() {
        return _RAMB16_S18_S18;
    }

    public static EdifCell RAMB16_S18_S36() {
        return _RAMB16_S18_S36;
    }

    public static EdifCell RAMB16_S1_S1() {
        return _RAMB16_S1_S1;
    }

    public static EdifCell RAMB16_S1_S18() {
        return _RAMB16_S1_S18;
    }

    public static EdifCell RAMB16_S1_S2() {
        return _RAMB16_S1_S2;
    }

    public static EdifCell RAMB16_S1_S36() {
        return _RAMB16_S1_S36;
    }

    public static EdifCell RAMB16_S1_S4() {
        return _RAMB16_S1_S4;
    }

    public static EdifCell RAMB16_S1_S9() {
        return _RAMB16_S1_S9;
    }

    public static EdifCell RAMB16_S2() {
        return _RAMB16_S2;
    }

    public static EdifCell RAMB16_S2_S18() {
        return _RAMB16_S2_S18;
    }

    public static EdifCell RAMB16_S2_S2() {
        return _RAMB16_S2_S2;
    }

    public static EdifCell RAMB16_S2_S36() {
        return _RAMB16_S2_S36;
    }

    public static EdifCell RAMB16_S2_S4() {
        return _RAMB16_S2_S4;
    }

    public static EdifCell RAMB16_S2_S9() {
        return _RAMB16_S2_S9;
    }

    public static EdifCell RAMB16_S36() {
        return _RAMB16_S36;
    }

    public static EdifCell RAMB16_S36_S36() {
        return _RAMB16_S36_S36;
    }

    public static EdifCell RAMB16_S4() {
        return _RAMB16_S4;
    }

    public static EdifCell RAMB16_S4_S18() {
        return _RAMB16_S4_S18;
    }

    public static EdifCell RAMB16_S4_S36() {
        return _RAMB16_S4_S36;
    }

    public static EdifCell RAMB16_S4_S4() {
        return _RAMB16_S4_S4;
    }

    public static EdifCell RAMB16_S4_S9() {
        return _RAMB16_S4_S9;
    }

    public static EdifCell RAMB16_S9() {
        return _RAMB16_S9;
    }

    public static EdifCell RAMB16_S9_S18() {
        return _RAMB16_S9_S18;
    }

    public static EdifCell RAMB16_S9_S36() {
        return _RAMB16_S9_S36;
    }

    public static EdifCell RAMB16_S9_S9() {
        return _RAMB16_S9_S9;
    }

    public static EdifCell RAMB18() {
        return _RAMB18;
    }

    public static EdifCell RAMB18E1() {
        return _RAMB18E1;
    }

    public static EdifCell RAMB18SDP() {
        return _RAMB18SDP;
    }

    public static EdifCell RAMB32_S64_ECC() {
        return _RAMB32_S64_ECC;
    }

    public static EdifCell RAMB36() {
        return _RAMB36;
    }

    public static EdifCell RAMB36E1() {
        return _RAMB36E1;
    }

    public static EdifCell RAMB36SDP() {
        return _RAMB36SDP;
    }

    public static EdifCell RAMB36SDP_EXP() {
        return _RAMB36SDP_EXP;
    }

    public static EdifCell RAMB36_EXP() {
        return _RAMB36_EXP;
    }

    public static EdifCell RAMB4_S1() {
        return _RAMB4_S1;
    }

    public static EdifCell RAMB4_S16() {
        return _RAMB4_S16;
    }

    public static EdifCell RAMB4_S16_S16() {
        return _RAMB4_S16_S16;
    }

    public static EdifCell RAMB4_S1_S1() {
        return _RAMB4_S1_S1;
    }

    public static EdifCell RAMB4_S1_S16() {
        return _RAMB4_S1_S16;
    }

    public static EdifCell RAMB4_S1_S2() {
        return _RAMB4_S1_S2;
    }

    public static EdifCell RAMB4_S1_S4() {
        return _RAMB4_S1_S4;
    }

    public static EdifCell RAMB4_S1_S8() {
        return _RAMB4_S1_S8;
    }

    public static EdifCell RAMB4_S2() {
        return _RAMB4_S2;
    }

    public static EdifCell RAMB4_S2_S16() {
        return _RAMB4_S2_S16;
    }

    public static EdifCell RAMB4_S2_S2() {
        return _RAMB4_S2_S2;
    }

    public static EdifCell RAMB4_S2_S4() {
        return _RAMB4_S2_S4;
    }

    public static EdifCell RAMB4_S2_S8() {
        return _RAMB4_S2_S8;
    }

    public static EdifCell RAMB4_S4() {
        return _RAMB4_S4;
    }

    public static EdifCell RAMB4_S4_S16() {
        return _RAMB4_S4_S16;
    }

    public static EdifCell RAMB4_S4_S4() {
        return _RAMB4_S4_S4;
    }

    public static EdifCell RAMB4_S4_S8() {
        return _RAMB4_S4_S8;
    }

    public static EdifCell RAMB4_S8() {
        return _RAMB4_S8;
    }

    public static EdifCell RAMB4_S8_S16() {
        return _RAMB4_S8_S16;
    }

    public static EdifCell RAMB4_S8_S8() {
        return _RAMB4_S8_S8;
    }

    public static EdifCell RAMB8BWER() {
        return _RAMB8BWER;
    }

    public static EdifCell ROC() {
        return _ROC;
    }

    public static EdifCell ROCBUF() {
        return _ROCBUF;
    }

    public static EdifCell ROM128X1() {
        return _ROM128X1;
    }

    public static EdifCell ROM16X1() {
        return _ROM16X1;
    }

    public static EdifCell ROM256X1() {
        return _ROM256X1;
    }

    public static EdifCell ROM32X1() {
        return _ROM32X1;
    }

    public static EdifCell ROM64X1() {
        return _ROM64X1;
    }

    public static EdifCell SIM_CONFIGE2() {
        return _SIM_CONFIGE2;
    }

    public static EdifCell SIM_CONFIG_S3A() {
        return _SIM_CONFIG_S3A;
    }

    public static EdifCell SIM_CONFIG_S3A_SERIAL() {
        return _SIM_CONFIG_S3A_SERIAL;
    }

    public static EdifCell SIM_CONFIG_S6() {
        return _SIM_CONFIG_S6;
    }

    public static EdifCell SIM_CONFIG_S6_SERIAL() {
        return _SIM_CONFIG_S6_SERIAL;
    }

    public static EdifCell SIM_CONFIG_V5() {
        return _SIM_CONFIG_V5;
    }

    public static EdifCell SIM_CONFIG_V5_SERIAL() {
        return _SIM_CONFIG_V5_SERIAL;
    }

    public static EdifCell SIM_CONFIG_V6() {
        return _SIM_CONFIG_V6;
    }

    public static EdifCell SIM_CONFIG_V6_SERIAL() {
        return _SIM_CONFIG_V6_SERIAL;
    }

    public static EdifCell SPI_ACCESS() {
        return _SPI_ACCESS;
    }

    public static EdifCell SRL16() {
        return _SRL16;
    }

    public static EdifCell SRL16E() {
        return _SRL16E;
    }

    public static EdifCell SRL16E_1() {
        return _SRL16E_1;
    }

    public static EdifCell SRL16_1() {
        return _SRL16_1;
    }

    public static EdifCell SRLC16() {
        return _SRLC16;
    }

    public static EdifCell SRLC16E() {
        return _SRLC16E;
    }

    public static EdifCell SRLC16E_1() {
        return _SRLC16E_1;
    }

    public static EdifCell SRLC16_1() {
        return _SRLC16_1;
    }

    public static EdifCell SRLC32E() {
        return _SRLC32E;
    }

    public static EdifCell STARTBUF_FPGACORE() {
        return _STARTBUF_FPGACORE;
    }

    public static EdifCell STARTBUF_SPARTAN2() {
        return _STARTBUF_SPARTAN2;
    }

    public static EdifCell STARTBUF_SPARTAN3() {
        return _STARTBUF_SPARTAN3;
    }

    public static EdifCell STARTBUF_VIRTEX() {
        return _STARTBUF_VIRTEX;
    }

    public static EdifCell STARTBUF_VIRTEX2() {
        return _STARTBUF_VIRTEX2;
    }

    public static EdifCell STARTBUF_VIRTEX4() {
        return _STARTBUF_VIRTEX4;
    }

    public static EdifCell STARTUPE2() {
        return _STARTUPE2;
    }

    public static EdifCell STARTUP_FPGACORE() {
        return _STARTUP_FPGACORE;
    }

    public static EdifCell STARTUP_SPARTAN3() {
        return _STARTUP_SPARTAN3;
    }

    public static EdifCell STARTUP_SPARTAN3A() {
        return _STARTUP_SPARTAN3A;
    }

    public static EdifCell STARTUP_SPARTAN3E() {
        return _STARTUP_SPARTAN3E;
    }

    public static EdifCell STARTUP_SPARTAN6() {
        return _STARTUP_SPARTAN6;
    }

    public static EdifCell STARTUP_VIRTEX4() {
        return _STARTUP_VIRTEX4;
    }

    public static EdifCell STARTUP_VIRTEX5() {
        return _STARTUP_VIRTEX5;
    }

    public static EdifCell STARTUP_VIRTEX6() {
        return _STARTUP_VIRTEX6;
    }

    public static EdifCell SUSPEND_SYNC() {
        return _SUSPEND_SYNC;
    }

    public static EdifCell SYSMON() {
        return _SYSMON;
    }

    public static EdifCell TBLOCK() {
        return _TBLOCK;
    }

    public static EdifCell TEMAC() {
        return _TEMAC;
    }

    public static EdifCell TEMAC_SINGLE() {
        return _TEMAC_SINGLE;
    }

    public static EdifCell TIMEGRP() {
        return _TIMEGRP;
    }

    public static EdifCell TIMESPEC() {
        return _TIMESPEC;
    }

    public static EdifCell TOC() {
        return _TOC;
    }

    public static EdifCell TOCBUF() {
        return _TOCBUF;
    }

    public static EdifCell USR_ACCESSE2() {
        return _USR_ACCESSE2;
    }

    public static EdifCell USR_ACCESS_VIRTEX4() {
        return _USR_ACCESS_VIRTEX4;
    }

    public static EdifCell USR_ACCESS_VIRTEX5() {
        return _USR_ACCESS_VIRTEX5;
    }

    public static EdifCell USR_ACCESS_VIRTEX6() {
        return _USR_ACCESS_VIRTEX6;
    }

    public static EdifCell VCC() {
        return _VCC;
    }

    public static EdifCell WIREAND() {
        return _WIREAND;
    }

    public static EdifCell XADC() {
        return _XADC;
    }

    public static EdifCell XNOR2() {
        return _XNOR2;
    }

    public static EdifCell XNOR3() {
        return _XNOR3;
    }

    public static EdifCell XNOR4() {
        return _XNOR4;
    }

    public static EdifCell XNOR5() {
        return _XNOR5;
    }

    public static EdifCell XOR2() {
        return _XOR2;
    }

    public static EdifCell XOR3() {
        return _XOR3;
    }

    public static EdifCell XOR4() {
        return _XOR4;
    }

    public static EdifCell XOR5() {
        return _XOR5;
    }

    public static EdifCell XORCY() {
        return _XORCY;
    }

    public static EdifCell XORCY_D() {
        return _XORCY_D;
    }

    public static EdifCell XORCY_L() {
        return _XORCY_L;
    }

    public static EdifCell ZHOLD_DELAY() {
        return _ZHOLD_DELAY;
    }

    public static EdifCell BITSLICE_CONTROL() {
        return _BITSLICE_CONTROL;
    }

    public static EdifCell BUFCE_LEAF() {
        return _BUFCE_LEAF;
    }

    public static EdifCell BUFCE_ROW() {
        return _BUFCE_ROW;
    }

    public static EdifCell BUFGCE_DIV() {
        return _BUFGCE_DIV;
    }

    public static EdifCell CARRY8() {
        return _CARRY8;
    }

    public static EdifCell DNA_PORTE3() {
        return _DNA_PORTE3;
    }

    public static EdifCell DSP48E2() {
        return _DSP48E2;
    }

    public static EdifCell FIFO18E2() {
        return _FIFO18E2;
    }

    public static EdifCell FIFO36E2() {
        return _FIFO36E2;
    }

    public static EdifCell GTHE3_CHANNEL() {
        return _GTHE3_CHANNEL;
    }

    public static EdifCell GTHE3_COMMON() {
        return _GTHE3_COMMON;
    }

    public static EdifCell IBUFDS_GTE3() {
        return _IBUFDS_GTE3;
    }

    public static EdifCell ICAPE3() {
        return _ICAPE3;
    }

    public static EdifCell IDELAYE3() {
        return _IDELAYE3;
    }

    public static EdifCell IN_FIFOE3() {
        return _IN_FIFOE3;
    }

    public static EdifCell ISERDESE3() {
        return _ISERDESE3;
    }

    public static EdifCell MMCME3_ADV() {
        return _MMCME3_ADV;
    }

    public static EdifCell MMCME3_BASE() {
        return _MMCME3_BASE;
    }

    public static EdifCell MUXF9() {
        return _MUXF9;
    }

    public static EdifCell ODELAYE3() {
        return _ODELAYE3;
    }

    public static EdifCell OSERDESE3() {
        return _OSERDESE3;
    }

    public static EdifCell RAM256X1D() {
        return _RAM256X1D;
    }

    public static EdifCell RAM32M16() {
        return _RAM32M16;
    }

    public static EdifCell RAM512X1S() {
        return _RAM512X1S;
    }

    public static EdifCell RAM64M8() {
        return _RAM64M8;
    }

    public static EdifCell RAMB18E2() {
        return _RAMB18E2;
    }

    public static EdifCell RAMB36E2() {
        return _RAMB36E2;
    }

    public static EdifCell RX_BITSLICE() {
        return _RX_BITSLICE;
    }

    public static EdifCell STARTUPE3() {
        return _STARTUPE3;
    }

    public static EdifCell SYSMON_AMS() {
        return _SYSMON_AMS;
    }

    public static EdifCell TXPLL_ADV() {
        return _TXPLL_ADV;
    }

    public static EdifCell TXPLL_BASE() {
        return _TXPLL_BASE;
    }

    public static EdifCell TX_BITSLICE() {
        return _TX_BITSLICE;
    }

    private static void _initAND2() {
        try {
            _AND2 = new EdifCell(library, "AND2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2");
        }
        try {
            _AND2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND2B1() {
        try {
            _AND2B1 = new EdifCell(library, "AND2B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2B1");
        }
        try {
            _AND2B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND2B1L() {
        try {
            _AND2B1L = new EdifCell(library, "AND2B1L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2B1L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2B1L");
        }
        try {
            _AND2B1L.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1L.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B1L.addPort(SRI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND2B2() {
        try {
            _AND2B2 = new EdifCell(library, "AND2B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND2B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND2B2");
        }
        try {
            _AND2B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND2B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3() {
        try {
            _AND3 = new EdifCell(library, "AND3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3");
        }
        try {
            _AND3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B1() {
        try {
            _AND3B1 = new EdifCell(library, "AND3B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B1");
        }
        try {
            _AND3B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B2() {
        try {
            _AND3B2 = new EdifCell(library, "AND3B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B2");
        }
        try {
            _AND3B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND3B3() {
        try {
            _AND3B3 = new EdifCell(library, "AND3B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND3B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND3B3");
        }
        try {
            _AND3B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND3B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4() {
        try {
            _AND4 = new EdifCell(library, "AND4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4");
        }
        try {
            _AND4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B1() {
        try {
            _AND4B1 = new EdifCell(library, "AND4B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B1");
        }
        try {
            _AND4B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B2() {
        try {
            _AND4B2 = new EdifCell(library, "AND4B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B2");
        }
        try {
            _AND4B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B3() {
        try {
            _AND4B3 = new EdifCell(library, "AND4B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B3");
        }
        try {
            _AND4B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND4B4() {
        try {
            _AND4B4 = new EdifCell(library, "AND4B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND4B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND4B4");
        }
        try {
            _AND4B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND4B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5() {
        try {
            _AND5 = new EdifCell(library, "AND5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5");
        }
        try {
            _AND5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B1() {
        try {
            _AND5B1 = new EdifCell(library, "AND5B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B1");
        }
        try {
            _AND5B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B1.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B2() {
        try {
            _AND5B2 = new EdifCell(library, "AND5B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B2");
        }
        try {
            _AND5B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B2.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B3() {
        try {
            _AND5B3 = new EdifCell(library, "AND5B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B3");
        }
        try {
            _AND5B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B3.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B4() {
        try {
            _AND5B4 = new EdifCell(library, "AND5B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B4");
        }
        try {
            _AND5B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B4.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND5B5() {
        try {
            _AND5B5 = new EdifCell(library, "AND5B5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND5B5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND5B5");
        }
        try {
            _AND5B5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND5B5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND6() {
        try {
            _AND6 = new EdifCell(library, "AND6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND6");
        }
        try {
            _AND6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND6.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND7() {
        try {
            _AND7 = new EdifCell(library, "AND7", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND7");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND7");
        }
        try {
            _AND7.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND7.addPort(I6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAND8() {
        try {
            _AND8 = new EdifCell(library, "AND8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AND8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AND8");
        }
        try {
            _AND8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AND8.addPort(I7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initAUTOBUF() {
        try {
            _AUTOBUF = new EdifCell(library, "AUTOBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: AUTOBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: AUTOBUF");
        }
        try {
            _AUTOBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _AUTOBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCANE2() {
        try {
            _BSCANE2 = new EdifCell(library, "BSCANE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCANE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCANE2");
        }
        try {
            _BSCANE2.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(DRCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(RUNTEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(SEL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCANE2.addPort(TDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_FPGACORE() {
        try {
            _BSCAN_FPGACORE = new EdifCell(library, "BSCAN_FPGACORE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_FPGACORE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_FPGACORE");
        }
        try {
            _BSCAN_FPGACORE.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(DRCK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(DRCK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDO1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_FPGACORE.addPort(TDO2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_SPARTAN3() {
        try {
            _BSCAN_SPARTAN3 = new EdifCell(library, "BSCAN_SPARTAN3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_SPARTAN3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_SPARTAN3");
        }
        try {
            _BSCAN_SPARTAN3.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(DRCK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(DRCK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDO1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3.addPort(TDO2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_SPARTAN3A() {
        try {
            _BSCAN_SPARTAN3A = new EdifCell(library, "BSCAN_SPARTAN3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_SPARTAN3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_SPARTAN3A");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(DRCK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(DRCK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(SEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(SEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(TDO1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN3A.addPort(TDO2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_SPARTAN6() {
        try {
            _BSCAN_SPARTAN6 = new EdifCell(library, "BSCAN_SPARTAN6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_SPARTAN6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_SPARTAN6");
        }
        try {
            _BSCAN_SPARTAN6.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(DRCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(RUNTEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(SEL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_SPARTAN6.addPort(TDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX4() {
        try {
            _BSCAN_VIRTEX4 = new EdifCell(library, "BSCAN_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX4");
        }
        try {
            _BSCAN_VIRTEX4.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(DRCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(SEL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX4.addPort(TDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX5() {
        try {
            _BSCAN_VIRTEX5 = new EdifCell(library, "BSCAN_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX5");
        }
        try {
            _BSCAN_VIRTEX5.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(DRCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(SEL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX5.addPort(TDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBSCAN_VIRTEX6() {
        try {
            _BSCAN_VIRTEX6 = new EdifCell(library, "BSCAN_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BSCAN_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BSCAN_VIRTEX6");
        }
        try {
            _BSCAN_VIRTEX6.addPort(CAPTURE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(DRCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(RESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(RUNTEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(SEL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(SHIFT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(TDI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(UPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BSCAN_VIRTEX6.addPort(TDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUF() {
        try {
            _BUF = new EdifCell(library, "BUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUF");
        }
        try {
            _BUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFCF() {
        try {
            _BUFCF = new EdifCell(library, "BUFCF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFCF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFCF");
        }
        try {
            _BUFCF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFE() {
        try {
            _BUFE = new EdifCell(library, "BUFE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFE");
        }
        try {
            _BUFE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFE.addPort(E_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFFOE() {
        try {
            _BUFFOE = new EdifCell(library, "BUFFOE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFFOE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFFOE");
        }
        try {
            _BUFFOE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFFOE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFG() {
        try {
            _BUFG = new EdifCell(library, "BUFG", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFG");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFG");
        }
        try {
            _BUFG.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFG.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCE() {
        try {
            _BUFGCE = new EdifCell(library, "BUFGCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCE");
        }
        try {
            _BUFGCE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCE_1() {
        try {
            _BUFGCE_1 = new EdifCell(library, "BUFGCE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCE_1");
        }
        try {
            _BUFGCE_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_1.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCTRL() {
        try {
            _BUFGCTRL = new EdifCell(library, "BUFGCTRL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCTRL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCTRL");
        }
        try {
            _BUFGCTRL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(CE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(CE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(IGNORE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(IGNORE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(S0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCTRL.addPort(S1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGDLL() {
        try {
            _BUFGDLL = new EdifCell(library, "BUFGDLL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGDLL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGDLL");
        }
        try {
            _BUFGDLL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGDLL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX() {
        try {
            _BUFGMUX = new EdifCell(library, "BUFGMUX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX");
        }
        try {
            _BUFGMUX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_1() {
        try {
            _BUFGMUX_1 = new EdifCell(library, "BUFGMUX_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_1");
        }
        try {
            _BUFGMUX_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_1.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_CTRL() {
        try {
            _BUFGMUX_CTRL = new EdifCell(library, "BUFGMUX_CTRL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_CTRL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_CTRL");
        }
        try {
            _BUFGMUX_CTRL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_CTRL.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGMUX_VIRTEX4() {
        try {
            _BUFGMUX_VIRTEX4 = new EdifCell(library, "BUFGMUX_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGMUX_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGMUX_VIRTEX4");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGMUX_VIRTEX4.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGP() {
        try {
            _BUFGP = new EdifCell(library, "BUFGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGP");
        }
        try {
            _BUFGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGSR() {
        try {
            _BUFGSR = new EdifCell(library, "BUFGSR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGSR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGSR");
        }
        try {
            _BUFGSR.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGSR.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGTS() {
        try {
            _BUFGTS = new EdifCell(library, "BUFGTS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGTS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGTS");
        }
        try {
            _BUFGTS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGTS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFG_LB() {
        try {
            _BUFG_LB = new EdifCell(library, "BUFG_LB", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFG_LB");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFG_LB");
        }
        try {
            _BUFG_LB.addPort(CLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFG_LB.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFH() {
        try {
            _BUFH = new EdifCell(library, "BUFH", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFH");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFH");
        }
        try {
            _BUFH.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFH.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFHCE() {
        try {
            _BUFHCE = new EdifCell(library, "BUFHCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFHCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFHCE");
        }
        try {
            _BUFHCE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFHCE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFHCE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIO() {
        try {
            _BUFIO = new EdifCell(library, "BUFIO", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIO");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIO");
        }
        try {
            _BUFIO.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIO2() {
        try {
            _BUFIO2 = new EdifCell(library, "BUFIO2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIO2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIO2");
        }
        try {
            _BUFIO2.addPort(DIVCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2.addPort(IOCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2.addPort(SERDESSTROBE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIO2FB() {
        try {
            _BUFIO2FB = new EdifCell(library, "BUFIO2FB", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIO2FB");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIO2FB");
        }
        try {
            _BUFIO2FB.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2FB.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIO2_2CLK() {
        try {
            _BUFIO2_2CLK = new EdifCell(library, "BUFIO2_2CLK", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIO2_2CLK");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIO2_2CLK");
        }
        try {
            _BUFIO2_2CLK.addPort(DIVCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2_2CLK.addPort(IOCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2_2CLK.addPort(SERDESSTROBE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2_2CLK.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIO2_2CLK.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFIODQS() {
        try {
            _BUFIODQS = new EdifCell(library, "BUFIODQS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFIODQS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFIODQS");
        }
        try {
            _BUFIODQS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIODQS.addPort(DQSMASK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFIODQS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFMR() {
        try {
            _BUFMR = new EdifCell(library, "BUFMR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFMR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFMR");
        }
        try {
            _BUFMR.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFMR.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFMRCE() {
        try {
            _BUFMRCE = new EdifCell(library, "BUFMRCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFMRCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFMRCE");
        }
        try {
            _BUFMRCE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFMRCE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFMRCE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFPLL() {
        try {
            _BUFPLL = new EdifCell(library, "BUFPLL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFPLL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFPLL");
        }
        try {
            _BUFPLL.addPort(IOCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL.addPort(LOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL.addPort(SERDESSTROBE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL.addPort(GCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL.addPort(LOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL.addPort(PLLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFPLL_MCB() {
        try {
            _BUFPLL_MCB = new EdifCell(library, "BUFPLL_MCB", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFPLL_MCB");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFPLL_MCB");
        }
        try {
            _BUFPLL_MCB.addPort(IOCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(IOCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(LOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(SERDESSTROBE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(SERDESSTROBE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(GCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(LOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(PLLIN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFPLL_MCB.addPort(PLLIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFR() {
        try {
            _BUFR = new EdifCell(library, "BUFR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFR");
        }
        try {
            _BUFR.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFR.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFT() {
        try {
            _BUFT = new EdifCell(library, "BUFT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFT");
        }
        try {
            _BUFT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFT.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTUREE2() {
        try {
            _CAPTUREE2 = new EdifCell(library, "CAPTUREE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTUREE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTUREE2");
        }
        try {
            _CAPTUREE2.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTUREE2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_FPGACORE() {
        try {
            _CAPTURE_FPGACORE = new EdifCell(library, "CAPTURE_FPGACORE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_FPGACORE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_FPGACORE");
        }
        try {
            _CAPTURE_FPGACORE.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_FPGACORE.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_SPARTAN3() {
        try {
            _CAPTURE_SPARTAN3 = new EdifCell(library, "CAPTURE_SPARTAN3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_SPARTAN3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_SPARTAN3");
        }
        try {
            _CAPTURE_SPARTAN3.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_SPARTAN3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_SPARTAN3A() {
        try {
            _CAPTURE_SPARTAN3A = new EdifCell(library, "CAPTURE_SPARTAN3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_SPARTAN3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_SPARTAN3A");
        }
        try {
            _CAPTURE_SPARTAN3A.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_SPARTAN3A.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX4() {
        try {
            _CAPTURE_VIRTEX4 = new EdifCell(library, "CAPTURE_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX4");
        }
        try {
            _CAPTURE_VIRTEX4.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX4.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX5() {
        try {
            _CAPTURE_VIRTEX5 = new EdifCell(library, "CAPTURE_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX5");
        }
        try {
            _CAPTURE_VIRTEX5.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX5.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCAPTURE_VIRTEX6() {
        try {
            _CAPTURE_VIRTEX6 = new EdifCell(library, "CAPTURE_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CAPTURE_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CAPTURE_VIRTEX6");
        }
        try {
            _CAPTURE_VIRTEX6.addPort(CAP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CAPTURE_VIRTEX6.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCARRY4() {
        try {
            _CARRY4 = new EdifCell(library, "CARRY4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CARRY4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CARRY4");
        }
        try {
            _CARRY4.addPort(CO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(O_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(CYINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(DI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY4.addPort(S_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCFGLUT5() {
        try {
            _CFGLUT5 = new EdifCell(library, "CFGLUT5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CFGLUT5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CFGLUT5");
        }
        try {
            _CFGLUT5.addPort(CDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(O5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(O6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CFGLUT5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLL() {
        try {
            _CLKDLL = new EdifCell(library, "CLKDLL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLL");
        }
        try {
            _CLKDLL.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLL.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLLE() {
        try {
            _CLKDLLE = new EdifCell(library, "CLKDLLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLLE");
        }
        try {
            _CLKDLLE.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLKDLLHF() {
        try {
            _CLKDLLHF = new EdifCell(library, "CLKDLLHF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLKDLLHF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLKDLLHF");
        }
        try {
            _CLKDLLHF.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLKDLLHF.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10() {
        try {
            _CLK_DIV10 = new EdifCell(library, "CLK_DIV10", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10");
        }
        try {
            _CLK_DIV10.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10R() {
        try {
            _CLK_DIV10R = new EdifCell(library, "CLK_DIV10R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10R");
        }
        try {
            _CLK_DIV10R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10RSD() {
        try {
            _CLK_DIV10RSD = new EdifCell(library, "CLK_DIV10RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10RSD");
        }
        try {
            _CLK_DIV10RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV10SD() {
        try {
            _CLK_DIV10SD = new EdifCell(library, "CLK_DIV10SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV10SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV10SD");
        }
        try {
            _CLK_DIV10SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV10SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12() {
        try {
            _CLK_DIV12 = new EdifCell(library, "CLK_DIV12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12");
        }
        try {
            _CLK_DIV12.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12R() {
        try {
            _CLK_DIV12R = new EdifCell(library, "CLK_DIV12R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12R");
        }
        try {
            _CLK_DIV12R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12RSD() {
        try {
            _CLK_DIV12RSD = new EdifCell(library, "CLK_DIV12RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12RSD");
        }
        try {
            _CLK_DIV12RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV12SD() {
        try {
            _CLK_DIV12SD = new EdifCell(library, "CLK_DIV12SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV12SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV12SD");
        }
        try {
            _CLK_DIV12SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV12SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14() {
        try {
            _CLK_DIV14 = new EdifCell(library, "CLK_DIV14", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14");
        }
        try {
            _CLK_DIV14.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14R() {
        try {
            _CLK_DIV14R = new EdifCell(library, "CLK_DIV14R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14R");
        }
        try {
            _CLK_DIV14R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14RSD() {
        try {
            _CLK_DIV14RSD = new EdifCell(library, "CLK_DIV14RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14RSD");
        }
        try {
            _CLK_DIV14RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV14SD() {
        try {
            _CLK_DIV14SD = new EdifCell(library, "CLK_DIV14SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV14SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV14SD");
        }
        try {
            _CLK_DIV14SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV14SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16() {
        try {
            _CLK_DIV16 = new EdifCell(library, "CLK_DIV16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16");
        }
        try {
            _CLK_DIV16.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16R() {
        try {
            _CLK_DIV16R = new EdifCell(library, "CLK_DIV16R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16R");
        }
        try {
            _CLK_DIV16R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16RSD() {
        try {
            _CLK_DIV16RSD = new EdifCell(library, "CLK_DIV16RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16RSD");
        }
        try {
            _CLK_DIV16RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV16SD() {
        try {
            _CLK_DIV16SD = new EdifCell(library, "CLK_DIV16SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV16SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV16SD");
        }
        try {
            _CLK_DIV16SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV16SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2() {
        try {
            _CLK_DIV2 = new EdifCell(library, "CLK_DIV2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2");
        }
        try {
            _CLK_DIV2.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2R() {
        try {
            _CLK_DIV2R = new EdifCell(library, "CLK_DIV2R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2R");
        }
        try {
            _CLK_DIV2R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2RSD() {
        try {
            _CLK_DIV2RSD = new EdifCell(library, "CLK_DIV2RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2RSD");
        }
        try {
            _CLK_DIV2RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV2SD() {
        try {
            _CLK_DIV2SD = new EdifCell(library, "CLK_DIV2SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV2SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV2SD");
        }
        try {
            _CLK_DIV2SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV2SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4() {
        try {
            _CLK_DIV4 = new EdifCell(library, "CLK_DIV4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4");
        }
        try {
            _CLK_DIV4.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4R() {
        try {
            _CLK_DIV4R = new EdifCell(library, "CLK_DIV4R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4R");
        }
        try {
            _CLK_DIV4R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4RSD() {
        try {
            _CLK_DIV4RSD = new EdifCell(library, "CLK_DIV4RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4RSD");
        }
        try {
            _CLK_DIV4RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV4SD() {
        try {
            _CLK_DIV4SD = new EdifCell(library, "CLK_DIV4SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV4SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV4SD");
        }
        try {
            _CLK_DIV4SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV4SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6() {
        try {
            _CLK_DIV6 = new EdifCell(library, "CLK_DIV6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6");
        }
        try {
            _CLK_DIV6.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6R() {
        try {
            _CLK_DIV6R = new EdifCell(library, "CLK_DIV6R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6R");
        }
        try {
            _CLK_DIV6R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6RSD() {
        try {
            _CLK_DIV6RSD = new EdifCell(library, "CLK_DIV6RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6RSD");
        }
        try {
            _CLK_DIV6RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV6SD() {
        try {
            _CLK_DIV6SD = new EdifCell(library, "CLK_DIV6SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV6SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV6SD");
        }
        try {
            _CLK_DIV6SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV6SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8() {
        try {
            _CLK_DIV8 = new EdifCell(library, "CLK_DIV8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8");
        }
        try {
            _CLK_DIV8.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8R() {
        try {
            _CLK_DIV8R = new EdifCell(library, "CLK_DIV8R", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8R");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8R");
        }
        try {
            _CLK_DIV8R.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8R.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8R.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8RSD() {
        try {
            _CLK_DIV8RSD = new EdifCell(library, "CLK_DIV8RSD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8RSD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8RSD");
        }
        try {
            _CLK_DIV8RSD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8RSD.addPort(CDRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8RSD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCLK_DIV8SD() {
        try {
            _CLK_DIV8SD = new EdifCell(library, "CLK_DIV8SD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CLK_DIV8SD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CLK_DIV8SD");
        }
        try {
            _CLK_DIV8SD.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CLK_DIV8SD.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCONFIG() {
        try {
            _CONFIG = new EdifCell(library, "CONFIG", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CONFIG");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CONFIG");
        }
    }

    private static void _initCRC32() {
        try {
            _CRC32 = new EdifCell(library, "CRC32", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CRC32");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CRC32");
        }
        try {
            _CRC32.addPort(CRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC32.addPort(CRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCRC64() {
        try {
            _CRC64 = new EdifCell(library, "CRC64", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CRC64");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CRC64");
        }
        try {
            _CRC64.addPort(CRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CRC64.addPort(CRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCIRESET() {
        try {
            _DCIRESET = new EdifCell(library, "DCIRESET", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCIRESET");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCIRESET");
        }
        try {
            _DCIRESET.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCIRESET.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM() {
        try {
            _DCM = new EdifCell(library, "DCM", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM");
        }
        try {
            _DCM.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(STATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(DSSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_ADV() {
        try {
            _DCM_ADV = new EdifCell(library, "DCM_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_ADV");
        }
        try {
            _DCM_ADV.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_BASE() {
        try {
            _DCM_BASE = new EdifCell(library, "DCM_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_BASE");
        }
        try {
            _DCM_BASE.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_CLKGEN() {
        try {
            _DCM_CLKGEN = new EdifCell(library, "DCM_CLKGEN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_CLKGEN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_CLKGEN");
        }
        try {
            _DCM_CLKGEN.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(CLKFXDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(PROGDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(STATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(FREEZEDCM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(PROGCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(PROGDATA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(PROGEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_CLKGEN.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_PS() {
        try {
            _DCM_PS = new EdifCell(library, "DCM_PS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_PS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_PS");
        }
        try {
            _DCM_PS.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_PS.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDCM_SP() {
        try {
            _DCM_SP = new EdifCell(library, "DCM_SP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DCM_SP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DCM_SP");
        }
        try {
            _DCM_SP.addPort(CLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK270_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK2X_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK2X180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLK90_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKDV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFX180_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(STATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(DSSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DCM_SP.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDNA_PORT() {
        try {
            _DNA_PORT = new EdifCell(library, "DNA_PORT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DNA_PORT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DNA_PORT");
        }
        try {
            _DNA_PORT.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORT.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORT.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORT.addPort(READ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORT.addPort(SHIFT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48() {
        try {
            _DSP48 = new EdifCell(library, "DSP48", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48");
        }
        try {
            _DSP48.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(BCIN_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CARRYINSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECINSUB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CECTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(OPMODE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48.addPort(SUBTRACT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48A() {
        try {
            _DSP48A = new EdifCell(library, "DSP48A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48A");
        }
        try {
            _DSP48A.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CARRYOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEOPMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(D_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(OPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTOPMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48A1() {
        try {
            _DSP48A1 = new EdifCell(library, "DSP48A1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48A1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48A1");
        }
        try {
            _DSP48A1.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CARRYOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CARRYOUTF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(M_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEOPMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(D_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(OPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTOPMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48A1.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48E() {
        try {
            _DSP48E = new EdifCell(library, "DSP48E", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48E");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48E");
        }
        try {
            _DSP48E.addPort(ACOUT_port_name, 30,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYCASCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYOUT_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(MULTSIGNOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(OVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PATTERNBDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PATTERNDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(UNDERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(A_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(ACIN_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(ALUMODE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(BCIN_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYCASCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CARRYINSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEB2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CECTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEMULTCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(MULTSIGNIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(OPMODE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTALLCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48E1() {
        try {
            _DSP48E1 = new EdifCell(library, "DSP48E1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48E1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48E1");
        }
        try {
            _DSP48E1.addPort(ACOUT_port_name, 30,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CARRYCASCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CARRYOUT_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(MULTSIGNOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(OVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(PATTERNBDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(PATTERNDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(UNDERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(A_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(ACIN_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(ALUMODE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(BCIN_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CARRYCASCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CARRYINSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEB2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CECTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEINMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(D_port_name, 25,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(INMODE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(MULTSIGNIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(OPMODE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTALLCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTINMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E1.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initEFUSE_USR() {
        try {
            _EFUSE_USR = new EdifCell(library, "EFUSE_USR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: EFUSE_USR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: EFUSE_USR");
        }
        try {
            _EFUSE_USR.addPort(EFUSEUSR_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initEMAC() {
        try {
            _EMAC = new EdifCell(library, "EMAC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: EMAC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: EMAC");
        }
        try {
            _EMAC.addPort(DCRHOSTDONEIR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTANINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXBADFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXD_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVLDMSW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXDVREG6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXFRAMEDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXGOODFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTRXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXCOLLISION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXGMIIMIICLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXRETRANSMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0CLIENTTXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYENCOMMAALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYLOOPBACKMSB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMDTRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMGTRXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYMGTTXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYPOWERDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYSYNCACQSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARDISPMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARDISPVAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCHARISK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC0PHYTXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTANINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXBADFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXD_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVLDMSW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXDVREG6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXFRAMEDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXGOODFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTRXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXCOLLISION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXGMIIMIICLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXRETRANSMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1CLIENTTXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYENCOMMAALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYLOOPBACKMSB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMDTRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMGTRXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYMGTTXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYPOWERDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYSYNCACQSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARDISPMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARDISPVAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCHARISK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMAC1PHYTXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMACDCRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(EMACDCRDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTMIIMRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTRDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0DCMLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0PAUSEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0PAUSEVAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0RXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXDVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXDVLDMSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXFIRSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXGMIIMIICLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXIFGDELAY_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC0TXUNDERRUN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1DCMLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1PAUSEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1PAUSEVAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1RXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXDVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXDVLDMSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXFIRSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXGMIIMIICLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXIFGDELAY_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(CLIENTEMAC1TXUNDERRUN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACABUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(DCREMACWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTEMAC1SEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTMIIMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTOPCODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(HOSTWRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0COL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0CRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0GTXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0MIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0PHYAD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXBUFSTATUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHARISCOMMA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHARISK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCHECKINGCRC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCLKCORCNT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXCOMMADET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXDISPERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXLOSSOFSYNC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXNOTINTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0RXRUNDISP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0SIGNALDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC0TXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1COL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1CRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1GTXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1MIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1PHYAD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXBUFSTATUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHARISCOMMA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHARISK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCHECKINGCRC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCLKCORCNT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXCOMMADET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXDISPERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXLOSSOFSYNC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXNOTINTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1RXRUNDISP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1SIGNALDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(PHYEMAC1TXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC0CONFIGVEC_port_name, 80,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC0UNICASTADDR_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC1CONFIGVEC_port_name, 80,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _EMAC.addPort(TIEEMAC1UNICASTADDR_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFD() {
        try {
            _FD = new EdifCell(library, "FD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FD");
        }
        try {
            _FD.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDC() {
        try {
            _FDC = new EdifCell(library, "FDC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDC");
        }
        try {
            _FDC.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCE() {
        try {
            _FDCE = new EdifCell(library, "FDCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCE");
        }
        try {
            _FDCE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCE_1() {
        try {
            _FDCE_1 = new EdifCell(library, "FDCE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCE_1");
        }
        try {
            _FDCE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCP() {
        try {
            _FDCP = new EdifCell(library, "FDCP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCP");
        }
        try {
            _FDCP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCPE() {
        try {
            _FDCPE = new EdifCell(library, "FDCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCPE");
        }
        try {
            _FDCPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCPE_1() {
        try {
            _FDCPE_1 = new EdifCell(library, "FDCPE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCPE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCPE_1");
        }
        try {
            _FDCPE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCPE_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDCP_1() {
        try {
            _FDCP_1 = new EdifCell(library, "FDCP_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDCP_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDCP_1");
        }
        try {
            _FDCP_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDCP_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDC_1() {
        try {
            _FDC_1 = new EdifCell(library, "FDC_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDC_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDC_1");
        }
        try {
            _FDC_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDC_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDD() {
        try {
            _FDD = new EdifCell(library, "FDD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDD");
        }
        try {
            _FDD.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDD.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDD.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDC() {
        try {
            _FDDC = new EdifCell(library, "FDDC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDC");
        }
        try {
            _FDDC.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDC.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCE() {
        try {
            _FDDCE = new EdifCell(library, "FDDCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCE");
        }
        try {
            _FDDCE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCP() {
        try {
            _FDDCP = new EdifCell(library, "FDDCP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCP");
        }
        try {
            _FDDCP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDCPE() {
        try {
            _FDDCPE = new EdifCell(library, "FDDCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDCPE");
        }
        try {
            _FDDCPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDP() {
        try {
            _FDDP = new EdifCell(library, "FDDP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDP");
        }
        try {
            _FDDP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDPE() {
        try {
            _FDDPE = new EdifCell(library, "FDDPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDPE");
        }
        try {
            _FDDPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDRCPE() {
        try {
            _FDDRCPE = new EdifCell(library, "FDDRCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDRCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDRCPE");
        }
        try {
            _FDDRCPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDDRRSE() {
        try {
            _FDDRRSE = new EdifCell(library, "FDDRRSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDDRRSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDDRRSE");
        }
        try {
            _FDDRRSE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDDRRSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDE() {
        try {
            _FDE = new EdifCell(library, "FDE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDE");
        }
        try {
            _FDE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDE_1() {
        try {
            _FDE_1 = new EdifCell(library, "FDE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDE_1");
        }
        try {
            _FDE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDP() {
        try {
            _FDP = new EdifCell(library, "FDP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDP");
        }
        try {
            _FDP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDPE() {
        try {
            _FDPE = new EdifCell(library, "FDPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDPE");
        }
        try {
            _FDPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDPE_1() {
        try {
            _FDPE_1 = new EdifCell(library, "FDPE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDPE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDPE_1");
        }
        try {
            _FDPE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDPE_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDP_1() {
        try {
            _FDP_1 = new EdifCell(library, "FDP_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDP_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDP_1");
        }
        try {
            _FDP_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDP_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDR() {
        try {
            _FDR = new EdifCell(library, "FDR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDR");
        }
        try {
            _FDR.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRE() {
        try {
            _FDRE = new EdifCell(library, "FDRE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRE");
        }
        try {
            _FDRE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRE_1() {
        try {
            _FDRE_1 = new EdifCell(library, "FDRE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRE_1");
        }
        try {
            _FDRE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRE_1.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRS() {
        try {
            _FDRS = new EdifCell(library, "FDRS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRS");
        }
        try {
            _FDRS.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRSE() {
        try {
            _FDRSE = new EdifCell(library, "FDRSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRSE");
        }
        try {
            _FDRSE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRSE_1() {
        try {
            _FDRSE_1 = new EdifCell(library, "FDRSE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRSE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRSE_1");
        }
        try {
            _FDRSE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRSE_1.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDRS_1() {
        try {
            _FDRS_1 = new EdifCell(library, "FDRS_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDRS_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDRS_1");
        }
        try {
            _FDRS_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDRS_1.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDR_1() {
        try {
            _FDR_1 = new EdifCell(library, "FDR_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDR_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDR_1");
        }
        try {
            _FDR_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDR_1.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDS() {
        try {
            _FDS = new EdifCell(library, "FDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDS");
        }
        try {
            _FDS.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDSE() {
        try {
            _FDSE = new EdifCell(library, "FDSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDSE");
        }
        try {
            _FDSE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDSE_1() {
        try {
            _FDSE_1 = new EdifCell(library, "FDSE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDSE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDSE_1");
        }
        try {
            _FDSE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDSE_1.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFDS_1() {
        try {
            _FDS_1 = new EdifCell(library, "FDS_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FDS_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FDS_1");
        }
        try {
            _FDS_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FDS_1.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFD_1() {
        try {
            _FD_1 = new EdifCell(library, "FD_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FD_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FD_1");
        }
        try {
            _FD_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD_1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FD_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO16() {
        try {
            _FIFO16 = new EdifCell(library, "FIFO16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO16");
        }
        try {
            _FIFO16.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO16.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18() {
        try {
            _FIFO18 = new EdifCell(library, "FIFO18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18");
        }
        try {
            _FIFO18.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(DIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18E1() {
        try {
            _FIFO18E1 = new EdifCell(library, "FIFO18E1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18E1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18E1");
        }
        try {
            _FIFO18E1.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RDCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(WRCOUNT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(RSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E1.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18_36() {
        try {
            _FIFO18_36 = new EdifCell(library, "FIFO18_36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18_36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18_36");
        }
        try {
            _FIFO18_36.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDCOUNT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRCOUNT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18_36.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36() {
        try {
            _FIFO36 = new EdifCell(library, "FIFO36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36");
        }
        try {
            _FIFO36.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36E1() {
        try {
            _FIFO36E1 = new EdifCell(library, "FIFO36E1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36E1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36E1");
        }
        try {
            _FIFO36E1.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(DOP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RDCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(WRCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(DIP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(INJECTDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(INJECTSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(RSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E1.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_72() {
        try {
            _FIFO36_72 = new EdifCell(library, "FIFO36_72", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_72");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_72");
        }
        try {
            _FIFO36_72.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DOP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDCOUNT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRCOUNT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(DIP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_72_EXP() {
        try {
            _FIFO36_72_EXP = new EdifCell(library, "FIFO36_72_EXP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_72_EXP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_72_EXP");
        }
        try {
            _FIFO36_72_EXP.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DOP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(DIP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RDRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_72_EXP.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36_EXP() {
        try {
            _FIFO36_EXP = new EdifCell(library, "FIFO36_EXP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36_EXP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36_EXP");
        }
        try {
            _FIFO36_EXP.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RDRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36_EXP.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFMAP() {
        try {
            _FMAP = new EdifCell(library, "FMAP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FMAP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FMAP");
        }
        try {
            _FMAP.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FMAP.addPort(O_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECCE2() {
        try {
            _FRAME_ECCE2 = new EdifCell(library, "FRAME_ECCE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECCE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECCE2");
        }
        try {
            _FRAME_ECCE2.addPort(CRCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(ECCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(ECCERRORSINGLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(FAR_port_name, 26,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(SYNBIT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(SYNDROME_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(SYNDROMEVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECCE2.addPort(SYNWORD_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECC_VIRTEX4() {
        try {
            _FRAME_ECC_VIRTEX4 = new EdifCell(library, "FRAME_ECC_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECC_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECC_VIRTEX4");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(ERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(SYNDROME_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX4.addPort(SYNDROMEVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECC_VIRTEX5() {
        try {
            _FRAME_ECC_VIRTEX5 = new EdifCell(library, "FRAME_ECC_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECC_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECC_VIRTEX5");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(CRCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(ECCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(SYNDROME_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX5.addPort(SYNDROMEVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFRAME_ECC_VIRTEX6() {
        try {
            _FRAME_ECC_VIRTEX6 = new EdifCell(library, "FRAME_ECC_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FRAME_ECC_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FRAME_ECC_VIRTEX6");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(CRCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(ECCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(ECCERRORSINGLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(FAR_port_name, 24,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(SYNBIT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(SYNDROME_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(SYNDROMEVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FRAME_ECC_VIRTEX6.addPort(SYNWORD_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTC() {
        try {
            _FTC = new EdifCell(library, "FTC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTC");
        }
        try {
            _FTC.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTC.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTCP() {
        try {
            _FTCP = new EdifCell(library, "FTCP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTCP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTCP");
        }
        try {
            _FTCP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTCP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFTP() {
        try {
            _FTP = new EdifCell(library, "FTP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FTP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FTP");
        }
        try {
            _FTP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FTP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGND() {
        try {
            _GND = new EdifCell(library, "GND", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GND");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GND");
        }
        try {
            _GND.addPort(G_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11() {
        try {
            _GT11 = new EdifCell(library, "GT11", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11");
        }
        try {
            _GT11.addPort(CHBONDO_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(COMBUSOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXBUFERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCALFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCHARISCOMMA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCHARISK_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCYCLELIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDISPERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXLOSSOFSYNC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXNOTINTABLE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPCSHCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRECCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRECCLK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRUNDISP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSIGDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSTATUS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TX1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TX1P_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXBUFERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCALFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCYCLELIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXKERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXOUTCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXOUTCLK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPCSHCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXRUNDISP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(CHBONDI_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(COMBUSIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENCHANSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENMCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(ENPCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(GREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(LOOPBACK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(POWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(REFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(REFCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RX1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RX1P_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCLKSTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCOMMADETUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCINTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXCRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDEC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDEC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXDESCRAM64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXIGNOREBTF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXINTDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXBYPASS8B10B_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARDISPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARDISPVAL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCHARISK_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCLKSTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCINTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXCRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXENOOB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXGEARBOX64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXINTDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXSCRAM64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11CLK() {
        try {
            _GT11CLK = new EdifCell(library, "GT11CLK", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11CLK");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11CLK");
        }
        try {
            _GT11CLK.addPort(SYNCLK1OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK2OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(MGTCLKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(MGTCLKP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(RXBCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK1IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK.addPort(SYNCLK2IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11CLK_MGT() {
        try {
            _GT11CLK_MGT = new EdifCell(library, "GT11CLK_MGT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11CLK_MGT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11CLK_MGT");
        }
        try {
            _GT11CLK_MGT.addPort(SYNCLK1OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(SYNCLK2OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(MGTCLKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11CLK_MGT.addPort(MGTCLKP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11_CUSTOM() {
        try {
            _GT11_CUSTOM = new EdifCell(library, "GT11_CUSTOM", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11_CUSTOM");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11_CUSTOM");
        }
        try {
            _GT11_CUSTOM.addPort(CHBONDO_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXBUFERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCALFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCHARISCOMMA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCHARISK_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCYCLELIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDISPERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXLOSSOFSYNC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXNOTINTABLE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPCSHCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRECCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRECCLK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRUNDISP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSIGDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSTATUS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TX1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TX1P_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXBUFERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCALFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCYCLELIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXKERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXOUTCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXOUTCLK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPCSHCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXRUNDISP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(CHBONDI_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENCHANSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENMCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(ENPCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(GREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(LOOPBACK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(POWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(REFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(REFCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RX1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RX1P_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXBLOCKSYNC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCLKSTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCOMMADETUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCINTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXCRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDEC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDEC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXDESCRAM64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXIGNOREBTF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXINTDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXBYPASS8B10B_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARDISPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARDISPVAL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCHARISK_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCLKSTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCDATAWIDTH_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCINTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXCRCRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENC64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXENOOB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXGEARBOX64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXINTDATAWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXSCRAM64B66BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_CUSTOM.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGT11_DUAL() {
        try {
            _GT11_DUAL = new EdifCell(library, "GT11_DUAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GT11_DUAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GT11_DUAL");
        }
        try {
            _GT11_DUAL.addPort(CHBONDOA_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDOB_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DRDYA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DRDYB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBUFERRA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBUFERRB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCALFAILA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCALFAILB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISCOMMAA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISCOMMAB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISKA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCHARISKB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCOUTA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCOUTB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCYCLELIMITA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCYCLELIMITB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAB_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDISPERRA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDISPERRB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOCKA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOCKB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOSSOFSYNCA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXLOSSOFSYNCB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXMCLKA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXMCLKB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXNOTINTABLEA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXNOTINTABLEB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPCSHCLKOUTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPCSHCLKOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXREALIGNA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXREALIGNB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK1A_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK2A_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRECCLK2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRUNDISPA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRUNDISPB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSIGDETA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSIGDETB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSTATUSA_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSTATUSB_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1NA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1NB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1PA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TX1PB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBUFERRA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBUFERRB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCALFAILA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCALFAILB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCOUTA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCOUTB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCYCLELIMITA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCYCLELIMITB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXKERRA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXKERRB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXLOCKA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXLOCKB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK1A_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK2A_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXOUTCLK2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPCSHCLKOUTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPCSHCLKOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRUNDISPA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRUNDISPB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDIA_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(CHBONDIB_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DADDRA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DWEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(DWEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENCHANSYNCA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENCHANSYNCB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENMCOMMAALIGNA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENMCOMMAALIGNB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENPCOMMAALIGNA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(ENPCOMMAALIGNB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(GREFCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(GREFCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(LOOPBACKA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(LOOPBACKB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(POWERDOWNA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(POWERDOWNB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK1A_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK1B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK2A_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(REFCLK2B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1NA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1NB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1PA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RX1PB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBLOCKSYNC64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXBLOCKSYNC64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCLKSTABLEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCLKSTABLEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCOMMADETUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAVALIDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAVALIDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAWIDTHA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCDATAWIDTHB_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINB_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINITA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINITB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINTCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCINTCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCPDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCRESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXCRCRESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAWIDTHA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDATAWIDTHB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC8B10BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDEC8B10BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDESCRAM64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXDESCRAM64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXIGNOREBTFA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXIGNOREBTFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXINTDATAWIDTHA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXINTDATAWIDTHB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPMARESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPMARESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPOLARITYA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXPOLARITYB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXRESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSLIDEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSLIDEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSYNCA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXSYNCB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLK2A_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLK2B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(RXUSRCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBYPASS8B10BA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXBYPASS8B10BB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPMODEA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPMODEB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPVALA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARDISPVALB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARISKA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCHARISKB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCLKSTABLEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCLKSTABLEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAVALIDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAVALIDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAWIDTHA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCDATAWIDTHB_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINB_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINITA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINITB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINTCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCINTCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCPDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCRESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXCRCRESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAB_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAWIDTHA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXDATAWIDTHB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC8B10BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENC8B10BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENOOBA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXENOOBB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXGEARBOX64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXGEARBOX64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINHIBITA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINHIBITB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINTDATAWIDTHA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXINTDATAWIDTHB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPMARESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPMARESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPOLARITYA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXPOLARITYB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRESETA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXRESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSCRAM64B66BUSEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSCRAM64B66BUSEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSYNCA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXSYNCB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLK2A_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLK2B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GT11_DUAL.addPort(TXUSRCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTHE1_QUAD() {
        try {
            _GTHE1_QUAD = new EdifCell(library, "GTHE1_QUAD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTHE1_QUAD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTHE1_QUAD");
        }
        try {
            _GTHE1_QUAD.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHINITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSRDACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSRDDATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCODEERR0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCODEERR1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCODEERR2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCODEERR3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRL0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRL1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRL2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRL3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRLACK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRLACK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRLACK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXCTRLACK3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATA0_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATA1_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATA2_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATA3_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATATAP0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATATAP1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATATAP2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDATATAP3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDISPERR0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDISPERR1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDISPERR2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXDISPERR3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPCSCLKSMPL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPCSCLKSMPL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPCSCLKSMPL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPCSCLKSMPL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXVALID0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXVALID1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXVALID2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXVALID3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TSTPATH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TSTREFCLKFAB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TSTREFCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRLACK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRLACK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRLACK2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRLACK3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP10_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP11_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP12_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP13_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP20_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP21_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP22_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATATAP23_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXN2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXN3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXP0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXP1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXP2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXP3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPCSCLKSMPL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPCSCLKSMPL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPCSCLKSMPL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPCSCLKSMPL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DADDR_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DFETRAINCTRL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DFETRAINCTRL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DFETRAINCTRL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DFETRAINCTRL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DISABLEDRP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHX2LANE01_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHX2LANE23_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(GTHX4LANE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSLANESEL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSMMDADDR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSREGADDR_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSREGRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSREGWR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(MGMTPCSWRDATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(PLLPCSCLKDIV_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(PLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(POWERDOWN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(POWERDOWN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(POWERDOWN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(POWERDOWN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXBUFRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXBUFRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXBUFRESET2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXBUFRESET3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXENCOMMADET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXENCOMMADET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXENCOMMADET2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXENCOMMADET3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXP2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXP3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOLARITY2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOLARITY3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOWERDOWN2_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXPOWERDOWN3_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXRATE0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXRATE1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXRATE2_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXRATE3_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXSLIP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXSLIP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXSLIP2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXSLIP3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKIN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(RXUSERCLKIN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(SAMPLERATE0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(SAMPLERATE1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(SAMPLERATE2_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(SAMPLERATE3_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXBUFRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXBUFRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXBUFRESET2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXBUFRESET3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRL0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRL1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRL2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXCTRL3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATA0_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATA1_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATA2_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATA3_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATAMSB0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATAMSB1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATAMSB2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDATAMSB3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDEEMPH0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDEEMPH1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDEEMPH2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXDEEMPH3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXMARGIN0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXMARGIN1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXMARGIN2_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXMARGIN3_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPOWERDOWN2_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXPOWERDOWN3_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXRATE0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXRATE1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXRATE2_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXRATE3_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKIN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE1_QUAD.addPort(TXUSERCLKIN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTHE2_CHANNEL() {
        try {
            _GTHE2_CHANNEL = new EdifCell(library, "GTHE2_CHANNEL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTHE2_CHANNEL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTHE2_CHANNEL");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DMONITOROUT_port_name, 15,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(EYESCANDATAERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTHTXN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTHTXP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTREFCLKMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(PCSRSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(PHYSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RSOSINTDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXBUFSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXBYTEISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXBYTEREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDRLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHANBONDSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHANISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHANREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHARISCOMMA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHARISK_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDO_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCLKCORCNT_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCOMINITDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCOMSASDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCOMWAKEDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDATAVALID_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPSTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPSTROBEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPSTROBESTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESTADAPTDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDISPERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXHEADER_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXHEADERVALID_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXMONITOROUT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXNOTINTABLE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTSTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTSTROBEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTSTROBESTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHSLIPMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPRBSERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSTARTOFSEQ_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXBUFSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCOMFINISH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXGEARBOXREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHINITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CFGRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CLKRSVD0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CLKRSVD1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(CPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DMONFIFORESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DMONITORCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(EYESCANMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(EYESCANRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(EYESCANTRIGGER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTHRXN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTHRXP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTRESETSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTRSVD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(GTTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(LOOPBACK_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(PCSRSVDIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(PCSRSVDIN2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(PMARSVDIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(QPLLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(QPLLREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RESETOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXADAPTSELTEST_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXBUFRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDRFREQRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDRHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDROVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDRRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCDRRESETRSV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDI_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDLEVEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCHBONDSLAVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXCOMMADETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDDIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEAGCHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEAGCOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEAGCTRL_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFECM1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFELFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFELFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFELPMRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAP_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPADAPTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPINITOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPONLYADAPTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFESLIDETAPSTROBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP2HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP2OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP3HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP3OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP4HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP4OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP5HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP5OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP6HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP6OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP7HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFETAP7OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEUTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEUTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEVPHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEVPOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEVSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDFEXYDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXELECIDLEMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXGEARBOXSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXLPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXLPMHFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXLPMHFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXLPMLFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXLPMLFKLOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXMCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXMONITORSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOOBRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSCALRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTCFG_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTID0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTNTRLEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTSTROBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSINTTESTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOSOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPRBSCNTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXQPIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(SETERRSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(SIGVALIDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TSTIN_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TX8B10BBYPASS_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXBUFDIFFCTRL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCHARDISPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCHARDISPVAL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCHARISK_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCOMINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCOMSAS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXCOMWAKE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDETECTRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDIFFCTRL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDIFFPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXDLYUPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXHEADER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXMAINCURSOR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXMARGIN_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPDELECIDLEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHDLYTSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPIPPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPIPPMOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPIPPMPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPIPPMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPIPPMSTEPSIZE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPISOPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPOSTCURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPOSTCURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPRBSFORCEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPRECURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXPRECURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXQPIBIASEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXQPISTRONGPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXQPIWEAKPUP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSEQUENCE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSTARTSEQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSWING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_CHANNEL.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTHE2_COMMON() {
        try {
            _GTHE2_COMMON = new EdifCell(library, "GTHE2_COMMON", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTHE2_COMMON");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTHE2_COMMON");
        }
        try {
            _GTHE2_COMMON.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(PMARSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLDMONITOR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLOUTREFCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(REFCLKOUTMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(BGBYPASSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(BGMONITORENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(BGPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(BGRCALOVRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(BGRCALOVRDENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(PMARSVD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLOUTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLRSVD1_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(QPLLRSVD2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE2_COMMON.addPort(RCALENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTPA1_DUAL() {
        try {
            _GTPA1_DUAL = new EdifCell(library, "GTPA1_DUAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTPA1_DUAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTPA1_DUAL");
        }
        try {
            _GTPA1_DUAL.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBEAST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBWEST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKOUT0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKOUT1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PHYSTATUS0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PHYSTATUS1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLLKDET0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLLKDET1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RCALOUTEAST_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RCALOUTWEST_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKPLL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKPLL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RESETDONE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RESETDONE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBUFSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBUFSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBYTEISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBYTEISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBYTEREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBYTEREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANBONDSEQ0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANBONDSEQ1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHANREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHARISCOMMA0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHARISCOMMA1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHARISK0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHARISK1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDO_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCLKCORCNT0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCLKCORCNT1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCOMMADET0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCOMMADET1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDATA0_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDATA1_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDISPERR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDISPERR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXELECIDLE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXELECIDLE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXLOSSOFSYNC0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXLOSSOFSYNC1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXNOTINTABLE0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXNOTINTABLE1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPRBSERR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPRBSERR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRECCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRECCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRUNDISP0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRUNDISP1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXVALID0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXVALID1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTOUT0_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTOUT1_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBUFSTATUS0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBUFSTATUS1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXKERR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXKERR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXOUTCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXOUTCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXP0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXP1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXRUNDISP0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXRUNDISP1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLK00_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLK01_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLK10_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLK11_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLKINEAST0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLKINEAST1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLKINWEST0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(CLKINWEST1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GATERXELECIDLE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GATERXELECIDLE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GCLK00_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GCLK01_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GCLK10_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GCLK11_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBSEL0EAST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBSEL0WEST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBSEL1EAST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPCLKFBSEL1WEST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPTEST0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(GTPTEST1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(IGNORESIGDET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(IGNORESIGDET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(INTDATAWIDTH0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(INTDATAWIDTH1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(LOOPBACK0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(LOOPBACK1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLCLK00_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLCLK01_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLCLK10_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLCLK11_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLLKDETEN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLLKDETEN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLPOWERDOWN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PLLPOWERDOWN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PRBSCNTRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(PRBSCNTRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RCALINEAST_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RCALINWEST_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKPWRDNB0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFCLKPWRDNB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFSELDYPLL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(REFSELDYPLL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBUFRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXBUFRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCDRRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCDRRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDI_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDMASTER0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDMASTER1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDSLAVE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCHBONDSLAVE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCOMMADETUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXCOMMADETUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDATAWIDTH0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDATAWIDTH1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDEC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXDEC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENCHANSYNC0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENCHANSYNC1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENMCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENMCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPMAPHASEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPMAPHASEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPRBSTST0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXENPRBSTST1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXEQMIX0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXEQMIX1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPMASETPHASE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPMASETPHASE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXSLIDE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXSLIDE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(RXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTIN0_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TSTIN1_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBUFDIFFCTRL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBUFDIFFCTRL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBYPASS8B10B0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXBYPASS8B10B1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARDISPMODE0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARDISPMODE1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARDISPVAL0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARDISPVAL1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARISK0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCHARISK1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCOMSTART0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCOMSTART1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCOMTYPE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXCOMTYPE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDATA0_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDATA1_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDATAWIDTH0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDATAWIDTH1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDETECTRX0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDETECTRX1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDIFFCTRL0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXDIFFCTRL1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXELECIDLE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXELECIDLE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENPMAPHASEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENPMAPHASEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENPRBSTST0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXENPRBSTST1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXINHIBIT0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXINHIBIT1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPDOWNASYNCH0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPDOWNASYNCH1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPMASETPHASE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPMASETPHASE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPRBSFORCEERR0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPRBSFORCEERR1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPREEMPHASIS0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXPREEMPHASIS1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(TXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(USRCODEERR0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPA1_DUAL.addPort(USRCODEERR1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTPE2_CHANNEL() {
        try {
            _GTPE2_CHANNEL = new EdifCell(library, "GTPE2_CHANNEL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTPE2_CHANNEL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTPE2_CHANNEL");
        }
        try {
            _GTPE2_CHANNEL.addPort(DMONITOROUT_port_name, 15,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(EYESCANDATAERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTPTXN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTPTXP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PCSRSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PHYSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXBUFSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXBYTEISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXBYTEREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDRLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHANBONDSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHANISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHANREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHARISCOMMA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHARISK_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCLKCORCNT_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCOMINITDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCOMSASDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCOMWAKEDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDATAVALID_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDISPERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXHEADER_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXHEADERVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXNOTINTABLE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTSTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTSTROBEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTSTROBESTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHSLIPMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPRBSERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSTARTOFSEQ_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXBUFSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCOMFINISH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXGEARBOXREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHINITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(CFGRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(CLKRSVD0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(CLKRSVD1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DMONFIFORESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DMONITORCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(EYESCANMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(EYESCANRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(EYESCANTRIGGER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTPRXN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTPRXP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTRESETSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTRSVD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(GTTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(LOOPBACK_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PCSRSVDIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PLL0CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PLL0REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PLL1CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PLL1REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDIN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDIN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(PMARSVDIN4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RESETOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXADAPTSELTEST_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXBUFRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDRFREQRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDRHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDROVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDRRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCDRRESETRSV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDLEVEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCHBONDSLAVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXCOMMADETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDDIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDFEXYDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXELECIDLEMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXGEARBOXSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMHFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMHFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMLFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMLFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMOSINTNTRLEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXLPMRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXMCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOOBRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSCALRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTCFG_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTID0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTNTRLEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTSTROBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSINTTESTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOSOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPRBSCNTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(SETERRSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(SIGVALIDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TSTIN_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TX8B10BBYPASS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXBUFDIFFCTRL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCHARDISPMODE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCHARDISPVAL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCHARISK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCOMINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCOMSAS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXCOMWAKE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDETECTRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDIFFCTRL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDIFFPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXDLYUPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXHEADER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXMAINCURSOR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXMARGIN_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPDELECIDLEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHDLYTSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPIPPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPIPPMOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPIPPMPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPIPPMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPIPPMSTEPSIZE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPISOPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPOSTCURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPOSTCURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPRBSFORCEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPRECURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXPRECURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSEQUENCE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSTARTSEQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSWING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_CHANNEL.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTPE2_COMMON() {
        try {
            _GTPE2_COMMON = new EdifCell(library, "GTPE2_COMMON", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTPE2_COMMON");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTPE2_COMMON");
        }
        try {
            _GTPE2_COMMON.addPort(DMONITOROUT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0FBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0LOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0OUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0OUTREFCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0REFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1FBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1LOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1OUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1OUTREFCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1REFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PMARSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(REFCLKOUTMONITOR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(REFCLKOUTMONITOR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(BGBYPASSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(BGMONITORENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(BGPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(BGRCALOVRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(BGRCALOVRDENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTEASTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTEASTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTGREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTGREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTWESTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(GTWESTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0LOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0LOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0PD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0REFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL0RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1LOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1LOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1PD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1REFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLL1RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLLRSVD1_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PLLRSVD2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(PMARSVD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTPE2_COMMON.addPort(RCALENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTP_DUAL() {
        try {
            _GTP_DUAL = new EdifCell(library, "GTP_DUAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTP_DUAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTP_DUAL");
        }
        try {
            _GTP_DUAL.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PHYSTATUS0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PHYSTATUS1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PLLLKDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(REFCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RESETDONE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RESETDONE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBUFSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBUFSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBYTEISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBYTEISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBYTEREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBYTEREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANBONDSEQ0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANBONDSEQ1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHANREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHARISCOMMA0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHARISCOMMA1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHARISK0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHARISK1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHBONDO0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHBONDO1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCLKCORCNT0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCLKCORCNT1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCOMMADET0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCOMMADET1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDATA0_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDATA1_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDISPERR0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDISPERR1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXELECIDLE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXELECIDLE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXLOSSOFSYNC0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXLOSSOFSYNC1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXNOTINTABLE0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXNOTINTABLE1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXOVERSAMPLEERR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXOVERSAMPLEERR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPRBSERR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPRBSERR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRECCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRECCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRUNDISP0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRUNDISP1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXVALID0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXVALID1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBUFSTATUS0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBUFSTATUS1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXKERR0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXKERR1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXOUTCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXOUTCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXP0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXP1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXRUNDISP0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXRUNDISP1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(GTPRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(GTPTEST_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(INTDATAWIDTH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(LOOPBACK0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(LOOPBACK1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PLLLKDETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PLLPOWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PRBSCNTRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(PRBSCNTRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(REFCLKPWRDNB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBUFRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXBUFRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCDRRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCDRRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHBONDI0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCHBONDI1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCOMMADETUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXCOMMADETUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDATAWIDTH0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDATAWIDTH1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDEC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXDEC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXELECIDLERESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXELECIDLERESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENCHANSYNC0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENCHANSYNC1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENELECIDLERESETB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENEQB0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENEQB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENMCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENMCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENPCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENPCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENPRBSTST0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENPRBSTST1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENSAMPLEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXENSAMPLEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXEQMIX0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXEQMIX1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXEQPOLE0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXEQPOLE1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPMASETPHASE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPMASETPHASE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXSLIDE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXSLIDE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(RXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBUFDIFFCTRL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBUFDIFFCTRL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBYPASS8B10B0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXBYPASS8B10B1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARDISPMODE0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARDISPMODE1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARDISPVAL0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARDISPVAL1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARISK0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCHARISK1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCOMSTART0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCOMSTART1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCOMTYPE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXCOMTYPE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDATA0_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDATA1_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDATAWIDTH0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDATAWIDTH1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDETECTRX0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDETECTRX1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDIFFCTRL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXDIFFCTRL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXELECIDLE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXELECIDLE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXENC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXENC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXENPMAPHASEALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXENPRBSTST0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXENPRBSTST1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXINHIBIT0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXINHIBIT1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPMASETPHASE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPREEMPHASIS0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXPREEMPHASIS1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTP_DUAL.addPort(TXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTXE1() {
        try {
            _GTXE1 = new EdifCell(library, "GTXE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTXE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTXE1");
        }
        try {
            _GTXE1.addPort(COMFINISH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(COMINITDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(COMSASDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(COMWAKEDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFECLKDLYADJMON_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFEEYEDACMON_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFESENSCAL_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP1MONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP2MONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP3MONITOR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP4MONITOR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(MGTREFCLKFAB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PHYSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXBUFSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXBYTEISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXBYTEREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHANBONDSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHANISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHANREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHARISCOMMA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHARISK_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHBONDO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCLKCORCNT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDISPERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNMONITOR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXHEADER_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXHEADERVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXLOSSOFSYNC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXNOTINTABLE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXOVERSAMPLEERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPLLLKDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPRBSERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRECCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRECCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRUNDISP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXSTARTOFSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TSTOUT_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXBUFSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNMONITOR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXGEARBOXREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXKERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPLLLKDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXRUNDISP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFECLKDLYADJ_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFEDLYOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP1_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP3_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAP4_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DFETAPOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GATERXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GREFCLKRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GREFCLKTX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GTXRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GTXTEST_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(GTXTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(IGNORESIGDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(LOOPBACK_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(MGTREFCLKRX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(MGTREFCLKTX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(NORTHREFCLKRX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(NORTHREFCLKTX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PERFCLKRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PERFCLKTX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PLLRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PLLTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(PRBSCNTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXBUFRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCDRRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHBONDI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHBONDLEVEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHBONDMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCHBONDSLAVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXCOMMADETUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDEC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNMONENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNOVERRIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNSWPPRECURB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXDLYALIGNUPDSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENCHANSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENMCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENPCOMMAALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENPMAPHASEALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENPRBSTST_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXENSAMPLEALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXEQMIX_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXGEARBOXSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPLLLKDETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPLLPOWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPLLREFSELDY_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPMASETPHASE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXPOWERDOWN_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRATE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(SOUTHREFCLKRX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(SOUTHREFCLKTX_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TSTCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TSTCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TSTIN_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXBUFDIFFCTRL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXBYPASS8B10B_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCHARDISPMODE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCHARDISPVAL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCHARISK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCOMINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCOMSAS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXCOMWAKE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDETECTRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDIFFCTRL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNMONENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNOVERRIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXDLYALIGNUPDSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXENC8B10BUSE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXENPMAPHASEALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXENPRBSTST_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXHEADER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXMARGIN_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPDOWNASYNCH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPLLLKDETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPLLPOWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPLLREFSELDY_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPMASETPHASE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPOSTEMPHASIS_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPOWERDOWN_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPRBSFORCEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXPREEMPHASIS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXRATE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXSEQUENCE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXSTARTSEQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXSWING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE1.addPort(USRCODEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTXE2_CHANNEL() {
        try {
            _GTXE2_CHANNEL = new EdifCell(library, "GTXE2_CHANNEL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTXE2_CHANNEL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTXE2_CHANNEL");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DMONITOROUT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(EYESCANDATAERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTREFCLKMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTXTXN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTXTXP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PCSRSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PHYSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXBUFSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXBYTEISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXBYTEREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDRLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHANBONDSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHANISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHANREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHARISCOMMA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHARISK_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDO_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCLKCORCNT_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCOMINITDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCOMSASDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCOMWAKEDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDISPERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXHEADER_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXHEADERVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXMONITOROUT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXNOTINTABLE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHSLIPMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPRBSERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXSTARTOFSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TSTOUT_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXBUFSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCOMFINISH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXGEARBOXREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHINITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CFGRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CLKRSVD_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(CPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(EYESCANMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(EYESCANRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(EYESCANTRIGGER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTRESETSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTRSVD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTXRXN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(GTXRXP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(LOOPBACK_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PCSRSVDIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PCSRSVDIN2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PMARSVDIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(PMARSVDIN2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(QPLLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(QPLLREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RESETOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXBUFRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDRFREQRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDRHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDROVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDRRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCDRRESETRSV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDI_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDLEVEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCHBONDSLAVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXCOMMADETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDDIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEAGCHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEAGCOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFECM1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFELFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFELFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFELPMRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP2HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP2OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP3HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP3OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP4HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP4OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP5HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFETAP5OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEUTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEUTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEVPHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEVPOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEVSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEXYDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEXYDHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDFEXYDOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXELECIDLEMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXGEARBOXSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXLPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXLPMHFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXLPMHFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXLPMLFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXLPMLFKLOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXMCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXMONITORSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOOBRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOSHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOSOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPRBSCNTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXQPIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(SETERRSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TSTIN_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TX8B10BBYPASS_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXBUFDIFFCTRL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCHARDISPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCHARDISPVAL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCHARISK_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCOMINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCOMSAS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXCOMWAKE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDETECTRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDIFFCTRL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDIFFPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXDLYUPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXHEADER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXMAINCURSOR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXMARGIN_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPDELECIDLEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHDLYTSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPISOPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPOSTCURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPOSTCURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPRBSFORCEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPRECURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXPRECURSORINV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXQPIBIASEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXQPISTRONGPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXQPIWEAKPUP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXSEQUENCE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXSTARTSEQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXSWING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_CHANNEL.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTXE2_COMMON() {
        try {
            _GTXE2_COMMON = new EdifCell(library, "GTXE2_COMMON", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTXE2_COMMON");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTXE2_COMMON");
        }
        try {
            _GTXE2_COMMON.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLDMONITOR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLOUTREFCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(REFCLKOUTMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(BGBYPASSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(BGMONITORENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(BGPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(BGRCALOVRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(PMARSVD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLOUTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLRSVD1_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(QPLLRSVD2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTXE2_COMMON.addPort(RCALENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTX_DUAL() {
        try {
            _GTX_DUAL = new EdifCell(library, "GTX_DUAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTX_DUAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTX_DUAL");
        }
        try {
            _GTX_DUAL.addPort(DFECLKDLYADJMONITOR0_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFECLKDLYADJMONITOR1_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFEEYEDACMONITOR0_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFEEYEDACMONITOR1_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFESENSCAL0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFESENSCAL1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP1MONITOR0_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP1MONITOR1_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP2MONITOR0_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP2MONITOR1_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP3MONITOR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP3MONITOR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP4MONITOR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP4MONITOR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PHYSTATUS0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PHYSTATUS1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PLLLKDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(REFCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RESETDONE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RESETDONE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBUFSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBUFSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBYTEISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBYTEISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBYTEREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBYTEREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANBONDSEQ0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANBONDSEQ1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANISALIGNED0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANISALIGNED1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANREALIGN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHANREALIGN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHARISCOMMA0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHARISCOMMA1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHARISK0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHARISK1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHBONDO0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHBONDO1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCLKCORCNT0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCLKCORCNT1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCOMMADET0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCOMMADET1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATA0_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATA1_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATAVALID0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATAVALID1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDISPERR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDISPERR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXELECIDLE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXELECIDLE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXHEADER0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXHEADER1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXHEADERVALID0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXHEADERVALID1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXLOSSOFSYNC0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXLOSSOFSYNC1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXNOTINTABLE0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXNOTINTABLE1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXOVERSAMPLEERR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXOVERSAMPLEERR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPRBSERR0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPRBSERR1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRECCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRECCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRUNDISP0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRUNDISP1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSTARTOFSEQ0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSTARTOFSEQ1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSTATUS0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSTATUS1_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXVALID0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXVALID1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBUFSTATUS0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBUFSTATUS1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXGEARBOXREADY0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXGEARBOXREADY1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXKERR0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXKERR1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXN1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXOUTCLK0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXOUTCLK1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXP0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXP1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXRUNDISP0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXRUNDISP1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFECLKDLYADJ0_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFECLKDLYADJ1_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP10_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP11_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP20_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP21_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP30_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP31_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP40_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DFETAP41_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(GTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(GTXTEST_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(INTDATAWIDTH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(LOOPBACK0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(LOOPBACK1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PLLLKDETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PLLPOWERDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PRBSCNTRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(PRBSCNTRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(REFCLKPWRDNB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBUFRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXBUFRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCDRRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCDRRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHBONDI0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCHBONDI1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCOMMADETUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXCOMMADETUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATAWIDTH0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDATAWIDTH1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDEC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXDEC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENCHANSYNC0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENCHANSYNC1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENEQB0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENEQB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENMCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENMCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPCOMMAALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPCOMMAALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPMAPHASEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPMAPHASEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPRBSTST0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENPRBSTST1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENSAMPLEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXENSAMPLEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXEQMIX0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXEQMIX1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXEQPOLE0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXEQPOLE1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXGEARBOXSLIP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXGEARBOXSLIP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXP0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXP1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPMASETPHASE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPMASETPHASE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSLIDE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXSLIDE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(RXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBUFDIFFCTRL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBUFDIFFCTRL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBYPASS8B10B0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXBYPASS8B10B1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARDISPMODE0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARDISPMODE1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARDISPVAL0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARDISPVAL1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARISK0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCHARISK1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCOMSTART0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCOMSTART1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCOMTYPE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXCOMTYPE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDATA0_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDATA1_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDATAWIDTH0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDATAWIDTH1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDETECTRX0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDETECTRX1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDIFFCTRL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXDIFFCTRL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXELECIDLE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXELECIDLE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENC8B10BUSE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENC8B10BUSE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENPMAPHASEALIGN0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENPMAPHASEALIGN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENPRBSTST0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXENPRBSTST1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXHEADER0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXHEADER1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXINHIBIT0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXINHIBIT1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPMASETPHASE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPMASETPHASE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPOLARITY0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPOLARITY1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPOWERDOWN0_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPOWERDOWN1_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPREEMPHASIS0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXPREEMPHASIS1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXRESET0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXRESET1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXSEQUENCE0_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXSEQUENCE1_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXSTARTSEQ0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXSTARTSEQ1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXUSRCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXUSRCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXUSRCLK20_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTX_DUAL.addPort(TXUSRCLK21_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF() {
        try {
            _IBUF = new EdifCell(library, "IBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF");
        }
        try {
            _IBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS() {
        try {
            _IBUFDS = new EdifCell(library, "IBUFDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS");
        }
        try {
            _IBUFDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_BLVDS_25() {
        try {
            _IBUFDS_BLVDS_25 = new EdifCell(library, "IBUFDS_BLVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_BLVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_BLVDS_25");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_BLVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_DIFF_OUT() {
        try {
            _IBUFDS_DIFF_OUT = new EdifCell(library, "IBUFDS_DIFF_OUT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_DIFF_OUT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_DIFF_OUT");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_DIFF_OUT_IBUFDISABLE() {
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE = new EdifCell(library, "IBUFDS_DIFF_OUT_IBUFDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_DIFF_OUT_IBUFDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_DIFF_OUT_IBUFDISABLE");
        }
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_IBUFDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_DIFF_OUT_INTERMDISABLE() {
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE = new EdifCell(library, "IBUFDS_DIFF_OUT_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_DIFF_OUT_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_DIFF_OUT_INTERMDISABLE");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DIFF_OUT_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_DLY_ADJ() {
        try {
            _IBUFDS_DLY_ADJ = new EdifCell(library, "IBUFDS_DLY_ADJ", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_DLY_ADJ");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_DLY_ADJ");
        }
        try {
            _IBUFDS_DLY_ADJ.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DLY_ADJ.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DLY_ADJ.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_DLY_ADJ.addPort(S_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_GTE2() {
        try {
            _IBUFDS_GTE2 = new EdifCell(library, "IBUFDS_GTE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_GTE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_GTE2");
        }
        try {
            _IBUFDS_GTE2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE2.addPort(ODIV2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE2.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE2.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_GTHE1() {
        try {
            _IBUFDS_GTHE1 = new EdifCell(library, "IBUFDS_GTHE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_GTHE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_GTHE1");
        }
        try {
            _IBUFDS_GTHE1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTHE1.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTHE1.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_GTXE1() {
        try {
            _IBUFDS_GTXE1 = new EdifCell(library, "IBUFDS_GTXE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_GTXE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_GTXE1");
        }
        try {
            _IBUFDS_GTXE1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTXE1.addPort(ODIV2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTXE1.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTXE1.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTXE1.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_IBUFDISABLE() {
        try {
            _IBUFDS_IBUFDISABLE = new EdifCell(library, "IBUFDS_IBUFDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_IBUFDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_IBUFDISABLE");
        }
        try {
            _IBUFDS_IBUFDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_IBUFDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_IBUFDISABLE.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_IBUFDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_INTERMDISABLE() {
        try {
            _IBUFDS_INTERMDISABLE = new EdifCell(library, "IBUFDS_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_INTERMDISABLE");
        }
        try {
            _IBUFDS_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_INTERMDISABLE.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LDT_25() {
        try {
            _IBUFDS_LDT_25 = new EdifCell(library, "IBUFDS_LDT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LDT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LDT_25");
        }
        try {
            _IBUFDS_LDT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LDT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LDT_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_25() {
        try {
            _IBUFDS_LVDSEXT_25 = new EdifCell(library, "IBUFDS_LVDSEXT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_25");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_25_DCI() {
        try {
            _IBUFDS_LVDSEXT_25_DCI = new EdifCell(library, "IBUFDS_LVDSEXT_25_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_25_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_25_DCI");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_25_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_33() {
        try {
            _IBUFDS_LVDSEXT_33 = new EdifCell(library, "IBUFDS_LVDSEXT_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_33");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDSEXT_33_DCI() {
        try {
            _IBUFDS_LVDSEXT_33_DCI = new EdifCell(library, "IBUFDS_LVDSEXT_33_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDSEXT_33_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDSEXT_33_DCI");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDSEXT_33_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_25() {
        try {
            _IBUFDS_LVDS_25 = new EdifCell(library, "IBUFDS_LVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_25");
        }
        try {
            _IBUFDS_LVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_25_DCI() {
        try {
            _IBUFDS_LVDS_25_DCI = new EdifCell(library, "IBUFDS_LVDS_25_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_25_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_25_DCI");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_25_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_33() {
        try {
            _IBUFDS_LVDS_33 = new EdifCell(library, "IBUFDS_LVDS_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_33");
        }
        try {
            _IBUFDS_LVDS_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVDS_33_DCI() {
        try {
            _IBUFDS_LVDS_33_DCI = new EdifCell(library, "IBUFDS_LVDS_33_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVDS_33_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVDS_33_DCI");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVDS_33_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVPECL_25() {
        try {
            _IBUFDS_LVPECL_25 = new EdifCell(library, "IBUFDS_LVPECL_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVPECL_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVPECL_25");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_LVPECL_33() {
        try {
            _IBUFDS_LVPECL_33 = new EdifCell(library, "IBUFDS_LVPECL_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_LVPECL_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_LVPECL_33");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_LVPECL_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_ULVDS_25() {
        try {
            _IBUFDS_ULVDS_25 = new EdifCell(library, "IBUFDS_ULVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_ULVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_ULVDS_25");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_ULVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG() {
        try {
            _IBUFG = new EdifCell(library, "IBUFG", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG");
        }
        try {
            _IBUFG.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS() {
        try {
            _IBUFGDS = new EdifCell(library, "IBUFGDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS");
        }
        try {
            _IBUFGDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_BLVDS_25() {
        try {
            _IBUFGDS_BLVDS_25 = new EdifCell(library, "IBUFGDS_BLVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_BLVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_BLVDS_25");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_BLVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_DIFF_OUT() {
        try {
            _IBUFGDS_DIFF_OUT = new EdifCell(library, "IBUFGDS_DIFF_OUT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_DIFF_OUT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_DIFF_OUT");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_DIFF_OUT.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LDT_25() {
        try {
            _IBUFGDS_LDT_25 = new EdifCell(library, "IBUFGDS_LDT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LDT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LDT_25");
        }
        try {
            _IBUFGDS_LDT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LDT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LDT_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_25() {
        try {
            _IBUFGDS_LVDSEXT_25 = new EdifCell(library, "IBUFGDS_LVDSEXT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_25");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_25_DCI() {
        try {
            _IBUFGDS_LVDSEXT_25_DCI = new EdifCell(library, "IBUFGDS_LVDSEXT_25_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_25_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_25_DCI");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_25_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_33() {
        try {
            _IBUFGDS_LVDSEXT_33 = new EdifCell(library, "IBUFGDS_LVDSEXT_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_33");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDSEXT_33_DCI() {
        try {
            _IBUFGDS_LVDSEXT_33_DCI = new EdifCell(library, "IBUFGDS_LVDSEXT_33_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDSEXT_33_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDSEXT_33_DCI");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDSEXT_33_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_25() {
        try {
            _IBUFGDS_LVDS_25 = new EdifCell(library, "IBUFGDS_LVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_25");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_25_DCI() {
        try {
            _IBUFGDS_LVDS_25_DCI = new EdifCell(library, "IBUFGDS_LVDS_25_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_25_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_25_DCI");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_25_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_33() {
        try {
            _IBUFGDS_LVDS_33 = new EdifCell(library, "IBUFGDS_LVDS_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_33");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVDS_33_DCI() {
        try {
            _IBUFGDS_LVDS_33_DCI = new EdifCell(library, "IBUFGDS_LVDS_33_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVDS_33_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVDS_33_DCI");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVDS_33_DCI.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVPECL_25() {
        try {
            _IBUFGDS_LVPECL_25 = new EdifCell(library, "IBUFGDS_LVPECL_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVPECL_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVPECL_25");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_LVPECL_33() {
        try {
            _IBUFGDS_LVPECL_33 = new EdifCell(library, "IBUFGDS_LVPECL_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_LVPECL_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_LVPECL_33");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_LVPECL_33.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFGDS_ULVDS_25() {
        try {
            _IBUFGDS_ULVDS_25 = new EdifCell(library, "IBUFGDS_ULVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFGDS_ULVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFGDS_ULVDS_25");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFGDS_ULVDS_25.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_AGP() {
        try {
            _IBUFG_AGP = new EdifCell(library, "IBUFG_AGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_AGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_AGP");
        }
        try {
            _IBUFG_AGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_AGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_CTT() {
        try {
            _IBUFG_CTT = new EdifCell(library, "IBUFG_CTT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_CTT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_CTT");
        }
        try {
            _IBUFG_CTT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_CTT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTL() {
        try {
            _IBUFG_GTL = new EdifCell(library, "IBUFG_GTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTL");
        }
        try {
            _IBUFG_GTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTLP() {
        try {
            _IBUFG_GTLP = new EdifCell(library, "IBUFG_GTLP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTLP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTLP");
        }
        try {
            _IBUFG_GTLP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTLP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTLP_DCI() {
        try {
            _IBUFG_GTLP_DCI = new EdifCell(library, "IBUFG_GTLP_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTLP_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTLP_DCI");
        }
        try {
            _IBUFG_GTLP_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTLP_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_GTL_DCI() {
        try {
            _IBUFG_GTL_DCI = new EdifCell(library, "IBUFG_GTL_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_GTL_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_GTL_DCI");
        }
        try {
            _IBUFG_GTL_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_GTL_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I() {
        try {
            _IBUFG_HSTL_I = new EdifCell(library, "IBUFG_HSTL_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I");
        }
        try {
            _IBUFG_HSTL_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II() {
        try {
            _IBUFG_HSTL_II = new EdifCell(library, "IBUFG_HSTL_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II");
        }
        try {
            _IBUFG_HSTL_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III() {
        try {
            _IBUFG_HSTL_III = new EdifCell(library, "IBUFG_HSTL_III", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III");
        }
        try {
            _IBUFG_HSTL_III.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_18() {
        try {
            _IBUFG_HSTL_III_18 = new EdifCell(library, "IBUFG_HSTL_III_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_18");
        }
        try {
            _IBUFG_HSTL_III_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_DCI() {
        try {
            _IBUFG_HSTL_III_DCI = new EdifCell(library, "IBUFG_HSTL_III_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_DCI");
        }
        try {
            _IBUFG_HSTL_III_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_III_DCI_18() {
        try {
            _IBUFG_HSTL_III_DCI_18 = new EdifCell(library, "IBUFG_HSTL_III_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_III_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_III_DCI_18");
        }
        try {
            _IBUFG_HSTL_III_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_III_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_18() {
        try {
            _IBUFG_HSTL_II_18 = new EdifCell(library, "IBUFG_HSTL_II_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_18");
        }
        try {
            _IBUFG_HSTL_II_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_DCI() {
        try {
            _IBUFG_HSTL_II_DCI = new EdifCell(library, "IBUFG_HSTL_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_DCI");
        }
        try {
            _IBUFG_HSTL_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_II_DCI_18() {
        try {
            _IBUFG_HSTL_II_DCI_18 = new EdifCell(library, "IBUFG_HSTL_II_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_II_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_II_DCI_18");
        }
        try {
            _IBUFG_HSTL_II_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_II_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV() {
        try {
            _IBUFG_HSTL_IV = new EdifCell(library, "IBUFG_HSTL_IV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV");
        }
        try {
            _IBUFG_HSTL_IV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_18() {
        try {
            _IBUFG_HSTL_IV_18 = new EdifCell(library, "IBUFG_HSTL_IV_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_18");
        }
        try {
            _IBUFG_HSTL_IV_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_DCI() {
        try {
            _IBUFG_HSTL_IV_DCI = new EdifCell(library, "IBUFG_HSTL_IV_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_DCI");
        }
        try {
            _IBUFG_HSTL_IV_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_IV_DCI_18() {
        try {
            _IBUFG_HSTL_IV_DCI_18 = new EdifCell(library, "IBUFG_HSTL_IV_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_IV_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_IV_DCI_18");
        }
        try {
            _IBUFG_HSTL_IV_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_IV_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_18() {
        try {
            _IBUFG_HSTL_I_18 = new EdifCell(library, "IBUFG_HSTL_I_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_18");
        }
        try {
            _IBUFG_HSTL_I_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_DCI() {
        try {
            _IBUFG_HSTL_I_DCI = new EdifCell(library, "IBUFG_HSTL_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_DCI");
        }
        try {
            _IBUFG_HSTL_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_HSTL_I_DCI_18() {
        try {
            _IBUFG_HSTL_I_DCI_18 = new EdifCell(library, "IBUFG_HSTL_I_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_HSTL_I_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_HSTL_I_DCI_18");
        }
        try {
            _IBUFG_HSTL_I_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_HSTL_I_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS12() {
        try {
            _IBUFG_LVCMOS12 = new EdifCell(library, "IBUFG_LVCMOS12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS12");
        }
        try {
            _IBUFG_LVCMOS12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS15() {
        try {
            _IBUFG_LVCMOS15 = new EdifCell(library, "IBUFG_LVCMOS15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS15");
        }
        try {
            _IBUFG_LVCMOS15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS18() {
        try {
            _IBUFG_LVCMOS18 = new EdifCell(library, "IBUFG_LVCMOS18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS18");
        }
        try {
            _IBUFG_LVCMOS18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS2() {
        try {
            _IBUFG_LVCMOS2 = new EdifCell(library, "IBUFG_LVCMOS2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS2");
        }
        try {
            _IBUFG_LVCMOS2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS25() {
        try {
            _IBUFG_LVCMOS25 = new EdifCell(library, "IBUFG_LVCMOS25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS25");
        }
        try {
            _IBUFG_LVCMOS25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVCMOS33() {
        try {
            _IBUFG_LVCMOS33 = new EdifCell(library, "IBUFG_LVCMOS33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVCMOS33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVCMOS33");
        }
        try {
            _IBUFG_LVCMOS33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVCMOS33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_15() {
        try {
            _IBUFG_LVDCI_15 = new EdifCell(library, "IBUFG_LVDCI_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_15");
        }
        try {
            _IBUFG_LVDCI_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_18() {
        try {
            _IBUFG_LVDCI_18 = new EdifCell(library, "IBUFG_LVDCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_18");
        }
        try {
            _IBUFG_LVDCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_25() {
        try {
            _IBUFG_LVDCI_25 = new EdifCell(library, "IBUFG_LVDCI_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_25");
        }
        try {
            _IBUFG_LVDCI_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_33() {
        try {
            _IBUFG_LVDCI_33 = new EdifCell(library, "IBUFG_LVDCI_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_33");
        }
        try {
            _IBUFG_LVDCI_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_15() {
        try {
            _IBUFG_LVDCI_DV2_15 = new EdifCell(library, "IBUFG_LVDCI_DV2_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_15");
        }
        try {
            _IBUFG_LVDCI_DV2_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_18() {
        try {
            _IBUFG_LVDCI_DV2_18 = new EdifCell(library, "IBUFG_LVDCI_DV2_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_18");
        }
        try {
            _IBUFG_LVDCI_DV2_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_25() {
        try {
            _IBUFG_LVDCI_DV2_25 = new EdifCell(library, "IBUFG_LVDCI_DV2_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_25");
        }
        try {
            _IBUFG_LVDCI_DV2_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDCI_DV2_33() {
        try {
            _IBUFG_LVDCI_DV2_33 = new EdifCell(library, "IBUFG_LVDCI_DV2_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDCI_DV2_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDCI_DV2_33");
        }
        try {
            _IBUFG_LVDCI_DV2_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDCI_DV2_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVDS() {
        try {
            _IBUFG_LVDS = new EdifCell(library, "IBUFG_LVDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVDS");
        }
        try {
            _IBUFG_LVDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVPECL() {
        try {
            _IBUFG_LVPECL = new EdifCell(library, "IBUFG_LVPECL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVPECL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVPECL");
        }
        try {
            _IBUFG_LVPECL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVPECL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_LVTTL() {
        try {
            _IBUFG_LVTTL = new EdifCell(library, "IBUFG_LVTTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_LVTTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_LVTTL");
        }
        try {
            _IBUFG_LVTTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_LVTTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI33_3() {
        try {
            _IBUFG_PCI33_3 = new EdifCell(library, "IBUFG_PCI33_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI33_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI33_3");
        }
        try {
            _IBUFG_PCI33_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI33_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI33_5() {
        try {
            _IBUFG_PCI33_5 = new EdifCell(library, "IBUFG_PCI33_5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI33_5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI33_5");
        }
        try {
            _IBUFG_PCI33_5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI33_5.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCI66_3() {
        try {
            _IBUFG_PCI66_3 = new EdifCell(library, "IBUFG_PCI66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCI66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCI66_3");
        }
        try {
            _IBUFG_PCI66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCI66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCIX() {
        try {
            _IBUFG_PCIX = new EdifCell(library, "IBUFG_PCIX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCIX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCIX");
        }
        try {
            _IBUFG_PCIX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCIX.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_PCIX66_3() {
        try {
            _IBUFG_PCIX66_3 = new EdifCell(library, "IBUFG_PCIX66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_PCIX66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_PCIX66_3");
        }
        try {
            _IBUFG_PCIX66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_PCIX66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_I() {
        try {
            _IBUFG_SSTL18_I = new EdifCell(library, "IBUFG_SSTL18_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_I");
        }
        try {
            _IBUFG_SSTL18_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_II() {
        try {
            _IBUFG_SSTL18_II = new EdifCell(library, "IBUFG_SSTL18_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_II");
        }
        try {
            _IBUFG_SSTL18_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_II_DCI() {
        try {
            _IBUFG_SSTL18_II_DCI = new EdifCell(library, "IBUFG_SSTL18_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_II_DCI");
        }
        try {
            _IBUFG_SSTL18_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL18_I_DCI() {
        try {
            _IBUFG_SSTL18_I_DCI = new EdifCell(library, "IBUFG_SSTL18_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL18_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL18_I_DCI");
        }
        try {
            _IBUFG_SSTL18_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL18_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_I() {
        try {
            _IBUFG_SSTL2_I = new EdifCell(library, "IBUFG_SSTL2_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_I");
        }
        try {
            _IBUFG_SSTL2_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_II() {
        try {
            _IBUFG_SSTL2_II = new EdifCell(library, "IBUFG_SSTL2_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_II");
        }
        try {
            _IBUFG_SSTL2_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_II_DCI() {
        try {
            _IBUFG_SSTL2_II_DCI = new EdifCell(library, "IBUFG_SSTL2_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_II_DCI");
        }
        try {
            _IBUFG_SSTL2_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL2_I_DCI() {
        try {
            _IBUFG_SSTL2_I_DCI = new EdifCell(library, "IBUFG_SSTL2_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL2_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL2_I_DCI");
        }
        try {
            _IBUFG_SSTL2_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL2_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_I() {
        try {
            _IBUFG_SSTL3_I = new EdifCell(library, "IBUFG_SSTL3_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_I");
        }
        try {
            _IBUFG_SSTL3_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_II() {
        try {
            _IBUFG_SSTL3_II = new EdifCell(library, "IBUFG_SSTL3_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_II");
        }
        try {
            _IBUFG_SSTL3_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_II_DCI() {
        try {
            _IBUFG_SSTL3_II_DCI = new EdifCell(library, "IBUFG_SSTL3_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_II_DCI");
        }
        try {
            _IBUFG_SSTL3_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFG_SSTL3_I_DCI() {
        try {
            _IBUFG_SSTL3_I_DCI = new EdifCell(library, "IBUFG_SSTL3_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFG_SSTL3_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFG_SSTL3_I_DCI");
        }
        try {
            _IBUFG_SSTL3_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFG_SSTL3_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_AGP() {
        try {
            _IBUF_AGP = new EdifCell(library, "IBUF_AGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_AGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_AGP");
        }
        try {
            _IBUF_AGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_AGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_CTT() {
        try {
            _IBUF_CTT = new EdifCell(library, "IBUF_CTT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_CTT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_CTT");
        }
        try {
            _IBUF_CTT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_CTT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_DLY_ADJ() {
        try {
            _IBUF_DLY_ADJ = new EdifCell(library, "IBUF_DLY_ADJ", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_DLY_ADJ");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_DLY_ADJ");
        }
        try {
            _IBUF_DLY_ADJ.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_DLY_ADJ.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_DLY_ADJ.addPort(S_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTL() {
        try {
            _IBUF_GTL = new EdifCell(library, "IBUF_GTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTL");
        }
        try {
            _IBUF_GTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTLP() {
        try {
            _IBUF_GTLP = new EdifCell(library, "IBUF_GTLP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTLP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTLP");
        }
        try {
            _IBUF_GTLP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTLP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTLP_DCI() {
        try {
            _IBUF_GTLP_DCI = new EdifCell(library, "IBUF_GTLP_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTLP_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTLP_DCI");
        }
        try {
            _IBUF_GTLP_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTLP_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_GTL_DCI() {
        try {
            _IBUF_GTL_DCI = new EdifCell(library, "IBUF_GTL_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_GTL_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_GTL_DCI");
        }
        try {
            _IBUF_GTL_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_GTL_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I() {
        try {
            _IBUF_HSTL_I = new EdifCell(library, "IBUF_HSTL_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I");
        }
        try {
            _IBUF_HSTL_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II() {
        try {
            _IBUF_HSTL_II = new EdifCell(library, "IBUF_HSTL_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II");
        }
        try {
            _IBUF_HSTL_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III() {
        try {
            _IBUF_HSTL_III = new EdifCell(library, "IBUF_HSTL_III", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III");
        }
        try {
            _IBUF_HSTL_III.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_18() {
        try {
            _IBUF_HSTL_III_18 = new EdifCell(library, "IBUF_HSTL_III_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_18");
        }
        try {
            _IBUF_HSTL_III_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_DCI() {
        try {
            _IBUF_HSTL_III_DCI = new EdifCell(library, "IBUF_HSTL_III_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_DCI");
        }
        try {
            _IBUF_HSTL_III_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_III_DCI_18() {
        try {
            _IBUF_HSTL_III_DCI_18 = new EdifCell(library, "IBUF_HSTL_III_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_III_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_III_DCI_18");
        }
        try {
            _IBUF_HSTL_III_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_III_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_18() {
        try {
            _IBUF_HSTL_II_18 = new EdifCell(library, "IBUF_HSTL_II_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_18");
        }
        try {
            _IBUF_HSTL_II_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_DCI() {
        try {
            _IBUF_HSTL_II_DCI = new EdifCell(library, "IBUF_HSTL_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_DCI");
        }
        try {
            _IBUF_HSTL_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_II_DCI_18() {
        try {
            _IBUF_HSTL_II_DCI_18 = new EdifCell(library, "IBUF_HSTL_II_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_II_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_II_DCI_18");
        }
        try {
            _IBUF_HSTL_II_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_II_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV() {
        try {
            _IBUF_HSTL_IV = new EdifCell(library, "IBUF_HSTL_IV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV");
        }
        try {
            _IBUF_HSTL_IV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_18() {
        try {
            _IBUF_HSTL_IV_18 = new EdifCell(library, "IBUF_HSTL_IV_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_18");
        }
        try {
            _IBUF_HSTL_IV_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_DCI() {
        try {
            _IBUF_HSTL_IV_DCI = new EdifCell(library, "IBUF_HSTL_IV_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_DCI");
        }
        try {
            _IBUF_HSTL_IV_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_IV_DCI_18() {
        try {
            _IBUF_HSTL_IV_DCI_18 = new EdifCell(library, "IBUF_HSTL_IV_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_IV_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_IV_DCI_18");
        }
        try {
            _IBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_18() {
        try {
            _IBUF_HSTL_I_18 = new EdifCell(library, "IBUF_HSTL_I_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_18");
        }
        try {
            _IBUF_HSTL_I_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_DCI() {
        try {
            _IBUF_HSTL_I_DCI = new EdifCell(library, "IBUF_HSTL_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_DCI");
        }
        try {
            _IBUF_HSTL_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_HSTL_I_DCI_18() {
        try {
            _IBUF_HSTL_I_DCI_18 = new EdifCell(library, "IBUF_HSTL_I_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_HSTL_I_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_HSTL_I_DCI_18");
        }
        try {
            _IBUF_HSTL_I_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_HSTL_I_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_IBUFDISABLE() {
        try {
            _IBUF_IBUFDISABLE = new EdifCell(library, "IBUF_IBUFDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_IBUFDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_IBUFDISABLE");
        }
        try {
            _IBUF_IBUFDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_IBUFDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_IBUFDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_INTERMDISABLE() {
        try {
            _IBUF_INTERMDISABLE = new EdifCell(library, "IBUF_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_INTERMDISABLE");
        }
        try {
            _IBUF_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS12() {
        try {
            _IBUF_LVCMOS12 = new EdifCell(library, "IBUF_LVCMOS12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS12");
        }
        try {
            _IBUF_LVCMOS12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS15() {
        try {
            _IBUF_LVCMOS15 = new EdifCell(library, "IBUF_LVCMOS15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS15");
        }
        try {
            _IBUF_LVCMOS15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS18() {
        try {
            _IBUF_LVCMOS18 = new EdifCell(library, "IBUF_LVCMOS18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS18");
        }
        try {
            _IBUF_LVCMOS18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS2() {
        try {
            _IBUF_LVCMOS2 = new EdifCell(library, "IBUF_LVCMOS2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS2");
        }
        try {
            _IBUF_LVCMOS2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS25() {
        try {
            _IBUF_LVCMOS25 = new EdifCell(library, "IBUF_LVCMOS25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS25");
        }
        try {
            _IBUF_LVCMOS25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVCMOS33() {
        try {
            _IBUF_LVCMOS33 = new EdifCell(library, "IBUF_LVCMOS33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVCMOS33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVCMOS33");
        }
        try {
            _IBUF_LVCMOS33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVCMOS33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_15() {
        try {
            _IBUF_LVDCI_15 = new EdifCell(library, "IBUF_LVDCI_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_15");
        }
        try {
            _IBUF_LVDCI_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_18() {
        try {
            _IBUF_LVDCI_18 = new EdifCell(library, "IBUF_LVDCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_18");
        }
        try {
            _IBUF_LVDCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_25() {
        try {
            _IBUF_LVDCI_25 = new EdifCell(library, "IBUF_LVDCI_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_25");
        }
        try {
            _IBUF_LVDCI_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_33() {
        try {
            _IBUF_LVDCI_33 = new EdifCell(library, "IBUF_LVDCI_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_33");
        }
        try {
            _IBUF_LVDCI_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_15() {
        try {
            _IBUF_LVDCI_DV2_15 = new EdifCell(library, "IBUF_LVDCI_DV2_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_15");
        }
        try {
            _IBUF_LVDCI_DV2_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_18() {
        try {
            _IBUF_LVDCI_DV2_18 = new EdifCell(library, "IBUF_LVDCI_DV2_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_18");
        }
        try {
            _IBUF_LVDCI_DV2_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_25() {
        try {
            _IBUF_LVDCI_DV2_25 = new EdifCell(library, "IBUF_LVDCI_DV2_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_25");
        }
        try {
            _IBUF_LVDCI_DV2_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDCI_DV2_33() {
        try {
            _IBUF_LVDCI_DV2_33 = new EdifCell(library, "IBUF_LVDCI_DV2_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDCI_DV2_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDCI_DV2_33");
        }
        try {
            _IBUF_LVDCI_DV2_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDCI_DV2_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVDS() {
        try {
            _IBUF_LVDS = new EdifCell(library, "IBUF_LVDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVDS");
        }
        try {
            _IBUF_LVDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVPECL() {
        try {
            _IBUF_LVPECL = new EdifCell(library, "IBUF_LVPECL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVPECL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVPECL");
        }
        try {
            _IBUF_LVPECL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVPECL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_LVTTL() {
        try {
            _IBUF_LVTTL = new EdifCell(library, "IBUF_LVTTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_LVTTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_LVTTL");
        }
        try {
            _IBUF_LVTTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_LVTTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI33_3() {
        try {
            _IBUF_PCI33_3 = new EdifCell(library, "IBUF_PCI33_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI33_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI33_3");
        }
        try {
            _IBUF_PCI33_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI33_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI33_5() {
        try {
            _IBUF_PCI33_5 = new EdifCell(library, "IBUF_PCI33_5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI33_5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI33_5");
        }
        try {
            _IBUF_PCI33_5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI33_5.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCI66_3() {
        try {
            _IBUF_PCI66_3 = new EdifCell(library, "IBUF_PCI66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCI66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCI66_3");
        }
        try {
            _IBUF_PCI66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCI66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCIX() {
        try {
            _IBUF_PCIX = new EdifCell(library, "IBUF_PCIX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCIX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCIX");
        }
        try {
            _IBUF_PCIX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCIX.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_PCIX66_3() {
        try {
            _IBUF_PCIX66_3 = new EdifCell(library, "IBUF_PCIX66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_PCIX66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_PCIX66_3");
        }
        try {
            _IBUF_PCIX66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_PCIX66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_I() {
        try {
            _IBUF_SSTL18_I = new EdifCell(library, "IBUF_SSTL18_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_I");
        }
        try {
            _IBUF_SSTL18_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_II() {
        try {
            _IBUF_SSTL18_II = new EdifCell(library, "IBUF_SSTL18_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_II");
        }
        try {
            _IBUF_SSTL18_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_II_DCI() {
        try {
            _IBUF_SSTL18_II_DCI = new EdifCell(library, "IBUF_SSTL18_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_II_DCI");
        }
        try {
            _IBUF_SSTL18_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL18_I_DCI() {
        try {
            _IBUF_SSTL18_I_DCI = new EdifCell(library, "IBUF_SSTL18_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL18_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL18_I_DCI");
        }
        try {
            _IBUF_SSTL18_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL18_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_I() {
        try {
            _IBUF_SSTL2_I = new EdifCell(library, "IBUF_SSTL2_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_I");
        }
        try {
            _IBUF_SSTL2_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_II() {
        try {
            _IBUF_SSTL2_II = new EdifCell(library, "IBUF_SSTL2_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_II");
        }
        try {
            _IBUF_SSTL2_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_II_DCI() {
        try {
            _IBUF_SSTL2_II_DCI = new EdifCell(library, "IBUF_SSTL2_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_II_DCI");
        }
        try {
            _IBUF_SSTL2_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL2_I_DCI() {
        try {
            _IBUF_SSTL2_I_DCI = new EdifCell(library, "IBUF_SSTL2_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL2_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL2_I_DCI");
        }
        try {
            _IBUF_SSTL2_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL2_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_I() {
        try {
            _IBUF_SSTL3_I = new EdifCell(library, "IBUF_SSTL3_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_I");
        }
        try {
            _IBUF_SSTL3_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_II() {
        try {
            _IBUF_SSTL3_II = new EdifCell(library, "IBUF_SSTL3_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_II");
        }
        try {
            _IBUF_SSTL3_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_II_DCI() {
        try {
            _IBUF_SSTL3_II_DCI = new EdifCell(library, "IBUF_SSTL3_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_II_DCI");
        }
        try {
            _IBUF_SSTL3_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUF_SSTL3_I_DCI() {
        try {
            _IBUF_SSTL3_I_DCI = new EdifCell(library, "IBUF_SSTL3_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUF_SSTL3_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUF_SSTL3_I_DCI");
        }
        try {
            _IBUF_SSTL3_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUF_SSTL3_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAPE2() {
        try {
            _ICAPE2 = new EdifCell(library, "ICAPE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAPE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAPE2");
        }
        try {
            _ICAPE2.addPort(O_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE2.addPort(CSIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE2.addPort(I_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE2.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_SPARTAN3A() {
        try {
            _ICAP_SPARTAN3A = new EdifCell(library, "ICAP_SPARTAN3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_SPARTAN3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_SPARTAN3A");
        }
        try {
            _ICAP_SPARTAN3A.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN3A.addPort(O_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN3A.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN3A.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN3A.addPort(I_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN3A.addPort(WRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_SPARTAN6() {
        try {
            _ICAP_SPARTAN6 = new EdifCell(library, "ICAP_SPARTAN6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_SPARTAN6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_SPARTAN6");
        }
        try {
            _ICAP_SPARTAN6.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN6.addPort(O_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN6.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN6.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN6.addPort(I_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_SPARTAN6.addPort(WRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX4() {
        try {
            _ICAP_VIRTEX4 = new EdifCell(library, "ICAP_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX4");
        }
        try {
            _ICAP_VIRTEX4.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(O_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(I_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX4.addPort(WRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX5() {
        try {
            _ICAP_VIRTEX5 = new EdifCell(library, "ICAP_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX5");
        }
        try {
            _ICAP_VIRTEX5.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(O_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(I_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX5.addPort(WRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAP_VIRTEX6() {
        try {
            _ICAP_VIRTEX6 = new EdifCell(library, "ICAP_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAP_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAP_VIRTEX6");
        }
        try {
            _ICAP_VIRTEX6.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX6.addPort(O_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX6.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX6.addPort(CSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX6.addPort(I_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAP_VIRTEX6.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDDR() {
        try {
            _IDDR = new EdifCell(library, "IDDR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDDR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDDR");
        }
        try {
            _IDDR.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDDR2() {
        try {
            _IDDR2 = new EdifCell(library, "IDDR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDDR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDDR2");
        }
        try {
            _IDDR2.addPort(Q0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR2.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDDR_2CLK() {
        try {
            _IDDR_2CLK = new EdifCell(library, "IDDR_2CLK", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDDR_2CLK");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDDR_2CLK");
        }
        try {
            _IDDR_2CLK.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(CB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDDR_2CLK.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAY() {
        try {
            _IDELAY = new EdifCell(library, "IDELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAY");
        }
        try {
            _IDELAY.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAY.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAYCTRL() {
        try {
            _IDELAYCTRL = new EdifCell(library, "IDELAYCTRL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAYCTRL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAYCTRL");
        }
        try {
            _IDELAYCTRL.addPort(RDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYCTRL.addPort(REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYCTRL.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAYE2() {
        try {
            _IDELAYE2 = new EdifCell(library, "IDELAYE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAYE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAYE2");
        }
        try {
            _IDELAYE2.addPort(CNTVALUEOUT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(CINVCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(CNTVALUEIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(DATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(LDPIPEEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2.addPort(REGRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAYE2_FINEDELAY() {
        try {
            _IDELAYE2_FINEDELAY = new EdifCell(library, "IDELAYE2_FINEDELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAYE2_FINEDELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAYE2_FINEDELAY");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(CNTVALUEOUT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(CINVCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(CNTVALUEIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(DATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(IFDLY_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(LDPIPEEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE2_FINEDELAY.addPort(REGRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIFDDRCPE() {
        try {
            _IFDDRCPE = new EdifCell(library, "IFDDRCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IFDDRCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IFDDRCPE");
        }
        try {
            _IFDDRCPE.addPort(Q0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIFDDRRSE() {
        try {
            _IFDDRRSE = new EdifCell(library, "IFDDRRSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IFDDRRSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IFDDRRSE");
        }
        try {
            _IFDDRRSE.addPort(Q0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IFDDRRSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initILD() {
        try {
            _ILD = new EdifCell(library, "ILD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ILD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ILD");
        }
        try {
            _ILD.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ILD.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ILD.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initINV() {
        try {
            _INV = new EdifCell(library, "INV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: INV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: INV");
        }
        try {
            _INV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _INV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIN_FIFO() {
        try {
            _IN_FIFO = new EdifCell(library, "IN_FIFO", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IN_FIFO");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IN_FIFO");
        }
        try {
            _IN_FIFO.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q4_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q5_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q6_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q7_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q8_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(Q9_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D1_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D2_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D3_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D4_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D5_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D6_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D7_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D8_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(D9_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFO.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF() {
        try {
            _IOBUF = new EdifCell(library, "IOBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF");
        }
        try {
            _IOBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS() {
        try {
            _IOBUFDS = new EdifCell(library, "IOBUFDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS");
        }
        try {
            _IOBUFDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_BLVDS_25() {
        try {
            _IOBUFDS_BLVDS_25 = new EdifCell(library, "IOBUFDS_BLVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_BLVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_BLVDS_25");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_BLVDS_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_DCIEN() {
        try {
            _IOBUFDS_DCIEN = new EdifCell(library, "IOBUFDS_DCIEN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_DCIEN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_DCIEN");
        }
        try {
            _IOBUFDS_DCIEN.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(DCITERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DCIEN.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_DIFF_OUT() {
        try {
            _IOBUFDS_DIFF_OUT = new EdifCell(library, "IOBUFDS_DIFF_OUT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_DIFF_OUT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_DIFF_OUT");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(TM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT.addPort(TS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_DIFF_OUT_DCIEN() {
        try {
            _IOBUFDS_DIFF_OUT_DCIEN = new EdifCell(library, "IOBUFDS_DIFF_OUT_DCIEN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_DIFF_OUT_DCIEN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_DIFF_OUT_DCIEN");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(DCITERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(TM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_DCIEN.addPort(TS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_DIFF_OUT_INTERMDISABLE() {
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE = new EdifCell(library, "IOBUFDS_DIFF_OUT_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_DIFF_OUT_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_DIFF_OUT_INTERMDISABLE");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(TM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_DIFF_OUT_INTERMDISABLE.addPort(TS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFDS_INTERMDISABLE() {
        try {
            _IOBUFDS_INTERMDISABLE = new EdifCell(library, "IOBUFDS_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFDS_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFDS_INTERMDISABLE");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(IOB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFDS_INTERMDISABLE.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUFE() {
        try {
            _IOBUFE = new EdifCell(library, "IOBUFE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUFE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUFE");
        }
        try {
            _IOBUFE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(E_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUFE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_AGP() {
        try {
            _IOBUF_AGP = new EdifCell(library, "IOBUF_AGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_AGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_AGP");
        }
        try {
            _IOBUF_AGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_AGP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_CTT() {
        try {
            _IOBUF_CTT = new EdifCell(library, "IOBUF_CTT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_CTT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_CTT");
        }
        try {
            _IOBUF_CTT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_CTT.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_DCIEN() {
        try {
            _IOBUF_DCIEN = new EdifCell(library, "IOBUF_DCIEN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_DCIEN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_DCIEN");
        }
        try {
            _IOBUF_DCIEN.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_DCIEN.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_DCIEN.addPort(DCITERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_DCIEN.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_DCIEN.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_DCIEN.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_12() {
        try {
            _IOBUF_F_12 = new EdifCell(library, "IOBUF_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_12");
        }
        try {
            _IOBUF_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_16() {
        try {
            _IOBUF_F_16 = new EdifCell(library, "IOBUF_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_16");
        }
        try {
            _IOBUF_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_2() {
        try {
            _IOBUF_F_2 = new EdifCell(library, "IOBUF_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_2");
        }
        try {
            _IOBUF_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_24() {
        try {
            _IOBUF_F_24 = new EdifCell(library, "IOBUF_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_24");
        }
        try {
            _IOBUF_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_4() {
        try {
            _IOBUF_F_4 = new EdifCell(library, "IOBUF_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_4");
        }
        try {
            _IOBUF_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_6() {
        try {
            _IOBUF_F_6 = new EdifCell(library, "IOBUF_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_6");
        }
        try {
            _IOBUF_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_F_8() {
        try {
            _IOBUF_F_8 = new EdifCell(library, "IOBUF_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_F_8");
        }
        try {
            _IOBUF_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTL() {
        try {
            _IOBUF_GTL = new EdifCell(library, "IOBUF_GTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTL");
        }
        try {
            _IOBUF_GTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTLP() {
        try {
            _IOBUF_GTLP = new EdifCell(library, "IOBUF_GTLP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTLP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTLP");
        }
        try {
            _IOBUF_GTLP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTLP_DCI() {
        try {
            _IOBUF_GTLP_DCI = new EdifCell(library, "IOBUF_GTLP_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTLP_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTLP_DCI");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTLP_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_GTL_DCI() {
        try {
            _IOBUF_GTL_DCI = new EdifCell(library, "IOBUF_GTL_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_GTL_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_GTL_DCI");
        }
        try {
            _IOBUF_GTL_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_GTL_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_I() {
        try {
            _IOBUF_HSTL_I = new EdifCell(library, "IOBUF_HSTL_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_I");
        }
        try {
            _IOBUF_HSTL_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II() {
        try {
            _IOBUF_HSTL_II = new EdifCell(library, "IOBUF_HSTL_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II");
        }
        try {
            _IOBUF_HSTL_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_III() {
        try {
            _IOBUF_HSTL_III = new EdifCell(library, "IOBUF_HSTL_III", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_III");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_III");
        }
        try {
            _IOBUF_HSTL_III.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_III_18() {
        try {
            _IOBUF_HSTL_III_18 = new EdifCell(library, "IOBUF_HSTL_III_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_III_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_III_18");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_III_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_18() {
        try {
            _IOBUF_HSTL_II_18 = new EdifCell(library, "IOBUF_HSTL_II_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_18");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_DCI() {
        try {
            _IOBUF_HSTL_II_DCI = new EdifCell(library, "IOBUF_HSTL_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_DCI");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_II_DCI_18() {
        try {
            _IOBUF_HSTL_II_DCI_18 = new EdifCell(library, "IOBUF_HSTL_II_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_II_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_II_DCI_18");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_II_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV() {
        try {
            _IOBUF_HSTL_IV = new EdifCell(library, "IOBUF_HSTL_IV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV");
        }
        try {
            _IOBUF_HSTL_IV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_18() {
        try {
            _IOBUF_HSTL_IV_18 = new EdifCell(library, "IOBUF_HSTL_IV_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_18");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_DCI() {
        try {
            _IOBUF_HSTL_IV_DCI = new EdifCell(library, "IOBUF_HSTL_IV_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_DCI");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_IV_DCI_18() {
        try {
            _IOBUF_HSTL_IV_DCI_18 = new EdifCell(library, "IOBUF_HSTL_IV_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_IV_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_IV_DCI_18");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_IV_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_HSTL_I_18() {
        try {
            _IOBUF_HSTL_I_18 = new EdifCell(library, "IOBUF_HSTL_I_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_HSTL_I_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_HSTL_I_18");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_HSTL_I_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_INTERMDISABLE() {
        try {
            _IOBUF_INTERMDISABLE = new EdifCell(library, "IOBUF_INTERMDISABLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_INTERMDISABLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_INTERMDISABLE");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(IBUFDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(INTERMDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_INTERMDISABLE.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12() {
        try {
            _IOBUF_LVCMOS12 = new EdifCell(library, "IOBUF_LVCMOS12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12");
        }
        try {
            _IOBUF_LVCMOS12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_2() {
        try {
            _IOBUF_LVCMOS12_F_2 = new EdifCell(library, "IOBUF_LVCMOS12_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_2");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_4() {
        try {
            _IOBUF_LVCMOS12_F_4 = new EdifCell(library, "IOBUF_LVCMOS12_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_4");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_6() {
        try {
            _IOBUF_LVCMOS12_F_6 = new EdifCell(library, "IOBUF_LVCMOS12_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_6");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_F_8() {
        try {
            _IOBUF_LVCMOS12_F_8 = new EdifCell(library, "IOBUF_LVCMOS12_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_F_8");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_2() {
        try {
            _IOBUF_LVCMOS12_S_2 = new EdifCell(library, "IOBUF_LVCMOS12_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_2");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_4() {
        try {
            _IOBUF_LVCMOS12_S_4 = new EdifCell(library, "IOBUF_LVCMOS12_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_4");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_6() {
        try {
            _IOBUF_LVCMOS12_S_6 = new EdifCell(library, "IOBUF_LVCMOS12_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_6");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS12_S_8() {
        try {
            _IOBUF_LVCMOS12_S_8 = new EdifCell(library, "IOBUF_LVCMOS12_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS12_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS12_S_8");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS12_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15() {
        try {
            _IOBUF_LVCMOS15 = new EdifCell(library, "IOBUF_LVCMOS15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15");
        }
        try {
            _IOBUF_LVCMOS15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_12() {
        try {
            _IOBUF_LVCMOS15_F_12 = new EdifCell(library, "IOBUF_LVCMOS15_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_12");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_16() {
        try {
            _IOBUF_LVCMOS15_F_16 = new EdifCell(library, "IOBUF_LVCMOS15_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_16");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_2() {
        try {
            _IOBUF_LVCMOS15_F_2 = new EdifCell(library, "IOBUF_LVCMOS15_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_2");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_4() {
        try {
            _IOBUF_LVCMOS15_F_4 = new EdifCell(library, "IOBUF_LVCMOS15_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_4");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_6() {
        try {
            _IOBUF_LVCMOS15_F_6 = new EdifCell(library, "IOBUF_LVCMOS15_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_6");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_F_8() {
        try {
            _IOBUF_LVCMOS15_F_8 = new EdifCell(library, "IOBUF_LVCMOS15_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_F_8");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_12() {
        try {
            _IOBUF_LVCMOS15_S_12 = new EdifCell(library, "IOBUF_LVCMOS15_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_12");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_16() {
        try {
            _IOBUF_LVCMOS15_S_16 = new EdifCell(library, "IOBUF_LVCMOS15_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_16");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_2() {
        try {
            _IOBUF_LVCMOS15_S_2 = new EdifCell(library, "IOBUF_LVCMOS15_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_2");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_4() {
        try {
            _IOBUF_LVCMOS15_S_4 = new EdifCell(library, "IOBUF_LVCMOS15_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_4");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_6() {
        try {
            _IOBUF_LVCMOS15_S_6 = new EdifCell(library, "IOBUF_LVCMOS15_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_6");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS15_S_8() {
        try {
            _IOBUF_LVCMOS15_S_8 = new EdifCell(library, "IOBUF_LVCMOS15_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS15_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS15_S_8");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS15_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18() {
        try {
            _IOBUF_LVCMOS18 = new EdifCell(library, "IOBUF_LVCMOS18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18");
        }
        try {
            _IOBUF_LVCMOS18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_12() {
        try {
            _IOBUF_LVCMOS18_F_12 = new EdifCell(library, "IOBUF_LVCMOS18_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_12");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_16() {
        try {
            _IOBUF_LVCMOS18_F_16 = new EdifCell(library, "IOBUF_LVCMOS18_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_16");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_2() {
        try {
            _IOBUF_LVCMOS18_F_2 = new EdifCell(library, "IOBUF_LVCMOS18_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_2");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_4() {
        try {
            _IOBUF_LVCMOS18_F_4 = new EdifCell(library, "IOBUF_LVCMOS18_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_4");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_6() {
        try {
            _IOBUF_LVCMOS18_F_6 = new EdifCell(library, "IOBUF_LVCMOS18_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_6");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_F_8() {
        try {
            _IOBUF_LVCMOS18_F_8 = new EdifCell(library, "IOBUF_LVCMOS18_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_F_8");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_12() {
        try {
            _IOBUF_LVCMOS18_S_12 = new EdifCell(library, "IOBUF_LVCMOS18_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_12");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_16() {
        try {
            _IOBUF_LVCMOS18_S_16 = new EdifCell(library, "IOBUF_LVCMOS18_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_16");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_2() {
        try {
            _IOBUF_LVCMOS18_S_2 = new EdifCell(library, "IOBUF_LVCMOS18_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_2");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_4() {
        try {
            _IOBUF_LVCMOS18_S_4 = new EdifCell(library, "IOBUF_LVCMOS18_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_4");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_6() {
        try {
            _IOBUF_LVCMOS18_S_6 = new EdifCell(library, "IOBUF_LVCMOS18_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_6");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS18_S_8() {
        try {
            _IOBUF_LVCMOS18_S_8 = new EdifCell(library, "IOBUF_LVCMOS18_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS18_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS18_S_8");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS18_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS2() {
        try {
            _IOBUF_LVCMOS2 = new EdifCell(library, "IOBUF_LVCMOS2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS2");
        }
        try {
            _IOBUF_LVCMOS2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25() {
        try {
            _IOBUF_LVCMOS25 = new EdifCell(library, "IOBUF_LVCMOS25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25");
        }
        try {
            _IOBUF_LVCMOS25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_12() {
        try {
            _IOBUF_LVCMOS25_F_12 = new EdifCell(library, "IOBUF_LVCMOS25_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_12");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_16() {
        try {
            _IOBUF_LVCMOS25_F_16 = new EdifCell(library, "IOBUF_LVCMOS25_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_16");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_2() {
        try {
            _IOBUF_LVCMOS25_F_2 = new EdifCell(library, "IOBUF_LVCMOS25_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_2");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_24() {
        try {
            _IOBUF_LVCMOS25_F_24 = new EdifCell(library, "IOBUF_LVCMOS25_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_24");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_4() {
        try {
            _IOBUF_LVCMOS25_F_4 = new EdifCell(library, "IOBUF_LVCMOS25_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_4");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_6() {
        try {
            _IOBUF_LVCMOS25_F_6 = new EdifCell(library, "IOBUF_LVCMOS25_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_6");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_F_8() {
        try {
            _IOBUF_LVCMOS25_F_8 = new EdifCell(library, "IOBUF_LVCMOS25_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_F_8");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_12() {
        try {
            _IOBUF_LVCMOS25_S_12 = new EdifCell(library, "IOBUF_LVCMOS25_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_12");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_16() {
        try {
            _IOBUF_LVCMOS25_S_16 = new EdifCell(library, "IOBUF_LVCMOS25_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_16");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_2() {
        try {
            _IOBUF_LVCMOS25_S_2 = new EdifCell(library, "IOBUF_LVCMOS25_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_2");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_24() {
        try {
            _IOBUF_LVCMOS25_S_24 = new EdifCell(library, "IOBUF_LVCMOS25_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_24");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_4() {
        try {
            _IOBUF_LVCMOS25_S_4 = new EdifCell(library, "IOBUF_LVCMOS25_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_4");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_6() {
        try {
            _IOBUF_LVCMOS25_S_6 = new EdifCell(library, "IOBUF_LVCMOS25_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_6");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS25_S_8() {
        try {
            _IOBUF_LVCMOS25_S_8 = new EdifCell(library, "IOBUF_LVCMOS25_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS25_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS25_S_8");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS25_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33() {
        try {
            _IOBUF_LVCMOS33 = new EdifCell(library, "IOBUF_LVCMOS33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33");
        }
        try {
            _IOBUF_LVCMOS33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_12() {
        try {
            _IOBUF_LVCMOS33_F_12 = new EdifCell(library, "IOBUF_LVCMOS33_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_12");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_16() {
        try {
            _IOBUF_LVCMOS33_F_16 = new EdifCell(library, "IOBUF_LVCMOS33_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_16");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_2() {
        try {
            _IOBUF_LVCMOS33_F_2 = new EdifCell(library, "IOBUF_LVCMOS33_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_2");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_24() {
        try {
            _IOBUF_LVCMOS33_F_24 = new EdifCell(library, "IOBUF_LVCMOS33_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_24");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_4() {
        try {
            _IOBUF_LVCMOS33_F_4 = new EdifCell(library, "IOBUF_LVCMOS33_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_4");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_6() {
        try {
            _IOBUF_LVCMOS33_F_6 = new EdifCell(library, "IOBUF_LVCMOS33_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_6");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_F_8() {
        try {
            _IOBUF_LVCMOS33_F_8 = new EdifCell(library, "IOBUF_LVCMOS33_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_F_8");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_12() {
        try {
            _IOBUF_LVCMOS33_S_12 = new EdifCell(library, "IOBUF_LVCMOS33_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_12");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_16() {
        try {
            _IOBUF_LVCMOS33_S_16 = new EdifCell(library, "IOBUF_LVCMOS33_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_16");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_2() {
        try {
            _IOBUF_LVCMOS33_S_2 = new EdifCell(library, "IOBUF_LVCMOS33_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_2");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_24() {
        try {
            _IOBUF_LVCMOS33_S_24 = new EdifCell(library, "IOBUF_LVCMOS33_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_24");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_4() {
        try {
            _IOBUF_LVCMOS33_S_4 = new EdifCell(library, "IOBUF_LVCMOS33_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_4");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_6() {
        try {
            _IOBUF_LVCMOS33_S_6 = new EdifCell(library, "IOBUF_LVCMOS33_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_6");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVCMOS33_S_8() {
        try {
            _IOBUF_LVCMOS33_S_8 = new EdifCell(library, "IOBUF_LVCMOS33_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVCMOS33_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVCMOS33_S_8");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVCMOS33_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_15() {
        try {
            _IOBUF_LVDCI_15 = new EdifCell(library, "IOBUF_LVDCI_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_15");
        }
        try {
            _IOBUF_LVDCI_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_18() {
        try {
            _IOBUF_LVDCI_18 = new EdifCell(library, "IOBUF_LVDCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_18");
        }
        try {
            _IOBUF_LVDCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_25() {
        try {
            _IOBUF_LVDCI_25 = new EdifCell(library, "IOBUF_LVDCI_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_25");
        }
        try {
            _IOBUF_LVDCI_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_33() {
        try {
            _IOBUF_LVDCI_33 = new EdifCell(library, "IOBUF_LVDCI_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_33");
        }
        try {
            _IOBUF_LVDCI_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_15() {
        try {
            _IOBUF_LVDCI_DV2_15 = new EdifCell(library, "IOBUF_LVDCI_DV2_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_15");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_18() {
        try {
            _IOBUF_LVDCI_DV2_18 = new EdifCell(library, "IOBUF_LVDCI_DV2_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_18");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_25() {
        try {
            _IOBUF_LVDCI_DV2_25 = new EdifCell(library, "IOBUF_LVDCI_DV2_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_25");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDCI_DV2_33() {
        try {
            _IOBUF_LVDCI_DV2_33 = new EdifCell(library, "IOBUF_LVDCI_DV2_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDCI_DV2_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDCI_DV2_33");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDCI_DV2_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVDS() {
        try {
            _IOBUF_LVDS = new EdifCell(library, "IOBUF_LVDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVDS");
        }
        try {
            _IOBUF_LVDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVDS.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVPECL() {
        try {
            _IOBUF_LVPECL = new EdifCell(library, "IOBUF_LVPECL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVPECL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVPECL");
        }
        try {
            _IOBUF_LVPECL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVPECL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL() {
        try {
            _IOBUF_LVTTL = new EdifCell(library, "IOBUF_LVTTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL");
        }
        try {
            _IOBUF_LVTTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_12() {
        try {
            _IOBUF_LVTTL_F_12 = new EdifCell(library, "IOBUF_LVTTL_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_12");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_16() {
        try {
            _IOBUF_LVTTL_F_16 = new EdifCell(library, "IOBUF_LVTTL_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_16");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_2() {
        try {
            _IOBUF_LVTTL_F_2 = new EdifCell(library, "IOBUF_LVTTL_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_2");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_24() {
        try {
            _IOBUF_LVTTL_F_24 = new EdifCell(library, "IOBUF_LVTTL_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_24");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_4() {
        try {
            _IOBUF_LVTTL_F_4 = new EdifCell(library, "IOBUF_LVTTL_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_4");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_6() {
        try {
            _IOBUF_LVTTL_F_6 = new EdifCell(library, "IOBUF_LVTTL_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_6");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_F_8() {
        try {
            _IOBUF_LVTTL_F_8 = new EdifCell(library, "IOBUF_LVTTL_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_F_8");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_12() {
        try {
            _IOBUF_LVTTL_S_12 = new EdifCell(library, "IOBUF_LVTTL_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_12");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_16() {
        try {
            _IOBUF_LVTTL_S_16 = new EdifCell(library, "IOBUF_LVTTL_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_16");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_2() {
        try {
            _IOBUF_LVTTL_S_2 = new EdifCell(library, "IOBUF_LVTTL_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_2");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_24() {
        try {
            _IOBUF_LVTTL_S_24 = new EdifCell(library, "IOBUF_LVTTL_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_24");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_4() {
        try {
            _IOBUF_LVTTL_S_4 = new EdifCell(library, "IOBUF_LVTTL_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_4");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_6() {
        try {
            _IOBUF_LVTTL_S_6 = new EdifCell(library, "IOBUF_LVTTL_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_6");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_LVTTL_S_8() {
        try {
            _IOBUF_LVTTL_S_8 = new EdifCell(library, "IOBUF_LVTTL_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_LVTTL_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_LVTTL_S_8");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_LVTTL_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI33_3() {
        try {
            _IOBUF_PCI33_3 = new EdifCell(library, "IOBUF_PCI33_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI33_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI33_3");
        }
        try {
            _IOBUF_PCI33_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI33_5() {
        try {
            _IOBUF_PCI33_5 = new EdifCell(library, "IOBUF_PCI33_5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI33_5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI33_5");
        }
        try {
            _IOBUF_PCI33_5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI33_5.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCI66_3() {
        try {
            _IOBUF_PCI66_3 = new EdifCell(library, "IOBUF_PCI66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCI66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCI66_3");
        }
        try {
            _IOBUF_PCI66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCI66_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCIX() {
        try {
            _IOBUF_PCIX = new EdifCell(library, "IOBUF_PCIX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCIX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCIX");
        }
        try {
            _IOBUF_PCIX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_PCIX66_3() {
        try {
            _IOBUF_PCIX66_3 = new EdifCell(library, "IOBUF_PCIX66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_PCIX66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_PCIX66_3");
        }
        try {
            _IOBUF_PCIX66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_PCIX66_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_I() {
        try {
            _IOBUF_SSTL18_I = new EdifCell(library, "IOBUF_SSTL18_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_I");
        }
        try {
            _IOBUF_SSTL18_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_II() {
        try {
            _IOBUF_SSTL18_II = new EdifCell(library, "IOBUF_SSTL18_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_II");
        }
        try {
            _IOBUF_SSTL18_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL18_II_DCI() {
        try {
            _IOBUF_SSTL18_II_DCI = new EdifCell(library, "IOBUF_SSTL18_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL18_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL18_II_DCI");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL18_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_I() {
        try {
            _IOBUF_SSTL2_I = new EdifCell(library, "IOBUF_SSTL2_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_I");
        }
        try {
            _IOBUF_SSTL2_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_II() {
        try {
            _IOBUF_SSTL2_II = new EdifCell(library, "IOBUF_SSTL2_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_II");
        }
        try {
            _IOBUF_SSTL2_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL2_II_DCI() {
        try {
            _IOBUF_SSTL2_II_DCI = new EdifCell(library, "IOBUF_SSTL2_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL2_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL2_II_DCI");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL2_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_I() {
        try {
            _IOBUF_SSTL3_I = new EdifCell(library, "IOBUF_SSTL3_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_I");
        }
        try {
            _IOBUF_SSTL3_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_II() {
        try {
            _IOBUF_SSTL3_II = new EdifCell(library, "IOBUF_SSTL3_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_II");
        }
        try {
            _IOBUF_SSTL3_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_SSTL3_II_DCI() {
        try {
            _IOBUF_SSTL3_II_DCI = new EdifCell(library, "IOBUF_SSTL3_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_SSTL3_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_SSTL3_II_DCI");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_SSTL3_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_12() {
        try {
            _IOBUF_S_12 = new EdifCell(library, "IOBUF_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_12");
        }
        try {
            _IOBUF_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_16() {
        try {
            _IOBUF_S_16 = new EdifCell(library, "IOBUF_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_16");
        }
        try {
            _IOBUF_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_2() {
        try {
            _IOBUF_S_2 = new EdifCell(library, "IOBUF_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_2");
        }
        try {
            _IOBUF_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_24() {
        try {
            _IOBUF_S_24 = new EdifCell(library, "IOBUF_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_24");
        }
        try {
            _IOBUF_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_4() {
        try {
            _IOBUF_S_4 = new EdifCell(library, "IOBUF_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_4");
        }
        try {
            _IOBUF_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_6() {
        try {
            _IOBUF_S_6 = new EdifCell(library, "IOBUF_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_6");
        }
        try {
            _IOBUF_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIOBUF_S_8() {
        try {
            _IOBUF_S_8 = new EdifCell(library, "IOBUF_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IOBUF_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IOBUF_S_8");
        }
        try {
            _IOBUF_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(IO_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IOBUF_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODELAY() {
        try {
            _IODELAY = new EdifCell(library, "IODELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODELAY");
        }
        try {
            _IODELAY.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(DATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODELAY2() {
        try {
            _IODELAY2 = new EdifCell(library, "IODELAY2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODELAY2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODELAY2");
        }
        try {
            _IODELAY2.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(DATAOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(TOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(CAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(IOCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(IOCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAY2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODELAYE1() {
        try {
            _IODELAYE1 = new EdifCell(library, "IODELAYE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODELAYE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODELAYE1");
        }
        try {
            _IODELAYE1.addPort(CNTVALUEOUT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(CINVCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(CNTVALUEIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(DATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODELAYE1.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODRP2() {
        try {
            _IODRP2 = new EdifCell(library, "IODRP2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODRP2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODRP2");
        }
        try {
            _IODRP2.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(DATAOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(SDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(TOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(ADD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(BKST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(CS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(IOCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(IOCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(SDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIODRP2_MCB() {
        try {
            _IODRP2_MCB = new EdifCell(library, "IODRP2_MCB", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IODRP2_MCB");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IODRP2_MCB");
        }
        try {
            _IODRP2_MCB.addPort(AUXSDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(DATAOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(DQSOUTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(DQSOUTP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(SDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(TOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(ADD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(AUXADDR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(AUXSDOIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(BKST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(CS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(IOCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(IOCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(MEMUPDATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(SDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IODRP2_MCB.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDES() {
        try {
            _ISERDES = new EdifCell(library, "ISERDES", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDES");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDES");
        }
        try {
            _ISERDES.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(Q6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(BITSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CE2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(DLYRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(OCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(REV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES.addPort(SR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDES2() {
        try {
            _ISERDES2 = new EdifCell(library, "ISERDES2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDES2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDES2");
        }
        try {
            _ISERDES2.addPort(CFB0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(CFB1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(DFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(FABRICOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(INCDEC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(Q3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(Q4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(SHIFTOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(VALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(BITSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(CE0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(CLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(CLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(IOCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES2.addPort(SHIFTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDESE1() {
        try {
            _ISERDESE1 = new EdifCell(library, "ISERDESE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDESE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDESE1");
        }
        try {
            _ISERDESE1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(Q6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(BITSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(CE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(CE2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(DDLY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(DYNCLKDIVSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(DYNCLKSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(OCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(OFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE1.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDESE2() {
        try {
            _ISERDESE2 = new EdifCell(library, "ISERDESE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDESE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDESE2");
        }
        try {
            _ISERDESE2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(Q8_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(BITSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CE2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(CLKDIVP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(DDLY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(DYNCLKDIVSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(DYNCLKSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(OCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(OCLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(OFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE2.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDES_NODELAY() {
        try {
            _ISERDES_NODELAY = new EdifCell(library, "ISERDES_NODELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDES_NODELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDES_NODELAY");
        }
        try {
            _ISERDES_NODELAY.addPort(Q1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(Q6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(BITSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CE2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(OCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDES_NODELAY.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAGPPC() {
        try {
            _JTAGPPC = new EdifCell(library, "JTAGPPC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAGPPC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAGPPC");
        }
        try {
            _JTAGPPC.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDIPPC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDOPPC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC.addPort(TDOTSPPC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAGPPC440() {
        try {
            _JTAGPPC440 = new EdifCell(library, "JTAGPPC440", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAGPPC440");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAGPPC440");
        }
        try {
            _JTAGPPC440.addPort(TCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC440.addPort(TDIPPC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC440.addPort(TMS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAGPPC440.addPort(TDOPPC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIME2() {
        try {
            _JTAG_SIME2 = new EdifCell(library, "JTAG_SIME2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIME2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIME2");
        }
        try {
            _JTAG_SIME2.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIME2.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIME2.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIME2.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIM_SPARTAN3A() {
        try {
            _JTAG_SIM_SPARTAN3A = new EdifCell(library, "JTAG_SIM_SPARTAN3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIM_SPARTAN3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIM_SPARTAN3A");
        }
        try {
            _JTAG_SIM_SPARTAN3A.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN3A.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN3A.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN3A.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIM_SPARTAN6() {
        try {
            _JTAG_SIM_SPARTAN6 = new EdifCell(library, "JTAG_SIM_SPARTAN6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIM_SPARTAN6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIM_SPARTAN6");
        }
        try {
            _JTAG_SIM_SPARTAN6.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN6.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN6.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_SPARTAN6.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIM_VIRTEX4() {
        try {
            _JTAG_SIM_VIRTEX4 = new EdifCell(library, "JTAG_SIM_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIM_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIM_VIRTEX4");
        }
        try {
            _JTAG_SIM_VIRTEX4.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX4.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX4.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX4.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIM_VIRTEX5() {
        try {
            _JTAG_SIM_VIRTEX5 = new EdifCell(library, "JTAG_SIM_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIM_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIM_VIRTEX5");
        }
        try {
            _JTAG_SIM_VIRTEX5.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX5.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX5.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX5.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initJTAG_SIM_VIRTEX6() {
        try {
            _JTAG_SIM_VIRTEX6 = new EdifCell(library, "JTAG_SIM_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: JTAG_SIM_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: JTAG_SIM_VIRTEX6");
        }
        try {
            _JTAG_SIM_VIRTEX6.addPort(TDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX6.addPort(TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX6.addPort(TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _JTAG_SIM_VIRTEX6.addPort(TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEEP() {
        try {
            _KEEP = new EdifCell(library, "KEEP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEEP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEEP");
        }
        try {
            _KEEP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _KEEP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEEPER() {
        try {
            _KEEPER = new EdifCell(library, "KEEPER", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEEPER");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEEPER");
        }
        try {
            _KEEPER.addPort(O_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initKEY_CLEAR() {
        try {
            _KEY_CLEAR = new EdifCell(library, "KEY_CLEAR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: KEY_CLEAR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: KEY_CLEAR");
        }
        try {
            _KEY_CLEAR.addPort(KEYCLEARB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLD() {
        try {
            _LD = new EdifCell(library, "LD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LD");
        }
        try {
            _LD.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDC() {
        try {
            _LDC = new EdifCell(library, "LDC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDC");
        }
        try {
            _LDC.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCE() {
        try {
            _LDCE = new EdifCell(library, "LDCE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCE");
        }
        try {
            _LDCE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCE_1() {
        try {
            _LDCE_1 = new EdifCell(library, "LDCE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCE_1");
        }
        try {
            _LDCE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCE_1.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCP() {
        try {
            _LDCP = new EdifCell(library, "LDCP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCP");
        }
        try {
            _LDCP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCPE() {
        try {
            _LDCPE = new EdifCell(library, "LDCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCPE");
        }
        try {
            _LDCPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCPE_1() {
        try {
            _LDCPE_1 = new EdifCell(library, "LDCPE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCPE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCPE_1");
        }
        try {
            _LDCPE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCPE_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDCP_1() {
        try {
            _LDCP_1 = new EdifCell(library, "LDCP_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDCP_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDCP_1");
        }
        try {
            _LDCP_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDCP_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDC_1() {
        try {
            _LDC_1 = new EdifCell(library, "LDC_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDC_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDC_1");
        }
        try {
            _LDC_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDC_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDE() {
        try {
            _LDE = new EdifCell(library, "LDE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDE");
        }
        try {
            _LDE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDE_1() {
        try {
            _LDE_1 = new EdifCell(library, "LDE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDE_1");
        }
        try {
            _LDE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDE_1.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDG() {
        try {
            _LDG = new EdifCell(library, "LDG", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDG");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDG");
        }
        try {
            _LDG.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDG.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDG.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDP() {
        try {
            _LDP = new EdifCell(library, "LDP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDP");
        }
        try {
            _LDP.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDPE() {
        try {
            _LDPE = new EdifCell(library, "LDPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDPE");
        }
        try {
            _LDPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDPE_1() {
        try {
            _LDPE_1 = new EdifCell(library, "LDPE_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDPE_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDPE_1");
        }
        try {
            _LDPE_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(GE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDPE_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLDP_1() {
        try {
            _LDP_1 = new EdifCell(library, "LDP_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LDP_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LDP_1");
        }
        try {
            _LDP_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LDP_1.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLD_1() {
        try {
            _LD_1 = new EdifCell(library, "LD_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LD_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LD_1");
        }
        try {
            _LD_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LD_1.addPort(G_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1() {
        try {
            _LUT1 = new EdifCell(library, "LUT1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1");
        }
        try {
            _LUT1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1_D() {
        try {
            _LUT1_D = new EdifCell(library, "LUT1_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1_D");
        }
        try {
            _LUT1_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT1_L() {
        try {
            _LUT1_L = new EdifCell(library, "LUT1_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT1_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT1_L");
        }
        try {
            _LUT1_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT1_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2() {
        try {
            _LUT2 = new EdifCell(library, "LUT2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2");
        }
        try {
            _LUT2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2_D() {
        try {
            _LUT2_D = new EdifCell(library, "LUT2_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2_D");
        }
        try {
            _LUT2_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT2_L() {
        try {
            _LUT2_L = new EdifCell(library, "LUT2_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT2_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT2_L");
        }
        try {
            _LUT2_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT2_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3() {
        try {
            _LUT3 = new EdifCell(library, "LUT3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3");
        }
        try {
            _LUT3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3_D() {
        try {
            _LUT3_D = new EdifCell(library, "LUT3_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3_D");
        }
        try {
            _LUT3_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_D.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT3_L() {
        try {
            _LUT3_L = new EdifCell(library, "LUT3_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT3_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT3_L");
        }
        try {
            _LUT3_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT3_L.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4() {
        try {
            _LUT4 = new EdifCell(library, "LUT4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4");
        }
        try {
            _LUT4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4_D() {
        try {
            _LUT4_D = new EdifCell(library, "LUT4_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4_D");
        }
        try {
            _LUT4_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_D.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT4_L() {
        try {
            _LUT4_L = new EdifCell(library, "LUT4_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT4_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT4_L");
        }
        try {
            _LUT4_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT4_L.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5() {
        try {
            _LUT5 = new EdifCell(library, "LUT5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5");
        }
        try {
            _LUT5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5_D() {
        try {
            _LUT5_D = new EdifCell(library, "LUT5_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5_D");
        }
        try {
            _LUT5_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_D.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT5_L() {
        try {
            _LUT5_L = new EdifCell(library, "LUT5_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT5_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT5_L");
        }
        try {
            _LUT5_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT5_L.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6() {
        try {
            _LUT6 = new EdifCell(library, "LUT6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6");
        }
        try {
            _LUT6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6_2() {
        try {
            _LUT6_2 = new EdifCell(library, "LUT6_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6_2");
        }
        try {
            _LUT6_2.addPort(O5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(O6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_2.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6_D() {
        try {
            _LUT6_D = new EdifCell(library, "LUT6_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6_D");
        }
        try {
            _LUT6_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_D.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initLUT6_L() {
        try {
            _LUT6_L = new EdifCell(library, "LUT6_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: LUT6_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: LUT6_L");
        }
        try {
            _LUT6_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _LUT6_L.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMCB() {
        try {
            _MCB = new EdifCell(library, "MCB", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MCB");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MCB");
        }
        try {
            _MCB.addPort(ADDR_port_name, 15,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(BA_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(CAS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(CKE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQIOWEN0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQON_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQOP_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQSIOWEN90N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQSIOWEN90P_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPADD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPADDR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPBROADCAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPSDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPTRAIN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPUPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(LDMN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(LDMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(ODT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDCOUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRCOUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WREMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDCOUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRCOUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WREMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2COUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2ERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3COUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3ERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4COUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4ERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5COUNT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5ERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5RDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5RDOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5WRUNDERRUN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(RAS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(RST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(SELFREFRESHMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(STATUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UDMN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UDMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UOCALSTART_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UOCMDREADYIN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UODATA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UODATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UODONECAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UOREFRSHFLAG_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UOSDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(WE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQSIOIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(DQSIOIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(IOIDRPSDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0RWRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P0WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1RWRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P1WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P2WRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P3WRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P4WRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5ARBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDBA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDBL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDCA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDINSTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5CMDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5WRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(P5WRMASK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(PLLCE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(PLLCLK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(PLLLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(RECAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(SELFREFRESHENTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(SYSRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UDQSIOIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UDQSIOIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIADD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIADDR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIBROADCAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UICLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UICMD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UICMDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UICMDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UICS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDONECAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDQCOUNT_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDQLOWERDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDQLOWERINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDQUPPERDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDQUPPERINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIDRPUPDATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UILDQSDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UILDQSINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UISDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIUDQSDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MCB.addPort(UIUDQSINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMERGE() {
        try {
            _MERGE = new EdifCell(library, "MERGE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MERGE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MERGE");
        }
        try {
            _MERGE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMIN_OFF() {
        try {
            _MIN_OFF = new EdifCell(library, "MIN_OFF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MIN_OFF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MIN_OFF");
        }
        try {
            _MIN_OFF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCME2_ADV() {
        try {
            _MMCME2_ADV = new EdifCell(library, "MMCME2_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCME2_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCME2_ADV");
        }
        try {
            _MMCME2_ADV.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKFBSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKINSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(CLKINSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCME2_BASE() {
        try {
            _MMCME2_BASE = new EdifCell(library, "MMCME2_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCME2_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCME2_BASE");
        }
        try {
            _MMCME2_BASE.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME2_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCM_ADV() {
        try {
            _MMCM_ADV = new EdifCell(library, "MMCM_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCM_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCM_ADV");
        }
        try {
            _MMCM_ADV.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKFBSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKINSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(CLKINSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCM_BASE() {
        try {
            _MMCM_BASE = new EdifCell(library, "MMCM_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCM_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCM_BASE");
        }
        try {
            _MMCM_BASE.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCM_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18() {
        try {
            _MULT18X18 = new EdifCell(library, "MULT18X18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18");
        }
        try {
            _MULT18X18.addPort(P_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18S() {
        try {
            _MULT18X18S = new EdifCell(library, "MULT18X18S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18S");
        }
        try {
            _MULT18X18S.addPort(P_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18S.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT18X18SIO() {
        try {
            _MULT18X18SIO = new EdifCell(library, "MULT18X18SIO", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT18X18SIO");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT18X18SIO");
        }
        try {
            _MULT18X18SIO.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(P_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(A_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(BCIN_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT18X18SIO.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMULT_AND() {
        try {
            _MULT_AND = new EdifCell(library, "MULT_AND", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MULT_AND");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MULT_AND");
        }
        try {
            _MULT_AND.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT_AND.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MULT_AND.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY() {
        try {
            _MUXCY = new EdifCell(library, "MUXCY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY");
        }
        try {
            _MUXCY.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY_D() {
        try {
            _MUXCY_D = new EdifCell(library, "MUXCY_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY_D");
        }
        try {
            _MUXCY_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_D.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXCY_L() {
        try {
            _MUXCY_L = new EdifCell(library, "MUXCY_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXCY_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXCY_L");
        }
        try {
            _MUXCY_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXCY_L.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5() {
        try {
            _MUXF5 = new EdifCell(library, "MUXF5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5");
        }
        try {
            _MUXF5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5_D() {
        try {
            _MUXF5_D = new EdifCell(library, "MUXF5_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5_D");
        }
        try {
            _MUXF5_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_D.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF5_L() {
        try {
            _MUXF5_L = new EdifCell(library, "MUXF5_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF5_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF5_L");
        }
        try {
            _MUXF5_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF5_L.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6() {
        try {
            _MUXF6 = new EdifCell(library, "MUXF6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6");
        }
        try {
            _MUXF6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6_D() {
        try {
            _MUXF6_D = new EdifCell(library, "MUXF6_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6_D");
        }
        try {
            _MUXF6_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_D.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF6_L() {
        try {
            _MUXF6_L = new EdifCell(library, "MUXF6_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF6_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF6_L");
        }
        try {
            _MUXF6_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF6_L.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7() {
        try {
            _MUXF7 = new EdifCell(library, "MUXF7", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7");
        }
        try {
            _MUXF7.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7_D() {
        try {
            _MUXF7_D = new EdifCell(library, "MUXF7_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7_D");
        }
        try {
            _MUXF7_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_D.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF7_L() {
        try {
            _MUXF7_L = new EdifCell(library, "MUXF7_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF7_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF7_L");
        }
        try {
            _MUXF7_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF7_L.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8() {
        try {
            _MUXF8 = new EdifCell(library, "MUXF8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8");
        }
        try {
            _MUXF8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8_D() {
        try {
            _MUXF8_D = new EdifCell(library, "MUXF8_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8_D");
        }
        try {
            _MUXF8_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_D.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF8_L() {
        try {
            _MUXF8_L = new EdifCell(library, "MUXF8_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF8_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF8_L");
        }
        try {
            _MUXF8_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF8_L.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2() {
        try {
            _NAND2 = new EdifCell(library, "NAND2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2");
        }
        try {
            _NAND2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2B1() {
        try {
            _NAND2B1 = new EdifCell(library, "NAND2B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2B1");
        }
        try {
            _NAND2B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND2B2() {
        try {
            _NAND2B2 = new EdifCell(library, "NAND2B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND2B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND2B2");
        }
        try {
            _NAND2B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND2B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3() {
        try {
            _NAND3 = new EdifCell(library, "NAND3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3");
        }
        try {
            _NAND3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B1() {
        try {
            _NAND3B1 = new EdifCell(library, "NAND3B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B1");
        }
        try {
            _NAND3B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B2() {
        try {
            _NAND3B2 = new EdifCell(library, "NAND3B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B2");
        }
        try {
            _NAND3B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND3B3() {
        try {
            _NAND3B3 = new EdifCell(library, "NAND3B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND3B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND3B3");
        }
        try {
            _NAND3B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND3B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4() {
        try {
            _NAND4 = new EdifCell(library, "NAND4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4");
        }
        try {
            _NAND4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B1() {
        try {
            _NAND4B1 = new EdifCell(library, "NAND4B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B1");
        }
        try {
            _NAND4B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B2() {
        try {
            _NAND4B2 = new EdifCell(library, "NAND4B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B2");
        }
        try {
            _NAND4B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B3() {
        try {
            _NAND4B3 = new EdifCell(library, "NAND4B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B3");
        }
        try {
            _NAND4B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND4B4() {
        try {
            _NAND4B4 = new EdifCell(library, "NAND4B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND4B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND4B4");
        }
        try {
            _NAND4B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND4B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5() {
        try {
            _NAND5 = new EdifCell(library, "NAND5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5");
        }
        try {
            _NAND5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B1() {
        try {
            _NAND5B1 = new EdifCell(library, "NAND5B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B1");
        }
        try {
            _NAND5B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B1.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B2() {
        try {
            _NAND5B2 = new EdifCell(library, "NAND5B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B2");
        }
        try {
            _NAND5B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B2.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B3() {
        try {
            _NAND5B3 = new EdifCell(library, "NAND5B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B3");
        }
        try {
            _NAND5B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B3.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B4() {
        try {
            _NAND5B4 = new EdifCell(library, "NAND5B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B4");
        }
        try {
            _NAND5B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B4.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNAND5B5() {
        try {
            _NAND5B5 = new EdifCell(library, "NAND5B5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NAND5B5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NAND5B5");
        }
        try {
            _NAND5B5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NAND5B5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2() {
        try {
            _NOR2 = new EdifCell(library, "NOR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2");
        }
        try {
            _NOR2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2B1() {
        try {
            _NOR2B1 = new EdifCell(library, "NOR2B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2B1");
        }
        try {
            _NOR2B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR2B2() {
        try {
            _NOR2B2 = new EdifCell(library, "NOR2B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR2B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR2B2");
        }
        try {
            _NOR2B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR2B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3() {
        try {
            _NOR3 = new EdifCell(library, "NOR3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3");
        }
        try {
            _NOR3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B1() {
        try {
            _NOR3B1 = new EdifCell(library, "NOR3B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B1");
        }
        try {
            _NOR3B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B2() {
        try {
            _NOR3B2 = new EdifCell(library, "NOR3B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B2");
        }
        try {
            _NOR3B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR3B3() {
        try {
            _NOR3B3 = new EdifCell(library, "NOR3B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR3B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR3B3");
        }
        try {
            _NOR3B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR3B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4() {
        try {
            _NOR4 = new EdifCell(library, "NOR4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4");
        }
        try {
            _NOR4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B1() {
        try {
            _NOR4B1 = new EdifCell(library, "NOR4B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B1");
        }
        try {
            _NOR4B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B2() {
        try {
            _NOR4B2 = new EdifCell(library, "NOR4B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B2");
        }
        try {
            _NOR4B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B3() {
        try {
            _NOR4B3 = new EdifCell(library, "NOR4B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B3");
        }
        try {
            _NOR4B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR4B4() {
        try {
            _NOR4B4 = new EdifCell(library, "NOR4B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR4B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR4B4");
        }
        try {
            _NOR4B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR4B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5() {
        try {
            _NOR5 = new EdifCell(library, "NOR5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5");
        }
        try {
            _NOR5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B1() {
        try {
            _NOR5B1 = new EdifCell(library, "NOR5B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B1");
        }
        try {
            _NOR5B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B1.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B2() {
        try {
            _NOR5B2 = new EdifCell(library, "NOR5B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B2");
        }
        try {
            _NOR5B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B2.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B3() {
        try {
            _NOR5B3 = new EdifCell(library, "NOR5B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B3");
        }
        try {
            _NOR5B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B3.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B4() {
        try {
            _NOR5B4 = new EdifCell(library, "NOR5B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B4");
        }
        try {
            _NOR5B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B4.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initNOR5B5() {
        try {
            _NOR5B5 = new EdifCell(library, "NOR5B5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: NOR5B5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: NOR5B5");
        }
        try {
            _NOR5B5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _NOR5B5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF() {
        try {
            _OBUF = new EdifCell(library, "OBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF");
        }
        try {
            _OBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS() {
        try {
            _OBUFDS = new EdifCell(library, "OBUFDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS");
        }
        try {
            _OBUFDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_BLVDS_25() {
        try {
            _OBUFDS_BLVDS_25 = new EdifCell(library, "OBUFDS_BLVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_BLVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_BLVDS_25");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_BLVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LDT_25() {
        try {
            _OBUFDS_LDT_25 = new EdifCell(library, "OBUFDS_LDT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LDT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LDT_25");
        }
        try {
            _OBUFDS_LDT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LDT_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LDT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDSEXT_25() {
        try {
            _OBUFDS_LVDSEXT_25 = new EdifCell(library, "OBUFDS_LVDSEXT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDSEXT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDSEXT_25");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDSEXT_33() {
        try {
            _OBUFDS_LVDSEXT_33 = new EdifCell(library, "OBUFDS_LVDSEXT_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDSEXT_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDSEXT_33");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDSEXT_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDS_25() {
        try {
            _OBUFDS_LVDS_25 = new EdifCell(library, "OBUFDS_LVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDS_25");
        }
        try {
            _OBUFDS_LVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVDS_33() {
        try {
            _OBUFDS_LVDS_33 = new EdifCell(library, "OBUFDS_LVDS_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVDS_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVDS_33");
        }
        try {
            _OBUFDS_LVDS_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVDS_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVPECL_25() {
        try {
            _OBUFDS_LVPECL_25 = new EdifCell(library, "OBUFDS_LVPECL_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVPECL_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVPECL_25");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_LVPECL_33() {
        try {
            _OBUFDS_LVPECL_33 = new EdifCell(library, "OBUFDS_LVPECL_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_LVPECL_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_LVPECL_33");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_LVPECL_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFDS_ULVDS_25() {
        try {
            _OBUFDS_ULVDS_25 = new EdifCell(library, "OBUFDS_ULVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFDS_ULVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFDS_ULVDS_25");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFDS_ULVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFE() {
        try {
            _OBUFE = new EdifCell(library, "OBUFE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFE");
        }
        try {
            _OBUFE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFE.addPort(E_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFE.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT() {
        try {
            _OBUFT = new EdifCell(library, "OBUFT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT");
        }
        try {
            _OBUFT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS() {
        try {
            _OBUFTDS = new EdifCell(library, "OBUFTDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS");
        }
        try {
            _OBUFTDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_BLVDS_25() {
        try {
            _OBUFTDS_BLVDS_25 = new EdifCell(library, "OBUFTDS_BLVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_BLVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_BLVDS_25");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_BLVDS_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LDT_25() {
        try {
            _OBUFTDS_LDT_25 = new EdifCell(library, "OBUFTDS_LDT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LDT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LDT_25");
        }
        try {
            _OBUFTDS_LDT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LDT_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDSEXT_25() {
        try {
            _OBUFTDS_LVDSEXT_25 = new EdifCell(library, "OBUFTDS_LVDSEXT_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDSEXT_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDSEXT_25");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDSEXT_33() {
        try {
            _OBUFTDS_LVDSEXT_33 = new EdifCell(library, "OBUFTDS_LVDSEXT_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDSEXT_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDSEXT_33");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDSEXT_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDS_25() {
        try {
            _OBUFTDS_LVDS_25 = new EdifCell(library, "OBUFTDS_LVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDS_25");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVDS_33() {
        try {
            _OBUFTDS_LVDS_33 = new EdifCell(library, "OBUFTDS_LVDS_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVDS_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVDS_33");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVDS_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVPECL_25() {
        try {
            _OBUFTDS_LVPECL_25 = new EdifCell(library, "OBUFTDS_LVPECL_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVPECL_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVPECL_25");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_LVPECL_33() {
        try {
            _OBUFTDS_LVPECL_33 = new EdifCell(library, "OBUFTDS_LVPECL_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_LVPECL_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_LVPECL_33");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_LVPECL_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFTDS_ULVDS_25() {
        try {
            _OBUFTDS_ULVDS_25 = new EdifCell(library, "OBUFTDS_ULVDS_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFTDS_ULVDS_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFTDS_ULVDS_25");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(OB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFTDS_ULVDS_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_AGP() {
        try {
            _OBUFT_AGP = new EdifCell(library, "OBUFT_AGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_AGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_AGP");
        }
        try {
            _OBUFT_AGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_AGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_AGP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_CTT() {
        try {
            _OBUFT_CTT = new EdifCell(library, "OBUFT_CTT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_CTT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_CTT");
        }
        try {
            _OBUFT_CTT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_CTT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_CTT.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_12() {
        try {
            _OBUFT_F_12 = new EdifCell(library, "OBUFT_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_12");
        }
        try {
            _OBUFT_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_16() {
        try {
            _OBUFT_F_16 = new EdifCell(library, "OBUFT_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_16");
        }
        try {
            _OBUFT_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_2() {
        try {
            _OBUFT_F_2 = new EdifCell(library, "OBUFT_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_2");
        }
        try {
            _OBUFT_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_24() {
        try {
            _OBUFT_F_24 = new EdifCell(library, "OBUFT_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_24");
        }
        try {
            _OBUFT_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_4() {
        try {
            _OBUFT_F_4 = new EdifCell(library, "OBUFT_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_4");
        }
        try {
            _OBUFT_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_6() {
        try {
            _OBUFT_F_6 = new EdifCell(library, "OBUFT_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_6");
        }
        try {
            _OBUFT_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_F_8() {
        try {
            _OBUFT_F_8 = new EdifCell(library, "OBUFT_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_F_8");
        }
        try {
            _OBUFT_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTL() {
        try {
            _OBUFT_GTL = new EdifCell(library, "OBUFT_GTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTL");
        }
        try {
            _OBUFT_GTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTLP() {
        try {
            _OBUFT_GTLP = new EdifCell(library, "OBUFT_GTLP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTLP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTLP");
        }
        try {
            _OBUFT_GTLP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTLP_DCI() {
        try {
            _OBUFT_GTLP_DCI = new EdifCell(library, "OBUFT_GTLP_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTLP_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTLP_DCI");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTLP_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_GTL_DCI() {
        try {
            _OBUFT_GTL_DCI = new EdifCell(library, "OBUFT_GTL_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_GTL_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_GTL_DCI");
        }
        try {
            _OBUFT_GTL_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_GTL_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I() {
        try {
            _OBUFT_HSTL_I = new EdifCell(library, "OBUFT_HSTL_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I");
        }
        try {
            _OBUFT_HSTL_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II() {
        try {
            _OBUFT_HSTL_II = new EdifCell(library, "OBUFT_HSTL_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II");
        }
        try {
            _OBUFT_HSTL_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III() {
        try {
            _OBUFT_HSTL_III = new EdifCell(library, "OBUFT_HSTL_III", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III");
        }
        try {
            _OBUFT_HSTL_III.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_18() {
        try {
            _OBUFT_HSTL_III_18 = new EdifCell(library, "OBUFT_HSTL_III_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_18");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_DCI() {
        try {
            _OBUFT_HSTL_III_DCI = new EdifCell(library, "OBUFT_HSTL_III_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_DCI");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_III_DCI_18() {
        try {
            _OBUFT_HSTL_III_DCI_18 = new EdifCell(library, "OBUFT_HSTL_III_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_III_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_III_DCI_18");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_III_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_18() {
        try {
            _OBUFT_HSTL_II_18 = new EdifCell(library, "OBUFT_HSTL_II_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_18");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_DCI() {
        try {
            _OBUFT_HSTL_II_DCI = new EdifCell(library, "OBUFT_HSTL_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_DCI");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_II_DCI_18() {
        try {
            _OBUFT_HSTL_II_DCI_18 = new EdifCell(library, "OBUFT_HSTL_II_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_II_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_II_DCI_18");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_II_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV() {
        try {
            _OBUFT_HSTL_IV = new EdifCell(library, "OBUFT_HSTL_IV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV");
        }
        try {
            _OBUFT_HSTL_IV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_18() {
        try {
            _OBUFT_HSTL_IV_18 = new EdifCell(library, "OBUFT_HSTL_IV_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_18");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_DCI() {
        try {
            _OBUFT_HSTL_IV_DCI = new EdifCell(library, "OBUFT_HSTL_IV_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_DCI");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_IV_DCI_18() {
        try {
            _OBUFT_HSTL_IV_DCI_18 = new EdifCell(library, "OBUFT_HSTL_IV_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_IV_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_IV_DCI_18");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_IV_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_18() {
        try {
            _OBUFT_HSTL_I_18 = new EdifCell(library, "OBUFT_HSTL_I_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_18");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_DCI() {
        try {
            _OBUFT_HSTL_I_DCI = new EdifCell(library, "OBUFT_HSTL_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_DCI");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_HSTL_I_DCI_18() {
        try {
            _OBUFT_HSTL_I_DCI_18 = new EdifCell(library, "OBUFT_HSTL_I_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_HSTL_I_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_HSTL_I_DCI_18");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_HSTL_I_DCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12() {
        try {
            _OBUFT_LVCMOS12 = new EdifCell(library, "OBUFT_LVCMOS12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12");
        }
        try {
            _OBUFT_LVCMOS12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_2() {
        try {
            _OBUFT_LVCMOS12_F_2 = new EdifCell(library, "OBUFT_LVCMOS12_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_2");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_4() {
        try {
            _OBUFT_LVCMOS12_F_4 = new EdifCell(library, "OBUFT_LVCMOS12_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_4");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_6() {
        try {
            _OBUFT_LVCMOS12_F_6 = new EdifCell(library, "OBUFT_LVCMOS12_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_6");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_F_8() {
        try {
            _OBUFT_LVCMOS12_F_8 = new EdifCell(library, "OBUFT_LVCMOS12_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_F_8");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_2() {
        try {
            _OBUFT_LVCMOS12_S_2 = new EdifCell(library, "OBUFT_LVCMOS12_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_2");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_4() {
        try {
            _OBUFT_LVCMOS12_S_4 = new EdifCell(library, "OBUFT_LVCMOS12_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_4");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_6() {
        try {
            _OBUFT_LVCMOS12_S_6 = new EdifCell(library, "OBUFT_LVCMOS12_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_6");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS12_S_8() {
        try {
            _OBUFT_LVCMOS12_S_8 = new EdifCell(library, "OBUFT_LVCMOS12_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS12_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS12_S_8");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS12_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15() {
        try {
            _OBUFT_LVCMOS15 = new EdifCell(library, "OBUFT_LVCMOS15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15");
        }
        try {
            _OBUFT_LVCMOS15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_12() {
        try {
            _OBUFT_LVCMOS15_F_12 = new EdifCell(library, "OBUFT_LVCMOS15_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_12");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_16() {
        try {
            _OBUFT_LVCMOS15_F_16 = new EdifCell(library, "OBUFT_LVCMOS15_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_16");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_2() {
        try {
            _OBUFT_LVCMOS15_F_2 = new EdifCell(library, "OBUFT_LVCMOS15_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_2");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_4() {
        try {
            _OBUFT_LVCMOS15_F_4 = new EdifCell(library, "OBUFT_LVCMOS15_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_4");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_6() {
        try {
            _OBUFT_LVCMOS15_F_6 = new EdifCell(library, "OBUFT_LVCMOS15_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_6");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_F_8() {
        try {
            _OBUFT_LVCMOS15_F_8 = new EdifCell(library, "OBUFT_LVCMOS15_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_F_8");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_12() {
        try {
            _OBUFT_LVCMOS15_S_12 = new EdifCell(library, "OBUFT_LVCMOS15_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_12");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_16() {
        try {
            _OBUFT_LVCMOS15_S_16 = new EdifCell(library, "OBUFT_LVCMOS15_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_16");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_2() {
        try {
            _OBUFT_LVCMOS15_S_2 = new EdifCell(library, "OBUFT_LVCMOS15_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_2");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_4() {
        try {
            _OBUFT_LVCMOS15_S_4 = new EdifCell(library, "OBUFT_LVCMOS15_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_4");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_6() {
        try {
            _OBUFT_LVCMOS15_S_6 = new EdifCell(library, "OBUFT_LVCMOS15_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_6");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS15_S_8() {
        try {
            _OBUFT_LVCMOS15_S_8 = new EdifCell(library, "OBUFT_LVCMOS15_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS15_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS15_S_8");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS15_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18() {
        try {
            _OBUFT_LVCMOS18 = new EdifCell(library, "OBUFT_LVCMOS18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18");
        }
        try {
            _OBUFT_LVCMOS18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_12() {
        try {
            _OBUFT_LVCMOS18_F_12 = new EdifCell(library, "OBUFT_LVCMOS18_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_12");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_16() {
        try {
            _OBUFT_LVCMOS18_F_16 = new EdifCell(library, "OBUFT_LVCMOS18_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_16");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_2() {
        try {
            _OBUFT_LVCMOS18_F_2 = new EdifCell(library, "OBUFT_LVCMOS18_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_2");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_4() {
        try {
            _OBUFT_LVCMOS18_F_4 = new EdifCell(library, "OBUFT_LVCMOS18_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_4");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_6() {
        try {
            _OBUFT_LVCMOS18_F_6 = new EdifCell(library, "OBUFT_LVCMOS18_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_6");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_F_8() {
        try {
            _OBUFT_LVCMOS18_F_8 = new EdifCell(library, "OBUFT_LVCMOS18_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_F_8");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_12() {
        try {
            _OBUFT_LVCMOS18_S_12 = new EdifCell(library, "OBUFT_LVCMOS18_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_12");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_16() {
        try {
            _OBUFT_LVCMOS18_S_16 = new EdifCell(library, "OBUFT_LVCMOS18_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_16");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_2() {
        try {
            _OBUFT_LVCMOS18_S_2 = new EdifCell(library, "OBUFT_LVCMOS18_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_2");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_4() {
        try {
            _OBUFT_LVCMOS18_S_4 = new EdifCell(library, "OBUFT_LVCMOS18_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_4");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_6() {
        try {
            _OBUFT_LVCMOS18_S_6 = new EdifCell(library, "OBUFT_LVCMOS18_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_6");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS18_S_8() {
        try {
            _OBUFT_LVCMOS18_S_8 = new EdifCell(library, "OBUFT_LVCMOS18_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS18_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS18_S_8");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS18_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS2() {
        try {
            _OBUFT_LVCMOS2 = new EdifCell(library, "OBUFT_LVCMOS2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS2");
        }
        try {
            _OBUFT_LVCMOS2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25() {
        try {
            _OBUFT_LVCMOS25 = new EdifCell(library, "OBUFT_LVCMOS25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25");
        }
        try {
            _OBUFT_LVCMOS25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_12() {
        try {
            _OBUFT_LVCMOS25_F_12 = new EdifCell(library, "OBUFT_LVCMOS25_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_12");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_16() {
        try {
            _OBUFT_LVCMOS25_F_16 = new EdifCell(library, "OBUFT_LVCMOS25_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_16");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_2() {
        try {
            _OBUFT_LVCMOS25_F_2 = new EdifCell(library, "OBUFT_LVCMOS25_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_2");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_24() {
        try {
            _OBUFT_LVCMOS25_F_24 = new EdifCell(library, "OBUFT_LVCMOS25_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_24");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_4() {
        try {
            _OBUFT_LVCMOS25_F_4 = new EdifCell(library, "OBUFT_LVCMOS25_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_4");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_6() {
        try {
            _OBUFT_LVCMOS25_F_6 = new EdifCell(library, "OBUFT_LVCMOS25_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_6");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_F_8() {
        try {
            _OBUFT_LVCMOS25_F_8 = new EdifCell(library, "OBUFT_LVCMOS25_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_F_8");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_12() {
        try {
            _OBUFT_LVCMOS25_S_12 = new EdifCell(library, "OBUFT_LVCMOS25_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_12");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_16() {
        try {
            _OBUFT_LVCMOS25_S_16 = new EdifCell(library, "OBUFT_LVCMOS25_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_16");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_2() {
        try {
            _OBUFT_LVCMOS25_S_2 = new EdifCell(library, "OBUFT_LVCMOS25_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_2");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_24() {
        try {
            _OBUFT_LVCMOS25_S_24 = new EdifCell(library, "OBUFT_LVCMOS25_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_24");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_4() {
        try {
            _OBUFT_LVCMOS25_S_4 = new EdifCell(library, "OBUFT_LVCMOS25_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_4");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_6() {
        try {
            _OBUFT_LVCMOS25_S_6 = new EdifCell(library, "OBUFT_LVCMOS25_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_6");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS25_S_8() {
        try {
            _OBUFT_LVCMOS25_S_8 = new EdifCell(library, "OBUFT_LVCMOS25_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS25_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS25_S_8");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS25_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33() {
        try {
            _OBUFT_LVCMOS33 = new EdifCell(library, "OBUFT_LVCMOS33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33");
        }
        try {
            _OBUFT_LVCMOS33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_12() {
        try {
            _OBUFT_LVCMOS33_F_12 = new EdifCell(library, "OBUFT_LVCMOS33_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_12");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_16() {
        try {
            _OBUFT_LVCMOS33_F_16 = new EdifCell(library, "OBUFT_LVCMOS33_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_16");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_2() {
        try {
            _OBUFT_LVCMOS33_F_2 = new EdifCell(library, "OBUFT_LVCMOS33_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_2");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_24() {
        try {
            _OBUFT_LVCMOS33_F_24 = new EdifCell(library, "OBUFT_LVCMOS33_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_24");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_4() {
        try {
            _OBUFT_LVCMOS33_F_4 = new EdifCell(library, "OBUFT_LVCMOS33_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_4");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_6() {
        try {
            _OBUFT_LVCMOS33_F_6 = new EdifCell(library, "OBUFT_LVCMOS33_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_6");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_F_8() {
        try {
            _OBUFT_LVCMOS33_F_8 = new EdifCell(library, "OBUFT_LVCMOS33_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_F_8");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_12() {
        try {
            _OBUFT_LVCMOS33_S_12 = new EdifCell(library, "OBUFT_LVCMOS33_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_12");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_16() {
        try {
            _OBUFT_LVCMOS33_S_16 = new EdifCell(library, "OBUFT_LVCMOS33_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_16");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_2() {
        try {
            _OBUFT_LVCMOS33_S_2 = new EdifCell(library, "OBUFT_LVCMOS33_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_2");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_24() {
        try {
            _OBUFT_LVCMOS33_S_24 = new EdifCell(library, "OBUFT_LVCMOS33_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_24");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_4() {
        try {
            _OBUFT_LVCMOS33_S_4 = new EdifCell(library, "OBUFT_LVCMOS33_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_4");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_6() {
        try {
            _OBUFT_LVCMOS33_S_6 = new EdifCell(library, "OBUFT_LVCMOS33_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_6");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVCMOS33_S_8() {
        try {
            _OBUFT_LVCMOS33_S_8 = new EdifCell(library, "OBUFT_LVCMOS33_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVCMOS33_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVCMOS33_S_8");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVCMOS33_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_15() {
        try {
            _OBUFT_LVDCI_15 = new EdifCell(library, "OBUFT_LVDCI_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_15");
        }
        try {
            _OBUFT_LVDCI_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_18() {
        try {
            _OBUFT_LVDCI_18 = new EdifCell(library, "OBUFT_LVDCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_18");
        }
        try {
            _OBUFT_LVDCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_25() {
        try {
            _OBUFT_LVDCI_25 = new EdifCell(library, "OBUFT_LVDCI_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_25");
        }
        try {
            _OBUFT_LVDCI_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_33() {
        try {
            _OBUFT_LVDCI_33 = new EdifCell(library, "OBUFT_LVDCI_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_33");
        }
        try {
            _OBUFT_LVDCI_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_15() {
        try {
            _OBUFT_LVDCI_DV2_15 = new EdifCell(library, "OBUFT_LVDCI_DV2_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_15");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_15.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_18() {
        try {
            _OBUFT_LVDCI_DV2_18 = new EdifCell(library, "OBUFT_LVDCI_DV2_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_18");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_18.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_25() {
        try {
            _OBUFT_LVDCI_DV2_25 = new EdifCell(library, "OBUFT_LVDCI_DV2_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_25");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_25.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDCI_DV2_33() {
        try {
            _OBUFT_LVDCI_DV2_33 = new EdifCell(library, "OBUFT_LVDCI_DV2_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDCI_DV2_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDCI_DV2_33");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDCI_DV2_33.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVDS() {
        try {
            _OBUFT_LVDS = new EdifCell(library, "OBUFT_LVDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVDS");
        }
        try {
            _OBUFT_LVDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVDS.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVPECL() {
        try {
            _OBUFT_LVPECL = new EdifCell(library, "OBUFT_LVPECL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVPECL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVPECL");
        }
        try {
            _OBUFT_LVPECL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVPECL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVPECL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL() {
        try {
            _OBUFT_LVTTL = new EdifCell(library, "OBUFT_LVTTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL");
        }
        try {
            _OBUFT_LVTTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_12() {
        try {
            _OBUFT_LVTTL_F_12 = new EdifCell(library, "OBUFT_LVTTL_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_12");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_16() {
        try {
            _OBUFT_LVTTL_F_16 = new EdifCell(library, "OBUFT_LVTTL_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_16");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_2() {
        try {
            _OBUFT_LVTTL_F_2 = new EdifCell(library, "OBUFT_LVTTL_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_2");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_24() {
        try {
            _OBUFT_LVTTL_F_24 = new EdifCell(library, "OBUFT_LVTTL_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_24");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_4() {
        try {
            _OBUFT_LVTTL_F_4 = new EdifCell(library, "OBUFT_LVTTL_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_4");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_6() {
        try {
            _OBUFT_LVTTL_F_6 = new EdifCell(library, "OBUFT_LVTTL_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_6");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_F_8() {
        try {
            _OBUFT_LVTTL_F_8 = new EdifCell(library, "OBUFT_LVTTL_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_F_8");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_F_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_12() {
        try {
            _OBUFT_LVTTL_S_12 = new EdifCell(library, "OBUFT_LVTTL_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_12");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_16() {
        try {
            _OBUFT_LVTTL_S_16 = new EdifCell(library, "OBUFT_LVTTL_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_16");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_2() {
        try {
            _OBUFT_LVTTL_S_2 = new EdifCell(library, "OBUFT_LVTTL_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_2");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_24() {
        try {
            _OBUFT_LVTTL_S_24 = new EdifCell(library, "OBUFT_LVTTL_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_24");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_4() {
        try {
            _OBUFT_LVTTL_S_4 = new EdifCell(library, "OBUFT_LVTTL_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_4");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_6() {
        try {
            _OBUFT_LVTTL_S_6 = new EdifCell(library, "OBUFT_LVTTL_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_6");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_LVTTL_S_8() {
        try {
            _OBUFT_LVTTL_S_8 = new EdifCell(library, "OBUFT_LVTTL_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_LVTTL_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_LVTTL_S_8");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_LVTTL_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI33_3() {
        try {
            _OBUFT_PCI33_3 = new EdifCell(library, "OBUFT_PCI33_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI33_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI33_3");
        }
        try {
            _OBUFT_PCI33_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI33_5() {
        try {
            _OBUFT_PCI33_5 = new EdifCell(library, "OBUFT_PCI33_5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI33_5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI33_5");
        }
        try {
            _OBUFT_PCI33_5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_5.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI33_5.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCI66_3() {
        try {
            _OBUFT_PCI66_3 = new EdifCell(library, "OBUFT_PCI66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCI66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCI66_3");
        }
        try {
            _OBUFT_PCI66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCI66_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCIX() {
        try {
            _OBUFT_PCIX = new EdifCell(library, "OBUFT_PCIX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCIX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCIX");
        }
        try {
            _OBUFT_PCIX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_PCIX66_3() {
        try {
            _OBUFT_PCIX66_3 = new EdifCell(library, "OBUFT_PCIX66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_PCIX66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_PCIX66_3");
        }
        try {
            _OBUFT_PCIX66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_PCIX66_3.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_I() {
        try {
            _OBUFT_SSTL18_I = new EdifCell(library, "OBUFT_SSTL18_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_I");
        }
        try {
            _OBUFT_SSTL18_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_II() {
        try {
            _OBUFT_SSTL18_II = new EdifCell(library, "OBUFT_SSTL18_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_II");
        }
        try {
            _OBUFT_SSTL18_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_II_DCI() {
        try {
            _OBUFT_SSTL18_II_DCI = new EdifCell(library, "OBUFT_SSTL18_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_II_DCI");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL18_I_DCI() {
        try {
            _OBUFT_SSTL18_I_DCI = new EdifCell(library, "OBUFT_SSTL18_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL18_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL18_I_DCI");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL18_I_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_I() {
        try {
            _OBUFT_SSTL2_I = new EdifCell(library, "OBUFT_SSTL2_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_I");
        }
        try {
            _OBUFT_SSTL2_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_II() {
        try {
            _OBUFT_SSTL2_II = new EdifCell(library, "OBUFT_SSTL2_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_II");
        }
        try {
            _OBUFT_SSTL2_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_II_DCI() {
        try {
            _OBUFT_SSTL2_II_DCI = new EdifCell(library, "OBUFT_SSTL2_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_II_DCI");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL2_I_DCI() {
        try {
            _OBUFT_SSTL2_I_DCI = new EdifCell(library, "OBUFT_SSTL2_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL2_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL2_I_DCI");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL2_I_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_I() {
        try {
            _OBUFT_SSTL3_I = new EdifCell(library, "OBUFT_SSTL3_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_I");
        }
        try {
            _OBUFT_SSTL3_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_II() {
        try {
            _OBUFT_SSTL3_II = new EdifCell(library, "OBUFT_SSTL3_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_II");
        }
        try {
            _OBUFT_SSTL3_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_II_DCI() {
        try {
            _OBUFT_SSTL3_II_DCI = new EdifCell(library, "OBUFT_SSTL3_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_II_DCI");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_II_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_SSTL3_I_DCI() {
        try {
            _OBUFT_SSTL3_I_DCI = new EdifCell(library, "OBUFT_SSTL3_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_SSTL3_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_SSTL3_I_DCI");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_SSTL3_I_DCI.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_12() {
        try {
            _OBUFT_S_12 = new EdifCell(library, "OBUFT_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_12");
        }
        try {
            _OBUFT_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_12.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_16() {
        try {
            _OBUFT_S_16 = new EdifCell(library, "OBUFT_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_16");
        }
        try {
            _OBUFT_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_16.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_2() {
        try {
            _OBUFT_S_2 = new EdifCell(library, "OBUFT_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_2");
        }
        try {
            _OBUFT_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_2.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_24() {
        try {
            _OBUFT_S_24 = new EdifCell(library, "OBUFT_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_24");
        }
        try {
            _OBUFT_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_24.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_4() {
        try {
            _OBUFT_S_4 = new EdifCell(library, "OBUFT_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_4");
        }
        try {
            _OBUFT_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_4.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_6() {
        try {
            _OBUFT_S_6 = new EdifCell(library, "OBUFT_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_6");
        }
        try {
            _OBUFT_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_6.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUFT_S_8() {
        try {
            _OBUFT_S_8 = new EdifCell(library, "OBUFT_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUFT_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUFT_S_8");
        }
        try {
            _OBUFT_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUFT_S_8.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_AGP() {
        try {
            _OBUF_AGP = new EdifCell(library, "OBUF_AGP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_AGP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_AGP");
        }
        try {
            _OBUF_AGP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_AGP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_CTT() {
        try {
            _OBUF_CTT = new EdifCell(library, "OBUF_CTT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_CTT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_CTT");
        }
        try {
            _OBUF_CTT.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_CTT.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_12() {
        try {
            _OBUF_F_12 = new EdifCell(library, "OBUF_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_12");
        }
        try {
            _OBUF_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_16() {
        try {
            _OBUF_F_16 = new EdifCell(library, "OBUF_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_16");
        }
        try {
            _OBUF_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_2() {
        try {
            _OBUF_F_2 = new EdifCell(library, "OBUF_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_2");
        }
        try {
            _OBUF_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_24() {
        try {
            _OBUF_F_24 = new EdifCell(library, "OBUF_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_24");
        }
        try {
            _OBUF_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_4() {
        try {
            _OBUF_F_4 = new EdifCell(library, "OBUF_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_4");
        }
        try {
            _OBUF_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_6() {
        try {
            _OBUF_F_6 = new EdifCell(library, "OBUF_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_6");
        }
        try {
            _OBUF_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_F_8() {
        try {
            _OBUF_F_8 = new EdifCell(library, "OBUF_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_F_8");
        }
        try {
            _OBUF_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTL() {
        try {
            _OBUF_GTL = new EdifCell(library, "OBUF_GTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTL");
        }
        try {
            _OBUF_GTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTLP() {
        try {
            _OBUF_GTLP = new EdifCell(library, "OBUF_GTLP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTLP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTLP");
        }
        try {
            _OBUF_GTLP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTLP.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTLP_DCI() {
        try {
            _OBUF_GTLP_DCI = new EdifCell(library, "OBUF_GTLP_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTLP_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTLP_DCI");
        }
        try {
            _OBUF_GTLP_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTLP_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_GTL_DCI() {
        try {
            _OBUF_GTL_DCI = new EdifCell(library, "OBUF_GTL_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_GTL_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_GTL_DCI");
        }
        try {
            _OBUF_GTL_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_GTL_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I() {
        try {
            _OBUF_HSTL_I = new EdifCell(library, "OBUF_HSTL_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I");
        }
        try {
            _OBUF_HSTL_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II() {
        try {
            _OBUF_HSTL_II = new EdifCell(library, "OBUF_HSTL_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II");
        }
        try {
            _OBUF_HSTL_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III() {
        try {
            _OBUF_HSTL_III = new EdifCell(library, "OBUF_HSTL_III", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III");
        }
        try {
            _OBUF_HSTL_III.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_18() {
        try {
            _OBUF_HSTL_III_18 = new EdifCell(library, "OBUF_HSTL_III_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_18");
        }
        try {
            _OBUF_HSTL_III_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_DCI() {
        try {
            _OBUF_HSTL_III_DCI = new EdifCell(library, "OBUF_HSTL_III_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_DCI");
        }
        try {
            _OBUF_HSTL_III_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_III_DCI_18() {
        try {
            _OBUF_HSTL_III_DCI_18 = new EdifCell(library, "OBUF_HSTL_III_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_III_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_III_DCI_18");
        }
        try {
            _OBUF_HSTL_III_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_III_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_18() {
        try {
            _OBUF_HSTL_II_18 = new EdifCell(library, "OBUF_HSTL_II_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_18");
        }
        try {
            _OBUF_HSTL_II_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_DCI() {
        try {
            _OBUF_HSTL_II_DCI = new EdifCell(library, "OBUF_HSTL_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_DCI");
        }
        try {
            _OBUF_HSTL_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_II_DCI_18() {
        try {
            _OBUF_HSTL_II_DCI_18 = new EdifCell(library, "OBUF_HSTL_II_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_II_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_II_DCI_18");
        }
        try {
            _OBUF_HSTL_II_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_II_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV() {
        try {
            _OBUF_HSTL_IV = new EdifCell(library, "OBUF_HSTL_IV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV");
        }
        try {
            _OBUF_HSTL_IV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_18() {
        try {
            _OBUF_HSTL_IV_18 = new EdifCell(library, "OBUF_HSTL_IV_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_18");
        }
        try {
            _OBUF_HSTL_IV_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_DCI() {
        try {
            _OBUF_HSTL_IV_DCI = new EdifCell(library, "OBUF_HSTL_IV_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_DCI");
        }
        try {
            _OBUF_HSTL_IV_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_IV_DCI_18() {
        try {
            _OBUF_HSTL_IV_DCI_18 = new EdifCell(library, "OBUF_HSTL_IV_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_IV_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_IV_DCI_18");
        }
        try {
            _OBUF_HSTL_IV_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_IV_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_18() {
        try {
            _OBUF_HSTL_I_18 = new EdifCell(library, "OBUF_HSTL_I_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_18");
        }
        try {
            _OBUF_HSTL_I_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_DCI() {
        try {
            _OBUF_HSTL_I_DCI = new EdifCell(library, "OBUF_HSTL_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_DCI");
        }
        try {
            _OBUF_HSTL_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_HSTL_I_DCI_18() {
        try {
            _OBUF_HSTL_I_DCI_18 = new EdifCell(library, "OBUF_HSTL_I_DCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_HSTL_I_DCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_HSTL_I_DCI_18");
        }
        try {
            _OBUF_HSTL_I_DCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_HSTL_I_DCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12() {
        try {
            _OBUF_LVCMOS12 = new EdifCell(library, "OBUF_LVCMOS12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12");
        }
        try {
            _OBUF_LVCMOS12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_2() {
        try {
            _OBUF_LVCMOS12_F_2 = new EdifCell(library, "OBUF_LVCMOS12_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_2");
        }
        try {
            _OBUF_LVCMOS12_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_4() {
        try {
            _OBUF_LVCMOS12_F_4 = new EdifCell(library, "OBUF_LVCMOS12_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_4");
        }
        try {
            _OBUF_LVCMOS12_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_6() {
        try {
            _OBUF_LVCMOS12_F_6 = new EdifCell(library, "OBUF_LVCMOS12_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_6");
        }
        try {
            _OBUF_LVCMOS12_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_F_8() {
        try {
            _OBUF_LVCMOS12_F_8 = new EdifCell(library, "OBUF_LVCMOS12_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_F_8");
        }
        try {
            _OBUF_LVCMOS12_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_2() {
        try {
            _OBUF_LVCMOS12_S_2 = new EdifCell(library, "OBUF_LVCMOS12_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_2");
        }
        try {
            _OBUF_LVCMOS12_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_4() {
        try {
            _OBUF_LVCMOS12_S_4 = new EdifCell(library, "OBUF_LVCMOS12_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_4");
        }
        try {
            _OBUF_LVCMOS12_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_6() {
        try {
            _OBUF_LVCMOS12_S_6 = new EdifCell(library, "OBUF_LVCMOS12_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_6");
        }
        try {
            _OBUF_LVCMOS12_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS12_S_8() {
        try {
            _OBUF_LVCMOS12_S_8 = new EdifCell(library, "OBUF_LVCMOS12_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS12_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS12_S_8");
        }
        try {
            _OBUF_LVCMOS12_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS12_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15() {
        try {
            _OBUF_LVCMOS15 = new EdifCell(library, "OBUF_LVCMOS15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15");
        }
        try {
            _OBUF_LVCMOS15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_12() {
        try {
            _OBUF_LVCMOS15_F_12 = new EdifCell(library, "OBUF_LVCMOS15_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_12");
        }
        try {
            _OBUF_LVCMOS15_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_16() {
        try {
            _OBUF_LVCMOS15_F_16 = new EdifCell(library, "OBUF_LVCMOS15_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_16");
        }
        try {
            _OBUF_LVCMOS15_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_2() {
        try {
            _OBUF_LVCMOS15_F_2 = new EdifCell(library, "OBUF_LVCMOS15_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_2");
        }
        try {
            _OBUF_LVCMOS15_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_4() {
        try {
            _OBUF_LVCMOS15_F_4 = new EdifCell(library, "OBUF_LVCMOS15_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_4");
        }
        try {
            _OBUF_LVCMOS15_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_6() {
        try {
            _OBUF_LVCMOS15_F_6 = new EdifCell(library, "OBUF_LVCMOS15_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_6");
        }
        try {
            _OBUF_LVCMOS15_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_F_8() {
        try {
            _OBUF_LVCMOS15_F_8 = new EdifCell(library, "OBUF_LVCMOS15_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_F_8");
        }
        try {
            _OBUF_LVCMOS15_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_12() {
        try {
            _OBUF_LVCMOS15_S_12 = new EdifCell(library, "OBUF_LVCMOS15_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_12");
        }
        try {
            _OBUF_LVCMOS15_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_16() {
        try {
            _OBUF_LVCMOS15_S_16 = new EdifCell(library, "OBUF_LVCMOS15_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_16");
        }
        try {
            _OBUF_LVCMOS15_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_2() {
        try {
            _OBUF_LVCMOS15_S_2 = new EdifCell(library, "OBUF_LVCMOS15_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_2");
        }
        try {
            _OBUF_LVCMOS15_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_4() {
        try {
            _OBUF_LVCMOS15_S_4 = new EdifCell(library, "OBUF_LVCMOS15_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_4");
        }
        try {
            _OBUF_LVCMOS15_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_6() {
        try {
            _OBUF_LVCMOS15_S_6 = new EdifCell(library, "OBUF_LVCMOS15_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_6");
        }
        try {
            _OBUF_LVCMOS15_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS15_S_8() {
        try {
            _OBUF_LVCMOS15_S_8 = new EdifCell(library, "OBUF_LVCMOS15_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS15_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS15_S_8");
        }
        try {
            _OBUF_LVCMOS15_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS15_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18() {
        try {
            _OBUF_LVCMOS18 = new EdifCell(library, "OBUF_LVCMOS18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18");
        }
        try {
            _OBUF_LVCMOS18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_12() {
        try {
            _OBUF_LVCMOS18_F_12 = new EdifCell(library, "OBUF_LVCMOS18_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_12");
        }
        try {
            _OBUF_LVCMOS18_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_16() {
        try {
            _OBUF_LVCMOS18_F_16 = new EdifCell(library, "OBUF_LVCMOS18_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_16");
        }
        try {
            _OBUF_LVCMOS18_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_2() {
        try {
            _OBUF_LVCMOS18_F_2 = new EdifCell(library, "OBUF_LVCMOS18_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_2");
        }
        try {
            _OBUF_LVCMOS18_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_4() {
        try {
            _OBUF_LVCMOS18_F_4 = new EdifCell(library, "OBUF_LVCMOS18_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_4");
        }
        try {
            _OBUF_LVCMOS18_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_6() {
        try {
            _OBUF_LVCMOS18_F_6 = new EdifCell(library, "OBUF_LVCMOS18_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_6");
        }
        try {
            _OBUF_LVCMOS18_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_F_8() {
        try {
            _OBUF_LVCMOS18_F_8 = new EdifCell(library, "OBUF_LVCMOS18_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_F_8");
        }
        try {
            _OBUF_LVCMOS18_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_12() {
        try {
            _OBUF_LVCMOS18_S_12 = new EdifCell(library, "OBUF_LVCMOS18_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_12");
        }
        try {
            _OBUF_LVCMOS18_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_16() {
        try {
            _OBUF_LVCMOS18_S_16 = new EdifCell(library, "OBUF_LVCMOS18_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_16");
        }
        try {
            _OBUF_LVCMOS18_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_2() {
        try {
            _OBUF_LVCMOS18_S_2 = new EdifCell(library, "OBUF_LVCMOS18_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_2");
        }
        try {
            _OBUF_LVCMOS18_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_4() {
        try {
            _OBUF_LVCMOS18_S_4 = new EdifCell(library, "OBUF_LVCMOS18_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_4");
        }
        try {
            _OBUF_LVCMOS18_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_6() {
        try {
            _OBUF_LVCMOS18_S_6 = new EdifCell(library, "OBUF_LVCMOS18_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_6");
        }
        try {
            _OBUF_LVCMOS18_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS18_S_8() {
        try {
            _OBUF_LVCMOS18_S_8 = new EdifCell(library, "OBUF_LVCMOS18_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS18_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS18_S_8");
        }
        try {
            _OBUF_LVCMOS18_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS18_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS2() {
        try {
            _OBUF_LVCMOS2 = new EdifCell(library, "OBUF_LVCMOS2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS2");
        }
        try {
            _OBUF_LVCMOS2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25() {
        try {
            _OBUF_LVCMOS25 = new EdifCell(library, "OBUF_LVCMOS25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25");
        }
        try {
            _OBUF_LVCMOS25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_12() {
        try {
            _OBUF_LVCMOS25_F_12 = new EdifCell(library, "OBUF_LVCMOS25_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_12");
        }
        try {
            _OBUF_LVCMOS25_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_16() {
        try {
            _OBUF_LVCMOS25_F_16 = new EdifCell(library, "OBUF_LVCMOS25_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_16");
        }
        try {
            _OBUF_LVCMOS25_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_2() {
        try {
            _OBUF_LVCMOS25_F_2 = new EdifCell(library, "OBUF_LVCMOS25_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_2");
        }
        try {
            _OBUF_LVCMOS25_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_24() {
        try {
            _OBUF_LVCMOS25_F_24 = new EdifCell(library, "OBUF_LVCMOS25_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_24");
        }
        try {
            _OBUF_LVCMOS25_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_4() {
        try {
            _OBUF_LVCMOS25_F_4 = new EdifCell(library, "OBUF_LVCMOS25_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_4");
        }
        try {
            _OBUF_LVCMOS25_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_6() {
        try {
            _OBUF_LVCMOS25_F_6 = new EdifCell(library, "OBUF_LVCMOS25_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_6");
        }
        try {
            _OBUF_LVCMOS25_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_F_8() {
        try {
            _OBUF_LVCMOS25_F_8 = new EdifCell(library, "OBUF_LVCMOS25_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_F_8");
        }
        try {
            _OBUF_LVCMOS25_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_12() {
        try {
            _OBUF_LVCMOS25_S_12 = new EdifCell(library, "OBUF_LVCMOS25_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_12");
        }
        try {
            _OBUF_LVCMOS25_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_16() {
        try {
            _OBUF_LVCMOS25_S_16 = new EdifCell(library, "OBUF_LVCMOS25_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_16");
        }
        try {
            _OBUF_LVCMOS25_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_2() {
        try {
            _OBUF_LVCMOS25_S_2 = new EdifCell(library, "OBUF_LVCMOS25_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_2");
        }
        try {
            _OBUF_LVCMOS25_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_24() {
        try {
            _OBUF_LVCMOS25_S_24 = new EdifCell(library, "OBUF_LVCMOS25_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_24");
        }
        try {
            _OBUF_LVCMOS25_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_4() {
        try {
            _OBUF_LVCMOS25_S_4 = new EdifCell(library, "OBUF_LVCMOS25_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_4");
        }
        try {
            _OBUF_LVCMOS25_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_6() {
        try {
            _OBUF_LVCMOS25_S_6 = new EdifCell(library, "OBUF_LVCMOS25_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_6");
        }
        try {
            _OBUF_LVCMOS25_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS25_S_8() {
        try {
            _OBUF_LVCMOS25_S_8 = new EdifCell(library, "OBUF_LVCMOS25_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS25_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS25_S_8");
        }
        try {
            _OBUF_LVCMOS25_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS25_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33() {
        try {
            _OBUF_LVCMOS33 = new EdifCell(library, "OBUF_LVCMOS33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33");
        }
        try {
            _OBUF_LVCMOS33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_12() {
        try {
            _OBUF_LVCMOS33_F_12 = new EdifCell(library, "OBUF_LVCMOS33_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_12");
        }
        try {
            _OBUF_LVCMOS33_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_16() {
        try {
            _OBUF_LVCMOS33_F_16 = new EdifCell(library, "OBUF_LVCMOS33_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_16");
        }
        try {
            _OBUF_LVCMOS33_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_2() {
        try {
            _OBUF_LVCMOS33_F_2 = new EdifCell(library, "OBUF_LVCMOS33_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_2");
        }
        try {
            _OBUF_LVCMOS33_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_24() {
        try {
            _OBUF_LVCMOS33_F_24 = new EdifCell(library, "OBUF_LVCMOS33_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_24");
        }
        try {
            _OBUF_LVCMOS33_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_4() {
        try {
            _OBUF_LVCMOS33_F_4 = new EdifCell(library, "OBUF_LVCMOS33_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_4");
        }
        try {
            _OBUF_LVCMOS33_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_6() {
        try {
            _OBUF_LVCMOS33_F_6 = new EdifCell(library, "OBUF_LVCMOS33_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_6");
        }
        try {
            _OBUF_LVCMOS33_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_F_8() {
        try {
            _OBUF_LVCMOS33_F_8 = new EdifCell(library, "OBUF_LVCMOS33_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_F_8");
        }
        try {
            _OBUF_LVCMOS33_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_12() {
        try {
            _OBUF_LVCMOS33_S_12 = new EdifCell(library, "OBUF_LVCMOS33_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_12");
        }
        try {
            _OBUF_LVCMOS33_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_16() {
        try {
            _OBUF_LVCMOS33_S_16 = new EdifCell(library, "OBUF_LVCMOS33_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_16");
        }
        try {
            _OBUF_LVCMOS33_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_2() {
        try {
            _OBUF_LVCMOS33_S_2 = new EdifCell(library, "OBUF_LVCMOS33_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_2");
        }
        try {
            _OBUF_LVCMOS33_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_24() {
        try {
            _OBUF_LVCMOS33_S_24 = new EdifCell(library, "OBUF_LVCMOS33_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_24");
        }
        try {
            _OBUF_LVCMOS33_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_4() {
        try {
            _OBUF_LVCMOS33_S_4 = new EdifCell(library, "OBUF_LVCMOS33_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_4");
        }
        try {
            _OBUF_LVCMOS33_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_6() {
        try {
            _OBUF_LVCMOS33_S_6 = new EdifCell(library, "OBUF_LVCMOS33_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_6");
        }
        try {
            _OBUF_LVCMOS33_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVCMOS33_S_8() {
        try {
            _OBUF_LVCMOS33_S_8 = new EdifCell(library, "OBUF_LVCMOS33_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVCMOS33_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVCMOS33_S_8");
        }
        try {
            _OBUF_LVCMOS33_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVCMOS33_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_15() {
        try {
            _OBUF_LVDCI_15 = new EdifCell(library, "OBUF_LVDCI_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_15");
        }
        try {
            _OBUF_LVDCI_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_18() {
        try {
            _OBUF_LVDCI_18 = new EdifCell(library, "OBUF_LVDCI_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_18");
        }
        try {
            _OBUF_LVDCI_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_25() {
        try {
            _OBUF_LVDCI_25 = new EdifCell(library, "OBUF_LVDCI_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_25");
        }
        try {
            _OBUF_LVDCI_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_33() {
        try {
            _OBUF_LVDCI_33 = new EdifCell(library, "OBUF_LVDCI_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_33");
        }
        try {
            _OBUF_LVDCI_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_15() {
        try {
            _OBUF_LVDCI_DV2_15 = new EdifCell(library, "OBUF_LVDCI_DV2_15", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_15");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_15");
        }
        try {
            _OBUF_LVDCI_DV2_15.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_15.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_18() {
        try {
            _OBUF_LVDCI_DV2_18 = new EdifCell(library, "OBUF_LVDCI_DV2_18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_18");
        }
        try {
            _OBUF_LVDCI_DV2_18.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_18.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_25() {
        try {
            _OBUF_LVDCI_DV2_25 = new EdifCell(library, "OBUF_LVDCI_DV2_25", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_25");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_25");
        }
        try {
            _OBUF_LVDCI_DV2_25.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_25.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDCI_DV2_33() {
        try {
            _OBUF_LVDCI_DV2_33 = new EdifCell(library, "OBUF_LVDCI_DV2_33", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDCI_DV2_33");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDCI_DV2_33");
        }
        try {
            _OBUF_LVDCI_DV2_33.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDCI_DV2_33.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVDS() {
        try {
            _OBUF_LVDS = new EdifCell(library, "OBUF_LVDS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVDS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVDS");
        }
        try {
            _OBUF_LVDS.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVDS.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVPECL() {
        try {
            _OBUF_LVPECL = new EdifCell(library, "OBUF_LVPECL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVPECL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVPECL");
        }
        try {
            _OBUF_LVPECL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVPECL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL() {
        try {
            _OBUF_LVTTL = new EdifCell(library, "OBUF_LVTTL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL");
        }
        try {
            _OBUF_LVTTL.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_12() {
        try {
            _OBUF_LVTTL_F_12 = new EdifCell(library, "OBUF_LVTTL_F_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_12");
        }
        try {
            _OBUF_LVTTL_F_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_16() {
        try {
            _OBUF_LVTTL_F_16 = new EdifCell(library, "OBUF_LVTTL_F_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_16");
        }
        try {
            _OBUF_LVTTL_F_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_2() {
        try {
            _OBUF_LVTTL_F_2 = new EdifCell(library, "OBUF_LVTTL_F_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_2");
        }
        try {
            _OBUF_LVTTL_F_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_24() {
        try {
            _OBUF_LVTTL_F_24 = new EdifCell(library, "OBUF_LVTTL_F_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_24");
        }
        try {
            _OBUF_LVTTL_F_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_4() {
        try {
            _OBUF_LVTTL_F_4 = new EdifCell(library, "OBUF_LVTTL_F_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_4");
        }
        try {
            _OBUF_LVTTL_F_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_6() {
        try {
            _OBUF_LVTTL_F_6 = new EdifCell(library, "OBUF_LVTTL_F_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_6");
        }
        try {
            _OBUF_LVTTL_F_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_F_8() {
        try {
            _OBUF_LVTTL_F_8 = new EdifCell(library, "OBUF_LVTTL_F_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_F_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_F_8");
        }
        try {
            _OBUF_LVTTL_F_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_F_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_12() {
        try {
            _OBUF_LVTTL_S_12 = new EdifCell(library, "OBUF_LVTTL_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_12");
        }
        try {
            _OBUF_LVTTL_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_16() {
        try {
            _OBUF_LVTTL_S_16 = new EdifCell(library, "OBUF_LVTTL_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_16");
        }
        try {
            _OBUF_LVTTL_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_2() {
        try {
            _OBUF_LVTTL_S_2 = new EdifCell(library, "OBUF_LVTTL_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_2");
        }
        try {
            _OBUF_LVTTL_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_24() {
        try {
            _OBUF_LVTTL_S_24 = new EdifCell(library, "OBUF_LVTTL_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_24");
        }
        try {
            _OBUF_LVTTL_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_4() {
        try {
            _OBUF_LVTTL_S_4 = new EdifCell(library, "OBUF_LVTTL_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_4");
        }
        try {
            _OBUF_LVTTL_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_6() {
        try {
            _OBUF_LVTTL_S_6 = new EdifCell(library, "OBUF_LVTTL_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_6");
        }
        try {
            _OBUF_LVTTL_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_LVTTL_S_8() {
        try {
            _OBUF_LVTTL_S_8 = new EdifCell(library, "OBUF_LVTTL_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_LVTTL_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_LVTTL_S_8");
        }
        try {
            _OBUF_LVTTL_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_LVTTL_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI33_3() {
        try {
            _OBUF_PCI33_3 = new EdifCell(library, "OBUF_PCI33_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI33_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI33_3");
        }
        try {
            _OBUF_PCI33_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI33_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI33_5() {
        try {
            _OBUF_PCI33_5 = new EdifCell(library, "OBUF_PCI33_5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI33_5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI33_5");
        }
        try {
            _OBUF_PCI33_5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI33_5.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCI66_3() {
        try {
            _OBUF_PCI66_3 = new EdifCell(library, "OBUF_PCI66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCI66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCI66_3");
        }
        try {
            _OBUF_PCI66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCI66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCIX() {
        try {
            _OBUF_PCIX = new EdifCell(library, "OBUF_PCIX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCIX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCIX");
        }
        try {
            _OBUF_PCIX.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCIX.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_PCIX66_3() {
        try {
            _OBUF_PCIX66_3 = new EdifCell(library, "OBUF_PCIX66_3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_PCIX66_3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_PCIX66_3");
        }
        try {
            _OBUF_PCIX66_3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_PCIX66_3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_I() {
        try {
            _OBUF_SSTL18_I = new EdifCell(library, "OBUF_SSTL18_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_I");
        }
        try {
            _OBUF_SSTL18_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_II() {
        try {
            _OBUF_SSTL18_II = new EdifCell(library, "OBUF_SSTL18_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_II");
        }
        try {
            _OBUF_SSTL18_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_II_DCI() {
        try {
            _OBUF_SSTL18_II_DCI = new EdifCell(library, "OBUF_SSTL18_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_II_DCI");
        }
        try {
            _OBUF_SSTL18_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL18_I_DCI() {
        try {
            _OBUF_SSTL18_I_DCI = new EdifCell(library, "OBUF_SSTL18_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL18_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL18_I_DCI");
        }
        try {
            _OBUF_SSTL18_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL18_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_I() {
        try {
            _OBUF_SSTL2_I = new EdifCell(library, "OBUF_SSTL2_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_I");
        }
        try {
            _OBUF_SSTL2_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_II() {
        try {
            _OBUF_SSTL2_II = new EdifCell(library, "OBUF_SSTL2_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_II");
        }
        try {
            _OBUF_SSTL2_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_II_DCI() {
        try {
            _OBUF_SSTL2_II_DCI = new EdifCell(library, "OBUF_SSTL2_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_II_DCI");
        }
        try {
            _OBUF_SSTL2_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL2_I_DCI() {
        try {
            _OBUF_SSTL2_I_DCI = new EdifCell(library, "OBUF_SSTL2_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL2_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL2_I_DCI");
        }
        try {
            _OBUF_SSTL2_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL2_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_I() {
        try {
            _OBUF_SSTL3_I = new EdifCell(library, "OBUF_SSTL3_I", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_I");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_I");
        }
        try {
            _OBUF_SSTL3_I.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_I.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_II() {
        try {
            _OBUF_SSTL3_II = new EdifCell(library, "OBUF_SSTL3_II", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_II");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_II");
        }
        try {
            _OBUF_SSTL3_II.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_II.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_II_DCI() {
        try {
            _OBUF_SSTL3_II_DCI = new EdifCell(library, "OBUF_SSTL3_II_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_II_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_II_DCI");
        }
        try {
            _OBUF_SSTL3_II_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_II_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_SSTL3_I_DCI() {
        try {
            _OBUF_SSTL3_I_DCI = new EdifCell(library, "OBUF_SSTL3_I_DCI", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_SSTL3_I_DCI");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_SSTL3_I_DCI");
        }
        try {
            _OBUF_SSTL3_I_DCI.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_SSTL3_I_DCI.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_12() {
        try {
            _OBUF_S_12 = new EdifCell(library, "OBUF_S_12", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_12");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_12");
        }
        try {
            _OBUF_S_12.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_12.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_16() {
        try {
            _OBUF_S_16 = new EdifCell(library, "OBUF_S_16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_16");
        }
        try {
            _OBUF_S_16.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_16.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_2() {
        try {
            _OBUF_S_2 = new EdifCell(library, "OBUF_S_2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_2");
        }
        try {
            _OBUF_S_2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_2.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_24() {
        try {
            _OBUF_S_24 = new EdifCell(library, "OBUF_S_24", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_24");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_24");
        }
        try {
            _OBUF_S_24.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_24.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_4() {
        try {
            _OBUF_S_4 = new EdifCell(library, "OBUF_S_4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_4");
        }
        try {
            _OBUF_S_4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_4.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_6() {
        try {
            _OBUF_S_6 = new EdifCell(library, "OBUF_S_6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_6");
        }
        try {
            _OBUF_S_6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_6.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOBUF_S_8() {
        try {
            _OBUF_S_8 = new EdifCell(library, "OBUF_S_8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OBUF_S_8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OBUF_S_8");
        }
        try {
            _OBUF_S_8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OBUF_S_8.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODDR() {
        try {
            _ODDR = new EdifCell(library, "ODDR", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODDR");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODDR");
        }
        try {
            _ODDR.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODDR2() {
        try {
            _ODDR2 = new EdifCell(library, "ODDR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODDR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODDR2");
        }
        try {
            _ODDR2.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODDR2.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODELAYE2() {
        try {
            _ODELAYE2 = new EdifCell(library, "ODELAYE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODELAYE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODELAYE2");
        }
        try {
            _ODELAYE2.addPort(CNTVALUEOUT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(CINVCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(CNTVALUEIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(LDPIPEEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2.addPort(REGRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODELAYE2_FINEDELAY() {
        try {
            _ODELAYE2_FINEDELAY = new EdifCell(library, "ODELAYE2_FINEDELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODELAYE2_FINEDELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODELAYE2_FINEDELAY");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(CNTVALUEOUT_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(CINVCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(CNTVALUEIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(LDPIPEEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(OFDLY_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE2_FINEDELAY.addPort(REGRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRCPE() {
        try {
            _OFDDRCPE = new EdifCell(library, "OFDDRCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRCPE");
        }
        try {
            _OFDDRCPE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRRSE() {
        try {
            _OFDDRRSE = new EdifCell(library, "OFDDRRSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRRSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRRSE");
        }
        try {
            _OFDDRRSE.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRRSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRTCPE() {
        try {
            _OFDDRTCPE = new EdifCell(library, "OFDDRTCPE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRTCPE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRTCPE");
        }
        try {
            _OFDDRTCPE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(PRE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTCPE.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOFDDRTRSE() {
        try {
            _OFDDRTRSE = new EdifCell(library, "OFDDRTRSE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OFDDRTRSE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OFDDRTRSE");
        }
        try {
            _OFDDRTRSE.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(C0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(C1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(R_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OFDDRTRSE.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOPT_OFF() {
        try {
            _OPT_OFF = new EdifCell(library, "OPT_OFF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OPT_OFF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OPT_OFF");
        }
        try {
            _OPT_OFF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOPT_UIM() {
        try {
            _OPT_UIM = new EdifCell(library, "OPT_UIM", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OPT_UIM");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OPT_UIM");
        }
        try {
            _OPT_UIM.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2() {
        try {
            _OR2 = new EdifCell(library, "OR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2");
        }
        try {
            _OR2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2B1() {
        try {
            _OR2B1 = new EdifCell(library, "OR2B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2B1");
        }
        try {
            _OR2B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2B2() {
        try {
            _OR2B2 = new EdifCell(library, "OR2B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2B2");
        }
        try {
            _OR2B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR2L() {
        try {
            _OR2L = new EdifCell(library, "OR2L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR2L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR2L");
        }
        try {
            _OR2L.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2L.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR2L.addPort(SRI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3() {
        try {
            _OR3 = new EdifCell(library, "OR3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3");
        }
        try {
            _OR3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B1() {
        try {
            _OR3B1 = new EdifCell(library, "OR3B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B1");
        }
        try {
            _OR3B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B2() {
        try {
            _OR3B2 = new EdifCell(library, "OR3B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B2");
        }
        try {
            _OR3B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR3B3() {
        try {
            _OR3B3 = new EdifCell(library, "OR3B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR3B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR3B3");
        }
        try {
            _OR3B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR3B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4() {
        try {
            _OR4 = new EdifCell(library, "OR4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4");
        }
        try {
            _OR4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B1() {
        try {
            _OR4B1 = new EdifCell(library, "OR4B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B1");
        }
        try {
            _OR4B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B2() {
        try {
            _OR4B2 = new EdifCell(library, "OR4B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B2");
        }
        try {
            _OR4B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B3() {
        try {
            _OR4B3 = new EdifCell(library, "OR4B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B3");
        }
        try {
            _OR4B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR4B4() {
        try {
            _OR4B4 = new EdifCell(library, "OR4B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR4B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR4B4");
        }
        try {
            _OR4B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR4B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5() {
        try {
            _OR5 = new EdifCell(library, "OR5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5");
        }
        try {
            _OR5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B1() {
        try {
            _OR5B1 = new EdifCell(library, "OR5B1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B1");
        }
        try {
            _OR5B1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B1.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B2() {
        try {
            _OR5B2 = new EdifCell(library, "OR5B2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B2");
        }
        try {
            _OR5B2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B2.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B3() {
        try {
            _OR5B3 = new EdifCell(library, "OR5B3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B3");
        }
        try {
            _OR5B3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B3.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B4() {
        try {
            _OR5B4 = new EdifCell(library, "OR5B4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B4");
        }
        try {
            _OR5B4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B4.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR5B5() {
        try {
            _OR5B5 = new EdifCell(library, "OR5B5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR5B5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR5B5");
        }
        try {
            _OR5B5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR5B5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR6() {
        try {
            _OR6 = new EdifCell(library, "OR6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR6");
        }
        try {
            _OR6.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR6.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR7() {
        try {
            _OR7 = new EdifCell(library, "OR7", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR7");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR7");
        }
        try {
            _OR7.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR7.addPort(I6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOR8() {
        try {
            _OR8 = new EdifCell(library, "OR8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OR8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OR8");
        }
        try {
            _OR8.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OR8.addPort(I7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initORCY() {
        try {
            _ORCY = new EdifCell(library, "ORCY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ORCY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ORCY");
        }
        try {
            _ORCY.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ORCY.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ORCY.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDES() {
        try {
            _OSERDES = new EdifCell(library, "OSERDES", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDES");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDES");
        }
        try {
            _OSERDES.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(TQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(D6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(OCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(REV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(SR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(T4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES.addPort(TCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDES2() {
        try {
            _OSERDES2 = new EdifCell(library, "OSERDES2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDES2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDES2");
        }
        try {
            _OSERDES2.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(TQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(CLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(CLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(D4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(IOCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(OCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTIN3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(SHIFTIN4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(T1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(T2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(T3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(T4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(TCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDES2.addPort(TRAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDESE1() {
        try {
            _OSERDESE1 = new EdifCell(library, "OSERDESE1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDESE1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDESE1");
        }
        try {
            _OSERDESE1.addPort(OCBEXTEND_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(OFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(TFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(TQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(CLKPERF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(CLKPERFDELAY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(D6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(OCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(ODV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(T1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(T2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(T3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(T4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(TCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE1.addPort(WC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDESE2() {
        try {
            _OSERDESE2 = new EdifCell(library, "OSERDESE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDESE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDESE2");
        }
        try {
            _OSERDESE2.addPort(OFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(SHIFTOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(SHIFTOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(TBYTEOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(TFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(TQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(CLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(D8_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(OCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(SHIFTIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(SHIFTIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(T1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(T2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(T3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(T4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(TBYTEIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE2.addPort(TCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOUT_FIFO() {
        try {
            _OUT_FIFO = new EdifCell(library, "OUT_FIFO", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OUT_FIFO");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OUT_FIFO");
        }
        try {
            _OUT_FIFO.addPort(ALMOSTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(ALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q0_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q1_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q2_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q3_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q4_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q5_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q6_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q7_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q8_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(Q9_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D4_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D5_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D6_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D7_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D8_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(D9_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OUT_FIFO.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_2_0() {
        try {
            _PCIE_2_0 = new EdifCell(library, "PCIE_2_0", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_2_0");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_2_0");
        }
        try {
            _PCIE_2_0.addPort(CFGAERECRCCHECKEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGAERECRCGENEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGCOMMANDBUSMASTERENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGCOMMANDINTERRUPTDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGCOMMANDIOENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGCOMMANDMEMENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGCOMMANDSERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROL2CPLTIMEOUTDIS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROL2CPLTIMEOUTVAL_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLAUXPOWEREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLCORRERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLENABLERO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLEXTTAGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLFATALERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLMAXPAYLOAD_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLMAXREADREQ_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLNONFATALREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLNOSNOOPEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLPHANTOMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVCONTROLURERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVSTATUSCORRERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVSTATUSFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVSTATUSNONFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDEVSTATUSURDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRAERHEADERLOGSETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRCPLRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTDO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTMMENABLE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTMSIENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTMSIXENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTMSIXFM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLASPMCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLAUTOBANDWIDTHINTEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLBANDWIDTHINTEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLCLOCKPMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLCOMMONCLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLEXTENDEDSYNC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLHWAUTOWIDTHDIS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLLINKDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLRCB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKCONTROLRETRAINLINK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSAUTOBANDWIDTHSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSBANDWITHSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSCURRENTSPEED_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSDLLACTIVE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSLINKTRAINING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGLINKSTATUSNEGOTIATEDWIDTH_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGDATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDASSERTINTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDASSERTINTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDASSERTINTC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDASSERTINTD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDDEASSERTINTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDDEASSERTINTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDDEASSERTINTC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDDEASSERTINTD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDERRCOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDERRFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDERRNONFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDPMASNAK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDPMETO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDPMETOACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDPMPME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDSETSLOTPOWERLIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGMSGRECEIVEDUNLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPCIELINKSTATE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMCSRPMEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMCSRPMESTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMCSRPOWERSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMRCVASREQL1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMRCVENTERL1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMRCVENTERL23N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMRCVREQACKN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGRDWRDONEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGSLOTCONTROLELECTROMECHILCTLPULSE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGTRANSACTION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGTRANSACTIONADDR_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGTRANSACTIONTYPE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGVCTCVCMAP_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRG_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRJ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSCLRK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGVECA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGVECB_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGVECC_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2BADDLLPERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2BADTLPERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2PROTOCOLERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2REPLAYROERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2REPLAYTOERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2SUSPENDOKN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2TFCINIT1SEQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2TFCINIT2SEQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LNKCLKEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXRADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXRCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXWADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXWDATA_port_name, 68,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXRADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXRCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXWADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXWDATA_port_name, 69,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX0CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX0COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX0DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX0ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX0POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX1CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX1COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX1DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX1ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX1POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX2CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX2COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX2DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX2ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX2POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX3CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX3COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX3DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX3ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX3POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX4CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX4COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX4DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX4ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX4POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX5CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX5COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX5DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX5ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX5POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX6CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX6COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX6DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX6ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX6POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX7CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX7COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX7DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX7ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETX7POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETXDEEMPH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETXMARGIN_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETXRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETXRCVRDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPETXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2LINKUPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2RECEIVERERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2RECOVERYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2SUSPENDOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDBGVEC_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLINITIALLINKWIDTH_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLLANEREVERSALMODE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLLINKGEN2CAP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLLINKPARTNERGEN2SUPPORTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLLINKUPCFGCAP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLLTSSMSTATE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLPHYLNKUPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLRECEIVEDHOTRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLRXPMSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLSELLNKRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLSELLNKWIDTH_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLTXPMSTATE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(RECEIVEDFUNCLVLRSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TL2ASPMSUSPENDCREDITCHECKOKN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TL2ASPMSUSPENDREQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TL2PPMSUSPENDOKN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCCPLD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCCPLH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCNPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCNPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNLNKUPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRBARHITN_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRD_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRDLLPDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRDLLPSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRECRCERRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNREOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRERRFWDN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRREMN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRSRCDSCN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTBUFAV_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTCFGREQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTDLLPDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTERRDROPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(USERRSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGBYTEENN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDSBUSNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDSDEVICENUMBER_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDSFUNCTIONNUMBER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDSN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGDWADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRACSN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRAERHEADERLOG_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRCORN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRCPLABORTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRCPLTIMEOUTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRCPLUNEXPECTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRECRCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRLOCKEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRPOSTEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRTLPCPLHEADER_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGERRURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTASSERTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTDI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGINTERRUPTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMDIRECTASPML1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMSENDPMACKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMSENDPMETON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMSENDPMNAKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMTURNOFFOKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPMWAKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGPORTNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGRDENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGTRNPENDINGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGWRENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGWRREADONLYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CFGWRRW1CASRWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CMRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(CMSTICKYRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DBGSUBMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(DRPDWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(FUNCLVLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2SENDASREQL1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2SENDENTERL1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2SENDENTERL23N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2SUSPENDNOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(LL2TLPRCVN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMRXRDATA_port_name, 68,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(MIMTXRDATA_port_name, 69,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX0VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX1VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX2VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX3VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX4VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX5VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX6VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PIPERX7VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PL2DIRECTEDLSTATE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDBGMODE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDIRECTEDLINKAUTON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDIRECTEDLINKCHANGE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDIRECTEDLINKSPEED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDIRECTEDLINKWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLDOWNSTREAMDEEMPHSOURCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLTRANSMITHOTRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(PLUPSTREAMPREFERDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(SYSRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TL2ASPMSUSPENDCREDITCHECKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TL2PPMSUSPENDREQN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNFCSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNRNPOKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTCFGGNTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTD_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTDLLPDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTDLLPSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTECRCGENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTERRFWDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTREMN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTSRCDSCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(TRNTSTRN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_0.addPort(USERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_2_1() {
        try {
            _PCIE_2_1 = new EdifCell(library, "PCIE_2_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_2_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_2_1");
        }
        try {
            _PCIE_2_1.addPort(CFGAERECRCCHECKEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERECRCGENEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRCORRERRRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRCORRERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRFATALERRRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRFATALERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRNONFATALERRRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERROOTERRNONFATALERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGBRIDGESERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGCOMMANDBUSMASTERENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGCOMMANDINTERRUPTDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGCOMMANDIOENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGCOMMANDMEMENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGCOMMANDSERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2ARIFORWARDEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2ATOMICEGRESSBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2ATOMICREQUESTEREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2CPLTIMEOUTDIS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2CPLTIMEOUTVAL_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2IDOCPLEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2IDOREQEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2LTREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROL2TLPPREFIXBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLAUXPOWEREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLCORRERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLENABLERO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLEXTTAGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLFATALERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLMAXPAYLOAD_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLMAXREADREQ_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLNONFATALREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLNOSNOOPEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLPHANTOMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVCONTROLURERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVSTATUSCORRERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVSTATUSFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVSTATUSNONFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVSTATUSURDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRAERHEADERLOGSETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRCPLRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTDO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTMMENABLE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTMSIENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTMSIXENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTMSIXFM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLASPMCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLAUTOBANDWIDTHINTEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLBANDWIDTHINTEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLCLOCKPMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLCOMMONCLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLEXTENDEDSYNC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLHWAUTOWIDTHDIS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLLINKDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLRCB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKCONTROLRETRAINLINK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSAUTOBANDWIDTHSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSBANDWIDTHSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSCURRENTSPEED_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSDLLACTIVE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSLINKTRAINING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGLINKSTATUSNEGOTIATEDWIDTH_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTDO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTRDWRDONEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGDATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDASSERTINTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDASSERTINTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDASSERTINTC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDASSERTINTD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDDEASSERTINTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDDEASSERTINTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDDEASSERTINTC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDDEASSERTINTD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDERRCOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDERRFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDERRNONFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDPMASNAK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDPMETO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDPMETOACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDPMPME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDSETSLOTPOWERLIMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMSGRECEIVEDUNLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPCIELINKSTATE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMCSRPMEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMCSRPMESTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMCSRPOWERSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMRCVASREQL1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMRCVENTERL1N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMRCVENTERL23N_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMRCVREQACKN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGROOTCONTROLPMEINTEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGROOTCONTROLSYSERRCORRERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGROOTCONTROLSYSERRFATALERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGROOTCONTROLSYSERRNONFATALERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGSLOTCONTROLELECTROMECHILCTLPULSE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGTRANSACTION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGTRANSACTIONADDR_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGTRANSACTIONTYPE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGVCTCVCMAP_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRG_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRJ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSCLRK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGVECA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGVECB_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGVECC_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2BADDLLPERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2BADTLPERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2LINKSTATUS_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2PROTOCOLERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2RECEIVERERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2REPLAYROERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2REPLAYTOERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SUSPENDOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2TFCINIT1SEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2TFCINIT2SEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2TXIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LNKCLKEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXRADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXWADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXWDATA_port_name, 68,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXRADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXWADDR_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXWDATA_port_name, 69,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX0CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX0COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX0DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX0ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX0POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX1CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX1COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX1DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX1ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX1POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX2CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX2COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX2DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX2ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX2POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX3CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX3COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX3DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX3ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX3POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX4CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX4COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX4DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX4ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX4POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX5CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX5COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX5DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX5ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX5POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX6CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX6COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX6DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX6ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX6POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX7CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX7COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX7DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX7ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETX7POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETXDEEMPH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETXMARGIN_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETXRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETXRCVRDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPETXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2L0REQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2LINKUP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2RECEIVERERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2RECOVERY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2RXPMSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2SUSPENDOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDBGVEC_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDCHANGEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLINITIALLINKWIDTH_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLLANEREVERSALMODE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLLINKGEN2CAP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLLINKPARTNERGEN2SUPPORTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLLINKUPCFGCAP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLLTSSMSTATE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLPHYLNKUPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLRECEIVEDHOTRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLRXPMSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLSELLNKRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLSELLNKWIDTH_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLTXPMSTATE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(RECEIVEDFUNCLVLRSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ASPMSUSPENDCREDITCHECKOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ASPMSUSPENDREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ERRFCPE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ERRHDR_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ERRMALFORMED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ERRRXOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2PPMSUSPENDOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCCPLD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCCPLH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCNPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCNPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNLNKUP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRBARHIT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRD_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRDLLPDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRDLLPSRCRDY_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRECRCERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNREOF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRERRFWD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRREM_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRSOF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRSRCDSC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRSRCRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTBUFAV_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTCFGREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTDLLPDSTRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTDSTRDY_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTERRDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(USERRSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGAERINTERRUPTMSGNUM_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDEVID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDSBUSNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDSDEVICENUMBER_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDSFUNCTIONNUMBER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGDSN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRACSN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRAERHEADERLOG_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRATOMICEGRESSBLOCKEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRCORN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRCPLABORTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRCPLTIMEOUTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRCPLUNEXPECTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRECRCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRINTERNALCORN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRINTERNALUNCORN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRLOCKEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRMALFORMEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRMCBLOCKEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRNORECOVERYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRPOISONEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRPOSTEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRTLPCPLHEADER_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGERRURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGFORCECOMMONCLOCKOFF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGFORCEEXTENDEDSYNCON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGFORCEMPS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTASSERTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTDI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGINTERRUPTSTATN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTBYTEENN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTDI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTDWADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTRDENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTWRENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTWRREADONLYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGMGMTWRRW1CASRWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPCIECAPINTERRUPTMSGNUM_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMFORCESTATE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMFORCESTATEENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMHALTASPML0SN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMHALTASPML1N_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMSENDPMETON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMTURNOFFOKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPMWAKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGPORTNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGREVID_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGSUBSYSID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGSUBSYSVENDID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGTRNPENDINGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CFGVENDID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CMRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(CMSTICKYRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DBGSUBMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(FUNCLVLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SENDASREQL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SENDENTERL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SENDENTERL23_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SENDPMACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2SUSPENDNOW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(LL2TLPRCV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMRXRDATA_port_name, 68,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(MIMTXRDATA_port_name, 69,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX0VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX1VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX2VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX3VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX4VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX5VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX6VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7CHANISALIGNED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PIPERX7VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PL2DIRECTEDLSTATE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDBGMODE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLINKAUTON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLINKCHANGE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLINKSPEED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLINKWIDTH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLTSSMNEW_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLTSSMNEWVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDIRECTEDLTSSMSTALL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLDOWNSTREAMDEEMPHSOURCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLTRANSMITHOTRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(PLUPSTREAMPREFERDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(SYSRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2ASPMSUSPENDCREDITCHECK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TL2PPMSUSPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TLRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNFCSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRDSTRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRFCPRET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRNPOK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNRNPREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTCFGGNT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTD_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTDLLPDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTDLLPSRCRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTECRCGEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTEOF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTERRFWD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTREM_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTSOF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTSRCDSC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTSRCRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(TRNTSTR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(USERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_2_1.addPort(USERCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_3_0() {
        try {
            _PCIE_3_0 = new EdifCell(library, "PCIE_3_0", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_3_0");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_3_0");
        }
        try {
            _PCIE_3_0.addPort(CFGCURRENTSPEED_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDPASUBSTATECHANGE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGERRCOROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGERRFATALOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGERRNONFATALOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTFUNCTIONNUMBER_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTREADRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTREGISTERNUMBER_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTWRITEBYTEENABLE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTWRITEDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTWRITERECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCCPLD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCCPLH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCNPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCNPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFLRINPROCESS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFUNCTIONPOWERSTATE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFUNCTIONSTATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGHOTRESETOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINPUTUPDATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTAOUTPUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTBOUTPUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTCOUTPUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTDOUTPUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIMASKUPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIMMENABLE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSISENT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIVFENABLE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXFAIL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXMASK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXSENT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXVFENABLE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXVFMASK_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTSENT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGLINKPOWERSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGLOCALERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGLTRENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGLTSSMSTATE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMAXPAYLOAD_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMAXREADREQ_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMCUPDATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTREADDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTREADWRITEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGRECEIVEDDATA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGRECEIVEDTYPE_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGTRANSMITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGNEGOTIATEDWIDTH_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGOBFFENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPERFUNCSTATUSDATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPERFUNCTIONUPDATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPHYLINKDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPHYLINKSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPLSTATUSCHANGE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPOWERSTATECHANGEINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGRCBSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHFUNCTIONNUM_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHREQUESTERENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTMODE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTADDRESS_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTREADENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTWRITEBYTEVALID_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTWRITEDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTWRITEENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFFLRINPROCESS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFPOWERSTATE_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFSTATUS_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFTPHREQUESTERENABLE_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFTPHSTMODE_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DBGDATAOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTDATA_port_name, 256,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTKEEP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTUSER_port_name, 85,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTDATA_port_name, 256,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTKEEP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTUSER_port_name, 75,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADADDRESSAL_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADADDRESSAU_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADADDRESSBL_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADADDRESSBU_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADENABLEL_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADENABLEU_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEADDRESSAL_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEADDRESSAU_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEADDRESSBL_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEADDRESSBU_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEDATAL_port_name, 72,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEDATAU_port_name, 72,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEENABLEL_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMWRITEENABLEU_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREPLAYRAMADDRESS_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREPLAYRAMREADENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREPLAYRAMWRITEDATA_port_name, 144,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREPLAYRAMWRITEENABLE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMREADADDRESSA_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMREADADDRESSB_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMREADENABLE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMWRITEADDRESSA_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMWRITEADDRESSB_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMWRITEDATA_port_name, 144,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMWRITEENABLE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIECQNPREQCOUNT_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIERQSEQNUM_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIERQSEQNUMVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIERQTAG_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIERQTAGAV_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIERQTAGVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIETFCNPDAV_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIETFCNPHAV_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQLPLFFS_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQLPTXPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQPRESET_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7POLARITY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7CHARISK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7COMPLIANCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7ELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7EQCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7EQDEEMPH_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7EQPRESET_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7POWERDOWN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7STARTBLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7SYNCHEADER_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXDEEMPH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXMARGIN_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXRATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXRCVRDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETXSWING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLEQINPROGRESS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLEQPHASE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLGEN3PCSRXSLIDE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTREADY_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTREADY_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGCONFIGSPACEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDEVID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDSBUSNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDSDEVICENUMBER_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDSFUNCTIONNUMBER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDSN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGDSPORTNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGERRCORIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGERRUNCORIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTREADDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGEXTREADDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFCSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGFLRDONE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGHOTRESETIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINPUTUPDATEREQUEST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTINT_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIATTR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIFUNCTIONNUMBER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIINT_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIPENDINGSTATUS_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSISELECT_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSITPHPRESENT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSITPHSTTAG_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSITPHTYPE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXADDRESS_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTMSIXINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGINTERRUPTPENDING_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGLINKTRAININGENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMCUPDATEREQUEST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTADDR_port_name, 19,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTBYTEENABLE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTTYPE1CFGREGACCESS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMGMTWRITEDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGTRANSMIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGTRANSMITDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGMSGTRANSMITTYPE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPERFUNCSTATUSCONTROL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPERFUNCTIONNUMBER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPERFUNCTIONOUTPUTREQUEST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGPOWERSTATECHANGEACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGREQPMTRANSITIONL23READY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGREVID_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGSUBSYSID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGSUBSYSVENDID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTREADDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGTPHSTTREADDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVENDID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CFGVFFLRDONE_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CORECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CORECLKMICOMPLETIONRAML_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CORECLKMICOMPLETIONRAMU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CORECLKMIREPLAYRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(CORECLKMIREQUESTRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPADDR_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISCQTREADY_port_name, 22,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MAXISRCTREADY_port_name, 22,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MGMTRESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MGMTSTICKYRESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MICOMPLETIONRAMREADDATA_port_name, 144,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREPLAYRAMREADDATA_port_name, 144,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(MIREQUESTRAMREADDATA_port_name, 144,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PCIECQNPREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPEEQFS_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPEEQLF_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX0VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX1VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX2VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX3VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX4VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX5VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX6VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7CHARISK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7DATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7DATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7ELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQLPADAPTDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQLPLFFSSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7EQLPNEWTXCOEFFORPRESET_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7PHYSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7STARTBLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7STATUS_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7SYNCHEADER_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPERX7VALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX0EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX1EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX2EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX3EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX4EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX5EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX6EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7EQCOEFF_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PIPETX7EQDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLDISABLESCRAMBLER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLEQRESETEIEOSCOUNT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLGEN3PCSDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(PLGEN3PCSRXSYNCDONE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(RECCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(RESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTDATA_port_name, 256,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTKEEP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTUSER_port_name, 33,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISCCTVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTDATA_port_name, 256,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTKEEP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTUSER_port_name, 60,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(SAXISRQTVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_3_0.addPort(USERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_A1() {
        try {
            _PCIE_A1 = new EdifCell(library, "PCIE_A1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_A1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_A1");
        }
        try {
            _PCIE_A1.addPort(CFGBUSNUMBER_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGCOMMANDBUSMASTERENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGCOMMANDINTERRUPTDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGCOMMANDIOENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGCOMMANDMEMENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGCOMMANDSERREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLAUXPOWEREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLCORRERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLENABLERO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLEXTTAGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLFATALERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLMAXPAYLOAD_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLMAXREADREQ_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLNONFATALREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLNOSNOOPEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLPHANTOMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVCONTROLURERRREPORTINGEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVICENUMBER_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVSTATUSCORRERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVSTATUSFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVSTATUSNONFATALERRDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVSTATUSURDETECTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRCPLRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGFUNCTIONNUMBER_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTDO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTMMENABLE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTMSIENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGLINKCONTOLRCB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGLINKCONTROLASPMCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGLINKCONTROLCOMMONCLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGLINKCONTROLEXTENDEDSYNC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGLTSSMSTATE_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGPCIELINKSTATEN_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGRDWRDONEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGTOTURNOFFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGBADDLLPSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGBADTLPLCRC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGBADTLPSEQNUM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGBADTLPSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGDLPROTOCOLSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGFCPROTOCOLERRSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGMLFRMDLENGTH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGMLFRMDMPS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGMLFRMDTCVC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGMLFRMDTLPSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGMLFRMDUNRECTYPE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGPOISTLPSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGRCVROVERFLOWSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGREGDETECTEDCORRECTABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGREGDETECTEDFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGREGDETECTEDNONFATAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGREGDETECTEDUNSUPPORTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGRPLYROLLOVERSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGRPLYTIMEOUTSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGURNOBARHIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGURPOISCFGWR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGURSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(DBGURUNSUPMSG_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXRADDR_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXWADDR_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXWDATA_port_name, 35,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXRADDR_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXWADDR_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXWDATA_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTPOWERDOWNA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTPOWERDOWNB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTTXELECIDLEA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTTXELECIDLEB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXPOLARITYA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXPOLARITYB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXRESETA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXRESETB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARDISPMODEA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARDISPMODEB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARDISPVALA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARDISPVALB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARISKA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXCHARISKB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXDATAA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXDATAB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXRCVRDETA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPETXRCVRDETB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(RECEIVEDHOTRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCCPLD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCCPLH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCNPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCNPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCPD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCPH_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNLNKUPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRBARHITN_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRD_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNREOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRERRFWDN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRSRCDSCN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTBUFAV_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTCFGREQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTERRDROPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(USERRSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDEVID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDSN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGDWADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRCORN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRCPLABORTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRCPLTIMEOUTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRECRCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRLOCKEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRPOSTEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRTLPCPLHEADER_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGERRURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTASSERTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTDI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGINTERRUPTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGPMWAKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGRDENN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGREVID_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGSUBSYSID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGSUBSYSVENID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGTRNPENDINGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGTURNOFFOKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CFGVENID_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(CLOCKLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MGTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMRXRDATA_port_name, 35,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(MIMTXRDATA_port_name, 36,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTRESETDONEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEGTRESETDONEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEPHYSTATUSA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPEPHYSTATUSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXCHARISKA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXCHARISKB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXDATAA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXDATAB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXENTERELECIDLEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXENTERELECIDLEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXSTATUSA_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(PIPERXSTATUSB_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(SYSRESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNFCSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNRNPOKN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTCFGGNTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTERRFWDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTSRCDSCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(TRNTSTRN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_A1.addPort(USERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_EP() {
        try {
            _PCIE_EP = new EdifCell(library, "PCIE_EP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_EP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_EP");
        }
        try {
            _PCIE_EP.addPort(BUSMASTERENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMDOHOTRESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMPWRSOFTRESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(DLLTXPMDLLPOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(INTERRUPTDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(IOSPACEENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0CFGLOOPBACKACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0COMPLETERID_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLLERRORVECTOR_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLLRXACKOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLLTXNONFCOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLLTXOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLLVCSTATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0DLUPDOWN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0FIRSTCFGWRITEOCCURRED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0LTSSMSTATE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACENTEREDL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACLINKTRAINING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACLINKUP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACNEGOTIATEDLINKWIDTH_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACNEWSTATEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MACRXL0SSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MSIENABLE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MULTIMSGEN0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PMEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PMEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PMEREQOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PWRL1STATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PWRL23READYSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PWRSTATE0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PWRTURNOFFREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PWRTXL0SSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0RXDLLPM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0RXDLLPMTYPE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0RXMACLINKERROR_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSCFGOTHERRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSCFGOTHERTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSCFGRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSCFGTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSDLLPRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSDLLPTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSOSRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSOSTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSTLPRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0STATSTLPTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0UNLOCKRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXCHCOMPLETIONAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXCHNONPOSTEDAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXCHPOSTEDAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXPREFERREDTYPE_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXSRCLASTREQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXVALIDN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTCSTATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHANSPACE_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHCOMPLETIONREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHNONPOSTEDREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHPOSTEDREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCONFIGREADYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MAXPAYLOADSIZE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MAXREADREQUESTSIZE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MEMSPACEENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTPSO_port_name, 17,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTRDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTSTATSCREDIT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBRADD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBWADD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBRADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBWADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBRADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBWADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PARITYERRORRESPONSE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEDESKEWLANESL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL2_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL3_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL4_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL5_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL6_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPOWERDOWNL7_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERESETL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXPOLARITYL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXCOMPLIANCEL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAKL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL4_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL5_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL6_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDATAL7_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXDETECTRXLOOPBACKL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPETXELECIDLEL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(SERRENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(URREPORTINGENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(AUXPOWER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(COMPLIANCEAVOID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMCORECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMCORECLKDLO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMCORECLKRXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMCORECLKTXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMLINKRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMMACRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMMGMTRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMNVRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMURSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMUSERCFGRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMUSERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMUSERCLKRXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(CRMUSERCLKTXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0CFGDISABLESCRAMBLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0CFGLOOPBACKMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0LEGACYINTFUNCT0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0MSIREQUEST0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PACKETHEADERFROMUSER_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0PMEREQIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETCOMPLETERABORTERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETCOMPLETIONTIMEOUTCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETCOMPLETIONTIMEOUTUNCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETDETECTEDCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETDETECTEDFATALERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETDETECTEDNONFATALERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUNEXPECTEDCOMPLETIONCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUNEXPECTEDCOMPLETIONUNCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUNSUPPORTEDREQUESTOTHERERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERDETECTEDPARITYERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERMASTERDATAPARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERRECEIVEDMASTERABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERRECEIVEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERSIGNALLEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0SETUSERSYSTEMERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(L0TRANSACTIONSPENDING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXCHFIFO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXCHTC_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXDSTCONTREQN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKRXDSTREQN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHFIFO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXCHTC_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXENABLEN_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXSRCDSCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(LLKTXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTADDR_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTBWREN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTSTATSCREDITSEL_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTWDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MGMTWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMDLLBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMRXBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(MIMTXBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPEPHYSTATUSL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXCHANISALIGNEDL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAKL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL4_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL5_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL6_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXDATAL7_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXELECIDLEL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL2_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL3_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL4_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL5_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL6_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXSTATUSL7_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_EP.addPort(PIPERXVALIDL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPCIE_INTERNAL_1_1() {
        try {
            _PCIE_INTERNAL_1_1 = new EdifCell(library, "PCIE_INTERNAL_1_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PCIE_INTERNAL_1_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PCIE_INTERNAL_1_1");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(BUSMASTERENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMDOHOTRESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMPWRSOFTRESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMRXHOTRESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(DLLTXPMDLLPOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(INTERRUPTDISABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(IOSPACEENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ASAUTONOMOUSINITCOMPLETED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ATTENTIONINDICATORCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGLOOPBACKACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0COMPLETERID_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CORRERRMSGRCVD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLASRXSTATE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLASTXSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLERRORVECTOR_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLRXACKOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLTXNONFCOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLTXOUTSTANDING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLVCSTATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLUPDOWN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ERRMSGREQID_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FATALERRMSGRCVD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FIRSTCFGWRITEOCCURRED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDCORRERROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDFATALERROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDNONFATALERROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0LTSSMSTATE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACENTEREDL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACLINKTRAINING_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACLINKUP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACNEGOTIATEDLINKWIDTH_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACNEWSTATEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACRXL0SSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MACUPSTREAMDOWNSTREAM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MCFOUND_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MSIENABLE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MULTIMSGEN0_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0NONFATALERRMSGRCVD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PMEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PMEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PMEREQOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0POWERCONTROLLERCONTROL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0POWERINDICATORCONTROL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRINHIBITTRANSFERS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRL1STATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRL23READYDEVICE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRL23READYSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRSTATE0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRTURNOFFREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRTXL0SSTATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDASSERTINTALEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDASSERTINTBLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDASSERTINTCLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDASSERTINTDLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDDEASSERTINTALEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDDEASSERTINTBLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDDEASSERTINTCLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RECEIVEDDEASSERTINTDLEGACYINT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXBEACON_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCCMPLMCCRED_port_name, 24,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCCMPLMCUPDATE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCNPOSTBYPCRED_port_name, 20,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCNPOSTBYPUPDATE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCPOSTORDCRED_port_name, 24,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLFCPOSTORDUPDATE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLPM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLPMTYPE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLSBFCDATA_port_name, 19,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLSBFCUPDATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLTLPECRCOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXDLLTLPEND_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXMACLINKERROR_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSCFGOTHERRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSCFGOTHERTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSCFGRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSCFGTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSDLLPRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSDLLPTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSOSRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSOSTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSTLPRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0STATSTLPTRANSMITTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TOGGLEELECTROMECHANICALINTERLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TRANSFORMEDVC_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXDLLFCCMPLMCUPDATED_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXDLLFCNPOSTBYPUPDATED_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXDLLFCPOSTORDUPDATED_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXDLLPMUPDATED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXDLLSBFCUPDATED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0UCBYPFOUND_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0UCORDFOUND_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0UNLOCKRECEIVED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRX4DWHEADERN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHCOMPLETIONAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHCOMPLETIONPARTIALN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHCONFIGAVAILABLEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHCONFIGPARTIALN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHNONPOSTEDAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHNONPOSTEDPARTIALN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHPOSTEDAVAILABLEN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHPOSTEDPARTIALN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXECRCBADN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXPREFERREDTYPE_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXSRCDSCN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXSRCLASTREQN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXVALIDN_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTCSTATUS_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHANSPACE_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHCOMPLETIONREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHNONPOSTEDREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHPOSTEDREADYN_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCONFIGREADYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MAXPAYLOADSIZE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MAXREADREQUESTSIZE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MEMSPACEENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTPSO_port_name, 17,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTRDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTSTATSCREDIT_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBRADD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBWADD_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBRADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBWADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBRADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBREN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBWADD_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBWDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBWEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PARITYERRORRESPONSE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEDESKEWLANESL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL0_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL1_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL2_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL3_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL4_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL5_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL6_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPOWERDOWNL7_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERESETL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXPOLARITYL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXCOMPLIANCEL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAKL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL4_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL5_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL6_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDATAL7_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXDETECTRXLOOPBACKL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPETXELECIDLEL7_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(SERRENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(URREPORTINGENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(AUXPOWER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CFGNEGOTIATEDLINKWIDTH_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(COMPLIANCEAVOID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMCFGBRIDGEHOTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMCORECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMCORECLKDLO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMCORECLKRXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMCORECLKTXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMLINKRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMMACRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMMGMTRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMNVRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMTXHOTRESETN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMURSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMUSERCFGRSTN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMUSERCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMUSERCLKRXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CRMUSERCLKTXO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(CROSSLINKSEED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ACKNAKTIMERADJUSTMENT_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ALLDOWNPORTSINL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ALLDOWNRXPORTSINL0S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ASE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ASPORTCOUNT_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ASTURNPOOLBITSCONSUMED_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ATTENTIONBUTTONPRESSED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGASSPANTREEOWNEDSTATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGASSTATECHANGECMD_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGDISABLESCRAMBLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGEXTENDEDSYNC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGL0SENTRYENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGL0SENTRYSUP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGL0SEXITLAT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGLINKDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGLOOPBACKMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGNEGOTIATEDMAXP_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGVCENABLE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0CFGVCID_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0DLLHOLDLINKUP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ELECTROMECHANICALINTERLOCKENGAGED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDASSERTINTALEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDASSERTINTBLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDASSERTINTCLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDASSERTINTDLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDCORRERRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDDEASSERTINTALEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDDEASSERTINTBLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDDEASSERTINTCLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDDEASSERTINTDLEGACYINT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDFATALERRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0FWDNONFATALERRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0LEGACYINTFUNCT0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MRLSENSORCLOSEDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0MSIREQUEST0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PACKETHEADERFROMUSER_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PMEREQIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PORTNUMBER_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0POWERFAULTDETECTED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PRESENCEDETECTSLOTEMPTYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRNEWSTATEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0PWRNEXTLINKSTATE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0REPLAYTIMERADJUSTMENT_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0ROOTTURNOFFREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0RXTLTLPNONINITIALIZEDVC_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SENDUNLOCKMESSAGE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETCOMPLETERABORTERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETCOMPLETIONTIMEOUTCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETCOMPLETIONTIMEOUTUNCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETDETECTEDCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETDETECTEDFATALERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETDETECTEDNONFATALERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKDETECTEDPARITYERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKMASTERDATAPARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKRECEIVEDMASTERABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKRECEIVEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKSIGNALLEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETLINKSYSTEMERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUNEXPECTEDCOMPLETIONCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUNEXPECTEDCOMPLETIONUNCORRERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUNSUPPORTEDREQUESTNONPOSTEDERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUNSUPPORTEDREQUESTOTHERERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERDETECTEDPARITYERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERMASTERDATAPARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERRECEIVEDMASTERABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERRECEIVEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERSIGNALLEDTARGETABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0SETUSERSYSTEMERROR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TLASFCCREDSTARVATION_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TLLINKRETRAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TRANSACTIONSPENDING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXBEACON_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXCFGPM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXCFGPMTYPE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCCMPLMCCRED_port_name, 160,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCCMPLMCUPDATE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCNPOSTBYPCRED_port_name, 192,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCNPOSTBYPUPDATE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCPOSTORDCRED_port_name, 160,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLFCPOSTORDUPDATE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLSBFCDATA_port_name, 19,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLSBFCUPDATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPEDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPENABLE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPEND_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPLATENCY_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPREQEND_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0TXTLTLPWIDTH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0UPSTREAMRXPORTINL0S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0VC0PREVIEWEXPAND_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(L0WAKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHFIFO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXCHTC_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXDSTCONTREQN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKRXDSTREQN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTX4DWHEADERN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHFIFO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCHTC_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCOMPLETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXCREATEECRCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXENABLEN_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXSRCDSCN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(LLKTXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MAINPOWER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTADDR_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTBWREN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTSTATSCREDITSEL_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTWDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MGMTWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMDLLBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMRXBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(MIMTXBRDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPEPHYSTATUSL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXCHANISALIGNEDL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAKL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL4_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL5_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL6_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXDATAL7_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXELECIDLEL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL0_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL1_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL2_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL3_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL4_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL5_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL6_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXSTATUSL7_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PCIE_INTERNAL_1_1.addPort(PIPERXVALIDL7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHASER_IN() {
        try {
            _PHASER_IN = new EdifCell(library, "PHASER_IN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHASER_IN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHASER_IN");
        }
        try {
            _PHASER_IN.addPort(COUNTERREADVAL_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(FINEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(ICLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(ICLKDIV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(ISERDESRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(RCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(COUNTERLOADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(COUNTERLOADVAL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(COUNTERREADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(DIVIDERST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(EDGEADV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(FINEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(FINEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(FREQREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(MEMREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(PHASEREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(RANKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(SYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN.addPort(SYSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHASER_IN_PHY() {
        try {
            _PHASER_IN_PHY = new EdifCell(library, "PHASER_IN_PHY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHASER_IN_PHY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHASER_IN_PHY");
        }
        try {
            _PHASER_IN_PHY.addPort(COUNTERREADVAL_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(DQSFOUND_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(DQSOUTOFRANGE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(FINEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(ICLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(ICLKDIV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(ISERDESRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(PHASELOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(RCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(WRENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(BURSTPENDINGPHY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(COUNTERLOADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(COUNTERLOADVAL_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(COUNTERREADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(ENCALIBPHY_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(FINEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(FINEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(FREQREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(MEMREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(PHASEREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(RANKSELPHY_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(RSTDQSFIND_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(SYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_IN_PHY.addPort(SYSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHASER_OUT() {
        try {
            _PHASER_OUT = new EdifCell(library, "PHASER_OUT", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHASER_OUT");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHASER_OUT");
        }
        try {
            _PHASER_OUT.addPort(COARSEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COUNTERREADVAL_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(FINEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(OCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(OCLKDELAYED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(OCLKDIV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(OSERDESRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COARSEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COARSEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COUNTERLOADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COUNTERLOADVAL_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(COUNTERREADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(DIVIDERST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(EDGEADV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(FINEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(FINEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(FREQREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(MEMREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(PHASEREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(SELFINEOCLKDELAY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(SYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT.addPort(SYSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHASER_OUT_PHY() {
        try {
            _PHASER_OUT_PHY = new EdifCell(library, "PHASER_OUT_PHY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHASER_OUT_PHY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHASER_OUT_PHY");
        }
        try {
            _PHASER_OUT_PHY.addPort(COARSEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COUNTERREADVAL_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(CTSBUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(DQSBUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(DTSBUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(FINEOVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(OCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(OCLKDELAYED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(OCLKDIV_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(OSERDESRST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(RDENABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(BURSTPENDINGPHY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COARSEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COARSEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COUNTERLOADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COUNTERLOADVAL_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(COUNTERREADEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(ENCALIBPHY_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(FINEENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(FINEINC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(FREQREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(MEMREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(PHASEREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(SELFINEOCLKDELAY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(SYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_OUT_PHY.addPort(SYSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHASER_REF() {
        try {
            _PHASER_REF = new EdifCell(library, "PHASER_REF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHASER_REF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHASER_REF");
        }
        try {
            _PHASER_REF.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_REF.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_REF.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHASER_REF.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPHY_CONTROL() {
        try {
            _PHY_CONTROL = new EdifCell(library, "PHY_CONTROL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PHY_CONTROL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PHY_CONTROL");
        }
        try {
            _PHY_CONTROL.addPort(AUXOUTPUT_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(INBURSTPENDING_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(INRANKA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(INRANKB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(INRANKC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(INRANKD_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(OUTBURSTPENDING_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PCENABLECALIB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLALMOSTFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(MEMREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLMSTREMPTY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLWD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PHYCTLWRENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(PLLLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(READCALIBENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(REFDLLLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(SYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PHY_CONTROL.addPort(WRITECALIBENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLLE2_ADV() {
        try {
            _PLLE2_ADV = new EdifCell(library, "PLLE2_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLLE2_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLLE2_ADV");
        }
        try {
            _PLLE2_ADV.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(CLKINSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLLE2_BASE() {
        try {
            _PLLE2_BASE = new EdifCell(library, "PLLE2_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLLE2_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLLE2_BASE");
        }
        try {
            _PLLE2_BASE.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLLE2_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLL_ADV() {
        try {
            _PLL_ADV = new EdifCell(library, "PLL_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLL_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLL_ADV");
        }
        try {
            _PLL_ADV.addPort(CLKFBDCM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKOUTDCM5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(CLKINSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DADDR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(REL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPLL_BASE() {
        try {
            _PLL_BASE = new EdifCell(library, "PLL_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PLL_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PLL_BASE");
        }
        try {
            _PLL_BASE.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PLL_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPMCD() {
        try {
            _PMCD = new EdifCell(library, "PMCD", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PMCD");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PMCD");
        }
        try {
            _PMCD.addPort(CLKA1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA1D8_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKB1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKC1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKD1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(CLKD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(REL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PMCD.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPOST_CRC_INTERNAL() {
        try {
            _POST_CRC_INTERNAL = new EdifCell(library, "POST_CRC_INTERNAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: POST_CRC_INTERNAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: POST_CRC_INTERNAL");
        }
        try {
            _POST_CRC_INTERNAL.addPort(CRCERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPPC405_ADV() {
        try {
            _PPC405_ADV = new EdifCell(library, "PPC405_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PPC405_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PPC405_ADV");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECODED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECUDI_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMDECUDIVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMENDIAN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMFLUSH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMINSTRUCTION_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMINSTRVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADBYTEEN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMLOADDVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMOPERANDVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMRADATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMRBDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMWRITEBACKOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(APUFCMXERCA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMCORESLEEPREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMMSRCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMMSREE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMTIMERIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405CPMTIMERRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGLOADDATAONAPUDBUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGMSRWE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGSTOPACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBCOMPLETE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405DBGWBIAR_port_name, 30,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGCAPTUREDR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGEXTEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGPGMOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGSHIFTDR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGTDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGTDOEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405JTGUPDATEDR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUABORT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUABUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUBE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUCACHEABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUGUARDED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUPRIORITY_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUREQUEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCURNW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUSIZE2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUU0ATTR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUWRDBUS_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBDCUWRITETHRU_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUABORT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUABUS_port_name, 30,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUCACHEABLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUPRIORITY_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUREQUEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405PLBICUU0ATTR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTCHIPRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTCORERESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405RSTSYSRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCCYCLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCEVENEXECUTIONSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCODDEXECUTIONSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRACESTATUS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRIGGEREVENTOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405TRCTRIGGEREVENTTYPE_port_name, 11,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(C405XXXMACHINECHECK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACABUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACENABLER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACREAD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DCREMACWRITE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMABUS_port_name, 22,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMBYTEWRITE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBRAMWRDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMRDADDRVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMWRADDRVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRABUS_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRDBUSOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRREAD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRWRITE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMEVENWRITEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMODDWRITEEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMRDABUS_port_name, 21,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMWRABUS_port_name, 21,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMBRAMWRDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMEVENEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMODDEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISOCMDCRBRAMRDSELECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMDSOCMCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMDSOCMRDDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMDCRRDDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(BRAMISOCMRDDBUS_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CORECLKINACTIVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405CPUCLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405JTAGCLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405SYNCBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405TIMERCLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMC405TIMERTICK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMDCRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(CPMFCMCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405DEBUGHALT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405EXTBUSHOLDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DBGC405UNCONDDEBUGEVENT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSARCVALUE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSCNTLVALUE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(DSOCMRWCOMPLETE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EICC405CRITINPUTIRQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EICC405EXTINPUTIRQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EMACDCRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EMACDCRDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(EXTDCRDBUSIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUCR_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDCREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFORCEALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFORCEBESTEERING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDFPUOP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDGPRWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTDW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTHW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTQW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLDSTWD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDLOAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDPRIVOP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDRAEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDRBEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDSTORE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDTRAPBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDTRAPLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDUPDATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDXERCAEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDCDXEROVEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDECODEBUSY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXCEPTION_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXEBLOCKINGMCO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXECRFIELD_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUEXENONBLOCKINGMCO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUINSTRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPULOADWAIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPURESULT_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPURESULTVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUSLEEPNOTREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUXERCA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(FCMAPUXEROV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISARCVALUE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(ISCNTLVALUE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405BNDSCANTDO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(JTGC405TRSTNEG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBCPUCLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBJTAGEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCBTIMEREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(MCPPCRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUADDRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUBUSY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDDBUS_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCURDWDADDR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUSSIZE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405DCUWRDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUADDRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUBUSY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDDBUS_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICURDWDADDR_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBC405ICUSSIZE1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(PLBCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETCHIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETCORE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(RSTC405RESETSYS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUCONTROL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI1_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI2_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI3_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI4_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI5_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI6_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI7_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEAPUUDI8_port_name, 24,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405DETERMINISTICMULT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405DISOPERANDFWD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEC405MMUEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEDCRADDR_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT10_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT11_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT28_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT29_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT30_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT31_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT8_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TIEPVRBIT9_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TRCC405TRACEDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC405_ADV.addPort(TRCC405TRIGGEREVENTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPPC440() {
        try {
            _PPC440 = new EdifCell(library, "PPC440", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PPC440");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PPC440");
        }
        try {
            _PPC440.addPort(APUFCMDECFPUOP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECLDSTXFERSIZE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECLOAD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECNONAUTON_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECSTORE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECUDI_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMDECUDIVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMENDIAN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMFLUSH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMINSTRUCTION_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMINSTRVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMLOADBYTEADDR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMLOADDATA_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMLOADDVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMMSRFE0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMMSRFE1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMNEXTINSTRREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMOPERANDVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMRADATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMRBDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(APUFCMWRITEBACKOK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMCORESLEEPREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMDECIRPTREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMFITIRPTREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMMSRCE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMMSREE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMTIMERRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440CPMWDIRPTREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440DBGSYSTEMCONTROL_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440JTGTDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440JTGTDOEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440MACHINECHECK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440RSTCHIPRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440RSTCORERESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440RSTSYSTEMRESETREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCBRANCHSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCCYCLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCEXECUTIONSTATUS_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCTRACESTATUS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCTRIGGEREVENTOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(C440TRCTRIGGEREVENTTYPE_port_name, 14,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLRSTENGINEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLRXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXD_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXREM_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0LLTXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0RXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA0TXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLRSTENGINEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLRXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXD_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXREM_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1LLTXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1RXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA1TXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLRSTENGINEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLRXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXD_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXREM_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2LLTXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2RXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA2TXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLRSTENGINEACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLRXDSTRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXD_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXEOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXEOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXREM_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXSOFN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXSOPN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3LLTXSRCRDYN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3RXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DMA3TXIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCADDRESS_port_name, 36,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCADDRESSVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCBANKCONFLICT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCBYTEENABLE_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCREADNOTWRITE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCROWCONFLICT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCWRITEDATA_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MIMCWRITEDATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCCPMINTERCONNECTBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDMDCRABUS_port_name, 10,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDMDCRDBUSOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDMDCRREAD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDMDCRUABUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDMDCRWRITE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDSDCRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDSDCRDBUSIN_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCDSDCRTIMEOUTWAIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCEICINTERCONNECTIRQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBABORT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBABUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBBE_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBBUSLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBLOCKERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBPRIORITY_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBRDBURST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBREQUEST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBRNW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBSIZE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBTATTRIBUTE_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBTYPE_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBUABUS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBWRBURST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCMPLBWRDBUS_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBADDRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBMBUSY_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBMIRQ_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBMRDERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBMWRERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBRDBTERM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBRDCOMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBRDDACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBRDDBUS_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBRDWDADDR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBREARBITRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBSSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBWAIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBWRBTERM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBWRCOMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS0PLBWRDACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBADDRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBMBUSY_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBMIRQ_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBMRDERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBMWRERR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBRDBTERM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBRDCOMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBRDDACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBRDDBUS_port_name, 128,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBRDWDADDR_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBREARBITRATE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBSSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBWAIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBWRBTERM_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBWRCOMP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PPCS1PLBWRDACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMC440CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMC440CLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMC440CORECLOCKINACTIVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMC440TIMERCLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMDCRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMDMA0LLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMDMA1LLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMDMA2LLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMDMA3LLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMFCMCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMINTERCONNECTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMINTERCONNECTCLKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMINTERCONNECTCLKNTO1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMMCCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMPPCMPLBCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMPPCS0PLBCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(CPMPPCS1PLBCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DBGC440DEBUGHALT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DBGC440SYSTEMSTATUS_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DBGC440UNCONDDEBUGEVENT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDMACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDMDBUSIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDMTIMEOUTWAIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDSABUS_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDSDBUSOUT_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDSREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(DCRPPCDSWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(EICC440CRITIRQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(EICC440EXTIRQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUCONFIRMINSTR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUCR_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUDONE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUEXCEPTION_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUFPSCRFEX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPURESULT_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPURESULTVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUSLEEPNOTREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(FCMAPUSTOREDATA_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(JTGC440TCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(JTGC440TDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(JTGC440TMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(JTGC440TRSTNEG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RSTENGINEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXREM_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0RXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA0TXDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RSTENGINEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXREM_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1RXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA1TXDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RSTENGINEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXREM_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2RXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA2TXDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RSTENGINEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXD_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXEOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXEOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXREM_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXSOFN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXSOPN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3RXSRCRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(LLDMA3TXDSTRDYN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MCMIADDRREADYTOACCEPT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MCMIREADDATA_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MCMIREADDATAERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(MCMIREADDATAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMADDRACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMMBUSY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMMIRQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMMRDERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMMWRERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDBTERM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDDBUS_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMRDWDADDR_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMREARBITRATE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMREQPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMSSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMTIMEOUT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMWRBTERM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMWRDACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMWRPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCMWRPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0ABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0ABUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0BE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0BUSLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0LOCKERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0MASTERID_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0MSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0PAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0RDBURST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0RDPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0RDPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0RDPRIM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0REQPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0RNW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0SAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0SIZE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0TATTRIBUTE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0TYPE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0UABUS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0WRBURST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0WRDBUS_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0WRPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0WRPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS0WRPRIM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1ABORT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1ABUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1BE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1BUSLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1LOCKERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1MASTERID_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1MSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1PAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1RDBURST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1RDPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1RDPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1RDPRIM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1REQPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1RNW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1SAVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1SIZE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1TATTRIBUTE_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1TYPE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1UABUS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1WRBURST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1WRDBUS_port_name, 128,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1WRPENDPRI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1WRPENDREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(PLBPPCS1WRPRIM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(RSTC440RESETCHIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(RSTC440RESETCORE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(RSTC440RESETSYSTEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCURDLDCACHEPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCURDNONCACHEPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCURDTOUCHPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCURDURGENTPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCUWRFLUSHPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCUWRSTOREPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440DCUWRURGENTPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440ENDIANRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440ERPNRESET_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440ICURDFETCHPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440ICURDSPECPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440ICURDTOUCHPLBPRIO_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440PIR_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440PVR_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEC440USERRESET_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TIEDCRBASEADDR_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TRCC440TRACEDISABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PPC440.addPort(TRCC440TRIGGEREVENTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPS7() {
        try {
            _PS7 = new EdifCell(library, "PS7", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PS7");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PS7");
        }
        try {
            _PS7.addPort(DMA0DATYPE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DRREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0RSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DATYPE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DRREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1RSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DATYPE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DRREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2RSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DATYPE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DRREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3RSTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOCAN0PHYTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOCAN1PHYTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIITXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIITXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIITXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0MDIOMDC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0MDIOO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0MDIOTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPDELAYREQRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPDELAYREQTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPPDELAYREQRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPPDELAYREQTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPPDELAYRESPRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPPDELAYRESPTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPSYNCFRAMERX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0PTPSYNCFRAMETX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0SOFRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0SOFTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIITXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIITXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIITXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1MDIOMDC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1MDIOO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1MDIOTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPDELAYREQRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPDELAYREQTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPPDELAYREQRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPPDELAYREQTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPPDELAYRESPRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPPDELAYRESPTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPSYNCFRAMERX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1PTPSYNCFRAMETX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1SOFRX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1SOFTX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOGPIOO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOGPIOTN_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SCLO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SCLTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SDAO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SDATN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SCLO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SCLTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SDAO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SDATN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOPJTAGTDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOPJTAGTDTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0BUSPOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0BUSVOLT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CMDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CMDTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0DATAO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0DATATN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0LED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1BUSPOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1BUSVOLT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CMDO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CMDTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1DATAO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1DATATN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1LED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0MO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0MOTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SCLKO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SCLKTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SSNTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SSON_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0STN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1MO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1MOTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SCLKO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SCLKTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SSNTN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SSON_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1STN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTRACECTL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTRACEDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTTC0WAVEO_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTTC1WAVEO_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0DTRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0RTSN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0TX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1DTRN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1RTSN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1TX_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB0PORTINDCTL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB0VBUSPWRSELECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB1PORTINDCTL_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB1VBUSPWRSELECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOWDTRSTO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EVENTEVENTO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EVENTSTANDBYWFE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EVENTSTANDBYWFI_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FCLKCLK_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FCLKRESETN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTF2PTRIGACK_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTP2FDEBUG_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTP2FTRIG_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(IRQP2F_port_name, 29,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARADDR_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARBURST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARCACHE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARLEN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARLOCK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARPROT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARQOS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWADDR_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWBURST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWCACHE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWLEN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWLOCK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWPROT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWQOS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0BREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WSTRB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARADDR_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARBURST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARCACHE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARLEN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARLOCK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARPROT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARQOS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWADDR_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWBURST_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWCACHE_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWLEN_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWLOCK_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWPROT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWQOS_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWSIZE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1BREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WID_port_name, 12,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WSTRB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPBID_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPBRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPBVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRID_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RACOUNT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WACOUNT_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RACOUNT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WACOUNT_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RACOUNT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WACOUNT_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARESETN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3BID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3BRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3BVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RACOUNT_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RID_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RLAST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RRESP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WACOUNT_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WCOUNT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRA_port_name, 15,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRBA_port_name, 3,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRCASB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRCKE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRCKN_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRCKP_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRCSB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRDM_port_name, 4,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRDQ_port_name, 32,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRDQSN_port_name, 4,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRDQSP_port_name, 4,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRDRSTB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRODT_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRRASB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRVRN_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRVRP_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRWEB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MIO_port_name, 54,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(PSCLK_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(PSPORB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(PSSRSTB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DDRARB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DAREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DRLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DRTYPE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA0DRVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DAREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DRLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DRTYPE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA1DRVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DAREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DRLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DRTYPE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA2DRVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DAREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DRLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DRTYPE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(DMA3DRVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOCAN0PHYRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOCAN1PHYRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0EXTINTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIICOL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIICRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIIRXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIIRXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIIRXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIIRXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0GMIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET0MDIOI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1EXTINTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIICOL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIICRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIIRXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIIRXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIIRXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIIRXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1GMIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOENET1MDIOI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOGPIOI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SCLI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C0SDAI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SCLI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOI2C1SDAI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOPJTAGTCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOPJTAGTDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOPJTAGTMS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0CMDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0DATAI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO0WP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CLKFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1CMDI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1DATAI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSDIO1WP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0MI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SCLKI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI0SSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1MI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SCLKI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSPI1SSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOSRAMINTIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTRACECLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTTC0CLKI_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOTTC1CLKI_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0CTSN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0DCDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0DSRN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0RIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART0RX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1CTSN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1DCDN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1DSRN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1RIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUART1RX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB0VBUSPWRFAULT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOUSB1VBUSPWRFAULT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EMIOWDTCLKI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(EVENTEVENTI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FCLKCLKTRIGN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FPGAIDLEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMDTRACEINATID_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMDTRACEINCLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMDTRACEINDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMDTRACEINVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTF2PDEBUG_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTF2PTRIG_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(FTMTP2FTRIGACK_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(IRQF2P_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0ARREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0AWREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0BID_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0BRESP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0BVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RID_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RRESP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0RVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP0WREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1ARREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1AWREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1BID_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1BRESP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1BVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RID_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RRESP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1RVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(MAXIGP1WREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARID_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARUSER_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWID_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWUSER_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPAWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPBREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPRREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWID_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWSTRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIACPWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WSTRB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP0WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WSTRB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIGP1WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RDISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WRISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WSTRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP0WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RDISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WRISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WSTRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP1WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RDISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WRISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WSTRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP2WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ACLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3ARVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWADDR_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWBURST_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWCACHE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWLEN_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWLOCK_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWPROT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWQOS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWSIZE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3AWVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3BREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RDISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3RREADY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WLAST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WRISSUECAP1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WSTRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _PS7.addPort(SAXIHP3WVALID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPULLDOWN() {
        try {
            _PULLDOWN = new EdifCell(library, "PULLDOWN", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PULLDOWN");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PULLDOWN");
        }
        try {
            _PULLDOWN.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initPULLUP() {
        try {
            _PULLUP = new EdifCell(library, "PULLUP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: PULLUP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: PULLUP");
        }
        try {
            _PULLUP.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1D() {
        try {
            _RAM128X1D = new EdifCell(library, "RAM128X1D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1D");
        }
        try {
            _RAM128X1D.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(A_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(DPRA_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1D.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1S() {
        try {
            _RAM128X1S = new EdifCell(library, "RAM128X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1S");
        }
        try {
            _RAM128X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(A6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM128X1S_1() {
        try {
            _RAM128X1S_1 = new EdifCell(library, "RAM128X1S_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM128X1S_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM128X1S_1");
        }
        try {
            _RAM128X1S_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(A6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM128X1S_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1D() {
        try {
            _RAM16X1D = new EdifCell(library, "RAM16X1D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1D");
        }
        try {
            _RAM16X1D.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1D_1() {
        try {
            _RAM16X1D_1 = new EdifCell(library, "RAM16X1D_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1D_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1D_1");
        }
        try {
            _RAM16X1D_1.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1D_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1S() {
        try {
            _RAM16X1S = new EdifCell(library, "RAM16X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1S");
        }
        try {
            _RAM16X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X1S_1() {
        try {
            _RAM16X1S_1 = new EdifCell(library, "RAM16X1S_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X1S_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X1S_1");
        }
        try {
            _RAM16X1S_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X1S_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X2S() {
        try {
            _RAM16X2S = new EdifCell(library, "RAM16X2S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X2S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X2S");
        }
        try {
            _RAM16X2S.addPort(O0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(O1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X2S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X4S() {
        try {
            _RAM16X4S = new EdifCell(library, "RAM16X4S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X4S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X4S");
        }
        try {
            _RAM16X4S.addPort(O0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(O3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X4S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM16X8S() {
        try {
            _RAM16X8S = new EdifCell(library, "RAM16X8S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM16X8S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM16X8S");
        }
        try {
            _RAM16X8S.addPort(O_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(D_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM16X8S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM256X1S() {
        try {
            _RAM256X1S = new EdifCell(library, "RAM256X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM256X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM256X1S");
        }
        try {
            _RAM256X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(A_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32M() {
        try {
            _RAM32M = new EdifCell(library, "RAM32M", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32M");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32M");
        }
        try {
            _RAM32M.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DOD_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRA_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRB_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRC_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(ADDRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DIC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(DID_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1D() {
        try {
            _RAM32X1D = new EdifCell(library, "RAM32X1D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1D");
        }
        try {
            _RAM32X1D.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(DPRA4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1D_1() {
        try {
            _RAM32X1D_1 = new EdifCell(library, "RAM32X1D_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1D_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1D_1");
        }
        try {
            _RAM32X1D_1.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(DPRA4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1D_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1S() {
        try {
            _RAM32X1S = new EdifCell(library, "RAM32X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1S");
        }
        try {
            _RAM32X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X1S_1() {
        try {
            _RAM32X1S_1 = new EdifCell(library, "RAM32X1S_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X1S_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X1S_1");
        }
        try {
            _RAM32X1S_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X1S_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X2S() {
        try {
            _RAM32X2S = new EdifCell(library, "RAM32X2S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X2S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X2S");
        }
        try {
            _RAM32X2S.addPort(O0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(O1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X2S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X4S() {
        try {
            _RAM32X4S = new EdifCell(library, "RAM32X4S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X4S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X4S");
        }
        try {
            _RAM32X4S.addPort(O0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(O3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(D3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X4S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32X8S() {
        try {
            _RAM32X8S = new EdifCell(library, "RAM32X8S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32X8S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32X8S");
        }
        try {
            _RAM32X8S.addPort(O_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(D_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32X8S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64M() {
        try {
            _RAM64M = new EdifCell(library, "RAM64M", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64M");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64M");
        }
        try {
            _RAM64M.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DOD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRA_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRB_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRC_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(ADDRD_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DIC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(DID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1D() {
        try {
            _RAM64X1D = new EdifCell(library, "RAM64X1D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1D");
        }
        try {
            _RAM64X1D.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(DPRA5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1D_1() {
        try {
            _RAM64X1D_1 = new EdifCell(library, "RAM64X1D_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1D_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1D_1");
        }
        try {
            _RAM64X1D_1.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(DPRA5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1D_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1S() {
        try {
            _RAM64X1S = new EdifCell(library, "RAM64X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1S");
        }
        try {
            _RAM64X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X1S_1() {
        try {
            _RAM64X1S_1 = new EdifCell(library, "RAM64X1S_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X1S_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X1S_1");
        }
        try {
            _RAM64X1S_1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X1S_1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64X2S() {
        try {
            _RAM64X2S = new EdifCell(library, "RAM64X2S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64X2S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64X2S");
        }
        try {
            _RAM64X2S.addPort(O0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(O1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(D0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(D1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64X2S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16() {
        try {
            _RAMB16 = new EdifCell(library, "RAMB16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16");
        }
        try {
            _RAMB16.addPort(CASCADEOUTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ADDRA_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ADDRB_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEINA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CASCADEINB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(REGCEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16.addPort(WEB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE() {
        try {
            _RAMB16BWE = new EdifCell(library, "RAMB16BWE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE");
        }
        try {
            _RAMB16BWE.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(ADDRB_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE.addPort(WEB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWER() {
        try {
            _RAMB16BWER = new EdifCell(library, "RAMB16BWER", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWER");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWER");
        }
        try {
            _RAMB16BWER.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(ADDRB_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(REGCEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWER.addPort(WEB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S18() {
        try {
            _RAMB16BWE_S18 = new EdifCell(library, "RAMB16BWE_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S18");
        }
        try {
            _RAMB16BWE_S18.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(DOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(ADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(DIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18.addPort(WE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S18_S18() {
        try {
            _RAMB16BWE_S18_S18 = new EdifCell(library, "RAMB16BWE_S18_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S18_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S18_S18");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DOPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DIPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(WEA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S18.addPort(WEB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S18_S9() {
        try {
            _RAMB16BWE_S18_S9 = new EdifCell(library, "RAMB16BWE_S18_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S18_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S18_S9");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DOPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DIPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(WEA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S18_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S36() {
        try {
            _RAMB16BWE_S36 = new EdifCell(library, "RAMB16BWE_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S36");
        }
        try {
            _RAMB16BWE_S36.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(ADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36.addPort(WE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S36_S18() {
        try {
            _RAMB16BWE_S36_S18 = new EdifCell(library, "RAMB16BWE_S36_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S36_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S36_S18");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S18.addPort(WEB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S36_S36() {
        try {
            _RAMB16BWE_S36_S36 = new EdifCell(library, "RAMB16BWE_S36_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S36_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S36_S36");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S36.addPort(WEB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16BWE_S36_S9() {
        try {
            _RAMB16BWE_S36_S9 = new EdifCell(library, "RAMB16BWE_S36_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16BWE_S36_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16BWE_S36_S9");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16BWE_S36_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1() {
        try {
            _RAMB16_S1 = new EdifCell(library, "RAMB16_S1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1");
        }
        try {
            _RAMB16_S1.addPort(DO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(ADDR_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18() {
        try {
            _RAMB16_S18 = new EdifCell(library, "RAMB16_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18");
        }
        try {
            _RAMB16_S18.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(ADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(DIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18_S18() {
        try {
            _RAMB16_S18_S18 = new EdifCell(library, "RAMB16_S18_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18_S18");
        }
        try {
            _RAMB16_S18_S18.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S18.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S18_S36() {
        try {
            _RAMB16_S18_S36 = new EdifCell(library, "RAMB16_S18_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S18_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S18_S36");
        }
        try {
            _RAMB16_S18_S36.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S18_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S1() {
        try {
            _RAMB16_S1_S1 = new EdifCell(library, "RAMB16_S1_S1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S1");
        }
        try {
            _RAMB16_S1_S1.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ADDRB_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(DIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S1.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S18() {
        try {
            _RAMB16_S1_S18 = new EdifCell(library, "RAMB16_S1_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S18");
        }
        try {
            _RAMB16_S1_S18.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S18.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S2() {
        try {
            _RAMB16_S1_S2 = new EdifCell(library, "RAMB16_S1_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S2");
        }
        try {
            _RAMB16_S1_S2.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ADDRB_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S2.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S36() {
        try {
            _RAMB16_S1_S36 = new EdifCell(library, "RAMB16_S1_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S36");
        }
        try {
            _RAMB16_S1_S36.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S4() {
        try {
            _RAMB16_S1_S4 = new EdifCell(library, "RAMB16_S1_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S4");
        }
        try {
            _RAMB16_S1_S4.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ADDRB_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S1_S9() {
        try {
            _RAMB16_S1_S9 = new EdifCell(library, "RAMB16_S1_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S1_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S1_S9");
        }
        try {
            _RAMB16_S1_S9.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S1_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2() {
        try {
            _RAMB16_S2 = new EdifCell(library, "RAMB16_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2");
        }
        try {
            _RAMB16_S2.addPort(DO_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(ADDR_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(DI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S18() {
        try {
            _RAMB16_S2_S18 = new EdifCell(library, "RAMB16_S2_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S18");
        }
        try {
            _RAMB16_S2_S18.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ADDRA_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S18.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S2() {
        try {
            _RAMB16_S2_S2 = new EdifCell(library, "RAMB16_S2_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S2");
        }
        try {
            _RAMB16_S2_S2.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ADDRA_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ADDRB_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S2.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S36() {
        try {
            _RAMB16_S2_S36 = new EdifCell(library, "RAMB16_S2_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S36");
        }
        try {
            _RAMB16_S2_S36.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ADDRA_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S4() {
        try {
            _RAMB16_S2_S4 = new EdifCell(library, "RAMB16_S2_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S4");
        }
        try {
            _RAMB16_S2_S4.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ADDRA_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ADDRB_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S2_S9() {
        try {
            _RAMB16_S2_S9 = new EdifCell(library, "RAMB16_S2_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S2_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S2_S9");
        }
        try {
            _RAMB16_S2_S9.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ADDRA_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S2_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S36() {
        try {
            _RAMB16_S36 = new EdifCell(library, "RAMB16_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S36");
        }
        try {
            _RAMB16_S36.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(ADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S36_S36() {
        try {
            _RAMB16_S36_S36 = new EdifCell(library, "RAMB16_S36_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S36_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S36_S36");
        }
        try {
            _RAMB16_S36_S36.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S36_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4() {
        try {
            _RAMB16_S4 = new EdifCell(library, "RAMB16_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4");
        }
        try {
            _RAMB16_S4.addPort(DO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(ADDR_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(DI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S18() {
        try {
            _RAMB16_S4_S18 = new EdifCell(library, "RAMB16_S4_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S18");
        }
        try {
            _RAMB16_S4_S18.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S18.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S36() {
        try {
            _RAMB16_S4_S36 = new EdifCell(library, "RAMB16_S4_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S36");
        }
        try {
            _RAMB16_S4_S36.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S4() {
        try {
            _RAMB16_S4_S4 = new EdifCell(library, "RAMB16_S4_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S4");
        }
        try {
            _RAMB16_S4_S4.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ADDRB_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S4_S9() {
        try {
            _RAMB16_S4_S9 = new EdifCell(library, "RAMB16_S4_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S4_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S4_S9");
        }
        try {
            _RAMB16_S4_S9.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S4_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9() {
        try {
            _RAMB16_S9 = new EdifCell(library, "RAMB16_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9");
        }
        try {
            _RAMB16_S9.addPort(DO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DOP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(ADDR_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(DIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S18() {
        try {
            _RAMB16_S9_S18 = new EdifCell(library, "RAMB16_S9_S18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S18");
        }
        try {
            _RAMB16_S9_S18.addPort(DOA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOPA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIPA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S18.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S36() {
        try {
            _RAMB16_S9_S36 = new EdifCell(library, "RAMB16_S9_S36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S36");
        }
        try {
            _RAMB16_S9_S36.addPort(DOA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOPA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIPA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S36.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB16_S9_S9() {
        try {
            _RAMB16_S9_S9 = new EdifCell(library, "RAMB16_S9_S9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB16_S9_S9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB16_S9_S9");
        }
        try {
            _RAMB16_S9_S9.addPort(DOA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOPA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DOPB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIPA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(DIPB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB16_S9_S9.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18() {
        try {
            _RAMB18 = new EdifCell(library, "RAMB18", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18");
        }
        try {
            _RAMB18.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DOPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ADDRA_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ADDRB_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(DIPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(REGCEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(WEA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18.addPort(WEB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18E1() {
        try {
            _RAMB18E1 = new EdifCell(library, "RAMB18E1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18E1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18E1");
        }
        try {
            _RAMB18E1.addPort(DOADO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DOBDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DOPADOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DOPBDOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(ADDRARDADDR_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(ADDRBWRADDR_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(CLKARDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(CLKBWRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DIADI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DIBDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DIPADIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(DIPBDIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(ENARDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(ENBWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(REGCEAREGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(RSTRAMARSTRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(RSTRAMB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(RSTREGARSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(RSTREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(WEA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E1.addPort(WEBWE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18SDP() {
        try {
            _RAMB18SDP = new EdifCell(library, "RAMB18SDP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18SDP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18SDP");
        }
        try {
            _RAMB18SDP.addPort(DO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(DIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WRADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18SDP.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB32_S64_ECC() {
        try {
            _RAMB32_S64_ECC = new EdifCell(library, "RAMB32_S64_ECC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB32_S64_ECC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB32_S64_ECC");
        }
        try {
            _RAMB32_S64_ECC.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(STATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WRADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB32_S64_ECC.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36() {
        try {
            _RAMB36 = new EdifCell(library, "RAMB36", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36");
        }
        try {
            _RAMB36.addPort(CASCADEOUTLATA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTLATB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTREGA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEOUTREGB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ADDRA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ADDRB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINLATA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINLATB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINREGA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CASCADEINREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(REGCEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(SSRA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(SSRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36.addPort(WEB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36E1() {
        try {
            _RAMB36E1 = new EdifCell(library, "RAMB36E1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36E1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36E1");
        }
        try {
            _RAMB36E1.addPort(CASCADEOUTA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(CASCADEOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DOADO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DOBDO_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DOPADOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DOPBDOP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(RDADDRECC_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(ADDRARDADDR_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(ADDRBWRADDR_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(CASCADEINA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(CASCADEINB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(CLKARDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(CLKBWRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DIADI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DIBDI_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DIPADIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(DIPBDIP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(ENARDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(ENBWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(INJECTDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(INJECTSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(REGCEAREGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(RSTRAMARSTRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(RSTRAMB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(RSTREGARSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(RSTREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E1.addPort(WEBWE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36SDP() {
        try {
            _RAMB36SDP = new EdifCell(library, "RAMB36SDP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36SDP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36SDP");
        }
        try {
            _RAMB36SDP.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DOP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(DIP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(SSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WRADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36SDP_EXP() {
        try {
            _RAMB36SDP_EXP = new EdifCell(library, "RAMB36SDP_EXP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36SDP_EXP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36SDP_EXP");
        }
        try {
            _RAMB36SDP_EXP.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DO_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DOP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DI_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(DIP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDADDRL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDADDRU_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDENL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDENU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(RDRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(REGCEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(REGCEU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SSRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(SSRU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WEL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WEU_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRADDRL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRADDRU_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRCLKL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRCLKU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRENL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36SDP_EXP.addPort(WRENU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36_EXP() {
        try {
            _RAMB36_EXP = new EdifCell(library, "RAMB36_EXP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36_EXP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36_EXP");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTLATA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTLATB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTREGA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEOUTREGB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DOPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRAU_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRBL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ADDRBU_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINLATA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINLATB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINREGA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CASCADEINREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKAU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKBL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(CLKBU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(DIPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENAU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENBL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(ENBU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEAU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEBL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCEBU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKAU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKBL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(REGCLKBU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRAL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRAU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRBL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(SSRBU_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEAL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEAU_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEBL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36_EXP.addPort(WEBU_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1() {
        try {
            _RAMB4_S1 = new EdifCell(library, "RAMB4_S1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1");
        }
        try {
            _RAMB4_S1.addPort(DO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(ADDR_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(DI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S16() {
        try {
            _RAMB4_S16 = new EdifCell(library, "RAMB4_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S16");
        }
        try {
            _RAMB4_S16.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(ADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S16_S16() {
        try {
            _RAMB4_S16_S16 = new EdifCell(library, "RAMB4_S16_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S16_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S16_S16");
        }
        try {
            _RAMB4_S16_S16.addPort(DOA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ADDRA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DIA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S16_S16.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S1() {
        try {
            _RAMB4_S1_S1 = new EdifCell(library, "RAMB4_S1_S1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S1");
        }
        try {
            _RAMB4_S1_S1.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ADDRB_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(DIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S1.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S16() {
        try {
            _RAMB4_S1_S16 = new EdifCell(library, "RAMB4_S1_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S16");
        }
        try {
            _RAMB4_S1_S16.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S16.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S2() {
        try {
            _RAMB4_S1_S2 = new EdifCell(library, "RAMB4_S1_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S2");
        }
        try {
            _RAMB4_S1_S2.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S2.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S4() {
        try {
            _RAMB4_S1_S4 = new EdifCell(library, "RAMB4_S1_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S4");
        }
        try {
            _RAMB4_S1_S4.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S1_S8() {
        try {
            _RAMB4_S1_S8 = new EdifCell(library, "RAMB4_S1_S8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S1_S8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S1_S8");
        }
        try {
            _RAMB4_S1_S8.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ADDRA_port_name, 12,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S1_S8.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2() {
        try {
            _RAMB4_S2 = new EdifCell(library, "RAMB4_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2");
        }
        try {
            _RAMB4_S2.addPort(DO_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(ADDR_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(DI_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S16() {
        try {
            _RAMB4_S2_S16 = new EdifCell(library, "RAMB4_S2_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S16");
        }
        try {
            _RAMB4_S2_S16.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S16.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S2() {
        try {
            _RAMB4_S2_S2 = new EdifCell(library, "RAMB4_S2_S2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S2");
        }
        try {
            _RAMB4_S2_S2.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ADDRB_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S2.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S4() {
        try {
            _RAMB4_S2_S4 = new EdifCell(library, "RAMB4_S2_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S4");
        }
        try {
            _RAMB4_S2_S4.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S2_S8() {
        try {
            _RAMB4_S2_S8 = new EdifCell(library, "RAMB4_S2_S8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S2_S8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S2_S8");
        }
        try {
            _RAMB4_S2_S8.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ADDRA_port_name, 11,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S2_S8.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4() {
        try {
            _RAMB4_S4 = new EdifCell(library, "RAMB4_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4");
        }
        try {
            _RAMB4_S4.addPort(DO_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(ADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(DI_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S16() {
        try {
            _RAMB4_S4_S16 = new EdifCell(library, "RAMB4_S4_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S16");
        }
        try {
            _RAMB4_S4_S16.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S16.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S4() {
        try {
            _RAMB4_S4_S4 = new EdifCell(library, "RAMB4_S4_S4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S4");
        }
        try {
            _RAMB4_S4_S4.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DOB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ADDRB_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(DIB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S4.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S4_S8() {
        try {
            _RAMB4_S4_S8 = new EdifCell(library, "RAMB4_S4_S8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S4_S8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S4_S8");
        }
        try {
            _RAMB4_S4_S8.addPort(DOA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ADDRA_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DIA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S4_S8.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8() {
        try {
            _RAMB4_S8 = new EdifCell(library, "RAMB4_S8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8");
        }
        try {
            _RAMB4_S8.addPort(DO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(ADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(DI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8_S16() {
        try {
            _RAMB4_S8_S16 = new EdifCell(library, "RAMB4_S8_S16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8_S16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8_S16");
        }
        try {
            _RAMB4_S8_S16.addPort(DOA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DOB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ADDRB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DIA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(DIB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S16.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB4_S8_S8() {
        try {
            _RAMB4_S8_S8 = new EdifCell(library, "RAMB4_S8_S8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB4_S8_S8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB4_S8_S8");
        }
        try {
            _RAMB4_S8_S8.addPort(DOA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DOB_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ADDRA_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ADDRB_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(CLKA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(CLKB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DIA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(DIB_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(ENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(WEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB4_S8_S8.addPort(WEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB8BWER() {
        try {
            _RAMB8BWER = new EdifCell(library, "RAMB8BWER", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB8BWER");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB8BWER");
        }
        try {
            _RAMB8BWER.addPort(DOADO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DOBDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DOPADOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DOPBDOP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(ADDRAWRADDR_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(ADDRBRDADDR_port_name, 13,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(CLKAWRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(CLKBRDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DIADI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DIBDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DIPADIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(DIPBDIP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(ENAWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(ENBRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(REGCEA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(REGCEBREGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(RSTBRST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(WEAWEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB8BWER.addPort(WEBWEU_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROC() {
        try {
            _ROC = new EdifCell(library, "ROC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROC");
        }
        try {
            _ROC.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROCBUF() {
        try {
            _ROCBUF = new EdifCell(library, "ROCBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROCBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROCBUF");
        }
        try {
            _ROCBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROCBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM128X1() {
        try {
            _ROM128X1 = new EdifCell(library, "ROM128X1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM128X1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM128X1");
        }
        try {
            _ROM128X1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM128X1.addPort(A6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM16X1() {
        try {
            _ROM16X1 = new EdifCell(library, "ROM16X1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM16X1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM16X1");
        }
        try {
            _ROM16X1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM16X1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM256X1() {
        try {
            _ROM256X1 = new EdifCell(library, "ROM256X1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM256X1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM256X1");
        }
        try {
            _ROM256X1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A6_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM256X1.addPort(A7_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM32X1() {
        try {
            _ROM32X1 = new EdifCell(library, "ROM32X1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM32X1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM32X1");
        }
        try {
            _ROM32X1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM32X1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initROM64X1() {
        try {
            _ROM64X1 = new EdifCell(library, "ROM64X1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ROM64X1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ROM64X1");
        }
        try {
            _ROM64X1.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ROM64X1.addPort(A5_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIGE2() {
        try {
            _SIM_CONFIGE2 = new EdifCell(library, "SIM_CONFIGE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIGE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIGE2");
        }
        try {
            _SIM_CONFIGE2.addPort(CSOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(D_port_name, 32,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(CSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIGE2.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_S3A() {
        try {
            _SIM_CONFIG_S3A = new EdifCell(library, "SIM_CONFIG_S3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_S3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_S3A");
        }
        try {
            _SIM_CONFIG_S3A.addPort(CSOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(D_port_name, 8,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(CSIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(DCMLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_S3A_SERIAL() {
        try {
            _SIM_CONFIG_S3A_SERIAL = new EdifCell(library, "SIM_CONFIG_S3A_SERIAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_S3A_SERIAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_S3A_SERIAL");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S3A_SERIAL.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_S6() {
        try {
            _SIM_CONFIG_S6 = new EdifCell(library, "SIM_CONFIG_S6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_S6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_S6");
        }
        try {
            _SIM_CONFIG_S6.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(CSOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(D_port_name, 16,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(CSIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(M_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_S6_SERIAL() {
        try {
            _SIM_CONFIG_S6_SERIAL = new EdifCell(library, "SIM_CONFIG_S6_SERIAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_S6_SERIAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_S6_SERIAL");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(M_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_S6_SERIAL.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_V5() {
        try {
            _SIM_CONFIG_V5 = new EdifCell(library, "SIM_CONFIG_V5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_V5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_V5");
        }
        try {
            _SIM_CONFIG_V5.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(CSOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(D_port_name, 32,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(CSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(DCMLOCK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_V5_SERIAL() {
        try {
            _SIM_CONFIG_V5_SERIAL = new EdifCell(library, "SIM_CONFIG_V5_SERIAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_V5_SERIAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_V5_SERIAL");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V5_SERIAL.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_V6() {
        try {
            _SIM_CONFIG_V6 = new EdifCell(library, "SIM_CONFIG_V6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_V6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_V6");
        }
        try {
            _SIM_CONFIG_V6.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(CSOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(D_port_name, 32,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(CSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSIM_CONFIG_V6_SERIAL() {
        try {
            _SIM_CONFIG_V6_SERIAL = new EdifCell(library, "SIM_CONFIG_V6_SERIAL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SIM_CONFIG_V6_SERIAL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SIM_CONFIG_V6_SERIAL");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(DONE_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(INITB_port_name, 1,EdifPort.INOUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(CCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(M_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SIM_CONFIG_V6_SERIAL.addPort(PROGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSPI_ACCESS() {
        try {
            _SPI_ACCESS = new EdifCell(library, "SPI_ACCESS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SPI_ACCESS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SPI_ACCESS");
        }
        try {
            _SPI_ACCESS.addPort(MISO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SPI_ACCESS.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SPI_ACCESS.addPort(CSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SPI_ACCESS.addPort(MOSI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16() {
        try {
            _SRL16 = new EdifCell(library, "SRL16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16");
        }
        try {
            _SRL16.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16E() {
        try {
            _SRL16E = new EdifCell(library, "SRL16E", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16E");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16E");
        }
        try {
            _SRL16E.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16E_1() {
        try {
            _SRL16E_1 = new EdifCell(library, "SRL16E_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16E_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16E_1");
        }
        try {
            _SRL16E_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16E_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRL16_1() {
        try {
            _SRL16_1 = new EdifCell(library, "SRL16_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRL16_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRL16_1");
        }
        try {
            _SRL16_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRL16_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16() {
        try {
            _SRLC16 = new EdifCell(library, "SRLC16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16");
        }
        try {
            _SRLC16.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(Q15_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16E() {
        try {
            _SRLC16E = new EdifCell(library, "SRLC16E", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16E");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16E");
        }
        try {
            _SRLC16E.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(Q15_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16E_1() {
        try {
            _SRLC16E_1 = new EdifCell(library, "SRLC16E_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16E_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16E_1");
        }
        try {
            _SRLC16E_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(Q15_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16E_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC16_1() {
        try {
            _SRLC16_1 = new EdifCell(library, "SRLC16_1", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC16_1");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC16_1");
        }
        try {
            _SRLC16_1.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(Q15_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(A3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC16_1.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSRLC32E() {
        try {
            _SRLC32E = new EdifCell(library, "SRLC32E", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SRLC32E");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SRLC32E");
        }
        try {
            _SRLC32E.addPort(Q_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(Q31_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(A_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SRLC32E.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_FPGACORE() {
        try {
            _STARTBUF_FPGACORE = new EdifCell(library, "STARTBUF_FPGACORE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_FPGACORE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_FPGACORE");
        }
        try {
            _STARTBUF_FPGACORE.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_FPGACORE.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_FPGACORE.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_SPARTAN2() {
        try {
            _STARTBUF_SPARTAN2 = new EdifCell(library, "STARTBUF_SPARTAN2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_SPARTAN2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_SPARTAN2");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GTSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN2.addPort(GTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_SPARTAN3() {
        try {
            _STARTBUF_SPARTAN3 = new EdifCell(library, "STARTBUF_SPARTAN3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_SPARTAN3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_SPARTAN3");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GTSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_SPARTAN3.addPort(GTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX() {
        try {
            _STARTBUF_VIRTEX = new EdifCell(library, "STARTBUF_VIRTEX", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GTSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX.addPort(GTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX2() {
        try {
            _STARTBUF_VIRTEX2 = new EdifCell(library, "STARTBUF_VIRTEX2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX2");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GTSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX2.addPort(GTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTBUF_VIRTEX4() {
        try {
            _STARTBUF_VIRTEX4 = new EdifCell(library, "STARTBUF_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTBUF_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTBUF_VIRTEX4");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(EOSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GSROUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GTSOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GSRIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(GTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRCCLKOIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRCCLKTSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRDONEOIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTBUF_VIRTEX4.addPort(USRDONETSIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUPE2() {
        try {
            _STARTUPE2 = new EdifCell(library, "STARTUPE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUPE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUPE2");
        }
        try {
            _STARTUPE2.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(CFGMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(PREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(KEYCLEARB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(PACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(USRCCLKO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(USRCCLKTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(USRDONEO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE2.addPort(USRDONETS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_FPGACORE() {
        try {
            _STARTUP_FPGACORE = new EdifCell(library, "STARTUP_FPGACORE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_FPGACORE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_FPGACORE");
        }
        try {
            _STARTUP_FPGACORE.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_FPGACORE.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN3() {
        try {
            _STARTUP_SPARTAN3 = new EdifCell(library, "STARTUP_SPARTAN3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN3");
        }
        try {
            _STARTUP_SPARTAN3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN3A() {
        try {
            _STARTUP_SPARTAN3A = new EdifCell(library, "STARTUP_SPARTAN3A", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN3A");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN3A");
        }
        try {
            _STARTUP_SPARTAN3A.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3A.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3A.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN3E() {
        try {
            _STARTUP_SPARTAN3E = new EdifCell(library, "STARTUP_SPARTAN3E", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN3E");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN3E");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN3E.addPort(MBT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_SPARTAN6() {
        try {
            _STARTUP_SPARTAN6 = new EdifCell(library, "STARTUP_SPARTAN6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_SPARTAN6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_SPARTAN6");
        }
        try {
            _STARTUP_SPARTAN6.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(CFGMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_SPARTAN6.addPort(KEYCLEARB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX4() {
        try {
            _STARTUP_VIRTEX4 = new EdifCell(library, "STARTUP_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX4");
        }
        try {
            _STARTUP_VIRTEX4.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRCCLKO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRCCLKTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRDONEO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX4.addPort(USRDONETS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX5() {
        try {
            _STARTUP_VIRTEX5 = new EdifCell(library, "STARTUP_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX5");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CFGMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(DINSPI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(TCKSPI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRCCLKO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRCCLKTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRDONEO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX5.addPort(USRDONETS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUP_VIRTEX6() {
        try {
            _STARTUP_VIRTEX6 = new EdifCell(library, "STARTUP_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUP_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUP_VIRTEX6");
        }
        try {
            _STARTUP_VIRTEX6.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(CFGMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(DINSPI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(PREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(TCKSPI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(KEYCLEARB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(PACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(USRCCLKO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(USRCCLKTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(USRDONEO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUP_VIRTEX6.addPort(USRDONETS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSUSPEND_SYNC() {
        try {
            _SUSPEND_SYNC = new EdifCell(library, "SUSPEND_SYNC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SUSPEND_SYNC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SUSPEND_SYNC");
        }
        try {
            _SUSPEND_SYNC.addPort(SREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SUSPEND_SYNC.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SUSPEND_SYNC.addPort(SACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSYSMON() {
        try {
            _SYSMON = new EdifCell(library, "SYSMON", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SYSMON");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SYSMON");
        }
        try {
            _SYSMON.addPort(ALM_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(CHANNEL_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(EOC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(JTAGBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(JTAGLOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(JTAGMODIFIED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(OT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(CONVST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(CONVSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(VAUXN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(VAUXP_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(VN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON.addPort(VP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTBLOCK() {
        try {
            _TBLOCK = new EdifCell(library, "TBLOCK", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TBLOCK");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TBLOCK");
        }
    }

    private static void _initTEMAC() {
        try {
            _TEMAC = new EdifCell(library, "TEMAC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TEMAC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TEMAC");
        }
        try {
            _TEMAC.addPort(DCRHOSTDONEIR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTANINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXBADFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXD_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXDVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXDVLDMSW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXFRAMEDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXGOODFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXSTATS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTRXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXCOLLISION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXRETRANSMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXSTATS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0CLIENTTXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYENCOMMAALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYLOOPBACKMSB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYMCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYMDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYMDTRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYMGTRXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYMGTTXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYPOWERDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYSYNCACQSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXCHARDISPMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXCHARDISPVAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXCHARISK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0PHYTXGMIIMIICLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC0SPEEDIS10100_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTANINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXBADFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXD_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXDVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXDVLDMSW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXFRAMEDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXGOODFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXSTATS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTRXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXCOLLISION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXRETRANSMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXSTATS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1CLIENTTXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYENCOMMAALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYLOOPBACKMSB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYMCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYMDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYMDTRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYMGTRXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYMGTTXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYPOWERDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYSYNCACQSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXCHARDISPMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXCHARDISPVAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXCHARISK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1PHYTXGMIIMIICLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMAC1SPEEDIS10100_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMACDCRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(EMACDCRDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTMIIMRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTRDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0DCMLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0PAUSEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0PAUSEVAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0RXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXDVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXDVLDMSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXFIRSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXIFGDELAY_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC0TXUNDERRUN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1DCMLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1PAUSEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1PAUSEVAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1RXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXDVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXDVLDMSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXFIRSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXIFGDELAY_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(CLIENTEMAC1TXUNDERRUN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACABUS_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(DCREMACWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTEMAC1SEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTMIIMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTOPCODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(HOSTWRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0COL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0CRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0GTXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0MCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0MDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0MIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0PHYAD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXBUFSTATUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCHARISCOMMA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCHARISK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCHECKINGCRC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCLKCORCNT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXCOMMADET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXDISPERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXLOSSOFSYNC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXNOTINTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0RXRUNDISP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0SIGNALDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0TXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC0TXGMIIMIICLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1COL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1CRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1GTXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1MCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1MDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1MIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1PHYAD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXBUFSTATUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCHARISCOMMA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCHARISK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCHECKINGCRC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCLKCORCNT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXCOMMADET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXDISPERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXLOSSOFSYNC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXNOTINTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1RXRUNDISP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1SIGNALDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1TXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(PHYEMAC1TXGMIIMIICLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTEMAC_SINGLE() {
        try {
            _TEMAC_SINGLE = new EdifCell(library, "TEMAC_SINGLE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TEMAC_SINGLE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TEMAC_SINGLE");
        }
        try {
            _TEMAC_SINGLE.addPort(DCRHOSTDONEIR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTANINTERRUPT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXBADFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXD_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXDVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXDVLDMSW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXFRAMEDROP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXGOODFRAME_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXSTATS_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTRXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXCLIENTCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXCOLLISION_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXRETRANSMIT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXSTATS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXSTATSBYTEVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACCLIENTTXSTATSVLD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACDCRACK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACDCRDBUS_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYENCOMMAALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYLOOPBACKMSB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYMCLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYMDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYMDTRI_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYMGTRXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYMGTTXRESET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYPOWERDOWN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYSYNCACQSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXCHARDISPMODE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXCHARDISPVAL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXCHARISK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXD_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXER_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACPHYTXGMIIMIICLKOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(EMACSPEEDIS10100_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTMIIMRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTRDDATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACDCMLOCKED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACPAUSEREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACPAUSEVAL_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACRXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXCLIENTCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXDVLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXDVLDMSW_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXFIRSTBYTE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXIFGDELAY_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(CLIENTEMACTXUNDERRUN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACABUS_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACDBUS_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACREAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(DCREMACWRITE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTADDR_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTMIIMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTOPCODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(HOSTWRDATA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACCOL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACCRS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACGTXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACMCLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACMDIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACMIITXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACPHYAD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXBUFSTATUS_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXCHARISCOMMA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXCHARISK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXCLKCORCNT_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXDISPERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXDV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXNOTINTABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACRXRUNDISP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACSIGNALDET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACTXBUFERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(PHYEMACTXGMIIMIICLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TEMAC_SINGLE.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTIMEGRP() {
        try {
            _TIMEGRP = new EdifCell(library, "TIMEGRP", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TIMEGRP");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TIMEGRP");
        }
    }

    private static void _initTIMESPEC() {
        try {
            _TIMESPEC = new EdifCell(library, "TIMESPEC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TIMESPEC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TIMESPEC");
        }
    }

    private static void _initTOC() {
        try {
            _TOC = new EdifCell(library, "TOC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TOC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TOC");
        }
        try {
            _TOC.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTOCBUF() {
        try {
            _TOCBUF = new EdifCell(library, "TOCBUF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TOCBUF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TOCBUF");
        }
        try {
            _TOCBUF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TOCBUF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESSE2() {
        try {
            _USR_ACCESSE2 = new EdifCell(library, "USR_ACCESSE2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESSE2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESSE2");
        }
        try {
            _USR_ACCESSE2.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESSE2.addPort(DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESSE2.addPort(DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESS_VIRTEX4() {
        try {
            _USR_ACCESS_VIRTEX4 = new EdifCell(library, "USR_ACCESS_VIRTEX4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESS_VIRTEX4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESS_VIRTEX4");
        }
        try {
            _USR_ACCESS_VIRTEX4.addPort(DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX4.addPort(DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESS_VIRTEX5() {
        try {
            _USR_ACCESS_VIRTEX5 = new EdifCell(library, "USR_ACCESS_VIRTEX5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESS_VIRTEX5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESS_VIRTEX5");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX5.addPort(DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initUSR_ACCESS_VIRTEX6() {
        try {
            _USR_ACCESS_VIRTEX6 = new EdifCell(library, "USR_ACCESS_VIRTEX6", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: USR_ACCESS_VIRTEX6");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: USR_ACCESS_VIRTEX6");
        }
        try {
            _USR_ACCESS_VIRTEX6.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX6.addPort(DATA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _USR_ACCESS_VIRTEX6.addPort(DATAVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initVCC() {
        try {
            _VCC = new EdifCell(library, "VCC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: VCC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: VCC");
        }
        try {
            _VCC.addPort(P_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initWIREAND() {
        try {
            _WIREAND = new EdifCell(library, "WIREAND", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: WIREAND");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: WIREAND");
        }
        try {
            _WIREAND.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXADC() {
        try {
            _XADC = new EdifCell(library, "XADC", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XADC");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XADC");
        }
        try {
            _XADC.addPort(ALM_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(CHANNEL_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(EOC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(JTAGBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(JTAGLOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(JTAGMODIFIED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(MUXADDR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(OT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(CONVST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(CONVSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(VAUXN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(VAUXP_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(VN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XADC.addPort(VP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR2() {
        try {
            _XNOR2 = new EdifCell(library, "XNOR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR2");
        }
        try {
            _XNOR2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR3() {
        try {
            _XNOR3 = new EdifCell(library, "XNOR3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR3");
        }
        try {
            _XNOR3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR4() {
        try {
            _XNOR4 = new EdifCell(library, "XNOR4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR4");
        }
        try {
            _XNOR4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXNOR5() {
        try {
            _XNOR5 = new EdifCell(library, "XNOR5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XNOR5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XNOR5");
        }
        try {
            _XNOR5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XNOR5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR2() {
        try {
            _XOR2 = new EdifCell(library, "XOR2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR2");
        }
        try {
            _XOR2.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR2.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR2.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR3() {
        try {
            _XOR3 = new EdifCell(library, "XOR3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR3");
        }
        try {
            _XOR3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR3.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR4() {
        try {
            _XOR4 = new EdifCell(library, "XOR4", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR4");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR4");
        }
        try {
            _XOR4.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR4.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXOR5() {
        try {
            _XOR5 = new EdifCell(library, "XOR5", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XOR5");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XOR5");
        }
        try {
            _XOR5.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I3_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XOR5.addPort(I4_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY() {
        try {
            _XORCY = new EdifCell(library, "XORCY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY");
        }
        try {
            _XORCY.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY.addPort(LI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY_D() {
        try {
            _XORCY_D = new EdifCell(library, "XORCY_D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY_D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY_D");
        }
        try {
            _XORCY_D.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_D.addPort(LI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initXORCY_L() {
        try {
            _XORCY_L = new EdifCell(library, "XORCY_L", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: XORCY_L");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: XORCY_L");
        }
        try {
            _XORCY_L.addPort(LO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_L.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _XORCY_L.addPort(LI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initZHOLD_DELAY() {
        try {
            _ZHOLD_DELAY = new EdifCell(library, "ZHOLD_DELAY", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ZHOLD_DELAY");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ZHOLD_DELAY");
        }
        try {
            _ZHOLD_DELAY.addPort(DLYFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ZHOLD_DELAY.addPort(DLYIFF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ZHOLD_DELAY.addPort(DLYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBITSLICE_CONTROL() {
        try {
            _BITSLICE_CONTROL = new EdifCell(library, "BITSLICE_CONTROL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BITSLICE_CONTROL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BITSLICE_CONTROL");
        }
        try {
            _BITSLICE_CONTROL.addPort(DDR_CLK_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DIV2_CLK_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DIV4_CLK_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DIVCLK_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DQSSN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DQSSP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(PDOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(RIU2CLB_RD_DATA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(RIU2CLB_RD_VALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CFG_RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CLB2RIU_ADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CLB2RIU_BYTESLICE_SEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CLB2RIU_WR_DATA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CLB2RIU_WR_EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CNTVALUEINM_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(CNTVALUEINSP_port_name, 10,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(DQS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(PLL_CLK_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BITSLICE_CONTROL.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFCE_LEAF() {
        try {
            _BUFCE_LEAF = new EdifCell(library, "BUFCE_LEAF", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFCE_LEAF");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFCE_LEAF");
        }
        try {
            _BUFCE_LEAF.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCE_LEAF.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCE_LEAF.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFCE_ROW() {
        try {
            _BUFCE_ROW = new EdifCell(library, "BUFCE_ROW", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFCE_ROW");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFCE_ROW");
        }
        try {
            _BUFCE_ROW.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCE_ROW.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFCE_ROW.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initBUFGCE_DIV() {
        try {
            _BUFGCE_DIV = new EdifCell(library, "BUFGCE_DIV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: BUFGCE_DIV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: BUFGCE_DIV");
        }
        try {
            _BUFGCE_DIV.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_DIV.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_DIV.addPort(CLR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _BUFGCE_DIV.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initCARRY8() {
        try {
            _CARRY8 = new EdifCell(library, "CARRY8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: CARRY8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: CARRY8");
        }
        try {
            _CARRY8.addPort(CO_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY8.addPort(O_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY8.addPort(CI_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY8.addPort(DI_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _CARRY8.addPort(S_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDNA_PORTE3() {
        try {
            _DNA_PORTE3 = new EdifCell(library, "DNA_PORTE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DNA_PORTE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DNA_PORTE3");
        }
        try {
            _DNA_PORTE3.addPort(DOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORTE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORTE3.addPort(DIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORTE3.addPort(READ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DNA_PORTE3.addPort(SHIFT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initDSP48E2() {
        try {
            _DSP48E2 = new EdifCell(library, "DSP48E2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: DSP48E2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: DSP48E2");
        }
        try {
            _DSP48E2.addPort(ACOUT_port_name, 30,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(BCOUT_port_name, 18,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CARRYCASCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CARRYOUT_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(MULTSIGNOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(OVERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(P_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(PATTERNBDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(PATTERNDETECT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(PCOUT_port_name, 48,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(UNDERFLOW_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(XOROUT_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(A_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(ACIN_port_name, 30,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(ALUMODE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(B_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(BCIN_port_name, 18,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(C_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CARRYCASCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CARRYINSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEA1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEA2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEB1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEB2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CECARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CECTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CED_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEINMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(D_port_name, 25,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(INMODE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(MULTSIGNIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(OPMODE_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(PCIN_port_name, 48,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTALLCARRYIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTALUMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTCTRL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTINMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _DSP48E2.addPort(RSTP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO18E2() {
        try {
            _FIFO18E2 = new EdifCell(library, "FIFO18E2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO18E2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO18E2");
        }
        try {
            _FIFO18E2.addPort(DOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(DOUTP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(PROGEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(PROGFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RDCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RDRSTBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(WRCOUNT_port_name, 13,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(WRRSTBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(DIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(DINP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(RSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO18E2.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initFIFO36E2() {
        try {
            _FIFO36E2 = new EdifCell(library, "FIFO36E2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: FIFO36E2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: FIFO36E2");
        }
        try {
            _FIFO36E2.addPort(CASDOUT_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASDOUTP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASNXTEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASPRVRDEN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(DOUT_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(DOUTP_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(PROGEMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(PROGFULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RDCOUNT_port_name, 14,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RDERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RDRSTBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(WRCOUNT_port_name, 14,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(WRERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(WRRSTBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASDIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASDINP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASNXTRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASPRVEMPTY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(CASSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(DIN_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(DINP_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(INJECTDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(INJECTSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(REGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(RSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _FIFO36E2.addPort(WREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTHE3_CHANNEL() {
        try {
            _GTHE3_CHANNEL = new EdifCell(library, "GTHE3_CHANNEL", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTHE3_CHANNEL");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTHE3_CHANNEL");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DMONITOROUT_port_name, 15,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(EYESCANDATAERROR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTHTXN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTHTXP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTREFCLKMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(PCSRSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(PHYSTATUS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXBUFSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXBYTEISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXBYTEREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDRLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHANBONDSEQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHANISALIGNED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHANREALIGN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHARISCOMMA_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHARISK_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDO_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCLKCORCNT_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCOMINITDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCOMMADET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCOMSASDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCOMWAKEDET_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDATA_port_name, 64,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDATAVALID_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPSTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPSTROBEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPSTROBESTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESTADAPTDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDISPERR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXELECIDLE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXHEADER_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXHEADERVALID_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXMONITOROUT_port_name, 7,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXNOTINTABLE_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTSTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTSTROBEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTSTROBESTARTED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHSLIPMONITOR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPRBSERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSTARTOFSEQ_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSTATUS_port_name, 3,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXVALID_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXBUFSTATUS_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCOMFINISH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYSRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXGEARBOXREADY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXOUTCLKFABRIC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXOUTCLKPCS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHALIGNDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHINITDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPMARESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXQPISENN_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXQPISENP_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXRATEDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXRESETDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYNCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYNCOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CFGRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CLKRSVD0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CLKRSVD1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(CPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DMONFIFORESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DMONITORCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPADDR_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(EYESCANMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(EYESCANRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(EYESCANTRIGGER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTHRXN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTHRXP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTRESETSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTRSVD_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTRXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(GTTXRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(LOOPBACK_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(PCSRSVDIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(PCSRSVDIN2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(PMARSVDIN_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(QPLLCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(QPLLREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RESETOVRD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXADAPTSELTEST_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXBUFRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDRFREQRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDRHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDROVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDRRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCDRRESETRSV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDI_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDLEVEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDMASTER_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCHBONDSLAVE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXCOMMADETEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDDIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEAGCCTRL_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEAGCHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEAGCOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFECM1EN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFELFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFELFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFELPMRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAP_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPADAPTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPID_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPINITOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPONLYADAPTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFESLIDETAPSTROBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP2HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP2OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP3HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP3OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP4HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP4OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP5HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP5OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP6HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP6OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP7HOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFETAP7OVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEUTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEUTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEVPHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEVPOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEVSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDFEXYDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXELECIDLEMODE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXGEARBOXSLIP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXLPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXLPMHFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXLPMHFOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXLPMLFHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXLPMLFKLOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXMCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXMONITORSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOOBRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSCALRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTCFG_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTID0_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTNTRLEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTSTROBE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSINTTESTOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOSOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPCOMMAALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPRBSCNTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXQPIEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSLIDE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(RXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(SETERRSTATUS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(SIGVALIDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TSTIN_port_name, 20,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TX8B10BBYPASS_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TX8B10BEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXBUFDIFFCTRL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCHARDISPMODE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCHARDISPVAL_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCHARISK_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCOMINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCOMSAS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXCOMWAKE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDATA_port_name, 64,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDEEMPH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDETECTRX_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDIFFCTRL_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDIFFPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYBYPASS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYHOLD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXDLYUPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXELECIDLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXHEADER_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXINHIBIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXMAINCURSOR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXMARGIN_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXOUTCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPCSRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPD_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPDELECIDLEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHALIGN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHALIGNEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHDLYPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHDLYRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHDLYTSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHINIT_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPHOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPIPPMEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPIPPMOVRDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPIPPMPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPIPPMSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPIPPMSTEPSIZE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPISOPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPMARESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPOLARITY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPOSTCURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPRBSFORCEERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPRBSSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXPRECURSOR_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXQPIBIASEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXQPISTRONGPDOWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXQPIWEAKPUP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXRATE_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXRATEMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSEQUENCE_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSTARTSEQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSWING_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYNCALLIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYNCIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYNCMODE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXSYSCLKSEL_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXUSERRDY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXUSRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_CHANNEL.addPort(TXUSRCLK2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initGTHE3_COMMON() {
        try {
            _GTHE3_COMMON = new EdifCell(library, "GTHE3_COMMON", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: GTHE3_COMMON");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: GTHE3_COMMON");
        }
        try {
            _GTHE3_COMMON.addPort(DRPDO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(PMARSVDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLDMONITOR_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLFBCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLLOCK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLOUTCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLOUTREFCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLREFCLKLOST_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(REFCLKOUTMONITOR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(BGBYPASSB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(BGMONITORENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(BGPDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(BGRCALOVRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(BGRCALOVRDENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPDI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(DRPWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTGREFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTNORTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTNORTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTSOUTHREFCLK0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(GTSOUTHREFCLK1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(PMARSVD_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLLOCKDETCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLLOCKEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLOUTRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLPD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLREFCLKSEL_port_name, 3,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLRESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLRSVD1_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(QPLLRSVD2_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _GTHE3_COMMON.addPort(RCALENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIBUFDS_GTE3() {
        try {
            _IBUFDS_GTE3 = new EdifCell(library, "IBUFDS_GTE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IBUFDS_GTE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IBUFDS_GTE3");
        }
        try {
            _IBUFDS_GTE3.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE3.addPort(ODIV2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE3.addPort(CEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE3.addPort(I_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IBUFDS_GTE3.addPort(IB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initICAPE3() {
        try {
            _ICAPE3 = new EdifCell(library, "ICAPE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ICAPE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ICAPE3");
        }
        try {
            _ICAPE3.addPort(O_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE3.addPort(CSIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE3.addPort(I_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ICAPE3.addPort(RDWRB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIDELAYE3() {
        try {
            _IDELAYE3 = new EdifCell(library, "IDELAYE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IDELAYE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IDELAYE3");
        }
        try {
            _IDELAYE3.addPort(CASC_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CNTVALUEOUT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CASC_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CASC_RETURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(CNTVALUEIN_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(DATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(IDATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(LOAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IDELAYE3.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initIN_FIFOE3() {
        try {
            _IN_FIFOE3 = new EdifCell(library, "IN_FIFOE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: IN_FIFOE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: IN_FIFOE3");
        }
        try {
            _IN_FIFOE3.addPort(EMPTY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(FULL_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q0_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q1_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q2_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q3_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q4_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(Q5_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D0_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D1_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D2_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D3_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D4_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(D5_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(RDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(RDENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(WRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _IN_FIFOE3.addPort(WRENABLE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initISERDESE3() {
        try {
            _ISERDESE3 = new EdifCell(library, "ISERDESE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ISERDESE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ISERDESE3");
        }
        try {
            _ISERDESE3.addPort(Q_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(CLK_B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(DDLY_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(OFB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ISERDESE3.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCME3_ADV() {
        try {
            _MMCME3_ADV = new EdifCell(library, "MMCME3_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCME3_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCME3_ADV");
        }
        try {
            _MMCME3_ADV.addPort(CDDCDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKFBSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKINSTOPPED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(PSDONE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CDDCREQ_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKIN2_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(CLKINSEL_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(PSCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(PSEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(PSINCDEC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMMCME3_BASE() {
        try {
            _MMCME3_BASE = new EdifCell(library, "MMCME3_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MMCME3_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MMCME3_BASE");
        }
        try {
            _MMCME3_BASE.addPort(CLKFBOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKFBOUTB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT2_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT2B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT3_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT3B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT4_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT5_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKOUT6_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKFBIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(CLKIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MMCME3_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initMUXF9() {
        try {
            _MUXF9 = new EdifCell(library, "MUXF9", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: MUXF9");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: MUXF9");
        }
        try {
            _MUXF9.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF9.addPort(I0_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF9.addPort(I1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _MUXF9.addPort(S_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initODELAYE3() {
        try {
            _ODELAYE3 = new EdifCell(library, "ODELAYE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: ODELAYE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: ODELAYE3");
        }
        try {
            _ODELAYE3.addPort(CASC_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CNTVALUEOUT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(DATAOUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CASC_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CASC_RETURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(CNTVALUEIN_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(LOAD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(ODATAIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _ODELAYE3.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initOSERDESE3() {
        try {
            _OSERDESE3 = new EdifCell(library, "OSERDESE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: OSERDESE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: OSERDESE3");
        }
        try {
            _OSERDESE3.addPort(OFB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE3.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE3.addPort(TQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE3.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE3.addPort(D_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _OSERDESE3.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM256X1D() {
        try {
            _RAM256X1D = new EdifCell(library, "RAM256X1D", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM256X1D");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM256X1D");
        }
        try {
            _RAM256X1D.addPort(DPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(SPO_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(A_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(DPRA_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM256X1D.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM32M16() {
        try {
            _RAM32M16 = new EdifCell(library, "RAM32M16", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM32M16");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM32M16");
        }
        try {
            _RAM32M16.addPort(DOA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOC_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOD_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOE_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOF_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOG_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DOH_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRA_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRB_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRC_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRD_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRE_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRF_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRG_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(ADDRH_port_name, 5,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIC_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DID_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIE_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIF_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIG_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(DIH_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM32M16.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM512X1S() {
        try {
            _RAM512X1S = new EdifCell(library, "RAM512X1S", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM512X1S");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM512X1S");
        }
        try {
            _RAM512X1S.addPort(O_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM512X1S.addPort(A_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM512X1S.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM512X1S.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM512X1S.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAM64M8() {
        try {
            _RAM64M8 = new EdifCell(library, "RAM64M8", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAM64M8");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAM64M8");
        }
        try {
            _RAM64M8.addPort(DOA_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOB_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOD_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOE_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOF_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOG_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DOH_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRA_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRB_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRC_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRD_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRE_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRF_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRG_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(ADDRH_port_name, 6,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DID_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIF_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(DIH_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(WCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAM64M8.addPort(WE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB18E2() {
        try {
            _RAMB18E2 = new EdifCell(library, "RAMB18E2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB18E2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB18E2");
        }
        try {
            _RAMB18E2.addPort(CASDOUTA_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDOUTB_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDOUTPA_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDOUTPB_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DOUTADOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DOUTBDOUT_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DOUTPADOUTP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DOUTPBDOUTP_port_name, 2,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ADDRARDADDR_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ADDRBWRADDR_port_name, 14,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ADDRENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ADDRENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDINA_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDINB_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDINPA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASDINPB_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASSELDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASSELDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASSELPIPEDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CASSELPIPEDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CLKARDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(CLKBWRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DINADIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DINBDIN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DINPADINP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(DINPBDINP_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ENARDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(ENBWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(REGCEAREGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(RSTRAMARSTRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(RSTRAMB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(RSTREGARSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(RSTREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(SLEEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(WEA_port_name, 2,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB18E2.addPort(WEBWE_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRAMB36E2() {
        try {
            _RAMB36E2 = new EdifCell(library, "RAMB36E2", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RAMB36E2");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RAMB36E2");
        }
        try {
            _RAMB36E2.addPort(CASDOUTA_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDOUTB_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDOUTPA_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDOUTPB_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DOUTADOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DOUTBDOUT_port_name, 32,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DOUTPADOUTP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DOUTPBDOUTP_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ECCPARITY_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(RDADDRECC_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(SBITERR_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ADDRARDADDR_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ADDRBWRADDR_port_name, 15,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ADDRENA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ADDRENB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDINA_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDINB_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDINPA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASDINPB_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASSELDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASSELDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASSELPIPEDA_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CASSELPIPEDB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CLKARDCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(CLKBWRCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DINADIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DINBDIN_port_name, 32,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DINPADINP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(DINPBDINP_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ENARDEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(ENBWREN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(INJECTDBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(INJECTSBITERR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(REGCEAREGCE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(REGCEB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(RSTRAMARSTRAM_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(RSTRAMB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(RSTREGARSTREG_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(RSTREGB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(SLEEP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(WEA_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RAMB36E2.addPort(WEBWE_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initRX_BITSLICE() {
        try {
            _RX_BITSLICE = new EdifCell(library, "RX_BITSLICE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: RX_BITSLICE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: RX_BITSLICE");
        }
        try {
            _RX_BITSLICE.addPort(CASC_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CLK_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CNTVALUEOUT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(Q_port_name, 8,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CASC_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CASC_RETURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CLK_C_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CLK_C_B_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(CNTVALUEIN_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(D_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(DATAIN1_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(NCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(PCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(REFCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(SET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _RX_BITSLICE.addPort(SR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSTARTUPE3() {
        try {
            _STARTUPE3 = new EdifCell(library, "STARTUPE3", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: STARTUPE3");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: STARTUPE3");
        }
        try {
            _STARTUPE3.addPort(CFGCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(CFGMCLK_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(DI_port_name, 4,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(PREQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(DO_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(DTS_port_name, 4,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(FCSBO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(FCSBTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(GSR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(GTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(KEYCLEARB_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(PACK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(USRCCLKO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(USRCCLKTS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(USRDONEO_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _STARTUPE3.addPort(USRDONETS_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initSYSMON_AMS() {
        try {
            _SYSMON_AMS = new EdifCell(library, "SYSMON_AMS", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: SYSMON_AMS");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: SYSMON_AMS");
        }
        try {
            _SYSMON_AMS.addPort(ALM_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(BUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(CHANNEL_port_name, 6,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(EOC_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(EOS_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(JTAGBUSY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(JTAGLOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(JTAGMODIFIED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(MUXADDR_port_name, 5,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(OT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(CONVST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(CONVSTCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DADDR_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(VAUXN_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(VAUXP_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(VN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _SYSMON_AMS.addPort(VP_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTXPLL_ADV() {
        try {
            _TXPLL_ADV = new EdifCell(library, "TXPLL_ADV", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TXPLL_ADV");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TXPLL_ADV");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUTXIPHY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DO_port_name, 16,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DRDY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(CLKOUTXIPHYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DADDR_port_name, 7,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DI_port_name, 16,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(DWE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_ADV.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTXPLL_BASE() {
        try {
            _TXPLL_BASE = new EdifCell(library, "TXPLL_BASE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TXPLL_BASE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TXPLL_BASE");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUT0_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUT0B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUT1_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUT1B_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUTXIPHY_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(LOCKED_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKIN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(CLKOUTXIPHYEN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(PWRDWN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TXPLL_BASE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

    private static void _initTX_BITSLICE() {
        try {
            _TX_BITSLICE = new EdifCell(library, "TX_BITSLICE", true);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate cell name: TX_BITSLICE");
        } catch(InvalidEdifNameException e1) {
            throw new EdifRuntimeException("Bad edif name: TX_BITSLICE");
        }
        try {
            _TX_BITSLICE.addPort(CASC_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CNTVALUEOUT_port_name, 9,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(OQ_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(T_OUT_port_name, 1,EdifPort.OUT);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CASC_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CASC_RETURN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CE_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(CNTVALUEIN_port_name, 9,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(D_port_name, 8,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(DDR_CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(DIV2_CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(DIV4_CLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(INC_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(LD_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(OCLK_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(OCLKDIV_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(RESET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(RST_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(SET_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(SR_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(T_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
        try {
            _TX_BITSLICE.addPort(TBYTE_IN_port_name, 1,EdifPort.IN);
        } catch(EdifNameConflictException e) {
            throw new EdifRuntimeException("Duplicate port name");
        }
    }

}
